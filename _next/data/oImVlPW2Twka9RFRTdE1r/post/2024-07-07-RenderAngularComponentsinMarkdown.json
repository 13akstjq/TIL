{"pageProps":{"post":{"title":"Markdown에서 Angular 컴포넌트 렌더링 하는 방법","description":"","date":"2024-07-07 12:58","slug":"2024-07-07-RenderAngularComponentsinMarkdown","content":"\n\n먼저, `markdown-render` 컴포넌트를 설정하여 .md 파일을 렌더링할 것입니다. 그리고 Angular 컴포넌트를 렌더링하는 방법을 살펴볼 것입니다.\n\n# Markdown 렌더러\n\n필요한 종속성을 설치하세요:\n\n```js\nnpm i highlight.js marked marked-highlight\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 단계 1: markdown-renderer/highlight-code-block.ts 파일 생성\n\n이 함수는 마크다운 파일에서 코드를 강조 표시하는 데 사용됩니다.\n\n```js\nimport highlightJs from 'highlight.js';\n\nexport function highlightCodeBlock(code: string, language: string | undefined) {\n  if (language) {\n    return highlightJs.highlight(code, {\n      language,\n    }).value;\n  }\n  return code;\n}\n```\n\n# 단계 2: markdown-renderer/transform-markdown.ts 파일 생성\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 기능은 Markdown을 HTML로 변환하는 데 사용될 것입니다.\n\n```js\nimport { marked } from 'marked';\nimport { markedHighlight } from 'marked-highlight';\nimport { highlightCodeBlock } from './highlight-code-block';\n\nmarked.use(markedHighlight({ highlight: highlightCodeBlock }));\nexport const markdownToHtml = (content: string) => {\n  return marked(content);\n};\n```\n\n# 단계 3: markdown-renderer/markdown.service.ts 만들기\n\n이 서비스는 구성 요소에서 .md 파일을 로컬 또는 외부 위치에서 읽어 HTML로 변환하는 데 사용될 것입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport { map } from 'rxjs';\nimport { markdownToHtml } from './transform-markdown';\n@Injectable({\n  providedIn: 'root',\n})\nexport class MarkdownService {\n  private httpClient = inject(HttpClient);\n  htmlContent(src: string) {\n    return this.httpClient.get(src, { responseType: 'text' }).pipe(\n      map((markdownContent) => {\n        return markdownToHtml(markdownContent);\n      })\n    );\n  }\n}\n```\n\n# 단계 4: markdown-renderer/markdown-renderer.ts 파일 생성하기\n\n마지막으로, 마크다운 파일을 렌더링하는 데 사용할 수 있는 컴포넌트를 만듭니다.\n\n```js\nimport { Component, ElementRef, effect, inject, input } from '@angular/core';\nimport { MarkdownService } from './markdown.service';\nimport { take } from 'rxjs';\nimport highlightJs from 'highlight.js';\n\n@Component({\n  selector: 'markdown-renderer',\n  template: '문서 로딩 중...',\n  standalone: true,\n})\nexport class MarkdownRendererComponent {\n  src = input.required<string>();\n  textContent = '';\n  private _elementRef = inject<ElementRef>(ElementRef);\n  private markdownService = inject(MarkdownService);\n  constructor() {\n    effect(() => {\n      const src = this.src();\n      this.setDataFromSrc(src);\n    });\n  }\n  setDataFromSrc(src: string) {\n    this.markdownService\n      .htmlContent(src)\n      .pipe(take(1))\n      .subscribe((htmlContent) => {\n        this.updateDocument(htmlContent as string);\n      });\n  }\n  updateDocument(rawHTML: string) {\n    this._elementRef.nativeElement.innerHTML = rawHTML;\n    this.textContent = this._elementRef.nativeElement.textContent;\n    highlightJs.highlightAll();\n  }\n}\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 단계 5: HTTP 제공\n\n```js\nbootstrapApplication(App, {\n  providers: [\n    provideHttpClient(withFetch())\n  ],\n});\n```\n\n# 단계 6: 사용법\n\n이제 어디에서든 markdown을 렌더링하고 싶을 때, 간단히 `markdown-renderer`를 사용하면 됩니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport { Component } from '@angular/core';\nimport { MarkdownRendererComponent } from './markdown-renderer/markdown-renderer';\n@Component({\n  selector: 'article',\n  standalone: true,\n  template: `<markdown-renderer src=\"/assets/article.md\"></markdown-renderer>`,\n  imports: [MarkdownRendererComponent],\n})\nexport class ArticleComponent {}\n```\n\n# 마크다운에 Angular 구성 요소 추가하기\n\n필요한 종속성 설치:\n\n```js\nnpm i @angular/elements\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 단계 1: custom-elements.service.ts 파일 만들기\n\n이 서비스는 Angular 구성 요소를 사용자 지정 요소로 변환하는 데 사용됩니다. 이렇게 하면 .md 파일에서 Angular 구성 요소를 쉽게 사용할 수 있습니다.\n\n```typescript\nimport { inject, Injectable, Injector } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\nimport { SubscribeComponent } from './components/subscribe';\nimport { CounterComponent } from './components/counter';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomElementsService {\n  private _injector = inject(Injector);\n\n  setupCustomElements() {\n    const subscribeElement = createCustomElement(SubscribeComponent, {\n      injector: this._injector,\n    });\n    customElements.define('subscribe-component', subscribeElement);\n    \n    const counterElement = createCustomElement(CounterComponent, {\n      injector: this._injector,\n    });\n    customElements.define('counter-component', counterElement);\n  }\n}\n```\n\n# 단계 2: APP_INITIALIZER를 통해 setupCustomElements 호출하기\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n커스텀 요소를 초기화 단계에서부터 사용하고 싶기 때문에 APP_INITIALIZER를 사용할 것입니다.\n\n```js\nbootstrapApplication(App, {\n  providers: [\n    provideHttpClient(withFetch()),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initializeCustomElements,\n      multi: true,\n      deps: [CustomElementsService],\n    },\n  ],\n});\n```\n\n# 단계 3: 사용 방법\n\n마지막으로 파일에서 커스텀 요소를 사용하면 Angular 컴포넌트가 렌더링됩니다. 아래와 같이 간단히 사용할 수 있습니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n<subscribe-component></subscribe-component>\n<counter-component></counter-component>\n```\n\n# 코드\n\n# 자유 콘텐츠 생성 지원\n\n코스와 기사는 무료로 제공되지만, 최고 수준의 교육 콘텐츠를 전달하는 제 야망을 지원해 주시면 감사히 받아들일 것입니다. 기여를 결정하는 것은 계속해서 코스를 개선하고 추가 자료를 작성하며 이러한 자료에 대한 접근성을 유지하는 데 도움이 됩니다. 기여하고 의미 있는 변화를 만들어주시는 것에 감사드립니다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Render Angular Components in Markdown](/assets/img/2024-07-07-RenderAngularComponentsinMarkdown_0.png)","ogImage":{"url":"/assets/img/2024-07-07-RenderAngularComponentsinMarkdown_0.png"},"coverImage":"/assets/img/2024-07-07-RenderAngularComponentsinMarkdown_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>먼저, <code>markdown-render</code> 컴포넌트를 설정하여 .md 파일을 렌더링할 것입니다. 그리고 Angular 컴포넌트를 렌더링하는 방법을 살펴볼 것입니다.</p>\n<h1>Markdown 렌더러</h1>\n<p>필요한 종속성을 설치하세요:</p>\n<pre><code class=\"hljs language-js\">npm i highlight.<span class=\"hljs-property\">js</span> marked marked-highlight\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>단계 1: markdown-renderer/highlight-code-block.ts 파일 생성</h1>\n<p>이 함수는 마크다운 파일에서 코드를 강조 표시하는 데 사용됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> highlightJs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'highlight.js'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">highlightCodeBlock</span>(<span class=\"hljs-params\">code: string, language: string | <span class=\"hljs-literal\">undefined</span></span>) {\n  <span class=\"hljs-keyword\">if</span> (language) {\n    <span class=\"hljs-keyword\">return</span> highlightJs.<span class=\"hljs-title function_\">highlight</span>(code, {\n      language,\n    }).<span class=\"hljs-property\">value</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> code;\n}\n</code></pre>\n<h1>단계 2: markdown-renderer/transform-markdown.ts 파일 생성</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 기능은 Markdown을 HTML로 변환하는 데 사용될 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { marked } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'marked'</span>;\n<span class=\"hljs-keyword\">import</span> { markedHighlight } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'marked-highlight'</span>;\n<span class=\"hljs-keyword\">import</span> { highlightCodeBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./highlight-code-block'</span>;\n\nmarked.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">markedHighlight</span>({ <span class=\"hljs-attr\">highlight</span>: highlightCodeBlock }));\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">markdownToHtml</span> = (<span class=\"hljs-params\">content: string</span>) => {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">marked</span>(content);\n};\n</code></pre>\n<h1>단계 3: markdown-renderer/markdown.service.ts 만들기</h1>\n<p>이 서비스는 구성 요소에서 .md 파일을 로컬 또는 외부 위치에서 읽어 HTML로 변환하는 데 사용될 것입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpClient</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span>, inject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { map } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> { markdownToHtml } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./transform-markdown'</span>;\n@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MarkdownService</span> {\n  private httpClient = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">HttpClient</span>);\n  <span class=\"hljs-title function_\">htmlContent</span>(<span class=\"hljs-params\">src: string</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">httpClient</span>.<span class=\"hljs-title function_\">get</span>(src, { <span class=\"hljs-attr\">responseType</span>: <span class=\"hljs-string\">'text'</span> }).<span class=\"hljs-title function_\">pipe</span>(\n      <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">markdownContent</span>) =></span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">markdownToHtml</span>(markdownContent);\n      })\n    );\n  }\n}\n</code></pre>\n<h1>단계 4: markdown-renderer/markdown-renderer.ts 파일 생성하기</h1>\n<p>마지막으로, 마크다운 파일을 렌더링하는 데 사용할 수 있는 컴포넌트를 만듭니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">ElementRef</span>, effect, inject, input } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MarkdownService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./markdown.service'</span>;\n<span class=\"hljs-keyword\">import</span> { take } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> highlightJs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'highlight.js'</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'markdown-renderer'</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'문서 로딩 중...'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MarkdownRendererComponent</span> {\n  src = input.<span class=\"hljs-property\">required</span>&#x3C;string>();\n  textContent = <span class=\"hljs-string\">''</span>;\n  private _elementRef = inject&#x3C;<span class=\"hljs-title class_\">ElementRef</span>>(<span class=\"hljs-title class_\">ElementRef</span>);\n  private markdownService = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">MarkdownService</span>);\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">effect</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-keyword\">const</span> src = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">src</span>();\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setDataFromSrc</span>(src);\n    });\n  }\n  <span class=\"hljs-title function_\">setDataFromSrc</span>(<span class=\"hljs-params\">src: string</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">markdownService</span>\n      .<span class=\"hljs-title function_\">htmlContent</span>(src)\n      .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">take</span>(<span class=\"hljs-number\">1</span>))\n      .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">htmlContent</span>) =></span> {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">updateDocument</span>(htmlContent <span class=\"hljs-keyword\">as</span> string);\n      });\n  }\n  <span class=\"hljs-title function_\">updateDocument</span>(<span class=\"hljs-params\">rawHTML: string</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_elementRef</span>.<span class=\"hljs-property\">nativeElement</span>.<span class=\"hljs-property\">innerHTML</span> = rawHTML;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_elementRef</span>.<span class=\"hljs-property\">nativeElement</span>.<span class=\"hljs-property\">textContent</span>;\n    highlightJs.<span class=\"hljs-title function_\">highlightAll</span>();\n  }\n}\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>단계 5: HTTP 제공</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">bootstrapApplication</span>(<span class=\"hljs-title class_\">App</span>, {\n  <span class=\"hljs-attr\">providers</span>: [\n    <span class=\"hljs-title function_\">provideHttpClient</span>(<span class=\"hljs-title function_\">withFetch</span>())\n  ],\n});\n</code></pre>\n<h1>단계 6: 사용법</h1>\n<p>이제 어디에서든 markdown을 렌더링하고 싶을 때, 간단히 <code>markdown-renderer</code>를 사용하면 됩니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MarkdownRendererComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./markdown-renderer/markdown-renderer'</span>;\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'article'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&#x3C;markdown-renderer src=\"/assets/article.md\">&#x3C;/markdown-renderer>`</span>,\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">MarkdownRendererComponent</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArticleComponent</span> {}\n</code></pre>\n<h1>마크다운에 Angular 구성 요소 추가하기</h1>\n<p>필요한 종속성 설치:</p>\n<pre><code class=\"hljs language-js\">npm i @angular/elements\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>단계 1: custom-elements.service.ts 파일 만들기</h1>\n<p>이 서비스는 Angular 구성 요소를 사용자 지정 요소로 변환하는 데 사용됩니다. 이렇게 하면 .md 파일에서 Angular 구성 요소를 쉽게 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { inject, <span class=\"hljs-title class_\">Injectable</span>, <span class=\"hljs-title class_\">Injector</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { createCustomElement } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/elements'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SubscribeComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/subscribe'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CounterComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/counter'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>({ <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span> })\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomElementsService</span> {\n  <span class=\"hljs-keyword\">private</span> _injector = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">Injector</span>);\n\n  <span class=\"hljs-title function_\">setupCustomElements</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> subscribeElement = <span class=\"hljs-title function_\">createCustomElement</span>(<span class=\"hljs-title class_\">SubscribeComponent</span>, {\n      <span class=\"hljs-attr\">injector</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_injector</span>,\n    });\n    customElements.<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-string\">'subscribe-component'</span>, subscribeElement);\n    \n    <span class=\"hljs-keyword\">const</span> counterElement = <span class=\"hljs-title function_\">createCustomElement</span>(<span class=\"hljs-title class_\">CounterComponent</span>, {\n      <span class=\"hljs-attr\">injector</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_injector</span>,\n    });\n    customElements.<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-string\">'counter-component'</span>, counterElement);\n  }\n}\n</code></pre>\n<h1>단계 2: APP_INITIALIZER를 통해 setupCustomElements 호출하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>커스텀 요소를 초기화 단계에서부터 사용하고 싶기 때문에 APP_INITIALIZER를 사용할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">bootstrapApplication</span>(<span class=\"hljs-title class_\">App</span>, {\n  <span class=\"hljs-attr\">providers</span>: [\n    <span class=\"hljs-title function_\">provideHttpClient</span>(<span class=\"hljs-title function_\">withFetch</span>()),\n    {\n      <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">APP_INITIALIZER</span>,\n      <span class=\"hljs-attr\">useFactory</span>: initializeCustomElements,\n      <span class=\"hljs-attr\">multi</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">deps</span>: [<span class=\"hljs-title class_\">CustomElementsService</span>],\n    },\n  ],\n});\n</code></pre>\n<h1>단계 3: 사용 방법</h1>\n<p>마지막으로 파일에서 커스텀 요소를 사용하면 Angular 컴포넌트가 렌더링됩니다. 아래와 같이 간단히 사용할 수 있습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">&#x3C;subscribe-component>&#x3C;/subscribe-component>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">counter-component</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">counter-component</span>></span></span>\n</code></pre>\n<h1>코드</h1>\n<h1>자유 콘텐츠 생성 지원</h1>\n<p>코스와 기사는 무료로 제공되지만, 최고 수준의 교육 콘텐츠를 전달하는 제 야망을 지원해 주시면 감사히 받아들일 것입니다. 기여를 결정하는 것은 계속해서 코스를 개선하고 추가 자료를 작성하며 이러한 자료에 대한 접근성을 유지하는 데 도움이 됩니다. 기여하고 의미 있는 변화를 만들어주시는 것에 감사드립니다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-07-RenderAngularComponentsinMarkdown_0.png\" alt=\"Render Angular Components in Markdown\"></p>\n</body>\n</html>\n"},"__N_SSG":true}