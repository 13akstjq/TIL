{"pageProps":{"post":{"title":"아직 잘 알려지지 않은 5가지 파이썬 데이터 시각화 기법","description":"","date":"2024-07-12 20:09","slug":"2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing","content":"\n\n\n![이미지](/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_0.png)\n\n## 이 5가지 고급 시각화 차트를 마스터하세요\n\n이 다섯 가지 고급 시각화 차트를 마스터하면 데이터 시각화가 쉬워집니다. 이 라이브러리들은 서로 보완하여 데이터 표현을 극대화합니다.\n\n# 1. 화음도표\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nChord Diagram(코드 다이어그램)은 데이터 포인트 간의 복잡한 관계를 창조적으로 보여줍니다. 노드들이 원 주위에 배열되어 아크로 연결됩니다. 아크의 길이는 연결 값을 반영하며 두께는 관계의 중요도를 나타냅니다. 색상은 데이터를 분류하여 비교를 쉽게 만듭니다. 유전자 데이터 시각화를 위해 특히 다양한 분야에서 널리 사용됩니다.\n\n![Chord Diagram example](/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_1.png)\n\n![Chord Diagram example 2](/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_2.png)\n\n다음은 Holoviews 및 Bokeh를 사용하여 다섯 개국 간의 무역 관계를 보여주는 코드 다이어그램 예시입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport holoviews as hv\nfrom holoviews import opts\nimport pandas as pd\nimport numpy as np\nhv.extension('bokeh')\n\n# 5개 국가 간의 수출량을 나타내는 표본 행렬\nexport_data = np.array([[0, 50, 30, 20, 10],   \n                        [10, 0, 40, 30, 20],   \n                        [20, 10, 0, 35, 25],   \n                        [30, 20, 10, 0, 40],   \n                        [25, 15, 30, 20, 0]]) \n\nlabels = ['USA', 'China', 'Germany', 'Japan', 'India']\n\n# 판다스 데이터프레임 생성\ndf = pd.DataFrame(export_data, index=labels, columns=labels)\ndf = df.stack().reset_index()\n\ndf.columns = ['source', 'target', 'value']\n\n# Chord 객체 생성\nchord = hv.Chord(df)\n\n# Chord 다이어그램 스타일링\nchord.opts(\n    opts.Chord(\n        cmap='Category20', edge_cmap='Category20', \n        labels='source', label_text_font_size='10pt',  \n        edge_color='source', node_color='index', \n        width=700, height=700 \n    )\n).select(value=(5, None)) \n\n# 플롯 출력\nchord\n```\n\n![Chord Diagram](/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_3.png)\n\n- [Chord 호환성](https://holoviews.org/reference/elements/matplotlib/Chord.html)\n- [pyCirclize GitHub](https://github.com/moshi4/pyCirclize)\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 썬버스트 차트\n\n썬버스트 차트는 계층적 데이터를 명확하게 표시하여 전통적인 원형 및 링 차트를 능가합니다. 각각 계층을 나타내는 동심원을 사용합니다. 중심은 루트이며 세그먼트는 노드를 나타냅니다. 각 세그먼트의 크기는 해당 값을 반영하여 데이터의 중요성을 직관적으로 이해하게 합니다. 파일 시스템 계층 구조, 사용자 탐색 경로, 시장 세분화 및 유전 데이터의 시각화에 유용합니다.\n\n다음은 Plotly 라이브러리를 사용하여 썬버스트 차트를 만드는 예시입니다.\n\n```js\nimport plotly.express as px\nimport numpy as np\n\ndf = px.data.gapminder().query(\"year == 2007\")\n\nfig = px.sunburst(df, path=['continent', 'country'], \n                  values='pop',\n                  color='lifeExp', \n                  hover_data=['iso_alpha'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop']))\nfig.show()\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n[그림](https://plotly.com/python/sunburst-charts/)\n\n# 3. Hexbin Plot\n\n[그림](/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_5.png)\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n헥스빈 플롯 또는 육각형 바이닝은 데이터 점이 밀집되어 있을 때 특히 2D 데이터 분포를 시각화하는 데 효과적입니다. 데이터 공간을 육각형 바인으로 분할하며 색상은 각 바인 내의 점 수를 나타내어 데이터 분포를 명확하게 표현합니다.\n\nPython과 Matplotlib을 사용하여 공기 품질 지수(AQI)와 병원 방문 간의 상관 관계를 시연한 헥스빈 플롯을 만드는 예제를 보여드릴게요.\n\n```js\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mplhexbin import HexBin\n\n# 시뮬레이션 데이터\nnp.random.seed(0)  # 재현성 확보\nn_points = 10000\nx = np.random.rand(n_points) * 100  # 공기 품질 지수(AQI) 범위: 0에서 100\ny = 5 * np.sin(x * np.pi / 50) + np.random.randn(n_points) * 15  # 시뮬레이션된 병원 방문, AQI와 관련 있지만 잡음이 있음\n\n# 새로운 그림 생성\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# HexBin을 사용하여 육각형 바인 플롯 생성\nhb = HexBin(ax, gridsize=20, cmap='viridis', extent=[0, 100, -30, 50])  # 그리드 크기, 색상 지도 및 범위 설정\nhb.hexbin(x, y, mincnt=1)  # 육각형 바인 플롯 그리기, mincnt는 최소 카운트 임계값을 설정합니다\n\n# 제목 및 축 레이블 추가\nax.set_title('공기 품질 지수(AQI)와 병원 방문 간의 관계')\nax.set_xlabel('공기 품질 지수(AQI)')\nax.set_ylabel('병원 방문')\n\n# 그림 표시\nplt.colorbar(hb.cmap, ax=ax, label='데이터 포인트 수')  # 컬러바 추가 및 레이블 설정\nplt.show()\n```\n\n<img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_6.png\" />\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nhttps://matplotlib.org/stable/gallery/statistics/hexbin_demo.html\n\n# 4. 샌키 다이어그램\n\n샌키 다이어그램은 엔터프라이즈 시스템과 시계열 데이터의 흐름을 시각적으로 보여주는 차트입니다. 데이터의 유입과 유출을 보여주며 주로 에너지, 재료, 금융 데이터에 사용됩니다. 매튜 헨리 핀리어스 릴 샌키(Mattew Henry Phineas Riall Sankey)의 이름을 따와 만들어졌습니다. 다이어그램은 시스템의 단계들 간의 데이터 양을 바로 알 수 있게 해줍니다. 노드의 너비는 흐름의 양과 비례하기 때문에 데이터의 규모와 방향을 이해하기 쉽습니다.\n\n<img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_7.png\" />\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 파이썬을 사용하여 생산원에서 작은 도시 소비자에게 에너지 흐름을 보여주는 샌키 다이어그램을 생성하는 예제입니다.\n\n```python\nimport plotly.graph_objects as go\n\nlabels = [\"Coal\", \"Solar\", \"Wind\", \"Nuclear\", \"Residential\", \"Industrial\", \"Commercial\"]\n\nsource = [0, 1, 2, 3, 0, 1, 2, 3] \ntarget = [4, 4, 4, 4, 5, 5, 5, 5] \nvalue = [25, 10, 40, 20, 30, 15, 25, 35] \n\n# 샌키 다이어그램 객체 생성\nfig = go.Figure(data=[go.Sankey(\n    node=dict(\n        pad=15,  \n        thickness=20, \n        line=dict(color=\"black\", width=0.5),\n        label=labels \n    ),\n    link=dict(\n        source=source,  \n        target=target, \n        value=value  \n    ))])\n\nfig.update_layout(title_text=\"모델 도시의 에너지 흐름\", font_size=12)\nfig.show()\n```\n\n[이미지 바로가기](/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_8.png)\n\n[Plotly 샌키 다이어그램 자세히 보기](https://plotly.com/python/sankey-diagram/)\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 스트림 그래프 (테마 리버)\n\n스트림 그래프는 변화를 나타내는 강을 닮았습니다. 색상이 카테고리를 구분하며, \"강\"의 너비는 각 카테고리의 값으로 나타냅니다. 데이터 동태를 이해하기 쉽게 보여주며, 추세와 관계를 시각적으로 표현합니다.\n\n![Stream Graph](/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_9.png)\n\n여기에는 Altair 라이브러리를 사용하여 스트림 그래프를 만드는 예시가 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.unemployment_across_industries.url\n\nalt.Chart(source).mark_area().encode(\n    alt.X('yearmonth(date):T',\n        axis=alt.Axis(format='%Y', domain=False, tickSize=0)\n    ),\n    alt.Y('sum(count):Q', stack='center', axis=None),\n    alt.Color('series:N',\n        scale=alt.Scale(scheme='category20b')\n    )\n).interactive()\n```\n\n<img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_10.png\" />\n\nhttps://altair-viz.github.io/gallery/streamgraph.html\n\n최신 AI 이야기를 계속 읽으려면 Substack에서 저희와 함께하세요. 우리 함께 AI의 미래를 모습을 만들어 봅시다!\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파이썬 이야기를 업데이트 받으려면 Substack에서 저희와 함께 연락하십시오. 함께 파이썬을 배워봐요!","ogImage":{"url":"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_0.png"},"coverImage":"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_0.png\" alt=\"이미지\"></p>\n<h2>이 5가지 고급 시각화 차트를 마스터하세요</h2>\n<p>이 다섯 가지 고급 시각화 차트를 마스터하면 데이터 시각화가 쉬워집니다. 이 라이브러리들은 서로 보완하여 데이터 표현을 극대화합니다.</p>\n<h1>1. 화음도표</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Chord Diagram(코드 다이어그램)은 데이터 포인트 간의 복잡한 관계를 창조적으로 보여줍니다. 노드들이 원 주위에 배열되어 아크로 연결됩니다. 아크의 길이는 연결 값을 반영하며 두께는 관계의 중요도를 나타냅니다. 색상은 데이터를 분류하여 비교를 쉽게 만듭니다. 유전자 데이터 시각화를 위해 특히 다양한 분야에서 널리 사용됩니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_1.png\" alt=\"Chord Diagram example\"></p>\n<p><img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_2.png\" alt=\"Chord Diagram example 2\"></p>\n<p>다음은 Holoviews 및 Bokeh를 사용하여 다섯 개국 간의 무역 관계를 보여주는 코드 다이어그램 예시입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> holoviews <span class=\"hljs-keyword\">as</span> hv\n<span class=\"hljs-keyword\">from</span> holoviews <span class=\"hljs-keyword\">import</span> opts\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\nhv.extension(<span class=\"hljs-string\">'bokeh'</span>)\n\n<span class=\"hljs-comment\"># 5개 국가 간의 수출량을 나타내는 표본 행렬</span>\nexport_data = np.array([[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">10</span>],   \n                        [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">20</span>],   \n                        [<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">25</span>],   \n                        [<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">40</span>],   \n                        [<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">0</span>]]) \n\nlabels = [<span class=\"hljs-string\">'USA'</span>, <span class=\"hljs-string\">'China'</span>, <span class=\"hljs-string\">'Germany'</span>, <span class=\"hljs-string\">'Japan'</span>, <span class=\"hljs-string\">'India'</span>]\n\n<span class=\"hljs-comment\"># 판다스 데이터프레임 생성</span>\ndf = pd.DataFrame(export_data, index=labels, columns=labels)\ndf = df.stack().reset_index()\n\ndf.columns = [<span class=\"hljs-string\">'source'</span>, <span class=\"hljs-string\">'target'</span>, <span class=\"hljs-string\">'value'</span>]\n\n<span class=\"hljs-comment\"># Chord 객체 생성</span>\nchord = hv.Chord(df)\n\n<span class=\"hljs-comment\"># Chord 다이어그램 스타일링</span>\nchord.opts(\n    opts.Chord(\n        cmap=<span class=\"hljs-string\">'Category20'</span>, edge_cmap=<span class=\"hljs-string\">'Category20'</span>, \n        labels=<span class=\"hljs-string\">'source'</span>, label_text_font_size=<span class=\"hljs-string\">'10pt'</span>,  \n        edge_color=<span class=\"hljs-string\">'source'</span>, node_color=<span class=\"hljs-string\">'index'</span>, \n        width=<span class=\"hljs-number\">700</span>, height=<span class=\"hljs-number\">700</span> \n    )\n).select(value=(<span class=\"hljs-number\">5</span>, <span class=\"hljs-literal\">None</span>)) \n\n<span class=\"hljs-comment\"># 플롯 출력</span>\nchord\n</code></pre>\n<p><img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_3.png\" alt=\"Chord Diagram\"></p>\n<ul>\n<li><a href=\"https://holoviews.org/reference/elements/matplotlib/Chord.html\" rel=\"nofollow\" target=\"_blank\">Chord 호환성</a></li>\n<li><a href=\"https://github.com/moshi4/pyCirclize\" rel=\"nofollow\" target=\"_blank\">pyCirclize GitHub</a></li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>2. 썬버스트 차트</h1>\n<p>썬버스트 차트는 계층적 데이터를 명확하게 표시하여 전통적인 원형 및 링 차트를 능가합니다. 각각 계층을 나타내는 동심원을 사용합니다. 중심은 루트이며 세그먼트는 노드를 나타냅니다. 각 세그먼트의 크기는 해당 값을 반영하여 데이터의 중요성을 직관적으로 이해하게 합니다. 파일 시스템 계층 구조, 사용자 탐색 경로, 시장 세분화 및 유전 데이터의 시각화에 유용합니다.</p>\n<p>다음은 Plotly 라이브러리를 사용하여 썬버스트 차트를 만드는 예시입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> plotly.<span class=\"hljs-property\">express</span> <span class=\"hljs-keyword\">as</span> px\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\ndf = px.<span class=\"hljs-property\">data</span>.<span class=\"hljs-title function_\">gapminder</span>().<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">\"year == 2007\"</span>)\n\nfig = px.<span class=\"hljs-title function_\">sunburst</span>(df, path=[<span class=\"hljs-string\">'continent'</span>, <span class=\"hljs-string\">'country'</span>], \n                  values=<span class=\"hljs-string\">'pop'</span>,\n                  color=<span class=\"hljs-string\">'lifeExp'</span>, \n                  hover_data=[<span class=\"hljs-string\">'iso_alpha'</span>],\n                  color_continuous_scale=<span class=\"hljs-string\">'RdBu'</span>,\n                  color_continuous_midpoint=np.<span class=\"hljs-title function_\">average</span>(df[<span class=\"hljs-string\">'lifeExp'</span>], weights=df[<span class=\"hljs-string\">'pop'</span>]))\nfig.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><a href=\"https://plotly.com/python/sunburst-charts/\" rel=\"nofollow\" target=\"_blank\">그림</a></p>\n<h1>3. Hexbin Plot</h1>\n<p><a href=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_5.png\">그림</a></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>헥스빈 플롯 또는 육각형 바이닝은 데이터 점이 밀집되어 있을 때 특히 2D 데이터 분포를 시각화하는 데 효과적입니다. 데이터 공간을 육각형 바인으로 분할하며 색상은 각 바인 내의 점 수를 나타내어 데이터 분포를 명확하게 표현합니다.</p>\n<p>Python과 Matplotlib을 사용하여 공기 품질 지수(AQI)와 병원 방문 간의 상관 관계를 시연한 헥스빈 플롯을 만드는 예제를 보여드릴게요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\n<span class=\"hljs-keyword\">from</span> mplhexbin <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">HexBin</span>\n\n# 시뮬레이션 데이터\nnp.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">0</span>)  # 재현성 확보\nn_points = <span class=\"hljs-number\">10000</span>\nx = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(n_points) * <span class=\"hljs-number\">100</span>  # 공기 품질 지수(<span class=\"hljs-variable constant_\">AQI</span>) 범위: <span class=\"hljs-number\">0</span>에서 <span class=\"hljs-number\">100</span>\ny = <span class=\"hljs-number\">5</span> * np.<span class=\"hljs-title function_\">sin</span>(x * np.<span class=\"hljs-property\">pi</span> / <span class=\"hljs-number\">50</span>) + np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">randn</span>(n_points) * <span class=\"hljs-number\">15</span>  # 시뮬레이션된 병원 방문, <span class=\"hljs-variable constant_\">AQI</span>와 관련 있지만 잡음이 있음\n\n# 새로운 그림 생성\nfig, ax = plt.<span class=\"hljs-title function_\">subplots</span>(figsize=(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>))\n\n# <span class=\"hljs-title class_\">HexBin</span>을 사용하여 육각형 바인 플롯 생성\nhb = <span class=\"hljs-title class_\">HexBin</span>(ax, gridsize=<span class=\"hljs-number\">20</span>, cmap=<span class=\"hljs-string\">'viridis'</span>, extent=[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>, -<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">50</span>])  # 그리드 크기, 색상 지도 및 범위 설정\nhb.<span class=\"hljs-title function_\">hexbin</span>(x, y, mincnt=<span class=\"hljs-number\">1</span>)  # 육각형 바인 플롯 그리기, mincnt는 최소 카운트 임계값을 설정합니다\n\n# 제목 및 축 레이블 추가\nax.<span class=\"hljs-title function_\">set_title</span>(<span class=\"hljs-string\">'공기 품질 지수(AQI)와 병원 방문 간의 관계'</span>)\nax.<span class=\"hljs-title function_\">set_xlabel</span>(<span class=\"hljs-string\">'공기 품질 지수(AQI)'</span>)\nax.<span class=\"hljs-title function_\">set_ylabel</span>(<span class=\"hljs-string\">'병원 방문'</span>)\n\n# 그림 표시\nplt.<span class=\"hljs-title function_\">colorbar</span>(hb.<span class=\"hljs-property\">cmap</span>, ax=ax, label=<span class=\"hljs-string\">'데이터 포인트 수'</span>)  # 컬러바 추가 및 레이블 설정\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_6.png\">\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><a href=\"https://matplotlib.org/stable/gallery/statistics/hexbin_demo.html\" rel=\"nofollow\" target=\"_blank\">https://matplotlib.org/stable/gallery/statistics/hexbin_demo.html</a></p>\n<h1>4. 샌키 다이어그램</h1>\n<p>샌키 다이어그램은 엔터프라이즈 시스템과 시계열 데이터의 흐름을 시각적으로 보여주는 차트입니다. 데이터의 유입과 유출을 보여주며 주로 에너지, 재료, 금융 데이터에 사용됩니다. 매튜 헨리 핀리어스 릴 샌키(Mattew Henry Phineas Riall Sankey)의 이름을 따와 만들어졌습니다. 다이어그램은 시스템의 단계들 간의 데이터 양을 바로 알 수 있게 해줍니다. 노드의 너비는 흐름의 양과 비례하기 때문에 데이터의 규모와 방향을 이해하기 쉽습니다.</p>\n<img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_7.png\">\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래는 파이썬을 사용하여 생산원에서 작은 도시 소비자에게 에너지 흐름을 보여주는 샌키 다이어그램을 생성하는 예제입니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> plotly.graph_objects <span class=\"hljs-keyword\">as</span> go\n\nlabels = [<span class=\"hljs-string\">\"Coal\"</span>, <span class=\"hljs-string\">\"Solar\"</span>, <span class=\"hljs-string\">\"Wind\"</span>, <span class=\"hljs-string\">\"Nuclear\"</span>, <span class=\"hljs-string\">\"Residential\"</span>, <span class=\"hljs-string\">\"Industrial\"</span>, <span class=\"hljs-string\">\"Commercial\"</span>]\n\nsource = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>] \ntarget = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>] \nvalue = [<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">35</span>] \n\n<span class=\"hljs-comment\"># 샌키 다이어그램 객체 생성</span>\nfig = go.Figure(data=[go.Sankey(\n    node=<span class=\"hljs-built_in\">dict</span>(\n        pad=<span class=\"hljs-number\">15</span>,  \n        thickness=<span class=\"hljs-number\">20</span>, \n        line=<span class=\"hljs-built_in\">dict</span>(color=<span class=\"hljs-string\">\"black\"</span>, width=<span class=\"hljs-number\">0.5</span>),\n        label=labels \n    ),\n    link=<span class=\"hljs-built_in\">dict</span>(\n        source=source,  \n        target=target, \n        value=value  \n    ))])\n\nfig.update_layout(title_text=<span class=\"hljs-string\">\"모델 도시의 에너지 흐름\"</span>, font_size=<span class=\"hljs-number\">12</span>)\nfig.show()\n</code></pre>\n<p><a href=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_8.png\">이미지 바로가기</a></p>\n<p><a href=\"https://plotly.com/python/sankey-diagram/\" rel=\"nofollow\" target=\"_blank\">Plotly 샌키 다이어그램 자세히 보기</a></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>5. 스트림 그래프 (테마 리버)</h1>\n<p>스트림 그래프는 변화를 나타내는 강을 닮았습니다. 색상이 카테고리를 구분하며, \"강\"의 너비는 각 카테고리의 값으로 나타냅니다. 데이터 동태를 이해하기 쉽게 보여주며, 추세와 관계를 시각적으로 표현합니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_9.png\" alt=\"Stream Graph\"></p>\n<p>여기에는 Altair 라이브러리를 사용하여 스트림 그래프를 만드는 예시가 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> altair <span class=\"hljs-keyword\">as</span> alt\n<span class=\"hljs-keyword\">from</span> vega_datasets <span class=\"hljs-keyword\">import</span> data\n\nsource = data.<span class=\"hljs-property\">unemployment_across_industries</span>.<span class=\"hljs-property\">url</span>\n\nalt.<span class=\"hljs-title class_\">Chart</span>(source).<span class=\"hljs-title function_\">mark_area</span>().<span class=\"hljs-title function_\">encode</span>(\n    alt.<span class=\"hljs-title function_\">X</span>(<span class=\"hljs-string\">'yearmonth(date):T'</span>,\n        axis=alt.<span class=\"hljs-title class_\">Axis</span>(format=<span class=\"hljs-string\">'%Y'</span>, domain=<span class=\"hljs-title class_\">False</span>, tickSize=<span class=\"hljs-number\">0</span>)\n    ),\n    alt.<span class=\"hljs-title function_\">Y</span>(<span class=\"hljs-string\">'sum(count):Q'</span>, stack=<span class=\"hljs-string\">'center'</span>, axis=<span class=\"hljs-title class_\">None</span>),\n    alt.<span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-string\">'series:N'</span>,\n        scale=alt.<span class=\"hljs-title class_\">Scale</span>(scheme=<span class=\"hljs-string\">'category20b'</span>)\n    )\n).<span class=\"hljs-title function_\">interactive</span>()\n</code></pre>\n<img src=\"/TIL/assets/img/2024-07-12-Top5PythonDataVisualizationTechniquesYouProbablyArentUsing_10.png\">\n<p><a href=\"https://altair-viz.github.io/gallery/streamgraph.html\" rel=\"nofollow\" target=\"_blank\">https://altair-viz.github.io/gallery/streamgraph.html</a></p>\n<p>최신 AI 이야기를 계속 읽으려면 Substack에서 저희와 함께하세요. 우리 함께 AI의 미래를 모습을 만들어 봅시다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파이썬 이야기를 업데이트 받으려면 Substack에서 저희와 함께 연락하십시오. 함께 파이썬을 배워봐요!</p>\n</body>\n</html>\n"},"__N_SSG":true}