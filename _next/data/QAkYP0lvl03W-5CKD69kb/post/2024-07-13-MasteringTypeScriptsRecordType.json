{"pageProps":{"post":{"title":"TypeScript의 Record 타입 완벽 마스터하기","description":"","date":"2024-07-13 20:36","slug":"2024-07-13-MasteringTypeScriptsRecordType","content":"\n\n\n![Record Type](/TIL/assets/img/2024-07-13-MasteringTypeScriptsRecordType_0.png)\n\nTypeScript의 Record 타입은 우리가 key-value 쌍 타입을 정의하는 데 도움이 되는 매우 유용한 도구입니다. 이 기사에서는 Record 타입의 다양한 응용 시나리오를 탐구하고, 코드 품질과 유지 관리성을 향상시킬 수 있는 방법에 대해 알아보겠습니다.\n\n# 1. Record Type이란 무엇인가요?\n\nRecord 타입은 TypeScript에서 내장된 일반적인 제네릭 타입으로, 키와 값이 지정된 타입인 객체 타입을 구성하는 데 사용됩니다. 다음과 같이 정의됩니다:\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n유형 레코드`K, T`는 그 키가 유형 K이고 값이 유형 T인 개체를 나타냅니다. 간단한 예제를 살펴봅시다:\n\n유형 사용자 = {\n  이름: 문자열;\n  나이: 숫자;\n};\n\n유형 사용자레코드 = 레코드 <문자열, 사용자>;\n\n상수 사용자: 사용자레코드 = {\n  사용자1 : { 이름: \"앨리스\", 나이: 25 },\n  사용자2 : { 이름: \"밥\", 나이: 30 },\n};\n\n이 예제에서 UserRecord는 키가 문자열 형식이고 값이 사용자 형식인 개체를 나타냅니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 레코드와 튜플의 차이\n\n레코드와 튜플은 TypeScript에서 객체 구조를 정의하는 데 사용되는 도구입니다. 그러나 사용 용도와 특성이 다릅니다.\n\n- 레코드: 키-값 쌍을 정의하는 데 사용되며, 키와 값의 타입이 임의적일 수 있습니다.\n- 튜플: 고정된 길이와 타입의 배열을 정의하는 데 사용됩니다.\n\n## 코드 예제:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ntype UserTuple = [string, number]; // 튜플 타입\n\nconst userTuple: UserTuple = [\"Alice\", 25]; // 유효함\n// const invalidUserTuple: UserTuple = [25, \"Alice\"]; // 오류: 타입 불일치\n\ntype UserRecord = Record<string, number>;\n\nconst userRecord: UserRecord = {\n  Alice: 25,\n  Bob: 30,\n};\n\n# 3. Record과 Map의 차이점\n\nRecord와 Map은 모두 키-값 쌍을 저장하는 데 사용될 수 있지만, 중요한 차이점이 있습니다:\n\n- Record: 컴파일 시간에 타입 체크를 위해 사용되는 타입 정의 도구.\n- Map: ES6에서 소개된 데이터 구조로, 런타임에서 키-값 쌍을 저장하는 데 사용됨.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 코드 예시:\n\n// Record를 사용\ntype UserAges = Record<string, number>;\n\nconst userAges: UserAges = {\n  Alice: 25,\n  Bob: 30,\n};\n\n// Map 사용\nconst userAgeMap = new Map<string, number>();\nuserAgeMap.set(\"Alice\", 25);\nuserAgeMap.set(\"Bob\", 30);\n\nconsole.log(userAgeMap.get(\"Alice\")); // 결과: 25\n\n# 4. 모든 경우 다루기\n\nRecord 타입을 사용할 때, 모든 가능한 경우를 다루도록 하여 모든 경우에 대해 처리하도록 할 수 있습니다. 특히 유니언 타입을 다룰 때 유용합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 코드 예시:\n\ntype Status = \"success\" | \"error\" | \"loading\";\n\nconst statusMessages: Record<Status, string> = {\n  success: \"작업이 성공적으로 완료되었습니다\",\n  error: \"오류가 발생했습니다\",\n  loading: \"로딩 중...\",\n};\n\n// getStatusMessage 함수를 사용할 때 모든 경우의 수를 처리하도록 보장\nfunction getStatusMessage(status: Status): string {\n  return statusMessages[status];\n}\n\n이 예제에서 Record`Status, string`은 statusMessages 객체에서 모든 가능한 Status 값이 처리되도록 보장하며, getStatusMessage 함수에서 각 상태 메시지에 안전하게 접근할 수 있게 합니다.\n\n# 5. 제네릭 애플리케이션에서 타입 체킹 강제화\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRecord 유형은 일반 프로그래밍에서 매우 유용하며 키와 값 사이의 일관성을 보장하고 유형 검사를 강제할 수 있게 해줍니다.\n\n## 코드 예시:\n\nfunction createRecord<K extends string, T>(keys: K[], value: T): Record<K, T> {\n  const record: Partial<Record<K, T>> = {};\n  keys.forEach(key => {\n    record[key] = value;\n  });\n  return record as Record<K, T>;\n}\n\nconst record = createRecord([\"Alice\", \"Bob\"], 25);\nconsole.log(record); // 결과: { Alice: 25, Bob: 25 }\n\n이 예시에서 createRecord 함수는 키 배열과 값을 가져와 Record 유형을 사용하여 생성된 객체의 키와 값이 일관되도록 보장합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 선택적 타입 매핑을 위해 Pick 타입과 Record 사용하기\n\n특정 속성만 포함된 객체 타입을 만들기 위해 Pick과 Record 타입을 결합할 수 있습니다.\n\n## 코드 예시:\n\ninterface User {\n  id: number;\n  name: string;\n  age: number;\n  email: string;\n}\n\ntype UserInfo = Pick<User, \"id\" | \"name\">;\n\ntype UserInfoRecord = Record<string, UserInfo>;\n\nconst userInfo: UserInfoRecord = {\n  user1: { id: 1, name: \"Alice\" },\n  user2: { id: 2, name: \"Bob\" },\n};\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 예시에서는 사용자 인터페이스에서 id와 name 속성을 선택하기 위해 Pick 타입을 사용하고, Record 타입을 사용하여 이러한 속성을 포함하는 객체 타입을 생성합니다.\n\n# 7. Record를 사용한 동적 Key-Value 사전 구현\n\nRecord 타입은 동적 키-값 사전을 구현하기에 적합하며, 특히 동적 키와 값이 필요할 때 유용합니다.\n\n## 코드 예시:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ntype Dictionary<T> = Record<string, T>;\n\nconst stringDictionary: Dictionary<string> = {\n  key1: \"value1\",\n  key2: \"value2\",\n};\n\nconst numberDictionary: Dictionary<number> = {\n  key1: 1,\n  key2: 2,\n};\n\n이 예시에서 Dictionary 타입은 어떤 타입의 key-value 쌍을 저장하는 데 사용할 수 있어 코드를 더 유연하고 일반적으로 만들어줍니다.\n\n# 8. Record와 함께 ReadOnly 사용하기\n\nReadOnly와 Record 타입을 함께 사용하여 수정할 수 없는 key-value 쌍 객체를 만들 수 있습니다. 이를 통해 객체의 프로퍼티가 수정될 수 없도록 보장합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 코드 예시:\n\ntype ReadOnlyUserRecord = Readonly<Record<string, User>>;\n\nconst readOnlyUsers: ReadOnlyUserRecord = {\n  user1: { name: \"Alice\", age: 25 },\n  user2: { name: \"Bob\", age: 30 },\n};\n\n// readOnlyUsers.user1 = { name: \"Charlie\", age: 35 }; // 오류: 'user1'에 할당할 수 없습니다. 읽기 전용 속성이기 때문에\n\n이 예시에서는 Readonly와 Record 타입을 결합하여 수정할 수 없는 사용자 레코드 객체를 만들어 객체의 속성을 수정할 수 없도록 보장합니다.\n\n# 9. Record와 Partial 함께 사용하기\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n부분 및 레코드 유형을 결합하여 모든 속성이 선택적인 객체를 만들 수 있어요.\n\n## 코드 예시:\n\ntype PartialUserRecord = Partial<Record<string, User>>;\n\nconst partialUsers: PartialUserRecord = {\n  user1: { name: \"Alice\", age: 25 },\n  user2: undefined, // 속성이 선택적이므로 유효합니다\n};\n\n이 예시에서 Partial 및 Record의 결합을 통해 속성이 선택적인 객체를 정의할 수 있어서 부분적인 데이터를 처리하는 데 매우 유용합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. Record를 사용하여 모든 속성을 필수로 강제하는 방법\n\n어떤 경우에는 객체의 모든 속성이 필수임을 보장해야 할 수도 있습니다. Required와 Record 타입을 결합하여 이를 달성할 수 있습니다.\n\n## 코드 예시:\n\ninterface Config {\n  host?: string;\n  port?: number;\n}\n\ntype RequiredConfig = Required<Config>;\n\ntype ConfigRecord = Record<string, RequiredConfig>;\n\nconst configs: ConfigRecord = {\n  dev: { host: \"localhost\", port: 8080 },\n  prod: { host: \"example.com\", port: 80 },\n};\n\n// 'port'가 필수이기 때문에 에러가 발생합니다\n// const invalidConfigs: ConfigRecord = {\n//   dev: { host: \"localhost\" }\n// };\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 예시에서는 Config 객체의 모든 속성이 필수로 입력되도록 Required 및 Record 유형을 사용하여 구성 객체의 완성도를 보장합니다.\n\n이 글을 통해 TypeScript의 Record 유형의 다양한 응용 프로그램 시나리오를 자세히 살펴보았습니다. Record 유형의 기본 정의, Tuple 및 Map과의 차이점, 그리고 실제 응용프로그램에서 코드 가독성과 유지 관리성을 향상시키기 위해 Record 유형을 사용하는 방법에 대해 배웠습니다. 이러한 예시들이 Record 유형을 더 잘 이해하고 적용할 수 있도록 도와드리고 TypeScript 코드를 더 효율적이고 신뢰할 수 있게 만들기를 바랍니다.","ogImage":{"url":"/TIL/assets/img/2024-07-13-MasteringTypeScriptsRecordType_0.png"},"coverImage":"/TIL/assets/img/2024-07-13-MasteringTypeScriptsRecordType_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/TIL/assets/img/2024-07-13-MasteringTypeScriptsRecordType_0.png\" alt=\"Record Type\"></p>\n<p>TypeScript의 Record 타입은 우리가 key-value 쌍 타입을 정의하는 데 도움이 되는 매우 유용한 도구입니다. 이 기사에서는 Record 타입의 다양한 응용 시나리오를 탐구하고, 코드 품질과 유지 관리성을 향상시킬 수 있는 방법에 대해 알아보겠습니다.</p>\n<h1>1. Record Type이란 무엇인가요?</h1>\n<p>Record 타입은 TypeScript에서 내장된 일반적인 제네릭 타입으로, 키와 값이 지정된 타입인 객체 타입을 구성하는 데 사용됩니다. 다음과 같이 정의됩니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">유형 레코드<span class=\"hljs-string\">`K, T`</span>는 그 키가 유형 K이고 값이 유형 T인 개체를 나타냅니다. 간단한 예제를 살펴봅시다:\n\n유형 사용자 = {\n  이름: 문자열;\n  나이: 숫자;\n};\n\n유형 사용자레코드 = 레코드 &#x3C;문자열, 사용자>;\n\n상수 사용자: 사용자레코드 = {\n  사용자<span class=\"hljs-number\">1</span> : { 이름: <span class=\"hljs-string\">\"앨리스\"</span>, 나이: <span class=\"hljs-number\">25</span> },\n  사용자<span class=\"hljs-number\">2</span> : { 이름: <span class=\"hljs-string\">\"밥\"</span>, 나이: <span class=\"hljs-number\">30</span> },\n};\n\n이 예제에서 <span class=\"hljs-title class_\">UserRecord</span>는 키가 문자열 형식이고 값이 사용자 형식인 개체를 나타냅니다.\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n# <span class=\"hljs-number\">2.</span> 레코드와 튜플의 차이\n\n레코드와 튜플은 <span class=\"hljs-title class_\">TypeScript</span>에서 객체 구조를 정의하는 데 사용되는 도구입니다. 그러나 사용 용도와 특성이 다릅니다.\n\n- 레코드: 키-값 쌍을 정의하는 데 사용되며, 키와 값의 타입이 임의적일 수 있습니다.\n- 튜플: 고정된 길이와 타입의 배열을 정의하는 데 사용됩니다.\n\n## 코드 예제:\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\ntype <span class=\"hljs-title class_\">UserTuple</span> = [string, number]; <span class=\"hljs-comment\">// 튜플 타입</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">userTuple</span>: <span class=\"hljs-title class_\">UserTuple</span> = [<span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-number\">25</span>]; <span class=\"hljs-comment\">// 유효함</span>\n<span class=\"hljs-comment\">// const invalidUserTuple: UserTuple = [25, \"Alice\"]; // 오류: 타입 불일치</span>\n\ntype <span class=\"hljs-title class_\">UserRecord</span> = <span class=\"hljs-title class_\">Record</span>&#x3C;string, number>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">userRecord</span>: <span class=\"hljs-title class_\">UserRecord</span> = {\n  <span class=\"hljs-title class_\">Alice</span>: <span class=\"hljs-number\">25</span>,\n  <span class=\"hljs-title class_\">Bob</span>: <span class=\"hljs-number\">30</span>,\n};\n\n# <span class=\"hljs-number\">3.</span> <span class=\"hljs-title class_\">Record</span>과 <span class=\"hljs-title class_\">Map</span>의 차이점\n\n<span class=\"hljs-title class_\">Record</span>와 <span class=\"hljs-title class_\">Map</span>은 모두 키-값 쌍을 저장하는 데 사용될 수 있지만, 중요한 차이점이 있습니다:\n\n- <span class=\"hljs-title class_\">Record</span>: 컴파일 시간에 타입 체크를 위해 사용되는 타입 정의 도구.\n- <span class=\"hljs-title class_\">Map</span>: <span class=\"hljs-title class_\">ES6</span>에서 소개된 데이터 구조로, 런타임에서 키-값 쌍을 저장하는 데 사용됨.\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n## 코드 예시:\n\n<span class=\"hljs-comment\">// Record를 사용</span>\ntype <span class=\"hljs-title class_\">UserAges</span> = <span class=\"hljs-title class_\">Record</span>&#x3C;string, number>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">userAges</span>: <span class=\"hljs-title class_\">UserAges</span> = {\n  <span class=\"hljs-title class_\">Alice</span>: <span class=\"hljs-number\">25</span>,\n  <span class=\"hljs-title class_\">Bob</span>: <span class=\"hljs-number\">30</span>,\n};\n\n<span class=\"hljs-comment\">// Map 사용</span>\n<span class=\"hljs-keyword\">const</span> userAgeMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>&#x3C;string, number>();\nuserAgeMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-number\">25</span>);\nuserAgeMap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"Bob\"</span>, <span class=\"hljs-number\">30</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userAgeMap.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"Alice\"</span>)); <span class=\"hljs-comment\">// 결과: 25</span>\n\n# <span class=\"hljs-number\">4.</span> 모든 경우 다루기\n\n<span class=\"hljs-title class_\">Record</span> 타입을 사용할 때, 모든 가능한 경우를 다루도록 하여 모든 경우에 대해 처리하도록 할 수 있습니다. 특히 유니언 타입을 다룰 때 유용합니다.\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n## 코드 예시:\n\ntype <span class=\"hljs-title class_\">Status</span> = <span class=\"hljs-string\">\"success\"</span> | <span class=\"hljs-string\">\"error\"</span> | <span class=\"hljs-string\">\"loading\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">statusMessages</span>: <span class=\"hljs-title class_\">Record</span>&#x3C;<span class=\"hljs-title class_\">Status</span>, string> = {\n  <span class=\"hljs-attr\">success</span>: <span class=\"hljs-string\">\"작업이 성공적으로 완료되었습니다\"</span>,\n  <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">\"오류가 발생했습니다\"</span>,\n  <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-string\">\"로딩 중...\"</span>,\n};\n\n<span class=\"hljs-comment\">// getStatusMessage 함수를 사용할 때 모든 경우의 수를 처리하도록 보장</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStatusMessage</span>(<span class=\"hljs-params\">status: Status</span>): string {\n  <span class=\"hljs-keyword\">return</span> statusMessages[status];\n}\n\n이 예제에서 <span class=\"hljs-title class_\">Record</span><span class=\"hljs-string\">`Status, string`</span>은 statusMessages 객체에서 모든 가능한 <span class=\"hljs-title class_\">Status</span> 값이 처리되도록 보장하며, getStatusMessage 함수에서 각 상태 메시지에 안전하게 접근할 수 있게 합니다.\n\n# <span class=\"hljs-number\">5.</span> 제네릭 애플리케이션에서 타입 체킹 강제화\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n<span class=\"hljs-title class_\">Record</span> 유형은 일반 프로그래밍에서 매우 유용하며 키와 값 사이의 일관성을 보장하고 유형 검사를 강제할 수 있게 해줍니다.\n\n## 코드 예시:\n\n<span class=\"hljs-keyword\">function</span> createRecord&#x3C;K <span class=\"hljs-keyword\">extends</span> string, T>(<span class=\"hljs-attr\">keys</span>: K[], <span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-title class_\">Record</span>&#x3C;K, T> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">record</span>: <span class=\"hljs-title class_\">Partial</span>&#x3C;<span class=\"hljs-title class_\">Record</span>&#x3C;K, T>> = {};\n  keys.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =></span> {\n    record[key] = value;\n  });\n  <span class=\"hljs-keyword\">return</span> record <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Record</span>&#x3C;K, T>;\n}\n\n<span class=\"hljs-keyword\">const</span> record = <span class=\"hljs-title function_\">createRecord</span>([<span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-string\">\"Bob\"</span>], <span class=\"hljs-number\">25</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(record); <span class=\"hljs-comment\">// 결과: { Alice: 25, Bob: 25 }</span>\n\n이 예시에서 createRecord 함수는 키 배열과 값을 가져와 <span class=\"hljs-title class_\">Record</span> 유형을 사용하여 생성된 객체의 키와 값이 일관되도록 보장합니다.\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n# <span class=\"hljs-number\">6.</span> 선택적 타입 매핑을 위해 <span class=\"hljs-title class_\">Pick</span> 타입과 <span class=\"hljs-title class_\">Record</span> 사용하기\n\n특정 속성만 포함된 객체 타입을 만들기 위해 <span class=\"hljs-title class_\">Pick</span>과 <span class=\"hljs-title class_\">Record</span> 타입을 결합할 수 있습니다.\n\n## 코드 예시:\n\ninterface <span class=\"hljs-title class_\">User</span> {\n  <span class=\"hljs-attr\">id</span>: number;\n  <span class=\"hljs-attr\">name</span>: string;\n  <span class=\"hljs-attr\">age</span>: number;\n  <span class=\"hljs-attr\">email</span>: string;\n}\n\ntype <span class=\"hljs-title class_\">UserInfo</span> = <span class=\"hljs-title class_\">Pick</span>&#x3C;<span class=\"hljs-title class_\">User</span>, <span class=\"hljs-string\">\"id\"</span> | <span class=\"hljs-string\">\"name\"</span>>;\n\ntype <span class=\"hljs-title class_\">UserInfoRecord</span> = <span class=\"hljs-title class_\">Record</span>&#x3C;string, <span class=\"hljs-title class_\">UserInfo</span>>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">userInfo</span>: <span class=\"hljs-title class_\">UserInfoRecord</span> = {\n  <span class=\"hljs-attr\">user1</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Alice\"</span> },\n  <span class=\"hljs-attr\">user2</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Bob\"</span> },\n};\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n이 예시에서는 사용자 인터페이스에서 id와 name 속성을 선택하기 위해 <span class=\"hljs-title class_\">Pick</span> 타입을 사용하고, <span class=\"hljs-title class_\">Record</span> 타입을 사용하여 이러한 속성을 포함하는 객체 타입을 생성합니다.\n\n# <span class=\"hljs-number\">7.</span> <span class=\"hljs-title class_\">Record</span>를 사용한 동적 <span class=\"hljs-title class_\">Key</span>-<span class=\"hljs-title class_\">Value</span> 사전 구현\n\n<span class=\"hljs-title class_\">Record</span> 타입은 동적 키-값 사전을 구현하기에 적합하며, 특히 동적 키와 값이 필요할 때 유용합니다.\n\n## 코드 예시:\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\ntype <span class=\"hljs-title class_\">Dictionary</span>&#x3C;T> = <span class=\"hljs-title class_\">Record</span>&#x3C;string, T>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">stringDictionary</span>: <span class=\"hljs-title class_\">Dictionary</span>&#x3C;string> = {\n  <span class=\"hljs-attr\">key1</span>: <span class=\"hljs-string\">\"value1\"</span>,\n  <span class=\"hljs-attr\">key2</span>: <span class=\"hljs-string\">\"value2\"</span>,\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">numberDictionary</span>: <span class=\"hljs-title class_\">Dictionary</span>&#x3C;number> = {\n  <span class=\"hljs-attr\">key1</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">key2</span>: <span class=\"hljs-number\">2</span>,\n};\n\n이 예시에서 <span class=\"hljs-title class_\">Dictionary</span> 타입은 어떤 타입의 key-value 쌍을 저장하는 데 사용할 수 있어 코드를 더 유연하고 일반적으로 만들어줍니다.\n\n# <span class=\"hljs-number\">8.</span> <span class=\"hljs-title class_\">Record</span>와 함께 <span class=\"hljs-title class_\">ReadOnly</span> 사용하기\n\n<span class=\"hljs-title class_\">ReadOnly</span>와 <span class=\"hljs-title class_\">Record</span> 타입을 함께 사용하여 수정할 수 없는 key-value 쌍 객체를 만들 수 있습니다. 이를 통해 객체의 프로퍼티가 수정될 수 없도록 보장합니다.\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n## 코드 예시:\n\ntype <span class=\"hljs-title class_\">ReadOnlyUserRecord</span> = <span class=\"hljs-title class_\">Readonly</span>&#x3C;<span class=\"hljs-title class_\">Record</span>&#x3C;string, <span class=\"hljs-title class_\">User</span>>>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">readOnlyUsers</span>: <span class=\"hljs-title class_\">ReadOnlyUserRecord</span> = {\n  <span class=\"hljs-attr\">user1</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> },\n  <span class=\"hljs-attr\">user2</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Bob\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> },\n};\n\n<span class=\"hljs-comment\">// readOnlyUsers.user1 = { name: \"Charlie\", age: 35 }; // 오류: 'user1'에 할당할 수 없습니다. 읽기 전용 속성이기 때문에</span>\n\n이 예시에서는 <span class=\"hljs-title class_\">Readonly</span>와 <span class=\"hljs-title class_\">Record</span> 타입을 결합하여 수정할 수 없는 사용자 레코드 객체를 만들어 객체의 속성을 수정할 수 없도록 보장합니다.\n\n# <span class=\"hljs-number\">9.</span> <span class=\"hljs-title class_\">Record</span>와 <span class=\"hljs-title class_\">Partial</span> 함께 사용하기\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n부분 및 레코드 유형을 결합하여 모든 속성이 선택적인 객체를 만들 수 있어요.\n\n## 코드 예시:\n\ntype <span class=\"hljs-title class_\">PartialUserRecord</span> = <span class=\"hljs-title class_\">Partial</span>&#x3C;<span class=\"hljs-title class_\">Record</span>&#x3C;string, <span class=\"hljs-title class_\">User</span>>>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">partialUsers</span>: <span class=\"hljs-title class_\">PartialUserRecord</span> = {\n  <span class=\"hljs-attr\">user1</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> },\n  <span class=\"hljs-attr\">user2</span>: <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-comment\">// 속성이 선택적이므로 유효합니다</span>\n};\n\n이 예시에서 <span class=\"hljs-title class_\">Partial</span> 및 <span class=\"hljs-title class_\">Record</span>의 결합을 통해 속성이 선택적인 객체를 정의할 수 있어서 부분적인 데이터를 처리하는 데 매우 유용합니다.\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n# <span class=\"hljs-number\">10.</span> <span class=\"hljs-title class_\">Record</span>를 사용하여 모든 속성을 필수로 강제하는 방법\n\n어떤 경우에는 객체의 모든 속성이 필수임을 보장해야 할 수도 있습니다. <span class=\"hljs-title class_\">Required</span>와 <span class=\"hljs-title class_\">Record</span> 타입을 결합하여 이를 달성할 수 있습니다.\n\n## 코드 예시:\n\ninterface <span class=\"hljs-title class_\">Config</span> {\n  host?: string;\n  port?: number;\n}\n\ntype <span class=\"hljs-title class_\">RequiredConfig</span> = <span class=\"hljs-title class_\">Required</span>&#x3C;<span class=\"hljs-title class_\">Config</span>>;\n\ntype <span class=\"hljs-title class_\">ConfigRecord</span> = <span class=\"hljs-title class_\">Record</span>&#x3C;string, <span class=\"hljs-title class_\">RequiredConfig</span>>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">configs</span>: <span class=\"hljs-title class_\">ConfigRecord</span> = {\n  <span class=\"hljs-attr\">dev</span>: { <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">\"localhost\"</span>, <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8080</span> },\n  <span class=\"hljs-attr\">prod</span>: { <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">\"example.com\"</span>, <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">80</span> },\n};\n\n<span class=\"hljs-comment\">// 'port'가 필수이기 때문에 에러가 발생합니다</span>\n<span class=\"hljs-comment\">// const invalidConfigs: ConfigRecord = {</span>\n<span class=\"hljs-comment\">//   dev: { host: \"localhost\" }</span>\n<span class=\"hljs-comment\">// };</span>\n\n&#x3C;!-- <span class=\"hljs-variable constant_\">TIL</span> 수평 -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ins</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>\n     <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-attr\">data-ad-slot</span>=<span class=\"hljs-string\">\"1549334788\"</span>\n     <span class=\"hljs-attr\">data-ad-format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     <span class=\"hljs-attr\">data-full-width-responsive</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ins</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n(adsbygoogle = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">adsbygoogle</span> || []).<span class=\"hljs-title function_\">push</span>({});\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n이 예시에서는 <span class=\"hljs-title class_\">Config</span> 객체의 모든 속성이 필수로 입력되도록 <span class=\"hljs-title class_\">Required</span> 및 <span class=\"hljs-title class_\">Record</span> 유형을 사용하여 구성 객체의 완성도를 보장합니다.\n\n이 글을 통해 <span class=\"hljs-title class_\">TypeScript</span>의 <span class=\"hljs-title class_\">Record</span> 유형의 다양한 응용 프로그램 시나리오를 자세히 살펴보았습니다. <span class=\"hljs-title class_\">Record</span> 유형의 기본 정의, <span class=\"hljs-title class_\">Tuple</span> 및 <span class=\"hljs-title class_\">Map</span>과의 차이점, 그리고 실제 응용프로그램에서 코드 가독성과 유지 관리성을 향상시키기 위해 <span class=\"hljs-title class_\">Record</span> 유형을 사용하는 방법에 대해 배웠습니다. 이러한 예시들이 <span class=\"hljs-title class_\">Record</span> 유형을 더 잘 이해하고 적용할 수 있도록 도와드리고 <span class=\"hljs-title class_\">TypeScript</span> 코드를 더 효율적이고 신뢰할 수 있게 만들기를 바랍니다.\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}