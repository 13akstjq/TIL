{"pageProps":{"post":{"title":"구버전 AWS Lambda 런타임 자동 업데이트 방법","description":"","date":"2024-07-09 09:20","slug":"2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates","content":"\n## Python for devops v1.2 - 구버전/지원 중단된 런타임을 사용 중인 AWS 람다 함수의 업그레이드를 위한 Python 스크립트 작성하기.\n\n![이미지](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_0.png)\n\n저의 블로그 시리즈 Python for DevOps의 두 번째 블로그 포스트입니다. 여기서는 실제 데브옵스 사용 사례를 탐구하면서 Python 스크립트를 작성해봅니다.\n\nPython for devops 첫 번째 부분 - SQS 큐 암호화 자동화\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 시나리오\n\n보안 팀으로부터 수백 개의 Lambda 함수가 Python 3.8 및 Node.js 14x와 같은 지원되지 않는 런타임을 실행 중이라는 불만을 받았다고 가정해 봅시다. AWS는 Lambda 함수의 오래된 런타임을 자동으로 업데이트하지 않습니다.\n\n이 모든 Lambda 함수를 수동으로 업데이트하는 것은 고통스러울 수 있습니다. 책임감 있는 Devops 엔지니어로서, 이러한 수동 작업을 피하고 이러한 작업을 자동화하기 위한 재사용 가능한 Python 스크립트를 작성하고 싶어 합니다.\n\n# 블로그 포스트에서 다룰 내용은 무엇인가요?\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 블로그 포스트에서는 람다 런타임 업데이트를 자동화하는 방법을 가르쳐 드리겠습니다. 우리의 스크립트는 원하는 Python 버전을 인수로 받아 이전 버전을 사용 중인 람다를 나열한 후 런타임을 원하는 버전으로 업그레이드할 것입니다.\n\n## 따를 단계들\n\n- Lambda를 위한 boto3 클라이언트 생성.\n- AWS 계정의 해당 지역 내 모든 람다 함수를 나열.\n- 람다 함수의 런타임 가져오기.\n- 람다 런타임이 원하는 버전보다 낮은지 유효성 검사.\n- 람다 런타임을 원하는 버전으로 업그레이드.\n- 스크립트를 작성하는 동안 최선의 실천 방법을 준수할 것입니다.\n\n# 선행 조건:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 지역 머신에서 AWS 자격 증명을 구성하려면 aws configure 명령을 실행하세요. 최근 블로그 게시물의 지침을 따라 주세요.\n- AWS CLI 명령을 실행하여 이전 버전의 Python 런타임에서 실행되는 몇 가지 샘플 람다 함수를 만드세요.\n\n# Python 스크립트 개발을 진행하기 전에 사전 설정을 해봅시다 — 데모 람다 함수 생성.\n\n## 1. 배포 패키지 준비\n\n- 람다 함수 코드를 위한 디렉터리를 만드세요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmkdir my-lambda-function\ncd my-lambda-function\n```\n\n- 람다 함수 코드를 생성하세요 (예: lambda_function.py)\n\n```js\ndef lambda_handler(event, context):\n    return \"Hello, World!\"\n```\n\n- 디렉토리 내용을 압축하세요\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```bash\nzip -r deployment-package.zip .\n```\n\n## 2. Create a Lambda Execution Role\n\n- Create a trust policy (e.g., trust-policy.json)\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- IAM 역할을 생성하세요\n\n```js\naws iam create-role --role-name MyLambdaExecutionRole --assume-role-policy-document file://trust-policy.json\n```\n\n![연결된 이미지](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_1.png)\n\n- 역할에 AWSLambdaBasicExecutionRole 정책을 연결하세요\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\naws iam attach-role-policy --role-name MyLambdaExecutionRole --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n\n## 3. 람다 함수 배포하기\n\n- 람다 함수를 만드는 AWS CLI 명령어는 다음과 같이 보일 것입니다.\n\naws lambda create-function \\\n --function-name MyPython38Function \\\n --runtime python3.8 \\\n --role arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_LAMBDA_EXECUTION_ROLE \\\n --handler lambda_function.lambda_handler \\\n --zip-file fileb://path/to/your/deployment/package.zip\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 이제 IAM 역할과 배포 패키지를 사용하여 3개의 람다 함수를 배포할 예정입니다.\n\n```js\naws lambda create-function \\\n    --function-name medium-blog-lambda1 \\\n    --runtime python3.8 \\\n    --role arn:aws:iam::366130468123:role/MyLambdaExecutionRole \\\n    --handler lambda_function.lambda_handler \\\n    --zip-file fileb://my-lambda-function/deployment-package.zip \\\n    --timeout 15 \\\n    --memory-size 128\n```\n\n아래와 같이 3개의 람다 함수가 생성됩니다.\n\n![이미지](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_2.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 파이썬 스크립트 작성을 시작할 준비가 끝났어요.\n\n파이썬 코드를 작성하기 전에, 최고의 방법을 따라 파이썬 환경을 설정해보겠어요.\n\n## 파이썬 가상 환경 만들기\n\n```js\n# 가상 파이썬 환경 만들기\npython3 -m venv medium_blog\n\n# 가상 환경 활성화하기\nsource medium_blog/bin/activate\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- requirements.txt 파일을 생성하고 해당 파일에 의존성을 넣어주세요.\n\nboto3는 Python 라이브러리로, Python을 사용하여 AWS 리소스와 통신할 수 있게 해줍니다.\n\n# requirements.txt\n\nboto3\n\n- 의존성을 설치해주세요\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npip install -r requirements.txt\n```\n\n# 이제 설정을 완료했으니, 파이썬 스크립트를 작성해 볼까요?\n\n우리는 코드를 작은 부분, 즉 함수로 나누어 각 함수가 한 가지 작업을 수행하도록 할 수 있어요.\n\n참고: 블로그 포스트의 전체 코드는 제 공개 GitHub에 올릴 예정이에요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 1. Python 모듈을 가져와 boto3를 사용하여 람다 클라이언트를 만듭니다\n\n![lambda client](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_3.png)\n\n## 2. 모든 람다를 나열하는 함수 — 람다 함수 목록을 반환합니다.\n\n![list lambdas](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_4.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 기능은 lambda_client를 사용하여 Lambda 함수 목록을 가져와 반환합니다.\n\nlist_functions()[“Functions”] 대신 list_functions().get(“Functions”, None)을 사용하여 응답에 “Functions” 키가 없을 때 KeyError를 방지할 수 있습니다. 이렇게 하면 코드가 기본값인 None을 반환하므로 더 견고하고 런타임 오류를 방지할 수 있습니다.\n\n## 3. 람다 런타임 가져오기.\n\n<img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_5.png\" />\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 함수는 lambda_json_list에 있는 딕셔너리에서 FunctionName과 Runtime을 추출하고(Runtime 값이 없는 경우에는 컨테이너 기반 람다 함수의 경우), 이름과 런타임을 포함하는 튜플의 목록을 반환합니다.\n\n4. 원하는 런타임과 런타임을 비교하고 런타임이 원하는 것보다 낮으면 True를 반환합니다.\n\n![이미지](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_6.png)\n\n버전 클래스는 packaging.version 모듈에서 사용되며 버전 문자열을 구문 분석하고 비교하는 데 사용됩니다. 이 함수에서는 현재 런타임 버전이 지정된 버전보다 이전 버전인지 확인합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 5. 비교 함수가 True 값을 반환하면 람다 런타임을 업데이트합니다.\n\n![Lambda Runtime Update](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_7.png)\n\n이 함수는 람다 함수를 새로운 런타임으로 업데이트합니다.\n\n예외 처리를 위해 try/except 블록을 사용했습니다. 이를 통해 예기치 않은 오류를 관리하고 대응할 수 있습니다. try 블록 내에서 위험한 작업을 시도하고 그에 따른 예외를 except에서 처리하여 프로그램이 오류로 인해 충돌하지 않고 우아하게 회복될 수 있도록 합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 6. 조각들을 함께 모으기\n\n![이미지](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_8.png)\n\n## 7. 스크립트 실행하기\n\n![이미지](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_9.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 코드 스니펫을 모두 `update_lambda_runtimes.py` 파일에 붙여넣고 아래 명령어를 실행하여 스크립트를 실행합니다.\n\n```js\npython update_lambda_runtimes.py\n```\n\n`__name__`이 `'__main__'`인 상태에서 스크립트를 실행할 때만 `run()` 함수가 실행되도록 하여 스크립트를 실행합니다.\n\n스크립트의 유용성을 높이기 위해 명령줄 인수를 받을 수 있도록 활성화해야 합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Automatic Outdated AWS Lambda Runtime Updates](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_10.png)\n\n이 함수는 Python에서 argparse 모듈을 사용하여 명령줄 인자 파서를 만듭니다. 스크립트 실행 시 제공해야 할 인수인 python_version (단축 형식 -a)을 기대합니다.\n\n## 명령줄 인수를 사용하여 스크립트 실행\n\n![Automatic Outdated AWS Lambda Runtime Updates Example](/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_11.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\npython update_lambda_runtimes.py --python-version python3.9\n```\n\n블로그 게시물의 전체 코드는 제 공개 GitHub 리포지토리에서 찾을 수 있습니다. 다음 링크를 사용하여 액세스하세요.\n\n## 무엇을 더 해야 할까요?\n\n- 로깅 사용하기.\n- 코드 문서화 및 타입 힌트 사용하기.\n- NodeJS, Go 등 다른 런타임을 포함하는 스크립트 확장하기.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저와 LinkedIn에서 연락하세요: [https://www.linkedin.com/in/akhilesh-mishra-0ab886124/](https://www.linkedin.com/in/akhilesh-mishra-0ab886124/)\n","ogImage":{"url":"/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_0.png"},"coverImage":"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_0.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>Python for devops v1.2 - 구버전/지원 중단된 런타임을 사용 중인 AWS 람다 함수의 업그레이드를 위한 Python 스크립트 작성하기.</h2>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_0.png\" alt=\"이미지\"></p>\n<p>저의 블로그 시리즈 Python for DevOps의 두 번째 블로그 포스트입니다. 여기서는 실제 데브옵스 사용 사례를 탐구하면서 Python 스크립트를 작성해봅니다.</p>\n<p>Python for devops 첫 번째 부분 - SQS 큐 암호화 자동화</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>시나리오</h1>\n<p>보안 팀으로부터 수백 개의 Lambda 함수가 Python 3.8 및 Node.js 14x와 같은 지원되지 않는 런타임을 실행 중이라는 불만을 받았다고 가정해 봅시다. AWS는 Lambda 함수의 오래된 런타임을 자동으로 업데이트하지 않습니다.</p>\n<p>이 모든 Lambda 함수를 수동으로 업데이트하는 것은 고통스러울 수 있습니다. 책임감 있는 Devops 엔지니어로서, 이러한 수동 작업을 피하고 이러한 작업을 자동화하기 위한 재사용 가능한 Python 스크립트를 작성하고 싶어 합니다.</p>\n<h1>블로그 포스트에서 다룰 내용은 무엇인가요?</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 블로그 포스트에서는 람다 런타임 업데이트를 자동화하는 방법을 가르쳐 드리겠습니다. 우리의 스크립트는 원하는 Python 버전을 인수로 받아 이전 버전을 사용 중인 람다를 나열한 후 런타임을 원하는 버전으로 업그레이드할 것입니다.</p>\n<h2>따를 단계들</h2>\n<ul>\n<li>Lambda를 위한 boto3 클라이언트 생성.</li>\n<li>AWS 계정의 해당 지역 내 모든 람다 함수를 나열.</li>\n<li>람다 함수의 런타임 가져오기.</li>\n<li>람다 런타임이 원하는 버전보다 낮은지 유효성 검사.</li>\n<li>람다 런타임을 원하는 버전으로 업그레이드.</li>\n<li>스크립트를 작성하는 동안 최선의 실천 방법을 준수할 것입니다.</li>\n</ul>\n<h1>선행 조건:</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>지역 머신에서 AWS 자격 증명을 구성하려면 aws configure 명령을 실행하세요. 최근 블로그 게시물의 지침을 따라 주세요.</li>\n<li>AWS CLI 명령을 실행하여 이전 버전의 Python 런타임에서 실행되는 몇 가지 샘플 람다 함수를 만드세요.</li>\n</ul>\n<h1>Python 스크립트 개발을 진행하기 전에 사전 설정을 해봅시다 — 데모 람다 함수 생성.</h1>\n<h2>1. 배포 패키지 준비</h2>\n<ul>\n<li>람다 함수 코드를 위한 디렉터리를 만드세요.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">mkdir my-lambda-<span class=\"hljs-keyword\">function</span>\ncd my-lambda-<span class=\"hljs-keyword\">function</span>\n</code></pre>\n<ul>\n<li>람다 함수 코드를 생성하세요 (예: lambda_function.py)</li>\n</ul>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">lambda_handler</span>(event, context):\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello, World!\"</span>\n</code></pre>\n<ul>\n<li>디렉토리 내용을 압축하세요</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-bash\">zip -r deployment-package.zip .\n</code></pre>\n<h2>2. Create a Lambda Execution Role</h2>\n<ul>\n<li>Create a trust policy (e.g., trust-policy.json)</li>\n</ul>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"Version\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"2012-10-17\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"Statement\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"Effect\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Allow\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"Principal\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">\"Service\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"lambda.amazonaws.com\"</span>\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"Action\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"sts:AssumeRole\"</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>IAM 역할을 생성하세요</li>\n</ul>\n<pre><code class=\"hljs language-js\">aws iam create-role --role-name <span class=\"hljs-title class_\">MyLambdaExecutionRole</span> --assume-role-policy-<span class=\"hljs-variable language_\">document</span> <span class=\"hljs-attr\">file</span>:<span class=\"hljs-comment\">//trust-policy.json</span>\n</code></pre>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_1.png\" alt=\"연결된 이미지\"></p>\n<ul>\n<li>역할에 AWSLambdaBasicExecutionRole 정책을 연결하세요</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>aws iam attach-role-policy --role-name MyLambdaExecutionRole --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole</p>\n<h2>3. 람다 함수 배포하기</h2>\n<ul>\n<li>람다 함수를 만드는 AWS CLI 명령어는 다음과 같이 보일 것입니다.</li>\n</ul>\n<p>aws lambda create-function <br>\n--function-name MyPython38Function <br>\n--runtime python3.8 <br>\n--role arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_LAMBDA_EXECUTION_ROLE <br>\n--handler lambda_function.lambda_handler <br>\n--zip-file fileb://path/to/your/deployment/package.zip</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>이제 IAM 역할과 배포 패키지를 사용하여 3개의 람다 함수를 배포할 예정입니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">aws lambda create-<span class=\"hljs-keyword\">function</span> \\\n    --<span class=\"hljs-keyword\">function</span>-name medium-blog-lambda1 \\\n    --runtime python3<span class=\"hljs-number\">.8</span> \\\n    --role <span class=\"hljs-attr\">arn</span>:<span class=\"hljs-attr\">aws</span>:<span class=\"hljs-attr\">iam</span>::<span class=\"hljs-number\">366130468123</span>:role/<span class=\"hljs-title class_\">MyLambdaExecutionRole</span> \\\n    --handler lambda_function.<span class=\"hljs-property\">lambda_handler</span> \\\n    --zip-file <span class=\"hljs-attr\">fileb</span>:<span class=\"hljs-comment\">//my-lambda-function/deployment-package.zip \\</span>\n    --timeout <span class=\"hljs-number\">15</span> \\\n    --memory-size <span class=\"hljs-number\">128</span>\n</code></pre>\n<p>아래와 같이 3개의 람다 함수가 생성됩니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_2.png\" alt=\"이미지\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 파이썬 스크립트 작성을 시작할 준비가 끝났어요.</p>\n<p>파이썬 코드를 작성하기 전에, 최고의 방법을 따라 파이썬 환경을 설정해보겠어요.</p>\n<h2>파이썬 가상 환경 만들기</h2>\n<pre><code class=\"hljs language-js\"># 가상 파이썬 환경 만들기\npython3 -m venv medium_blog\n\n# 가상 환경 활성화하기\nsource medium_blog/bin/activate\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>requirements.txt 파일을 생성하고 해당 파일에 의존성을 넣어주세요.</li>\n</ul>\n<p>boto3는 Python 라이브러리로, Python을 사용하여 AWS 리소스와 통신할 수 있게 해줍니다.</p>\n<h1>requirements.txt</h1>\n<p>boto3</p>\n<ul>\n<li>의존성을 설치해주세요</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">pip install -r requirements.<span class=\"hljs-property\">txt</span>\n</code></pre>\n<h1>이제 설정을 완료했으니, 파이썬 스크립트를 작성해 볼까요?</h1>\n<p>우리는 코드를 작은 부분, 즉 함수로 나누어 각 함수가 한 가지 작업을 수행하도록 할 수 있어요.</p>\n<p>참고: 블로그 포스트의 전체 코드는 제 공개 GitHub에 올릴 예정이에요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>1. Python 모듈을 가져와 boto3를 사용하여 람다 클라이언트를 만듭니다</h2>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_3.png\" alt=\"lambda client\"></p>\n<h2>2. 모든 람다를 나열하는 함수 — 람다 함수 목록을 반환합니다.</h2>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_4.png\" alt=\"list lambdas\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 기능은 lambda_client를 사용하여 Lambda 함수 목록을 가져와 반환합니다.</p>\n<p>list_functions()[“Functions”] 대신 list_functions().get(“Functions”, None)을 사용하여 응답에 “Functions” 키가 없을 때 KeyError를 방지할 수 있습니다. 이렇게 하면 코드가 기본값인 None을 반환하므로 더 견고하고 런타임 오류를 방지할 수 있습니다.</p>\n<h2>3. 람다 런타임 가져오기.</h2>\n<img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_5.png\">\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 함수는 lambda_json_list에 있는 딕셔너리에서 FunctionName과 Runtime을 추출하고(Runtime 값이 없는 경우에는 컨테이너 기반 람다 함수의 경우), 이름과 런타임을 포함하는 튜플의 목록을 반환합니다.</p>\n<ol start=\"4\">\n<li>원하는 런타임과 런타임을 비교하고 런타임이 원하는 것보다 낮으면 True를 반환합니다.</li>\n</ol>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_6.png\" alt=\"이미지\"></p>\n<p>버전 클래스는 packaging.version 모듈에서 사용되며 버전 문자열을 구문 분석하고 비교하는 데 사용됩니다. 이 함수에서는 현재 런타임 버전이 지정된 버전보다 이전 버전인지 확인합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>5. 비교 함수가 True 값을 반환하면 람다 런타임을 업데이트합니다.</h2>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_7.png\" alt=\"Lambda Runtime Update\"></p>\n<p>이 함수는 람다 함수를 새로운 런타임으로 업데이트합니다.</p>\n<p>예외 처리를 위해 try/except 블록을 사용했습니다. 이를 통해 예기치 않은 오류를 관리하고 대응할 수 있습니다. try 블록 내에서 위험한 작업을 시도하고 그에 따른 예외를 except에서 처리하여 프로그램이 오류로 인해 충돌하지 않고 우아하게 회복될 수 있도록 합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>6. 조각들을 함께 모으기</h2>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_8.png\" alt=\"이미지\"></p>\n<h2>7. 스크립트 실행하기</h2>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_9.png\" alt=\"이미지\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 코드 스니펫을 모두 <code>update_lambda_runtimes.py</code> 파일에 붙여넣고 아래 명령어를 실행하여 스크립트를 실행합니다.</p>\n<pre><code class=\"hljs language-js\">python update_lambda_runtimes.<span class=\"hljs-property\">py</span>\n</code></pre>\n<p><code>__name__</code>이 <code>'__main__'</code>인 상태에서 스크립트를 실행할 때만 <code>run()</code> 함수가 실행되도록 하여 스크립트를 실행합니다.</p>\n<p>스크립트의 유용성을 높이기 위해 명령줄 인수를 받을 수 있도록 활성화해야 합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_10.png\" alt=\"Automatic Outdated AWS Lambda Runtime Updates\"></p>\n<p>이 함수는 Python에서 argparse 모듈을 사용하여 명령줄 인자 파서를 만듭니다. 스크립트 실행 시 제공해야 할 인수인 python_version (단축 형식 -a)을 기대합니다.</p>\n<h2>명령줄 인수를 사용하여 스크립트 실행</h2>\n<p><img src=\"/TIL/assets/img/2024-07-09-AutomateOutdatedAWSLambdaRuntimeUpdates_11.png\" alt=\"Automatic Outdated AWS Lambda Runtime Updates Example\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\">python update_lambda_runtimes.py --python-version python3<span class=\"hljs-number\">.9</span>\n</code></pre>\n<p>블로그 게시물의 전체 코드는 제 공개 GitHub 리포지토리에서 찾을 수 있습니다. 다음 링크를 사용하여 액세스하세요.</p>\n<h2>무엇을 더 해야 할까요?</h2>\n<ul>\n<li>로깅 사용하기.</li>\n<li>코드 문서화 및 타입 힌트 사용하기.</li>\n<li>NodeJS, Go 등 다른 런타임을 포함하는 스크립트 확장하기.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>저와 LinkedIn에서 연락하세요: <a href=\"https://www.linkedin.com/in/akhilesh-mishra-0ab886124/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/akhilesh-mishra-0ab886124/</a></p>\n</body>\n</html>\n"},"__N_SSG":true}