{"pageProps":{"post":{"title":"Streamlit 대시보드 만들기 간단한 모듈식 코딩으로 매끄러운 결과 얻기","description":"","date":"2024-07-13 19:11","slug":"2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults","content":"\n\n![Stunning Streamlit Dashboards](/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_0.png)\n\nStreamlit은 데이터 과학자와 분석가들이 쉽게 대화형 웹 애플리케이션을 만들 수 있게 하는 오픈 소스 앱 프레임워크입니다.\n\n인기있던 요청에 힘입어, 본 글은 보다 모듈식으로 접근한 다중 페이지 Streamlit 애플리케이션 만들기 과정을 다룹니다. 페이지의 핵심 쉘부터 시작합니다.\n\nData at Depth는 독자들의 지원을 받는 미디어입니다. 새로운 글을 받아보고 제 작품을 지원하기 위해 무료 또는 유료 구독자가 되는 것을 고려해 주세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파이썬을 몇 줄만 사용하면 데이터 스크립트를 공유 가능한 웹 앱으로 변환할 수 있어요.\n\nStreamlit을 사용하여 다중 페이지 대화형 애플리케이션을 만드는 방법을 안내해 드릴게요. 이번에는 국제 난민기구 (UNHCR) 데이터셋을 활용해서 원산지국 및 피난사 실제 나라를 추적하는 애플리케이션을 만들 거에요.\n\n이 애플리케이션은 다음과 같은 세 가지 데이터 시각화 페이지를 갖을 거예요:\n\n- 피난 사실 대상 나라 개요 (피난처 10대 국가)\n- 피난처 국가별 분석\n- 코로플레스 지도를 활용한 피난신청국 전체 개요\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리가 할 일은 Streamlit 셸 애플리케이션과 데이터 세트를 이용해 모든 것을 처음부터 만들어보는 것입니다.\n\n# Streamlit 셸 애플리케이션 다중 페이지 구조 만들기\n\n모듈화된 다중 페이지 Streamlit 애플리케이션을 만들기 위해 우리는 먼저 애플리케이션의 기본 구조를 설정할 것입니다.\n\n이는 각 페이지에 대한 별도의 함수를 만들고 페이지 간 탐색을 관리하는 주요 함수를 만드는 것을 포함합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 각 페이지를 셸로 사용하여 3페이지 Streamlit 애플리케이션을 설정하는 코드입니다.\n\n```js\nimport streamlit as st\n\n# 페이지 1: 개요\ndef page_overview():\n    st.subheader(\"연도 범위별 전체 비민 결정\")\n    # 시각화 코드를 여기에 넣으세요.\n\n# 페이지 2: 국가별 분석 및 그룹화된 막대 차트\ndef page_country_analysis():\n    st.subheader(\"국가별 분석\")\n    # 시각화 코드를 여기에 넣으세요.\n\n# 페이지 3: 코로플레스 맵\ndef page_choropleth():\n    st.subheader(\"비민 결정의 세계적 분포\")\n    # 시각화 코드를 여기에 넣으세요.\n\n# 주요 앱 및 네비게이션\ndef main():\n    st.set_page_config(page_title=\"비민 결정 대시보드\", layout=\"wide\", initial_sidebar_state=\"expanded\")\n    st.sidebar.title(\"네비게이션\")\n    menu_options = [\"전체 비민 결정\", \"국가 분석\", \"글로벌 매핑\"]\n    menu_choice = st.sidebar.selectbox(\"이동\", menu_options)\n    if menu_choice == \"전체 비민 결정\":\n        page_overview()\n    elif menu_choice == \"국가 분석\":\n        page_country_analysis()\n    elif menu_choice == \"글로벌 매핑\":\n        page_choropleth()\n\nif __name__ == \"__main__\":\n    main()\n```\n## 코드 설명:\n\n- Streamlit 라이브러리를 가져옵니다.\n- 각 페이지를 위한 별도의 함수를 정의합니다: page_overview(), page_country_analysis(), page_choropleth().\n- 각 함수에는 페이지 목적을 나타내는 subheader가 포함되어 있습니다. 데이터 시각화 코드는 나중에 추가됩니다.\n- 페이지 구성을 설정하고 네비게이션을 처리하는 main() 함수를 정의합니다.\n- st.sidebar.selectbox를 사용하여 세 개의 페이지 사이를 이동하는 사이드바 메뉴를 생성합니다.\n- 사용자의 선택에 따라 해당 페이지 함수가 호출되어 페이지 내용이 표시됩니다.\n- 스크립트를 실행할 때 main() 함수가 호출됩니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 쉘은 다중 페이지 Streamlit 애플리케이션의 기본 구조를 설정합니다. 다음 섹션에서는 각 페이지 함수에 데이터 시각화 코드를 추가할 것입니다.\n\n이 코드를 실행하려면 터미널 프롬프트에 액세스해야 합니다. 저는 PyCharm의 내장 터미널 프롬프트를 사용합니다:\n\n![이미지](/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_1.png)\n\n애플리케이션은 기본 브라우저에서 실행됩니다. 셸 애플리케이션을 처음으로 살펴보겠습니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블 태그를 Markdown 형식으로 변경해 주세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그들의 데이터는 여기에서 자유롭게 접근할 수 있습니다.\n\n다운로드 페이지로 이동한 후에는 선택한 데이터에 대해 더욱 구체적으로 설정할 수 있습니다:\n![이미지](/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_3.png)\n\nUNHCR 다운로드 페이지 - \"원국\"과 \"청국\"을 선택합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 프로젝트에서는 각 난민의 출신 국가와 애쉬럼 국가를 가져와 봅시다.\n\n이 데이터를 통해 우리는 두 방향으로의 이동을 보여주는 난민 데이터를 가지고 있습니다:\n\n- 출신 국가에서 — 애움 신청자들이 이동하는 곳\n- 애움 국가에서 — 애움 신청자들이 오는 곳\n\n데이터셋을 다운로드한 후에, 우리는 어떤 데이터를 다루고 있는지 확인하기 위해 스프레드시트 형식으로 열어볼 수 있습니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![Dashboard Screenshot](/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_4.png)\n\nThis project focuses on the following data fields:\n\n- **Country of origin:** The country from which a person seeking asylum is coming\n- **Country of asylum:** The country where a person is actually seeking asylum\n- **Recognized decisions:** The total number of asylum seekers accepted per country (in numeric format)\n- **Rejected decisions:** The number of asylum seekers denied asylum\n\nBoth the country of origin and asylum have a 3-letter ISO code, which serves as a reliable unique identifier.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 애플리케이션의 각 페이지를 함께 만들어 봅시다.\n\n# 페이지 1: 망명을 받는 상위 10개 국가 (막대/선버스트 차트)\n\n첫 번째 페이지로, 우리는 망명을 받는 상위 10개 국가를 보여주는 막대 차트를 만들 것입니다. 그리고 재미있게도, 가끔 해석하기 어려울 수도 있는 아름다운 선버스트 차트도 만들어 볼 거에요.\n\n우리는 글로벌 망명 결정을 연도 범위별로 보여주는 데이터 시각화 코드를 page_overview() 함수에 추가할 거에요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터 세트를 로드하고 선택한 연도 범위에 따라 데이터를 필터링한 다음 두 가지 시각화를 만들어야 합니다: 총 난민 심사 결과 상위 10개 국가를 보여주는 수평 막대 차트와 출신 국가별로 나눈 Sunburst 차트입니다.\n\n```python\nimport pandas as pd\nimport plotly.express as px\n\n# 데이터 세트 로드\ndata = pd.read_csv('asylum-decisions.csv')\n\n# 난민 심사 결과 수를 얻는 도우미 함수\ndef get_asylum_counts(df, group_by_column):\n    return df.groupby([group_by_column])[\n        ['Recognized decisions', 'Rejected decisions', 'Total decisions']].sum().reset_index()\n```\n\n- 데이터 로드:\n\n- 데이터 세트는 pd.read_csv()를 사용하여 로드되어 data 변수에 저장됩니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. 도우미 함수:\n\n- get_asylum_counts(df, group_by_column): 이 함수는 데이터를 지정된 열로 그룹화하고 인정된, 거부된 및 총 결정의 합계를 계산합니다.\n\n우리는 데이터에 액세스하기 위해 초기 셸 애플리케이션 상단에 이 코드를 추가해야 합니다.\n\n데이터 시각화가 포함된 page_overview() 함수의 전체 코드는 다음과 같습니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 페이지 1: 개요\ndef page_overview():\n    st.subheader(\"연도 범위별 전체 추방 판정 (범위 선택)\")\n\n    year_filter = st.slider(\"연도 범위\", int(data['Year'].min()), int(data['Year'].max()),\n                            (int(data['Year'].min()), int(data['Year'].max())))\n    filtered_data = data[(data['Year'] >= year_filter[0]) & (data['Year'] <= year_filter[1])]\n    asylum_counts = get_asylum_counts(filtered_data, 'Country of asylum')\n    top_countries = asylum_counts.sort_values(by='Total decisions', ascending=False).head(10)\n    fig_bar = px.bar(top_countries, x='Total decisions', y='Country of asylum', orientation='h',\n                     title=\"총 추방 판정 상위 10개 국가\",\n                     color='Total decisions', color_continuous_scale=px.colors.sequential.YlOrRd)\n    fig_bar.update_layout(showlegend=False, height=400, yaxis={'categoryorder': 'total ascending'})\n    fig_bar.update_coloraxes(showscale=False)  # 색상 스케일 제거\n    st.plotly_chart(fig_bar)\n    top_countries_origins = filtered_data[filtered_data['Country of asylum'].isin(top_countries['Country of asylum'])]\n    fig_sunburst = px.sunburst(top_countries_origins, path=['Country of asylum', 'Country of origin'], values='Total decisions',\n                               title=\"원산지별 상위 10개 국가의 출신국 분포\",\n                               color='Total decisions', color_continuous_scale=px.colors.qualitative.Bold)\n    fig_sunburst.update_layout(height=600, showlegend=False)\n    fig_sunburst.update_coloraxes(showscale=False)  # 색상 스케일 제거\n    st.plotly_chart(fig_sunburst)\r\n```\n\n위 코드에서 설명한 내용:\n\n- 슬라이더(st.slider)를 사용하여 데이터 필터링을 위한 연도 범위를 선택합니다.\n- 선택한 연도 범위를 기반으로 데이터가 필터링되며, 추방 판정 횟수가 계산됩니다.\n- 데이터를 정렬하여 총 추방 판정 상위 10개 국가를 결정합니다.\n- 수평 막대 차트(px.bar)를 사용하여 총 추방 판정 상위 10개 국가를 시각화합니다. 범례와 색상 스케일은 showlegend=False 및 update_coloraxes(showscale=False)를 사용하여 제거됩니다.\n- 상위 10개 국가의 출신국을 나타내기 위해 태양 편포 차트(px.sunburst)가 생성됩니다. 범례와 색상 스케일 역시 showlegend=False 및 update_coloraxes(showscale=False)를 사용하여 제거됩니다.\n\n위 코드를 사용하여 진행 상황을 테스트하고, 성장 중인 애플리케이션을 저장하고 실행할 수 있습니다. 시각적 결과는 다음과 같습니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![이미지](/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_5.png)\n\n슬라이더를 조정하여 좀 더 집중된 연도 범위를 설정할 수 있습니다. 또한 Plotly sunburst 차트로는 실제 국가 (내부 원에서)를 클릭하여 더 상세한 숫자 세트를 생성할 수 있습니다:\n\n![이미지](/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_6.png)\n\n이 보기에서 각 국가 위로 마우스를 올리면 실제 숫자를 볼 수 있습니다.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n좋아요! 이제 우리 페이지 2에 국가별 데이터를 몇 가지 추가해보겠습니다.\n\n# 페이지 2: 국가별 데이터 시각화\n\n이제 페이지_country_analysis() 함수에 데이터 시각화 코드를 추가하여 선택한 국가의 난민 심사 결정을 표시할 수 있습니다.\n\n이 과정에는 두 가지 시각화가 포함됩니다: 연도별 인정된 및 거부된 난민 심사 결정 수를 보여주는 그룹화된 막대형 차트와 선택한 국가의 총 인정된, 거부된 및 총 심사 결정을 보여주는 수평 막대형 차트:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 페이지 2: 국가별 분석과 그룹화된 막대 차트\ndef page_country_analysis():\n    st.subheader(\"국가별 분석\")\n\n    country = st.selectbox(\"국가 선택\", data['Country of asylum'].unique())\n    country_data = data[data['Country of asylum'] == country]\n    country_data_long = pd.melt(country_data, id_vars=['Year'],\n                                value_vars=['Recognized decisions', 'Rejected decisions'],\n                                var_name='결정 유형', value_name='수량')\n    fig_grouped_bar = px.bar(country_data_long, x='Year', y='수량', color='결정 유형', barmode='group',\n                             title=f\"{country}의 연도별 입국 결정\",\n                             labels={'수량': '결정 수'},\n                             color_discrete_sequence=px.colors.sequential.YlOrRd)\n    fig_grouped_bar.update_layout(height=400, showlegend=True)\n    st.plotly_chart(fig_grouped_bar)\n    total_decisions = country_data[\n        ['Recognized decisions', 'Rejected decisions', 'Total decisions']].sum().reset_index()\n    total_decisions.columns = ['결정 유형', '수량']\n    fig_horizontal_bar = px.bar(total_decisions, x='수량', y='결정 유형', orientation='h',\n                                title=f\"{country}의 총 입국 결정\",\n                                color='결정 유형', color_discrete_sequence=px.colors.sequential.YlOrRd)\n    fig_horizontal_bar.update_layout(height=300, showlegend=False)\n    st.plotly_chart(fig_horizontal_bar)\r\n```\n\n코드 설명:\n\n- 드롭다운 (st.selectbox)을 사용하여 데이터 세트의 국가 목록에서 국가를 선택합니다.\n- 선택한 국가를 기반으로 데이터가 필터링됩니다.\n- pd.melt()를 사용하여 데이터를 wide에서 long 형식으로 변환하여 그룹화된 막대 차트를 생성합니다.\n- 선택한 국가에 대해 연도별로 인정된 및 거부된 입국 결정의 수를 시각화하는 그룹화된 막대 차트 (px.bar)가 생성됩니다. 범례는 showlegend=True를 사용하여 표시됩니다.\n- 선택한 국가의 인정된, 거부된 및 총 결정 수를 계산하고 수평 막대 차트 (px.bar)를 사용하여 표시합니다. 범례는 showlegend=False를 사용하여 제거됩니다.\n\n이 코드를 간단히 복사하여 Page 2의 셸 애플리케이션에 붙여넣고 명령 프롬프트에서 실행할 수 있습니다. 결과:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_7.png\" />\n\n그럼, 이제 세 분의 길을 거쳐 왔어요. 마지막 페이지로 아름다운 전 세계 Choropleth 지도를 만들어 볼게요.\n\n# 페이지 3: 전 세계 Choropleth 지도\n\n이제 선택한 연도에 대한 전 세계 망명 결정의 분포를 표시하기 위해 데이터 시각화 코드를 page_choropleth() 함수에 추가해 보겠습니다. 이것은 각 나라별로 망명 결정의 총합을 시각화하는 choropleth 지도를 만드는 과정을 포함합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# Page 3: Choropleth Mapping\ndef page_choropleth():\n    st.subheader(\"전체 지도 매핑\")\n\n    year = st.selectbox(\"연도 선택\", sorted(data['Year'].unique()), key='year_select')\n    year_data = data[data['Year'] == year]\n    asylum_counts = get_asylum_counts(year_data, 'Country of asylum')\n    st.subheader(f\"{year}년 전체 난민 심사 분포\")\n    fig = px.choropleth(asylum_counts, locations=\"Country of asylum\", locationmode='country names',\n                        color=\"Total decisions\",\n                        hover_name=\"Country of asylum\", color_continuous_scale=px.colors.sequential.YlOrBr)\n    fig.update_layout(height=500)\n    st.plotly_chart(fig)\n    st.subheader(f\"{year}년 각 국가별 난민 심사결과\")\n    sorted_asylum_counts = asylum_counts.sort_values(by='Total decisions', ascending=False)\n    st.dataframe(sorted_asylum_counts)\n```\n\n위 코드를 설명하자면:\n\n- 드롭다운 (st.selectbox)을 사용하여 데이터 세트에 있는 연도 목록에서 연도를 선택합니다.\n- 선택한 연도를 기반으로 데이터를 필터링하고 난민 결정 횟수를 계산합니다.\n- 선택한 연도에 대한 각 국가의 총 난민 결정을 시각화하기 위해 코로플레스 맵 (px.choropleth)이 생성됩니다. 색상 스케일은 color_continuous_scale=px.colors.sequential.YlOrBr를 사용하여 설정합니다.\n- 난민 결정을 국가별로 내림차순으로 정렬된 데이터 테이블 (st.dataframe)이 표시됩니다.\n\n앞 페이지와 마찬가지로 이 코드를 페이지_choropleth() 함수에 복사하여 저장하고 실행하면 멋진 결과가 나타납니다:\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![이미지](/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_8.png)\n\n정말 멋지네요.\n\n네, 멀티페이지 스트림릿 애플리케이션을 만드는 것이 그렇게 간단합니다.\n\n만약 빌드에 문제가 있다면 코드(그리고 데이터셋)는 GitHub에서 찾을 수 있습니다. [여기](링크)\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 요약하자면...\n\nStreamlit은 Plotly와 같은 표준 Python 데이터 시각화 라이브러리를 사용하여 빠르고 쉽게 데이터 시각화를 생성할 수 있는 훌륭한 애플리케이션입니다.\n\n이 프로젝트는 다양한 범위의 연도에 걸쳐 글로벌 UNHCR 망명 데이터를 나타내는 3페이지의 Streamlit 애플리케이션을 보여줍니다.\n\n우리는 사용자에게 이 데이터에 대해 다양한 이야기와 관점을 제공하기 위해 6가지 다른 데이터 시각화를 만들었습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다중 페이지 애플리케이션 셸을 먼저 만들면 각 차트와 페이지를 쉽게 추가, 제거 또는 수정할 수 있습니다. 예를 들어, 네 번째 페이지를 추가하고 싶다면 \"Page 4\" 함수를 만들고 해당 페이지에 시각화를 추가한 다음 페이지 논리에 추가 메뉴 항목을 추가하면 됩니다(첫 번째 단계에서 만듦).\n\n이 내용이 유익하고 도움이 되었기를 바랍니다.\n\nGitHub 저장소: [여기](HERE)\n\n이 유형의 내용이 마음에 든다면 작가로서 저를 지원하고 싶다면 제 Substack를 구독해 주세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSubstack에서 매주 두 번 뉴스레터와 다른 플랫폼에서는 찾을 수 없는 기사를 게시하고 있어요.","ogImage":{"url":"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_0.png"},"coverImage":"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_0.png","tag":["Tech"],"readingTime":18},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_0.png\" alt=\"Stunning Streamlit Dashboards\"></p>\n<p>Streamlit은 데이터 과학자와 분석가들이 쉽게 대화형 웹 애플리케이션을 만들 수 있게 하는 오픈 소스 앱 프레임워크입니다.</p>\n<p>인기있던 요청에 힘입어, 본 글은 보다 모듈식으로 접근한 다중 페이지 Streamlit 애플리케이션 만들기 과정을 다룹니다. 페이지의 핵심 쉘부터 시작합니다.</p>\n<p>Data at Depth는 독자들의 지원을 받는 미디어입니다. 새로운 글을 받아보고 제 작품을 지원하기 위해 무료 또는 유료 구독자가 되는 것을 고려해 주세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파이썬을 몇 줄만 사용하면 데이터 스크립트를 공유 가능한 웹 앱으로 변환할 수 있어요.</p>\n<p>Streamlit을 사용하여 다중 페이지 대화형 애플리케이션을 만드는 방법을 안내해 드릴게요. 이번에는 국제 난민기구 (UNHCR) 데이터셋을 활용해서 원산지국 및 피난사 실제 나라를 추적하는 애플리케이션을 만들 거에요.</p>\n<p>이 애플리케이션은 다음과 같은 세 가지 데이터 시각화 페이지를 갖을 거예요:</p>\n<ul>\n<li>피난 사실 대상 나라 개요 (피난처 10대 국가)</li>\n<li>피난처 국가별 분석</li>\n<li>코로플레스 지도를 활용한 피난신청국 전체 개요</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>우리가 할 일은 Streamlit 셸 애플리케이션과 데이터 세트를 이용해 모든 것을 처음부터 만들어보는 것입니다.</p>\n<h1>Streamlit 셸 애플리케이션 다중 페이지 구조 만들기</h1>\n<p>모듈화된 다중 페이지 Streamlit 애플리케이션을 만들기 위해 우리는 먼저 애플리케이션의 기본 구조를 설정할 것입니다.</p>\n<p>이는 각 페이지에 대한 별도의 함수를 만들고 페이지 간 탐색을 관리하는 주요 함수를 만드는 것을 포함합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래는 각 페이지를 셸로 사용하여 3페이지 Streamlit 애플리케이션을 설정하는 코드입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> streamlit <span class=\"hljs-keyword\">as</span> st\n\n# 페이지 <span class=\"hljs-number\">1</span>: 개요\ndef <span class=\"hljs-title function_\">page_overview</span>():\n    st.<span class=\"hljs-title function_\">subheader</span>(<span class=\"hljs-string\">\"연도 범위별 전체 비민 결정\"</span>)\n    # 시각화 코드를 여기에 넣으세요.\n\n# 페이지 <span class=\"hljs-number\">2</span>: 국가별 분석 및 그룹화된 막대 차트\ndef <span class=\"hljs-title function_\">page_country_analysis</span>():\n    st.<span class=\"hljs-title function_\">subheader</span>(<span class=\"hljs-string\">\"국가별 분석\"</span>)\n    # 시각화 코드를 여기에 넣으세요.\n\n# 페이지 <span class=\"hljs-number\">3</span>: 코로플레스 맵\ndef <span class=\"hljs-title function_\">page_choropleth</span>():\n    st.<span class=\"hljs-title function_\">subheader</span>(<span class=\"hljs-string\">\"비민 결정의 세계적 분포\"</span>)\n    # 시각화 코드를 여기에 넣으세요.\n\n# 주요 앱 및 네비게이션\ndef <span class=\"hljs-title function_\">main</span>():\n    st.<span class=\"hljs-title function_\">set_page_config</span>(page_title=<span class=\"hljs-string\">\"비민 결정 대시보드\"</span>, layout=<span class=\"hljs-string\">\"wide\"</span>, initial_sidebar_state=<span class=\"hljs-string\">\"expanded\"</span>)\n    st.<span class=\"hljs-property\">sidebar</span>.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">\"네비게이션\"</span>)\n    menu_options = [<span class=\"hljs-string\">\"전체 비민 결정\"</span>, <span class=\"hljs-string\">\"국가 분석\"</span>, <span class=\"hljs-string\">\"글로벌 매핑\"</span>]\n    menu_choice = st.<span class=\"hljs-property\">sidebar</span>.<span class=\"hljs-title function_\">selectbox</span>(<span class=\"hljs-string\">\"이동\"</span>, menu_options)\n    <span class=\"hljs-keyword\">if</span> menu_choice == <span class=\"hljs-string\">\"전체 비민 결정\"</span>:\n        <span class=\"hljs-title function_\">page_overview</span>()\n    elif menu_choice == <span class=\"hljs-string\">\"국가 분석\"</span>:\n        <span class=\"hljs-title function_\">page_country_analysis</span>()\n    elif menu_choice == <span class=\"hljs-string\">\"글로벌 매핑\"</span>:\n        <span class=\"hljs-title function_\">page_choropleth</span>()\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-title function_\">main</span>()\n</code></pre>\n<h2>코드 설명:</h2>\n<ul>\n<li>Streamlit 라이브러리를 가져옵니다.</li>\n<li>각 페이지를 위한 별도의 함수를 정의합니다: page_overview(), page_country_analysis(), page_choropleth().</li>\n<li>각 함수에는 페이지 목적을 나타내는 subheader가 포함되어 있습니다. 데이터 시각화 코드는 나중에 추가됩니다.</li>\n<li>페이지 구성을 설정하고 네비게이션을 처리하는 main() 함수를 정의합니다.</li>\n<li>st.sidebar.selectbox를 사용하여 세 개의 페이지 사이를 이동하는 사이드바 메뉴를 생성합니다.</li>\n<li>사용자의 선택에 따라 해당 페이지 함수가 호출되어 페이지 내용이 표시됩니다.</li>\n<li>스크립트를 실행할 때 main() 함수가 호출됩니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 쉘은 다중 페이지 Streamlit 애플리케이션의 기본 구조를 설정합니다. 다음 섹션에서는 각 페이지 함수에 데이터 시각화 코드를 추가할 것입니다.</p>\n<p>이 코드를 실행하려면 터미널 프롬프트에 액세스해야 합니다. 저는 PyCharm의 내장 터미널 프롬프트를 사용합니다:</p>\n<p><img src=\"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_1.png\" alt=\"이미지\"></p>\n<p>애플리케이션은 기본 브라우저에서 실행됩니다. 셸 애플리케이션을 처음으로 살펴보겠습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>테이블 태그를 Markdown 형식으로 변경해 주세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그들의 데이터는 여기에서 자유롭게 접근할 수 있습니다.</p>\n<p>다운로드 페이지로 이동한 후에는 선택한 데이터에 대해 더욱 구체적으로 설정할 수 있습니다:\n<img src=\"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_3.png\" alt=\"이미지\"></p>\n<p>UNHCR 다운로드 페이지 - \"원국\"과 \"청국\"을 선택합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 프로젝트에서는 각 난민의 출신 국가와 애쉬럼 국가를 가져와 봅시다.</p>\n<p>이 데이터를 통해 우리는 두 방향으로의 이동을 보여주는 난민 데이터를 가지고 있습니다:</p>\n<ul>\n<li>출신 국가에서 — 애움 신청자들이 이동하는 곳</li>\n<li>애움 국가에서 — 애움 신청자들이 오는 곳</li>\n</ul>\n<p>데이터셋을 다운로드한 후에, 우리는 어떤 데이터를 다루고 있는지 확인하기 위해 스프레드시트 형식으로 열어볼 수 있습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_4.png\" alt=\"Dashboard Screenshot\"></p>\n<p>This project focuses on the following data fields:</p>\n<ul>\n<li><strong>Country of origin:</strong> The country from which a person seeking asylum is coming</li>\n<li><strong>Country of asylum:</strong> The country where a person is actually seeking asylum</li>\n<li><strong>Recognized decisions:</strong> The total number of asylum seekers accepted per country (in numeric format)</li>\n<li><strong>Rejected decisions:</strong> The number of asylum seekers denied asylum</li>\n</ul>\n<p>Both the country of origin and asylum have a 3-letter ISO code, which serves as a reliable unique identifier.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 애플리케이션의 각 페이지를 함께 만들어 봅시다.</p>\n<h1>페이지 1: 망명을 받는 상위 10개 국가 (막대/선버스트 차트)</h1>\n<p>첫 번째 페이지로, 우리는 망명을 받는 상위 10개 국가를 보여주는 막대 차트를 만들 것입니다. 그리고 재미있게도, 가끔 해석하기 어려울 수도 있는 아름다운 선버스트 차트도 만들어 볼 거에요.</p>\n<p>우리는 글로벌 망명 결정을 연도 범위별로 보여주는 데이터 시각화 코드를 page_overview() 함수에 추가할 거에요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>데이터 세트를 로드하고 선택한 연도 범위에 따라 데이터를 필터링한 다음 두 가지 시각화를 만들어야 합니다: 총 난민 심사 결과 상위 10개 국가를 보여주는 수평 막대 차트와 출신 국가별로 나눈 Sunburst 차트입니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> plotly.express <span class=\"hljs-keyword\">as</span> px\n\n<span class=\"hljs-comment\"># 데이터 세트 로드</span>\ndata = pd.read_csv(<span class=\"hljs-string\">'asylum-decisions.csv'</span>)\n\n<span class=\"hljs-comment\"># 난민 심사 결과 수를 얻는 도우미 함수</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_asylum_counts</span>(<span class=\"hljs-params\">df, group_by_column</span>):\n    <span class=\"hljs-keyword\">return</span> df.groupby([group_by_column])[\n        [<span class=\"hljs-string\">'Recognized decisions'</span>, <span class=\"hljs-string\">'Rejected decisions'</span>, <span class=\"hljs-string\">'Total decisions'</span>]].<span class=\"hljs-built_in\">sum</span>().reset_index()\n</code></pre>\n<ul>\n<li>\n<p>데이터 로드:</p>\n</li>\n<li>\n<p>데이터 세트는 pd.read_csv()를 사용하여 로드되어 data 변수에 저장됩니다.</p>\n</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ol start=\"2\">\n<li>도우미 함수:</li>\n</ol>\n<ul>\n<li>get_asylum_counts(df, group_by_column): 이 함수는 데이터를 지정된 열로 그룹화하고 인정된, 거부된 및 총 결정의 합계를 계산합니다.</li>\n</ul>\n<p>우리는 데이터에 액세스하기 위해 초기 셸 애플리케이션 상단에 이 코드를 추가해야 합니다.</p>\n<p>데이터 시각화가 포함된 page_overview() 함수의 전체 코드는 다음과 같습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># 페이지 <span class=\"hljs-number\">1</span>: 개요\ndef <span class=\"hljs-title function_\">page_overview</span>():\n    st.<span class=\"hljs-title function_\">subheader</span>(<span class=\"hljs-string\">\"연도 범위별 전체 추방 판정 (범위 선택)\"</span>)\n\n    year_filter = st.<span class=\"hljs-title function_\">slider</span>(<span class=\"hljs-string\">\"연도 범위\"</span>, <span class=\"hljs-title function_\">int</span>(data[<span class=\"hljs-string\">'Year'</span>].<span class=\"hljs-title function_\">min</span>()), <span class=\"hljs-title function_\">int</span>(data[<span class=\"hljs-string\">'Year'</span>].<span class=\"hljs-title function_\">max</span>()),\n                            (<span class=\"hljs-title function_\">int</span>(data[<span class=\"hljs-string\">'Year'</span>].<span class=\"hljs-title function_\">min</span>()), <span class=\"hljs-title function_\">int</span>(data[<span class=\"hljs-string\">'Year'</span>].<span class=\"hljs-title function_\">max</span>())))\n    filtered_data = data[(data[<span class=\"hljs-string\">'Year'</span>] >= year_filter[<span class=\"hljs-number\">0</span>]) &#x26; (data[<span class=\"hljs-string\">'Year'</span>] &#x3C;= year_filter[<span class=\"hljs-number\">1</span>])]\n    asylum_counts = <span class=\"hljs-title function_\">get_asylum_counts</span>(filtered_data, <span class=\"hljs-string\">'Country of asylum'</span>)\n    top_countries = asylum_counts.<span class=\"hljs-title function_\">sort_values</span>(by=<span class=\"hljs-string\">'Total decisions'</span>, ascending=<span class=\"hljs-title class_\">False</span>).<span class=\"hljs-title function_\">head</span>(<span class=\"hljs-number\">10</span>)\n    fig_bar = px.<span class=\"hljs-title function_\">bar</span>(top_countries, x=<span class=\"hljs-string\">'Total decisions'</span>, y=<span class=\"hljs-string\">'Country of asylum'</span>, orientation=<span class=\"hljs-string\">'h'</span>,\n                     title=<span class=\"hljs-string\">\"총 추방 판정 상위 10개 국가\"</span>,\n                     color=<span class=\"hljs-string\">'Total decisions'</span>, color_continuous_scale=px.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-property\">sequential</span>.<span class=\"hljs-property\">YlOrRd</span>)\n    fig_bar.<span class=\"hljs-title function_\">update_layout</span>(showlegend=<span class=\"hljs-title class_\">False</span>, height=<span class=\"hljs-number\">400</span>, yaxis={<span class=\"hljs-string\">'categoryorder'</span>: <span class=\"hljs-string\">'total ascending'</span>})\n    fig_bar.<span class=\"hljs-title function_\">update_coloraxes</span>(showscale=<span class=\"hljs-title class_\">False</span>)  # 색상 스케일 제거\n    st.<span class=\"hljs-title function_\">plotly_chart</span>(fig_bar)\n    top_countries_origins = filtered_data[filtered_data[<span class=\"hljs-string\">'Country of asylum'</span>].<span class=\"hljs-title function_\">isin</span>(top_countries[<span class=\"hljs-string\">'Country of asylum'</span>])]\n    fig_sunburst = px.<span class=\"hljs-title function_\">sunburst</span>(top_countries_origins, path=[<span class=\"hljs-string\">'Country of asylum'</span>, <span class=\"hljs-string\">'Country of origin'</span>], values=<span class=\"hljs-string\">'Total decisions'</span>,\n                               title=<span class=\"hljs-string\">\"원산지별 상위 10개 국가의 출신국 분포\"</span>,\n                               color=<span class=\"hljs-string\">'Total decisions'</span>, color_continuous_scale=px.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-property\">qualitative</span>.<span class=\"hljs-property\">Bold</span>)\n    fig_sunburst.<span class=\"hljs-title function_\">update_layout</span>(height=<span class=\"hljs-number\">600</span>, showlegend=<span class=\"hljs-title class_\">False</span>)\n    fig_sunburst.<span class=\"hljs-title function_\">update_coloraxes</span>(showscale=<span class=\"hljs-title class_\">False</span>)  # 색상 스케일 제거\n    st.<span class=\"hljs-title function_\">plotly_chart</span>(fig_sunburst)\n</code></pre>\n<p>위 코드에서 설명한 내용:</p>\n<ul>\n<li>슬라이더(st.slider)를 사용하여 데이터 필터링을 위한 연도 범위를 선택합니다.</li>\n<li>선택한 연도 범위를 기반으로 데이터가 필터링되며, 추방 판정 횟수가 계산됩니다.</li>\n<li>데이터를 정렬하여 총 추방 판정 상위 10개 국가를 결정합니다.</li>\n<li>수평 막대 차트(px.bar)를 사용하여 총 추방 판정 상위 10개 국가를 시각화합니다. 범례와 색상 스케일은 showlegend=False 및 update_coloraxes(showscale=False)를 사용하여 제거됩니다.</li>\n<li>상위 10개 국가의 출신국을 나타내기 위해 태양 편포 차트(px.sunburst)가 생성됩니다. 범례와 색상 스케일 역시 showlegend=False 및 update_coloraxes(showscale=False)를 사용하여 제거됩니다.</li>\n</ul>\n<p>위 코드를 사용하여 진행 상황을 테스트하고, 성장 중인 애플리케이션을 저장하고 실행할 수 있습니다. 시각적 결과는 다음과 같습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_5.png\" alt=\"이미지\"></p>\n<p>슬라이더를 조정하여 좀 더 집중된 연도 범위를 설정할 수 있습니다. 또한 Plotly sunburst 차트로는 실제 국가 (내부 원에서)를 클릭하여 더 상세한 숫자 세트를 생성할 수 있습니다:</p>\n<p><img src=\"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_6.png\" alt=\"이미지\"></p>\n<p>이 보기에서 각 국가 위로 마우스를 올리면 실제 숫자를 볼 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>좋아요! 이제 우리 페이지 2에 국가별 데이터를 몇 가지 추가해보겠습니다.</p>\n<h1>페이지 2: 국가별 데이터 시각화</h1>\n<p>이제 페이지_country_analysis() 함수에 데이터 시각화 코드를 추가하여 선택한 국가의 난민 심사 결정을 표시할 수 있습니다.</p>\n<p>이 과정에는 두 가지 시각화가 포함됩니다: 연도별 인정된 및 거부된 난민 심사 결정 수를 보여주는 그룹화된 막대형 차트와 선택한 국가의 총 인정된, 거부된 및 총 심사 결정을 보여주는 수평 막대형 차트:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># 페이지 <span class=\"hljs-number\">2</span>: 국가별 분석과 그룹화된 막대 차트\ndef <span class=\"hljs-title function_\">page_country_analysis</span>():\n    st.<span class=\"hljs-title function_\">subheader</span>(<span class=\"hljs-string\">\"국가별 분석\"</span>)\n\n    country = st.<span class=\"hljs-title function_\">selectbox</span>(<span class=\"hljs-string\">\"국가 선택\"</span>, data[<span class=\"hljs-string\">'Country of asylum'</span>].<span class=\"hljs-title function_\">unique</span>())\n    country_data = data[data[<span class=\"hljs-string\">'Country of asylum'</span>] == country]\n    country_data_long = pd.<span class=\"hljs-title function_\">melt</span>(country_data, id_vars=[<span class=\"hljs-string\">'Year'</span>],\n                                value_vars=[<span class=\"hljs-string\">'Recognized decisions'</span>, <span class=\"hljs-string\">'Rejected decisions'</span>],\n                                var_name=<span class=\"hljs-string\">'결정 유형'</span>, value_name=<span class=\"hljs-string\">'수량'</span>)\n    fig_grouped_bar = px.<span class=\"hljs-title function_\">bar</span>(country_data_long, x=<span class=\"hljs-string\">'Year'</span>, y=<span class=\"hljs-string\">'수량'</span>, color=<span class=\"hljs-string\">'결정 유형'</span>, barmode=<span class=\"hljs-string\">'group'</span>,\n                             title=f<span class=\"hljs-string\">\"{country}의 연도별 입국 결정\"</span>,\n                             labels={<span class=\"hljs-string\">'수량'</span>: <span class=\"hljs-string\">'결정 수'</span>},\n                             color_discrete_sequence=px.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-property\">sequential</span>.<span class=\"hljs-property\">YlOrRd</span>)\n    fig_grouped_bar.<span class=\"hljs-title function_\">update_layout</span>(height=<span class=\"hljs-number\">400</span>, showlegend=<span class=\"hljs-title class_\">True</span>)\n    st.<span class=\"hljs-title function_\">plotly_chart</span>(fig_grouped_bar)\n    total_decisions = country_data[\n        [<span class=\"hljs-string\">'Recognized decisions'</span>, <span class=\"hljs-string\">'Rejected decisions'</span>, <span class=\"hljs-string\">'Total decisions'</span>]].<span class=\"hljs-title function_\">sum</span>().<span class=\"hljs-title function_\">reset_index</span>()\n    total_decisions.<span class=\"hljs-property\">columns</span> = [<span class=\"hljs-string\">'결정 유형'</span>, <span class=\"hljs-string\">'수량'</span>]\n    fig_horizontal_bar = px.<span class=\"hljs-title function_\">bar</span>(total_decisions, x=<span class=\"hljs-string\">'수량'</span>, y=<span class=\"hljs-string\">'결정 유형'</span>, orientation=<span class=\"hljs-string\">'h'</span>,\n                                title=f<span class=\"hljs-string\">\"{country}의 총 입국 결정\"</span>,\n                                color=<span class=\"hljs-string\">'결정 유형'</span>, color_discrete_sequence=px.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-property\">sequential</span>.<span class=\"hljs-property\">YlOrRd</span>)\n    fig_horizontal_bar.<span class=\"hljs-title function_\">update_layout</span>(height=<span class=\"hljs-number\">300</span>, showlegend=<span class=\"hljs-title class_\">False</span>)\n    st.<span class=\"hljs-title function_\">plotly_chart</span>(fig_horizontal_bar)\n</code></pre>\n<p>코드 설명:</p>\n<ul>\n<li>드롭다운 (st.selectbox)을 사용하여 데이터 세트의 국가 목록에서 국가를 선택합니다.</li>\n<li>선택한 국가를 기반으로 데이터가 필터링됩니다.</li>\n<li>pd.melt()를 사용하여 데이터를 wide에서 long 형식으로 변환하여 그룹화된 막대 차트를 생성합니다.</li>\n<li>선택한 국가에 대해 연도별로 인정된 및 거부된 입국 결정의 수를 시각화하는 그룹화된 막대 차트 (px.bar)가 생성됩니다. 범례는 showlegend=True를 사용하여 표시됩니다.</li>\n<li>선택한 국가의 인정된, 거부된 및 총 결정 수를 계산하고 수평 막대 차트 (px.bar)를 사용하여 표시합니다. 범례는 showlegend=False를 사용하여 제거됩니다.</li>\n</ul>\n<p>이 코드를 간단히 복사하여 Page 2의 셸 애플리케이션에 붙여넣고 명령 프롬프트에서 실행할 수 있습니다. 결과:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_7.png\">\n<p>그럼, 이제 세 분의 길을 거쳐 왔어요. 마지막 페이지로 아름다운 전 세계 Choropleth 지도를 만들어 볼게요.</p>\n<h1>페이지 3: 전 세계 Choropleth 지도</h1>\n<p>이제 선택한 연도에 대한 전 세계 망명 결정의 분포를 표시하기 위해 데이터 시각화 코드를 page_choropleth() 함수에 추가해 보겠습니다. 이것은 각 나라별로 망명 결정의 총합을 시각화하는 choropleth 지도를 만드는 과정을 포함합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Page</span> <span class=\"hljs-number\">3</span>: <span class=\"hljs-title class_\">Choropleth</span> <span class=\"hljs-title class_\">Mapping</span>\ndef <span class=\"hljs-title function_\">page_choropleth</span>():\n    st.<span class=\"hljs-title function_\">subheader</span>(<span class=\"hljs-string\">\"전체 지도 매핑\"</span>)\n\n    year = st.<span class=\"hljs-title function_\">selectbox</span>(<span class=\"hljs-string\">\"연도 선택\"</span>, <span class=\"hljs-title function_\">sorted</span>(data[<span class=\"hljs-string\">'Year'</span>].<span class=\"hljs-title function_\">unique</span>()), key=<span class=\"hljs-string\">'year_select'</span>)\n    year_data = data[data[<span class=\"hljs-string\">'Year'</span>] == year]\n    asylum_counts = <span class=\"hljs-title function_\">get_asylum_counts</span>(year_data, <span class=\"hljs-string\">'Country of asylum'</span>)\n    st.<span class=\"hljs-title function_\">subheader</span>(f<span class=\"hljs-string\">\"{year}년 전체 난민 심사 분포\"</span>)\n    fig = px.<span class=\"hljs-title function_\">choropleth</span>(asylum_counts, locations=<span class=\"hljs-string\">\"Country of asylum\"</span>, locationmode=<span class=\"hljs-string\">'country names'</span>,\n                        color=<span class=\"hljs-string\">\"Total decisions\"</span>,\n                        hover_name=<span class=\"hljs-string\">\"Country of asylum\"</span>, color_continuous_scale=px.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-property\">sequential</span>.<span class=\"hljs-property\">YlOrBr</span>)\n    fig.<span class=\"hljs-title function_\">update_layout</span>(height=<span class=\"hljs-number\">500</span>)\n    st.<span class=\"hljs-title function_\">plotly_chart</span>(fig)\n    st.<span class=\"hljs-title function_\">subheader</span>(f<span class=\"hljs-string\">\"{year}년 각 국가별 난민 심사결과\"</span>)\n    sorted_asylum_counts = asylum_counts.<span class=\"hljs-title function_\">sort_values</span>(by=<span class=\"hljs-string\">'Total decisions'</span>, ascending=<span class=\"hljs-title class_\">False</span>)\n    st.<span class=\"hljs-title function_\">dataframe</span>(sorted_asylum_counts)\n</code></pre>\n<p>위 코드를 설명하자면:</p>\n<ul>\n<li>드롭다운 (st.selectbox)을 사용하여 데이터 세트에 있는 연도 목록에서 연도를 선택합니다.</li>\n<li>선택한 연도를 기반으로 데이터를 필터링하고 난민 결정 횟수를 계산합니다.</li>\n<li>선택한 연도에 대한 각 국가의 총 난민 결정을 시각화하기 위해 코로플레스 맵 (px.choropleth)이 생성됩니다. 색상 스케일은 color_continuous_scale=px.colors.sequential.YlOrBr를 사용하여 설정합니다.</li>\n<li>난민 결정을 국가별로 내림차순으로 정렬된 데이터 테이블 (st.dataframe)이 표시됩니다.</li>\n</ul>\n<p>앞 페이지와 마찬가지로 이 코드를 페이지_choropleth() 함수에 복사하여 저장하고 실행하면 멋진 결과가 나타납니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/TIL/assets/img/2024-07-13-StunningStreamlitDashboardsSimpleModularCodingForSmoothResults_8.png\" alt=\"이미지\"></p>\n<p>정말 멋지네요.</p>\n<p>네, 멀티페이지 스트림릿 애플리케이션을 만드는 것이 그렇게 간단합니다.</p>\n<p>만약 빌드에 문제가 있다면 코드(그리고 데이터셋)는 GitHub에서 찾을 수 있습니다. <a href=\"%EB%A7%81%ED%81%AC\">여기</a></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>요약하자면...</h1>\n<p>Streamlit은 Plotly와 같은 표준 Python 데이터 시각화 라이브러리를 사용하여 빠르고 쉽게 데이터 시각화를 생성할 수 있는 훌륭한 애플리케이션입니다.</p>\n<p>이 프로젝트는 다양한 범위의 연도에 걸쳐 글로벌 UNHCR 망명 데이터를 나타내는 3페이지의 Streamlit 애플리케이션을 보여줍니다.</p>\n<p>우리는 사용자에게 이 데이터에 대해 다양한 이야기와 관점을 제공하기 위해 6가지 다른 데이터 시각화를 만들었습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다중 페이지 애플리케이션 셸을 먼저 만들면 각 차트와 페이지를 쉽게 추가, 제거 또는 수정할 수 있습니다. 예를 들어, 네 번째 페이지를 추가하고 싶다면 \"Page 4\" 함수를 만들고 해당 페이지에 시각화를 추가한 다음 페이지 논리에 추가 메뉴 항목을 추가하면 됩니다(첫 번째 단계에서 만듦).</p>\n<p>이 내용이 유익하고 도움이 되었기를 바랍니다.</p>\n<p>GitHub 저장소: <a href=\"HERE\">여기</a></p>\n<p>이 유형의 내용이 마음에 든다면 작가로서 저를 지원하고 싶다면 제 Substack를 구독해 주세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Substack에서 매주 두 번 뉴스레터와 다른 플랫폼에서는 찾을 수 없는 기사를 게시하고 있어요.</p>\n</body>\n</html>\n"},"__N_SSG":true}