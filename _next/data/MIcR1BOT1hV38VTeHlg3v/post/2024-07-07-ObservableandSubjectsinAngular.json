{"pageProps":{"post":{"title":"Angular에서 Observable과 Subject 사용법 차이점 및 활용 방법","description":"","date":"2024-07-07 19:19","slug":"2024-07-07-ObservableandSubjectsinAngular","content":"\n\n<img src=\"/assets/img/2024-07-07-ObservableandSubjectsinAngular_0.png\" />\n\n안녕하세요! 이 글에서는 옵저버블(observable)과 서브젝트(subject)의 기본에 대해 알아볼 거에요. 또한 그들 간의 차이를 실제 예시를 통해 설명하고 다양한 종류의 서브젝트에 대해 이야기할 거에요.\n\n# 안내\n\n- Angular가 무엇인가요?\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Angular의 Observable\n\n- Angular의 Subject\n\n- Observable과 Subject의 실시간 사용 사례와 차이점\n\n- 예제를 통한 Angular의 Subject 종류\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Prerequisites\n\n- TypeScript에 대한 기본적인 이해\n- VS Code\n- Angular CLI\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- NodeJS\n\n## Angular이란 무엇인가요?\n\nAngular은 웹 애플리케이션을 구축하기 위한 인기있는 오픈 소스 JavaScript 프레임워크입니다. Google에서 개발되었으며 현재는 Google의 Angular 팀에 의해 유지보수되고 있습니다. Angular를 사용하면 개발자들은 동적인 단일 페이지 애플리케이션(SPA)을 만들 수 있으며 복잡한 웹 애플리케이션을 구축하기 위한 구조화된 접근 방식을 제공합니다.\n\n## Angular에서 Observable\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Angular에서 Observables는 JavaScript의 Reactive Extensions 라이브러리(RxJS)의 일부입니다.\n\n- Observables은 애플리케이션의 각 부분 간에 메시지를 전달하는 데 지원을 제공합니다.\n\n- Observables은 비동기 작업 및 데이터 스트림을 처리하는 데 널리 사용되는 강력한 기능입니다.\n\n- Observables은 새로운 데이터나 이벤트가 발생할 때 구독하고 알림을 받을 수 있는 방법을 제공하여 실시간으로 변경에 반응할 수 있도록합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Angular에서 Subject\n\n- RxJS Subject은 여러 Observers에게 값을 멀티캐스트 할 수 있는 특별한 유형의 Observable입니다. 일반 Observables은 유니캐스트입니다(각 구독한 Observer가 Observable의 독립적 실행을 소유함), 그에 반해 Subjects는 멀티캐스트입니다.\n\n- Subject는 Observable과 비슷하지만 많은 Observers에게 멀티캐스트 할 수 있습니다. Subjects는 이벤트 발생자와 같습니다: 많은 청취자 목록을 유지합니다.\n\n- 이는 Angular 프로젝트에 기본으로 포함된 JavaScript 반응 확장 라이브러리(RxJS)의 일부입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Observable과 Subject의 차이 및 실시간 사용 사례\n\nObservable과 Subject는 모두 JavaScript의 Reactive Extensions (RxJS) 라이브러리의 일부이며 Angular에서 비동기 데이터 스트림 및 이벤트 처리를 관리하는 데 사용됩니다. 그러나 이들 간에 몇 가지 주요 차이점이 있습니다.\n\n![Observable vs Subject](/assets/img/2024-07-07-ObservableandSubjectsinAngular_1.png)\n\n# Angular에서의 다양한 Subject 유형 및 예제\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRxJS 라이브러리에서 사용할 수 있는 주제 유형은 다음과 같습니다. 다양한 시나리오에 사용할 수 있습니다:\n\n## 1. Subject\n\n- Subject는 RxJS에서 주제의 기본 구현입니다.\n\n- next() 메서드를 사용하여 새 값이 발행될 때 관찰자 목록을 유지하고 모든 관찰자에게 알림을 보내는 멀티캐스트 가능한 옵저버입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 초기 값을 갖고 있지 않아서 구독자들은 구독한 후에 발행된 값만 받습니다.\n- 이는 추가 기능 없이 간단한 다중 발행체를 필요로 할 때 좋은 옵션입니다.\n\n```js\n//------------------Observables are unicast-----------------\n    //observable\n    let observable = new Observable<number>(ele =>\n      ele.next(Math.random()))\n\n    //first subscriber\n    observable.subscribe(result => {\n      this.first_subscriber_observable = result;\n      console.log(result)\n    })\n\n    //second subscriber\n    observable.subscribe(result => {\n      this.second_subscriber_observable = result;\n      console.log(result)\n    })\n\n    //third subscriber\n    observable.subscribe(result => {\n      this.thrid_subscriber_observable = result;\n      console.log(result)\n    })\n    //--------------------------------------------------------\n\n    //------------------Subjects are multicast-----------------\n    //subject\n    let subject = new Subject<number>()\n\n    //first subscriber\n    subject.subscribe(result => {\n      this.first_subscriber_subject = result;\n      console.log(result)\n    })\n\n    //second subscriber\n    subject.subscribe(result => {\n      this.second_subscriber_subject = result;\n      console.log(result)\n    })\n\n    //third subscriber\n    subject.subscribe(result => {\n      this.third_subscriber_subject = result;\n      console.log(result)\n    })\n\n    subject.next(Math.random())\n    //--------------------------------------------------------\n```\n\n![Illustration](/assets/img/2024-07-07-ObservableandSubjectsinAngular_2.png)\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 2. BehaviorSubject\n\n- BehaviorSubject는 RxJS의 다른 유형의 Subject입니다.\n  \n- 초기값을 가지고 있으며 구독자가 구독하는 즉시 초기값을 즉시 발행하며, 아직 next() 메서드를 사용하여 값이 발행되지 않은 경우에도 발행합니다.\n  \n- 초기값을 발행한 후에는 일반적인 Subject처럼 작동하여 next()를 사용하여 새 값이 발행될 때 구독자에게 알립니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n· 새 구독자에게 마지막으로 알려진 값, 예를 들어 애플리케이션의 현재 상태 또는 API에서 검색한 최신 데이터를 제공하고 싶을 때 유용합니다.\n\n```js\n//----------Behavior Subject has default or last emitted value---------------\nvar behaviorSubject = new BehaviorSubject<number>(123)\n\nbehaviorSubject.subscribe(ele => {\n  this.first_subscriber_behaviorSubject = ele\n  console.log(`first subscriber ${ele}`)\n})\n\nbehaviorSubject.next(456)\n\nbehaviorSubject.subscribe(ele => {\n  this.second_subscriber_behaviorSubject = ele\n  console.log(`second subscriber ${ele}`)\n})\n\n//--------------------------------------------------------------------------\n\n```\n\n![Observableand SubjectsinAngular](/assets/img/2024-07-07-ObservableandSubjectsinAngular_3.png)\n\n## 3. ReplaySubject\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- ReplaySubject은 특정 수의 값을 버퍼링하고 새로운 구독자에 대해 다시 재생할 수 있는 subject입니다.\n\n- ReplaySubject를 생성할 때 버퍼 크기를 지정할 수 있으며, 이는 새로운 구독자에 대해 다시 재생할 이전 값의 수를 결정합니다.\n\n- 이는 새로운 구독자에게 값의 이력을 제공하거나 나중에 값을 캐시해야 할 때 유용합니다.\n\n```js\n //--------------- Replay subject buffers old values not default one -----------\n\n    const replaySuject = new ReplaySubject(2) // 만약 마지막 2개의 버퍼링된 값을 보여주고 싶다면, 그렇지 않으면 모든 값을 보여줌\n\n    replaySuject.next(111)\n    replaySuject.next(222)\n    replaySuject.next(333)\n\n    replaySuject.subscribe(e => {\n      console.log(`첫번째 구독자 ${e}`)\n      this.first_subscriber_replaySubject.push(e);\n    })\n\n    // 새로운 값은 기존 구독자에게 표시됩니다.\n    replaySuject.next(444)\n\n    replaySuject.subscribe(e => {\n      console.log(`두번째 구독자 ${e}`)\n      this.second_subscriber_replaySubject.push(e);\n    })\n\n    replaySuject.next(555)\n    //---------------------------------------------------------------------------\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![image](/assets/img/2024-07-07-ObservableandSubjectsinAngular_4.png)\n\n## 4. AsyncSubject\n\n- AsyncSubject은 완료될 때 마지막 값을 만 방출하는 subject입니다.\n   \n- subject의 complete() 메서드가 호출될 때까지 어떤 값도 방출하지 않습니다. 완료되면 마지막 값을 (있는 경우) 구독자에게 방출합니다.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n· 최종 값이 발행되기 전에 작업이 완료될 때 유용합니다. 예를 들어, HTTP 요청이 완료될 때까지 기다렸다가 응답을 단일 값으로 발행할 때 사용합니다.\n\n```js\n //---------------Async subject sends the latest value to subscribers when it's completed-----------\n    const asyncSubject = new AsyncSubject<number>();\n\n    asyncSubject.subscribe(e => \n      {\n        console.log(`첫 번째 구독자: ${e}`)\n        this.first_subscriber_asyncSubject=e;\n    });\n\n    asyncSubject.next(111);\n    asyncSubject.next(222);\n    asyncSubject.next(333);\n    asyncSubject.next(444);\n\n    asyncSubject.subscribe(e => {\n      console.log(`두 번째 구독자: ${e}`)\n      this.second_subscriber_asyncSubject=e;\n    });\n\n    asyncSubject.next(555);\n    asyncSubject.complete();\n\n    //--------------------------------------------------------------------------\n```\n\n![이미지](/assets/img/2024-07-07-ObservableandSubjectsinAngular_5.png)\n\n# GitHub URL\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nhttps://github.com/Jaydeep-007/angular-subject-and-observable\n\n# 결론\n\n이 글에서는 주제의 기본 사항과 옵저버블과 주제의 차이에 대해 서로 다른 유형과 예제를 다뤘습니다.\n\n코딩 즐기세요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 친근한 한국어 번역\n\n우리 커뮤니티에 함께해줘서 감사합니다! 떠나시기 전에:\n\n- 작가를 클랩하고 팔로우해주세요! 👏\n- PlainEnglish.io에서 더 많은 콘텐츠를 찾을 수 있어요! 🚀\n- 무료 주간 뉴스레터를 구독해주세요. 🗞️\n- 트위터, 링크드인, 유튜브, 디스코드에서 팔로우해주세요.","ogImage":{"url":"/assets/img/2024-07-07-ObservableandSubjectsinAngular_0.png"},"coverImage":"/assets/img/2024-07-07-ObservableandSubjectsinAngular_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-07-07-ObservableandSubjectsinAngular_0.png\">\n<p>안녕하세요! 이 글에서는 옵저버블(observable)과 서브젝트(subject)의 기본에 대해 알아볼 거에요. 또한 그들 간의 차이를 실제 예시를 통해 설명하고 다양한 종류의 서브젝트에 대해 이야기할 거에요.</p>\n<h1>안내</h1>\n<ul>\n<li>Angular가 무엇인가요?</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>\n<p>Angular의 Observable</p>\n</li>\n<li>\n<p>Angular의 Subject</p>\n</li>\n<li>\n<p>Observable과 Subject의 실시간 사용 사례와 차이점</p>\n</li>\n<li>\n<p>예제를 통한 Angular의 Subject 종류</p>\n</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Prerequisites</h1>\n<ul>\n<li>TypeScript에 대한 기본적인 이해</li>\n<li>VS Code</li>\n<li>Angular CLI</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>NodeJS</li>\n</ul>\n<h2>Angular이란 무엇인가요?</h2>\n<p>Angular은 웹 애플리케이션을 구축하기 위한 인기있는 오픈 소스 JavaScript 프레임워크입니다. Google에서 개발되었으며 현재는 Google의 Angular 팀에 의해 유지보수되고 있습니다. Angular를 사용하면 개발자들은 동적인 단일 페이지 애플리케이션(SPA)을 만들 수 있으며 복잡한 웹 애플리케이션을 구축하기 위한 구조화된 접근 방식을 제공합니다.</p>\n<h2>Angular에서 Observable</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>\n<p>Angular에서 Observables는 JavaScript의 Reactive Extensions 라이브러리(RxJS)의 일부입니다.</p>\n</li>\n<li>\n<p>Observables은 애플리케이션의 각 부분 간에 메시지를 전달하는 데 지원을 제공합니다.</p>\n</li>\n<li>\n<p>Observables은 비동기 작업 및 데이터 스트림을 처리하는 데 널리 사용되는 강력한 기능입니다.</p>\n</li>\n<li>\n<p>Observables은 새로운 데이터나 이벤트가 발생할 때 구독하고 알림을 받을 수 있는 방법을 제공하여 실시간으로 변경에 반응할 수 있도록합니다.</p>\n</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Angular에서 Subject</h1>\n<ul>\n<li>\n<p>RxJS Subject은 여러 Observers에게 값을 멀티캐스트 할 수 있는 특별한 유형의 Observable입니다. 일반 Observables은 유니캐스트입니다(각 구독한 Observer가 Observable의 독립적 실행을 소유함), 그에 반해 Subjects는 멀티캐스트입니다.</p>\n</li>\n<li>\n<p>Subject는 Observable과 비슷하지만 많은 Observers에게 멀티캐스트 할 수 있습니다. Subjects는 이벤트 발생자와 같습니다: 많은 청취자 목록을 유지합니다.</p>\n</li>\n<li>\n<p>이는 Angular 프로젝트에 기본으로 포함된 JavaScript 반응 확장 라이브러리(RxJS)의 일부입니다.</p>\n</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Observable과 Subject의 차이 및 실시간 사용 사례</h1>\n<p>Observable과 Subject는 모두 JavaScript의 Reactive Extensions (RxJS) 라이브러리의 일부이며 Angular에서 비동기 데이터 스트림 및 이벤트 처리를 관리하는 데 사용됩니다. 그러나 이들 간에 몇 가지 주요 차이점이 있습니다.</p>\n<p><img src=\"/assets/img/2024-07-07-ObservableandSubjectsinAngular_1.png\" alt=\"Observable vs Subject\"></p>\n<h1>Angular에서의 다양한 Subject 유형 및 예제</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>RxJS 라이브러리에서 사용할 수 있는 주제 유형은 다음과 같습니다. 다양한 시나리오에 사용할 수 있습니다:</p>\n<h2>1. Subject</h2>\n<ul>\n<li>\n<p>Subject는 RxJS에서 주제의 기본 구현입니다.</p>\n</li>\n<li>\n<p>next() 메서드를 사용하여 새 값이 발행될 때 관찰자 목록을 유지하고 모든 관찰자에게 알림을 보내는 멀티캐스트 가능한 옵저버입니다.</p>\n</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>초기 값을 갖고 있지 않아서 구독자들은 구독한 후에 발행된 값만 받습니다.</li>\n<li>이는 추가 기능 없이 간단한 다중 발행체를 필요로 할 때 좋은 옵션입니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//------------------Observables are unicast-----------------</span>\n    <span class=\"hljs-comment\">//observable</span>\n    <span class=\"hljs-keyword\">let</span> observable = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Observable</span>&#x3C;number>(<span class=\"hljs-function\"><span class=\"hljs-params\">ele</span> =></span>\n      ele.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>()))\n\n    <span class=\"hljs-comment\">//first subscriber</span>\n    observable.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">first_subscriber_observable</span> = result;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result)\n    })\n\n    <span class=\"hljs-comment\">//second subscriber</span>\n    observable.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">second_subscriber_observable</span> = result;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result)\n    })\n\n    <span class=\"hljs-comment\">//third subscriber</span>\n    observable.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">thrid_subscriber_observable</span> = result;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result)\n    })\n    <span class=\"hljs-comment\">//--------------------------------------------------------</span>\n\n    <span class=\"hljs-comment\">//------------------Subjects are multicast-----------------</span>\n    <span class=\"hljs-comment\">//subject</span>\n    <span class=\"hljs-keyword\">let</span> subject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Subject</span>&#x3C;number>()\n\n    <span class=\"hljs-comment\">//first subscriber</span>\n    subject.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">first_subscriber_subject</span> = result;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result)\n    })\n\n    <span class=\"hljs-comment\">//second subscriber</span>\n    subject.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">second_subscriber_subject</span> = result;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result)\n    })\n\n    <span class=\"hljs-comment\">//third subscriber</span>\n    subject.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">third_subscriber_subject</span> = result;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result)\n    })\n\n    subject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>())\n    <span class=\"hljs-comment\">//--------------------------------------------------------</span>\n</code></pre>\n<p><img src=\"/assets/img/2024-07-07-ObservableandSubjectsinAngular_2.png\" alt=\"Illustration\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>2. BehaviorSubject</h2>\n<ul>\n<li>\n<p>BehaviorSubject는 RxJS의 다른 유형의 Subject입니다.</p>\n</li>\n<li>\n<p>초기값을 가지고 있으며 구독자가 구독하는 즉시 초기값을 즉시 발행하며, 아직 next() 메서드를 사용하여 값이 발행되지 않은 경우에도 발행합니다.</p>\n</li>\n<li>\n<p>초기값을 발행한 후에는 일반적인 Subject처럼 작동하여 next()를 사용하여 새 값이 발행될 때 구독자에게 알립니다.</p>\n</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>· 새 구독자에게 마지막으로 알려진 값, 예를 들어 애플리케이션의 현재 상태 또는 API에서 검색한 최신 데이터를 제공하고 싶을 때 유용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//----------Behavior Subject has default or last emitted value---------------</span>\n<span class=\"hljs-keyword\">var</span> behaviorSubject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BehaviorSubject</span>&#x3C;number>(<span class=\"hljs-number\">123</span>)\n\nbehaviorSubject.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">ele</span> =></span> {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">first_subscriber_behaviorSubject</span> = ele\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`first subscriber <span class=\"hljs-subst\">${ele}</span>`</span>)\n})\n\nbehaviorSubject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">456</span>)\n\nbehaviorSubject.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">ele</span> =></span> {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">second_subscriber_behaviorSubject</span> = ele\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`second subscriber <span class=\"hljs-subst\">${ele}</span>`</span>)\n})\n\n<span class=\"hljs-comment\">//--------------------------------------------------------------------------</span>\n\n</code></pre>\n<p><img src=\"/assets/img/2024-07-07-ObservableandSubjectsinAngular_3.png\" alt=\"Observableand SubjectsinAngular\"></p>\n<h2>3. ReplaySubject</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>\n<p>ReplaySubject은 특정 수의 값을 버퍼링하고 새로운 구독자에 대해 다시 재생할 수 있는 subject입니다.</p>\n</li>\n<li>\n<p>ReplaySubject를 생성할 때 버퍼 크기를 지정할 수 있으며, 이는 새로운 구독자에 대해 다시 재생할 이전 값의 수를 결정합니다.</p>\n</li>\n<li>\n<p>이는 새로운 구독자에게 값의 이력을 제공하거나 나중에 값을 캐시해야 할 때 유용합니다.</p>\n</li>\n</ul>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-comment\">//--------------- Replay subject buffers old values not default one -----------</span>\n\n    <span class=\"hljs-keyword\">const</span> replaySuject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ReplaySubject</span>(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// 만약 마지막 2개의 버퍼링된 값을 보여주고 싶다면, 그렇지 않으면 모든 값을 보여줌</span>\n\n    replaySuject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">111</span>)\n    replaySuject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">222</span>)\n    replaySuject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">333</span>)\n\n    replaySuject.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`첫번째 구독자 <span class=\"hljs-subst\">${e}</span>`</span>)\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">first_subscriber_replaySubject</span>.<span class=\"hljs-title function_\">push</span>(e);\n    })\n\n    <span class=\"hljs-comment\">// 새로운 값은 기존 구독자에게 표시됩니다.</span>\n    replaySuject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">444</span>)\n\n    replaySuject.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`두번째 구독자 <span class=\"hljs-subst\">${e}</span>`</span>)\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">second_subscriber_replaySubject</span>.<span class=\"hljs-title function_\">push</span>(e);\n    })\n\n    replaySuject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">555</span>)\n    <span class=\"hljs-comment\">//---------------------------------------------------------------------------</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-07-ObservableandSubjectsinAngular_4.png\" alt=\"image\"></p>\n<h2>4. AsyncSubject</h2>\n<ul>\n<li>\n<p>AsyncSubject은 완료될 때 마지막 값을 만 방출하는 subject입니다.</p>\n</li>\n<li>\n<p>subject의 complete() 메서드가 호출될 때까지 어떤 값도 방출하지 않습니다. 완료되면 마지막 값을 (있는 경우) 구독자에게 방출합니다.</p>\n</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>· 최종 값이 발행되기 전에 작업이 완료될 때 유용합니다. 예를 들어, HTTP 요청이 완료될 때까지 기다렸다가 응답을 단일 값으로 발행할 때 사용합니다.</p>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-comment\">//---------------Async subject sends the latest value to subscribers when it's completed-----------</span>\n    <span class=\"hljs-keyword\">const</span> asyncSubject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AsyncSubject</span>&#x3C;number>();\n\n    asyncSubject.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =></span> \n      {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`첫 번째 구독자: <span class=\"hljs-subst\">${e}</span>`</span>)\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">first_subscriber_asyncSubject</span>=e;\n    });\n\n    asyncSubject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">111</span>);\n    asyncSubject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">222</span>);\n    asyncSubject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">333</span>);\n    asyncSubject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">444</span>);\n\n    asyncSubject.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`두 번째 구독자: <span class=\"hljs-subst\">${e}</span>`</span>)\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">second_subscriber_asyncSubject</span>=e;\n    });\n\n    asyncSubject.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">555</span>);\n    asyncSubject.<span class=\"hljs-title function_\">complete</span>();\n\n    <span class=\"hljs-comment\">//--------------------------------------------------------------------------</span>\n</code></pre>\n<p><img src=\"/assets/img/2024-07-07-ObservableandSubjectsinAngular_5.png\" alt=\"이미지\"></p>\n<h1>GitHub URL</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><a href=\"https://github.com/Jaydeep-007/angular-subject-and-observable\" rel=\"nofollow\" target=\"_blank\">https://github.com/Jaydeep-007/angular-subject-and-observable</a></p>\n<h1>결론</h1>\n<p>이 글에서는 주제의 기본 사항과 옵저버블과 주제의 차이에 대해 서로 다른 유형과 예제를 다뤘습니다.</p>\n<p>코딩 즐기세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>친근한 한국어 번역</h1>\n<p>우리 커뮤니티에 함께해줘서 감사합니다! 떠나시기 전에:</p>\n<ul>\n<li>작가를 클랩하고 팔로우해주세요! 👏</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠를 찾을 수 있어요! 🚀</li>\n<li>무료 주간 뉴스레터를 구독해주세요. 🗞️</li>\n<li>트위터, 링크드인, 유튜브, 디스코드에서 팔로우해주세요.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}