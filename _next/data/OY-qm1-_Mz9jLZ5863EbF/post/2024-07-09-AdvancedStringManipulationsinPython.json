{"pageProps":{"post":{"title":"파이썬 고급 문자열 조작 기법들","description":"","date":"2024-07-09 19:28","slug":"2024-07-09-AdvancedStringManipulationsinPython","content":"\n\n\n![Advanced String Manipulations in Python](/assets/img/2024-07-09-AdvancedStringManipulationsinPython_0.png)\n\n파이썬에서 문자열은 기본적이며 거의 모든 파이썬 애플리케이션에서 널리 사용됩니다. 연결 및 슬라이싱과 같은 기본적인 문자열 작업은 간단하지만, 파이썬은 코드를 보다 효율적이고 가독성 있게 만들어주는 다양한 고급 문자열 조작 기술을 제공합니다. 이 기사는 파이썬에서의 고급 문자열 조작에 대해 자세히 설명하고 있으며, 중급 개발자들이 문자열 처리 능력을 향상할 수 있도록 예제와 함께 제공합니다.\n\n# 문자열 포매팅\n\n## format() 사용하기\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`format()` 메서드는 더 다양한 문자열 포맷팅을 가능하게 합니다.\n\n```js\nname = \"Alice\"\nage = 30\nformatted_string = \"Name: {}, Age: {}\".format(name, age)\nprint(formatted_string)\n```\n\n결과:\n\n```js\nName: Alice, Age: 30\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 방법은 다양한 형식 요구에 유연하게 대응할 수 있도록 위치 및 키워드 인수를 포함할 수 있습니다.\n\n## f-Strings 사용하기\n\nPython 3.6에서 소개된 f-strings는 문자열 리터럴 내부에 표현식을 잘 포함하는 간결한 방법을 제공합니다.\n\n```js\nname = \"Alice\"\nage = 30\nformatted_string = f\"Name: {name}, Age: {age}\"\nprint(formatted_string)\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결과:\n\n```js\n이름: Alice, 나이: 30\n```\n\nf-Strings는 format()보다 읽기 쉬우면서 더 빠릅니다.\n\n# 문자열 메서드\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## join()\n\njoin() 메서드는 지정된 구분자로 문자열의 이터러블을 연결하는 데 사용됩니다.\n\n```js\nwords = [\"Python\", \"is\", \"awesome\"]\nsentence = \" \".join(words)\nprint(sentence)\n```\n\n결과:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n파이썬은 멋지다\n```\n\n이 방법은 루프에서 + 연산자를 사용하는 것보다 효율적입니다.\n\n## split()\n\nsplit() 메서드는 지정된 구분기호를 사용하여 문자열을 리스트로 분할합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nsentence = \"Python is awesome\"\nwords = sentence.split(\" \")\nprint(words)\n```\n\n결과:\n\n```js\n['Python', 'is', 'awesome']\n```\n\n기본적으로 split()은 모든 공백을 구분자로 사용합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 문자열 변환\n\n## replace()\n\nreplace() 메서드는 문자열에서 지정된 부분 문자열을 다른 부분 문자열로 대체합니다.\n\n```js\ntext = \"Hello, world!\"\nnew_text = text.replace(\"world\", \"Python\")\nprint(new_text)\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결과:\n\n```js\n안녕하세요, 파이썬!\n```\n\n이 방법은 원본 문자열에서 부분 문자열의 모든 발생을 대체할 수 있습니다.\n\n## translate()\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 복잡한 대체 작업을 위해서는 str.maketrans()와 결합된 translate()가 강력합니다.\n\n```python\ntranslation_table = str.maketrans(\"aeiou\", \"12345\")\ntext = \"Hello, world!\"\ntranslated_text = text.translate(translation_table)\nprint(translated_text)\n```\n\n결과:\n\n```python\nH2ll4, w4rld!\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 방법은 한 번의 패스로 여러 문자를 교체하는 데 유용합니다.\n\n# 고급 패턴 매칭\n\n## startswith() 및 endswith() 사용\n\n이러한 메서드는 문자열이 지정된 부분 문자열로 시작하거나 끝나는지 확인합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\r\n텍스트 = \"Python 프로그래밍\"\r\nprint(텍스트.startswith(\"Python\"))\r\nprint(텍스트.endswith(\"프로그래밍\"))\r\n```\r\n\r\n결과:\r\n\r\n```js\r\nTrue\r\nTrue\r\n```\r\n\r\n이 메서드들은 간단한 패턴 매칭에 정규식을 사용하는 것보다 더 빠릅니다.\r\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 문자열 정렬\n\n## ljust(), rjust(), center() 사용하기\n\n이러한 메서드들은 지정된 너비 내에서 문자열을 정렬합니다.\n\n```js\ntext = \"Python\"\nprint(text.ljust(10, '-'))\nprint(text.rjust(10, '-'))\nprint(text.center(10, '-'))\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결과:\n\n```js\r\nPython----\n----Python\n--Python--\r\n```\n\n이 방법들은 텍스트 기반 UI나 보고서에서 서식이 있는 출력을 만드는 데 유용합니다.\n\n# 원치 않는 문자 제거\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## strip(), lstrip(), 그리고 rstrip()\n\n이 메서드들은 선행하거나 후행에 있는 문자들을 제거합니다.\n\n```js\ntext = \"   Python   \"\nprint(text.strip())\nprint(text.lstrip())\nprint(text.rstrip())\n```\n\n결과:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nPython\nPython   \n   Python\n```\n\n기본적으로 이러한 메소드들은 공백을 제거하지만, 다른 문자를 지정할 수도 있어요.\n\n# 대소문자 변환\n\n## upper(), lower(), title(), capitalize()\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 메서드들은 문자열의 대소문자를 변경합니다.\n\n```js\ntext = \"python programming\"\nprint(text.upper())\nprint(text.lower())\nprint(text.title())\nprint(text.capitalize())\n```\n\n결과:\n\n```js\nPYTHON PROGRAMMING\npython programming\nPython Programming\nPython programming\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이러한 방법들은 텍스트 데이터를 정규화하는 데 유용합니다.\n\nPython에서 고급 문자열 조작을 숙달하면 텍스트를 더 효율적이고 우아하게 처리할 수 있습니다. 문자열 포맷, 메소드 및 변환을 활용하여 더 깨끗하고 강력한 Python 코드를 작성할 수 있습니다. 이 글에서 다룬 기술은 중급 Python 개발자가 익숙해져야 하는 기본 도구로, 더 복잡한 텍스트 처리 작업에 대비할 수 있는 견고한 기반을 제공합니다.","ogImage":{"url":"/assets/img/2024-07-09-AdvancedStringManipulationsinPython_0.png"},"coverImage":"/assets/img/2024-07-09-AdvancedStringManipulationsinPython_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-07-09-AdvancedStringManipulationsinPython_0.png\" alt=\"Advanced String Manipulations in Python\"></p>\n<p>파이썬에서 문자열은 기본적이며 거의 모든 파이썬 애플리케이션에서 널리 사용됩니다. 연결 및 슬라이싱과 같은 기본적인 문자열 작업은 간단하지만, 파이썬은 코드를 보다 효율적이고 가독성 있게 만들어주는 다양한 고급 문자열 조작 기술을 제공합니다. 이 기사는 파이썬에서의 고급 문자열 조작에 대해 자세히 설명하고 있으며, 중급 개발자들이 문자열 처리 능력을 향상할 수 있도록 예제와 함께 제공합니다.</p>\n<h1>문자열 포매팅</h1>\n<h2>format() 사용하기</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><code>format()</code> 메서드는 더 다양한 문자열 포맷팅을 가능하게 합니다.</p>\n<pre><code class=\"hljs language-js\">name = <span class=\"hljs-string\">\"Alice\"</span>\nage = <span class=\"hljs-number\">30</span>\nformatted_string = <span class=\"hljs-string\">\"Name: {}, Age: {}\"</span>.<span class=\"hljs-title function_\">format</span>(name, age)\n<span class=\"hljs-title function_\">print</span>(formatted_string)\n</code></pre>\n<p>결과:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Name</span>: <span class=\"hljs-title class_\">Alice</span>, <span class=\"hljs-title class_\">Age</span>: <span class=\"hljs-number\">30</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 방법은 다양한 형식 요구에 유연하게 대응할 수 있도록 위치 및 키워드 인수를 포함할 수 있습니다.</p>\n<h2>f-Strings 사용하기</h2>\n<p>Python 3.6에서 소개된 f-strings는 문자열 리터럴 내부에 표현식을 잘 포함하는 간결한 방법을 제공합니다.</p>\n<pre><code class=\"hljs language-js\">name = <span class=\"hljs-string\">\"Alice\"</span>\nage = <span class=\"hljs-number\">30</span>\nformatted_string = f<span class=\"hljs-string\">\"Name: {name}, Age: {age}\"</span>\n<span class=\"hljs-title function_\">print</span>(formatted_string)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>결과:</p>\n<pre><code class=\"hljs language-js\">이름: <span class=\"hljs-title class_\">Alice</span>, 나이: <span class=\"hljs-number\">30</span>\n</code></pre>\n<p>f-Strings는 format()보다 읽기 쉬우면서 더 빠릅니다.</p>\n<h1>문자열 메서드</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>join()</h2>\n<p>join() 메서드는 지정된 구분자로 문자열의 이터러블을 연결하는 데 사용됩니다.</p>\n<pre><code class=\"hljs language-js\">words = [<span class=\"hljs-string\">\"Python\"</span>, <span class=\"hljs-string\">\"is\"</span>, <span class=\"hljs-string\">\"awesome\"</span>]\nsentence = <span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-title function_\">join</span>(words)\n<span class=\"hljs-title function_\">print</span>(sentence)\n</code></pre>\n<p>결과:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">파이썬은 멋지다\n</code></pre>\n<p>이 방법은 루프에서 + 연산자를 사용하는 것보다 효율적입니다.</p>\n<h2>split()</h2>\n<p>split() 메서드는 지정된 구분기호를 사용하여 문자열을 리스트로 분할합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">sentence = <span class=\"hljs-string\">\"Python is awesome\"</span>\nwords = sentence.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">\" \"</span>)\n<span class=\"hljs-title function_\">print</span>(words)\n</code></pre>\n<p>결과:</p>\n<pre><code class=\"hljs language-js\">[<span class=\"hljs-string\">'Python'</span>, <span class=\"hljs-string\">'is'</span>, <span class=\"hljs-string\">'awesome'</span>]\n</code></pre>\n<p>기본적으로 split()은 모든 공백을 구분자로 사용합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>문자열 변환</h1>\n<h2>replace()</h2>\n<p>replace() 메서드는 문자열에서 지정된 부분 문자열을 다른 부분 문자열로 대체합니다.</p>\n<pre><code class=\"hljs language-js\">text = <span class=\"hljs-string\">\"Hello, world!\"</span>\nnew_text = text.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">\"world\"</span>, <span class=\"hljs-string\">\"Python\"</span>)\n<span class=\"hljs-title function_\">print</span>(new_text)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>결과:</p>\n<pre><code class=\"hljs language-js\">안녕하세요, 파이썬!\n</code></pre>\n<p>이 방법은 원본 문자열에서 부분 문자열의 모든 발생을 대체할 수 있습니다.</p>\n<h2>translate()</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>더 복잡한 대체 작업을 위해서는 str.maketrans()와 결합된 translate()가 강력합니다.</p>\n<pre><code class=\"hljs language-python\">translation_table = <span class=\"hljs-built_in\">str</span>.maketrans(<span class=\"hljs-string\">\"aeiou\"</span>, <span class=\"hljs-string\">\"12345\"</span>)\ntext = <span class=\"hljs-string\">\"Hello, world!\"</span>\ntranslated_text = text.translate(translation_table)\n<span class=\"hljs-built_in\">print</span>(translated_text)\n</code></pre>\n<p>결과:</p>\n<pre><code class=\"hljs language-python\">H2ll4, w4rld!\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 방법은 한 번의 패스로 여러 문자를 교체하는 데 유용합니다.</p>\n<h1>고급 패턴 매칭</h1>\n<h2>startswith() 및 endswith() 사용</h2>\n<p>이러한 메서드는 문자열이 지정된 부분 문자열로 시작하거나 끝나는지 확인합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">텍스트 = <span class=\"hljs-string\">\"Python 프로그래밍\"</span>\r\n<span class=\"hljs-title function_\">print</span>(텍스트.<span class=\"hljs-title function_\">startswith</span>(<span class=\"hljs-string\">\"Python\"</span>))\r\n<span class=\"hljs-title function_\">print</span>(텍스트.<span class=\"hljs-title function_\">endswith</span>(<span class=\"hljs-string\">\"프로그래밍\"</span>))\n</code></pre>\n<p>결과:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">True</span>\r\n<span class=\"hljs-title class_\">True</span>\n</code></pre>\n<p>이 메서드들은 간단한 패턴 매칭에 정규식을 사용하는 것보다 더 빠릅니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>문자열 정렬</h1>\n<h2>ljust(), rjust(), center() 사용하기</h2>\n<p>이러한 메서드들은 지정된 너비 내에서 문자열을 정렬합니다.</p>\n<pre><code class=\"hljs language-js\">text = <span class=\"hljs-string\">\"Python\"</span>\n<span class=\"hljs-title function_\">print</span>(text.<span class=\"hljs-title function_\">ljust</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">'-'</span>))\n<span class=\"hljs-title function_\">print</span>(text.<span class=\"hljs-title function_\">rjust</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">'-'</span>))\n<span class=\"hljs-title function_\">print</span>(text.<span class=\"hljs-title function_\">center</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">'-'</span>))\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>결과:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Python</span>----\n----<span class=\"hljs-title class_\">Python</span>\n--<span class=\"hljs-title class_\">Python</span>--\n</code></pre>\n<p>이 방법들은 텍스트 기반 UI나 보고서에서 서식이 있는 출력을 만드는 데 유용합니다.</p>\n<h1>원치 않는 문자 제거</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>strip(), lstrip(), 그리고 rstrip()</h2>\n<p>이 메서드들은 선행하거나 후행에 있는 문자들을 제거합니다.</p>\n<pre><code class=\"hljs language-js\">text = <span class=\"hljs-string\">\"   Python   \"</span>\n<span class=\"hljs-title function_\">print</span>(text.<span class=\"hljs-title function_\">strip</span>())\n<span class=\"hljs-title function_\">print</span>(text.<span class=\"hljs-title function_\">lstrip</span>())\n<span class=\"hljs-title function_\">print</span>(text.<span class=\"hljs-title function_\">rstrip</span>())\n</code></pre>\n<p>결과:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Python</span>\n<span class=\"hljs-title class_\">Python</span>   \n   <span class=\"hljs-title class_\">Python</span>\n</code></pre>\n<p>기본적으로 이러한 메소드들은 공백을 제거하지만, 다른 문자를 지정할 수도 있어요.</p>\n<h1>대소문자 변환</h1>\n<h2>upper(), lower(), title(), capitalize()</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 메서드들은 문자열의 대소문자를 변경합니다.</p>\n<pre><code class=\"hljs language-js\">text = <span class=\"hljs-string\">\"python programming\"</span>\n<span class=\"hljs-title function_\">print</span>(text.<span class=\"hljs-title function_\">upper</span>())\n<span class=\"hljs-title function_\">print</span>(text.<span class=\"hljs-title function_\">lower</span>())\n<span class=\"hljs-title function_\">print</span>(text.<span class=\"hljs-title function_\">title</span>())\n<span class=\"hljs-title function_\">print</span>(text.<span class=\"hljs-title function_\">capitalize</span>())\n</code></pre>\n<p>결과:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">PYTHON</span> <span class=\"hljs-variable constant_\">PROGRAMMING</span>\npython programming\n<span class=\"hljs-title class_\">Python</span> <span class=\"hljs-title class_\">Programming</span>\n<span class=\"hljs-title class_\">Python</span> programming\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이러한 방법들은 텍스트 데이터를 정규화하는 데 유용합니다.</p>\n<p>Python에서 고급 문자열 조작을 숙달하면 텍스트를 더 효율적이고 우아하게 처리할 수 있습니다. 문자열 포맷, 메소드 및 변환을 활용하여 더 깨끗하고 강력한 Python 코드를 작성할 수 있습니다. 이 글에서 다룬 기술은 중급 Python 개발자가 익숙해져야 하는 기본 도구로, 더 복잡한 텍스트 처리 작업에 대비할 수 있는 견고한 기반을 제공합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}