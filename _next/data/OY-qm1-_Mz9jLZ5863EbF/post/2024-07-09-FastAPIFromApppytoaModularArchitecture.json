{"pageProps":{"post":{"title":"FastAPI Apppy에서 모듈러 아키텍처로 전환하는 방법","description":"","date":"2024-07-09 20:24","slug":"2024-07-09-FastAPIFromApppytoaModularArchitecture","content":"\n\n<img src=\"/assets/img/2024-07-09-FastAPIFromApppytoaModularArchitecture_0.png\" />\n\n패스트API를 사용하여 백엔드를 구축할 때, 일반적으로 하나의 app.py 파일로 시작하는 것이 흔합니다. 이 접근 방식은 작은 프로젝트에 적합하지만, 응용 프로그램이 성장함에 따라 유지 보수와 확장이 어려워집니다.\n\n이 블로그 포스트에서는 Routers, Controllers, Services 및 Repositories로 구성된 구조화된 아키텍처를 사용하여 FastAPI 애플리케이션을 모놀리식 app.py 파일에서 리팩토링하는 방법을 살펴보겠습니다.\n\n## 소개: 우리의 할 일 API\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n리팩터링 프로세스에 뛰어들기 전에 함께 작업할 API를 살펴보겠습니다. 다음과 같은 엔드포인트를 가진 간단한 할 일 애플리케이션을 구축 중입니다.\n\n![API Image](/assets/img/2024-07-09-FastAPIFromApppytoaModularArchitecture_1.png)\n\n이러한 API를 통해 사용자는 할 일 항목에 대한 CRUD(Create, Read, Update, Delete) 작업을 수행할 수 있습니다. 각 할 일 항목은 다음과 같은 속성을 가지게 될 것입니다.\n\n이제 작업 중인 API를 이해했으므로 몇 가지 전제 조건 및 이를 구현하는 방법을 살펴보겠습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 준비 사항\n\n처음 접근과 리팩토링을 시작하기 전에 FastAPI 프로젝트를 설정해 봅시다.\n\n```js\npython3 -m venv venv\nsource env/bin/activate  # Windows에서는 `env\\Scripts\\activate\n```\n\n```js\nfastapi\nuvicorn\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```bash\npip3 install -r requirements.txt\n```\n\n## 초기 접근 방식: 모든 것을 app.py에서 처리\n\n간단한 Todo API를 시작해봅시다. 이 API는 루트 레벨의 app.py에서 완전히 구현되어 있습니다.\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n# 새로운 todo를 생성하기 위한 Pydantic 모델\nclass TodoCreate(BaseModel):\n    title: str\n\n# todo 항목을 위한 Pydantic 모델. TodoCreate를 상속받고 id 및 completed 필드를 추가합니다.\nclass Todo(TodoCreate):\n    id: int\n    completed: bool = False\n\n# 데이터베이스를 모방한 todos의 인메모리 저장소\ntodos = []\n\n# 새로운 todo를 생성하는 엔드포인트\n@app.post(\"/todos\", response_model=Todo)\ndef create_todo(todo: TodoCreate):\n    # id를 증가시킨 새로운 todo 항목을 생성합니다.\n    new_todo = Todo(id=len(todos) + 1, **todo.model_dump())\n    todos.append(new_todo)  # 새로운 todo를 목록에 추가합니다.\n    return new_todo  # 생성된 todo를 응답으로 반환합니다.\n\n# 모든 todo를 가져오는 엔드포인트\n@app.get(\"/todos\", response_model=list[Todo])\ndef get_todos():\n    return todos  # todo 목록을 응답으로 반환합니다.\n\n# 특정 id의 todo를 가져오는 엔드포인트\n@app.get(\"/todos/{todo_id}\", response_model=Todo)\ndef get_todo(todo_id: int):\n    for todo in todos:\n        if todo.id == todo_id:\n            return todo  # 찾은 경우 해당 todo를 반환합니다.\n    # 해당 todo를 찾을 수 없는 경우 404 상태 코드와 메시지를 포함한 HTTPException을 발생시킵니다.\n    raise HTTPException(status_code=404, detail=\"Todo가 없습니다\")\n\n# id에 따라 todo를 업데이트하는 엔드포인트\n@app.put(\"/todos/{todo_id}\", response_model=Todo)\ndef update_todo(todo_id: int, updated_todo: TodoCreate):\n    for todo in todos:\n        if todo.id == todo_id:\n            todo.title = updated_todo.title  # todo의 제목을 업데이트합니다.\n            return todo  # 업데이트된 todo를 반환합니다.\n    # 해당 todo를 찾을 수 없는 경우 404 상태 코드와 메시지를 포함한 HTTPException을 발생시킵니다.\n    raise HTTPException(status_code=404, detail=\"Todo가 없습니다\")\n\n# id에 따라 todo를 삭제하는 엔드포인트\n@app.delete(\"/todos/{todo_id}\")\ndef delete_todo(todo_id: int):\n    for index, todo in enumerate(todos):\n        if todo.id == todo_id:\n            del todos[index]  # 목록에서 todo를 삭제합니다.\n            return {\"message\": \"Todo가 성공적으로 삭제되었습니다\"}  # 성공 메시지를 반환합니다.\n    # 해당 todo를 찾을 수 없는 경우 404 상태 코드와 메시지를 포함한 HTTPException을 발생시킵니다.\n    raise HTTPException(status_code=404, detail=\"Todo가 없습니다\")\n\n# Uvicorn 서버를 사용하여 애플리케이션을 실행하는 주요 블록\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"app:app\", port=3000, host=\"0.0.0.0\", reload=True)\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAPI를 시작하려면 python3 app.py 명령어를 사용해요\n\n음...\n\n이 방법은 작은 애플리케이션에는 작동하지만 몇 가지 단점이 있어요:\n\n- 모든 라우팅, 비즈니스 로직 및 데이터 저장소가 단일 파일에 혼합되어 있어요.\n- 애플리케이션이 성장함에 따라 유지 및 확장하기 어려워져요.\n- 개별 구성 요소를 테스트하는 것이 어려워져요.\n- 코드의 재사용성이 제한되어요\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![FastAPIFromApppytoaModularArchitecture](/assets/img/2024-07-09-FastAPIFromApppytoaModularArchitecture_2.png)\n\nRefactoring journey starts now...\n\n## Routers Introduction\n\nTo structure our application effectively, the first step is to introduce routers.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n새로운 폴더를 만들어 routers라는 이름을 붙이고 todo_router.py라는 파일을 추가해주세요.\n\n```python\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n@router.post(\"/todos\")\ndef create_todo():\n    pass\n\n@router.get(\"/todos\")\ndef get_todos():\n    pass\n\n@router.get(\"/todos/{todo_id}\")\ndef get_todo(todo_id: int):\n    pass\n\n@router.put(\"/todos/{todo_id}\")\ndef update_todo(todo_id: int):\n    pass\n\n@router.delete(\"/todos/{todo_id}\")\ndef delete_todo(todo_id: int):\n    pass\n```\n\n이제 app.py를 업데이트하여 라우터를 사용하세요.\n\n```python\nfrom fastapi import FastAPI\nfrom routers import todo_router\n\napp = FastAPI()\n\napp.include_router(todo_router.router)\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"app:app\", port=3000, host=\"0.0.0.0\", reload=True)\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n라우터를 도입함으로써 작업 관련 라우트를 메인 app.py 파일에서 분리하여 코드를 더 깔끔하고 집중적으로 유지하였습니다.\n\n## 컨트롤러 추가\n\n다음으로, 요청 처리 로직을 처리하기 위한 컨트롤러를 도입할 예정입니다.\n\ncontrollers라는 새 디렉토리를 생성하고 todo_controller.py라는 파일을 추가하세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom fastapi import HTTPException\nfrom pydantic import BaseModel\n\nclass TodoCreate(BaseModel):\n    title: str\n\nclass Todo(TodoCreate):\n    id: int\n    completed: bool = False\n\nclass TodoController:\n    def __init__(self):\n        self.todos = []\n\n    def create_todo(self, todo: TodoCreate):\n        new_todo = Todo(id=len(self.todos) + 1, **todo.model_dump())\n        self.todos.append(new_todo)\n        return new_todo\n\n    def get_todos(self):\n        return self.todos\n\n    def get_todo(self, todo_id: int):\n        for todo in self.todos:\n            if todo.id == todo_id:\n                return todo\n        raise HTTPException(status_code=404, detail=\"Todo를 찾을 수 없습니다.\")\n\n    def update_todo(self, todo_id: int, updated_todo: TodoCreate):\n        for todo in self.todos:\n            if todo.id == todo_id:\n                todo.title = updated_todo.title\n                return todo\n        raise HTTPException(status_code=404, detail=\"Todo를 찾을 수 없습니다.\")\n\n    def delete_todo(self, todo_id: int):\n        for index, todo in enumerate(self.todos):\n            if todo.id == todo_id:\n                del self.todos[index]\n                return {\"message\": \"Todo가 성공적으로 삭제되었습니다.\"}\n        raise HTTPException(status_code=404, detail=\"Todo를 찾을 수 없습니다.\")\n```\n\ntodo_router.py 파일을 업데이트하여 컨트롤러를 사용하십시오.\n\n```js\nfrom fastapi import APIRouter\nfrom controllers.todo_controller import TodoController, TodoCreate, Todo\n\nrouter = APIRouter()\ntodo_controller = TodoController()\n\n@router.post(\"/todos\", response_model=Todo)\ndef create_todo(todo: TodoCreate):\n    return todo_controller.create_todo(todo)\n\n@router.get(\"/todos\", response_model=list[Todo])\ndef get_todos():\n    return todo_controller.get_todos()\n\n@router.get(\"/todos/{todo_id}\", response_model=Todo)\ndef get_todo(todo_id: int):\n    return todo_controller.get_todo(todo_id)\n\n@router.put(\"/todos/{todo_id}\", response_model=Todo)\ndef update_todo(todo_id: int, updated_todo: TodoCreate):\n    return todo_controller.update_todo(todo_id, updated_todo)\n\n@router.delete(\"/todos/{todo_id}\")\ndef delete_todo(todo_id: int):\n    return todo_controller.delete_todo(todo_id)\n```\n\n## 서비스 레이어 구현\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 비즈니스 로직을 처리하는 서비스 레이어를 소개해 봅시다.\n\nservices 라는 새 디렉토리를 만들고 todo_service.py 라는 파일을 추가해 주세요.\n\n```js\nfrom pydantic import BaseModel\n\nclass TodoCreate(BaseModel):\n    title: str\n\nclass Todo(TodoCreate):\n    id: int\n    completed: bool = False\n\nclass TodoService:\n    def __init__(self):\n        self.todos = []\n\n    def create_todo(self, todo: TodoCreate) -> Todo:\n        new_todo = Todo(id=len(self.todos) + 1, **todo.model_dump())\n        self.todos.append(new_todo)\n        return new_todo\n\n    def get_todos(self) -> list[Todo]:\n        return self.todos\n\n    def get_todo(self, todo_id: int) -> Todo | None:\n        for todo in self.todos:\n            if todo.id == todo_id:\n                return todo\n        return None\n\n    def update_todo(self, todo_id: int, updated_todo: TodoCreate) -> Todo | None:\n        for todo in self.todos:\n            if todo.id == todo_id:\n                todo.title = updated_todo.title\n                return todo\n        return None\n\n    def delete_todo(self, todo_id: int) -> bool:\n        for index, todo in enumerate(self.todos):\n            if todo.id == todo_id:\n                del self.todos[index]\n                return True\n        return False\n```\n\ntodo_controller.py를 업데이트하여 서비스를 사용하도록합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom fastapi import HTTPException\nfrom services.todo_service import TodoService, TodoCreate, Todo\n\nclass TodoController:\n    def __init__(self):\n        self.todo_service = TodoService()\n\n    def create_todo(self, todo: TodoCreate):\n        return self.todo_service.create_todo(todo)\n\n    def get_todos(self):\n        return self.todo_service.get_todos()\n\n    def get_todo(self, todo_id: int):\n        todo = self.todo_service.get_todo(todo_id)\n        if todo is None:\n            raise HTTPException(status_code=404, detail=\"할 일을 찾을 수 없습니다\")\n        return todo\n\n    def update_todo(self, todo_id: int, updated_todo: TodoCreate):\n        todo = self.todo_service.update_todo(todo_id, updated_todo)\n        if todo is None:\n            raise HTTPException(status_code=404, detail=\"할 일을 찾을 수 없습니다\")\n        return todo\n\n    def delete_todo(self, todo_id: int):\n        if self.todo_service.delete_todo(todo_id):\n            return {\"message\": \"할 일이 성공적으로 삭제되었습니다\"}\n        raise HTTPException(status_code=404, detail=\"할 일을 찾을 수 없습니다\")\n```\n\n## 레포지터리 레이어 생성\n\n마지막으로 데이터 지속성을 처리하는 레포지터리 레이어를 소개합니다.\n\nrepositories라는 새 디렉토리를 만들고 todo_repository.py라는 파일을 추가하세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom pydantic import BaseModel\n\nclass TodoCreate(BaseModel):\n    title: str\n\nclass Todo(TodoCreate):\n    id: int\n    completed: bool = False\n\nclass TodoRepository:\n    def __init__(self):\n        self.todos = []\n\n    def create_todo(self, todo: TodoCreate) -> Todo:\n        new_todo = Todo(id=len(self.todos) + 1, **todo.model_dump())\n        self.todos.append(new_todo)\n        return new_todo\n\n    def get_todos(self) -> list[Todo]:\n        return self.todos\n\n    def get_todo(self, todo_id: int) -> Todo | None:\n        for todo in self.todos:\n            if todo.id == todo_id:\n                return todo\n        return None\n\n    def update_todo(self, todo_id: int, updated_todo: TodoCreate) -> Todo | None:\n        for todo in self.todos:\n            if todo.id == todo_id:\n                todo.title = updated_todo.title\n                return todo\n        return None\n\n    def delete_todo(self, todo_id: int) -> bool:\n        for index, todo in enumerate(self.todos):\n            if todo.id == todo_id:\n                del self.todos[index]\n                return True\n        return False\n```\n\nUpdate `todo_service.py` to use the repository,\n\n```python\nfrom repositories.todo_repository import TodoRepository, TodoCreate, Todo\n\nclass TodoService:\n    def __init__(self):\n        self.todo_repository = TodoRepository()\n\n    def create_todo(self, todo: TodoCreate) -> Todo:\n        return self.todo_repository.create_todo(todo)\n\n    def get_todos(self) -> list[Todo]:\n        return self.todo_repository.get_todos()\n\n    def get_todo(self, todo_id: int) -> Todo | None:\n        return self.todo_repository.get_todo(todo_id)\n\n    def update_todo(self, todo_id: int, updated_todo: TodoCreate) -> Todo | None:\n        return self.todo_repository.update_todo(todo_id, updated_todo)\n\n    def delete_todo(self, todo_id: int) -> bool:\n        return self.todo_repository.delete_todo(todo_id)\n```\n\n우리의 리팩터링 여정은 여기서 끝납니다…\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파이썬 앱.py에서 구조화된 모듈 아키텍처로 이어지는 이 여정에서, 우리는 Todo API를 더 확장 가능하고 유지 관리 가능한 애플리케이션으로 변형시켰습니다. 라우터, 컨트롤러, 서비스 및 리포지토리를 도입함으로써, 우리는 관심사의 명확한 분리와 프로젝트 확장에 따른 복잡성 관리 능력을 향상시켰습니다.\n\n## 모듈식 아키텍처의 주요 이점:\n\n- 향상된 유지 보수성: 각 컴포넌트 - 라우터, 컨트롤러, 서비스 및 리포지토리 -는 이제 특정 책임을 처리하여 변경 시 의도치 않은 부작용의 위험을 줄입니다.\n- 향상된 테스트 용이성: 각 레이어가 명확하게 구분되어 유닛 테스트가 보다 간편해집니다. 우리는 각 컴포넌트를 독립적으로 테스트하여 응용 프로그램 전체에서 견고함과 신뢰성을 보장할 수 있습니다.\n- 확장성과 유연성: 모듈식 디자인은 확장을 용이하게 합니다. 새로운 기능을 추가하거나 기존 기능을 수정할 때 전체 코드베이스를 철저히 재작업하지 않고도 수행할 수 있습니다. 이 유연성은 데이터베이스 전환이나 비즈니스 로직 업데이트와 같은 작업에도 연결됩니다.\n\n우리의 리포지토리는 이제 다음과 같이 보입니다...\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`<img src=\"/assets/img/2024-07-09-FastAPIFromApppytoaModularArchitecture_3.png\" />`\n\nFastAPI 애플리케이션을 모듈식 아키텍처로 리팩토링함으로써, 지속적인 성장과 유연성을 위한 견고한 기반을 마련했습니다. 이 접근 방식은 현재 개발 노력을 향상시킬 뿐만 아니라 앞으로의 도전과 기회에 대비하는 데 도움이 됩니다.\n\n안녕히 가세요!!","ogImage":{"url":"/assets/img/2024-07-09-FastAPIFromApppytoaModularArchitecture_0.png"},"coverImage":"/assets/img/2024-07-09-FastAPIFromApppytoaModularArchitecture_0.png","tag":["Tech"],"readingTime":16},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-07-09-FastAPIFromApppytoaModularArchitecture_0.png\">\n<p>패스트API를 사용하여 백엔드를 구축할 때, 일반적으로 하나의 app.py 파일로 시작하는 것이 흔합니다. 이 접근 방식은 작은 프로젝트에 적합하지만, 응용 프로그램이 성장함에 따라 유지 보수와 확장이 어려워집니다.</p>\n<p>이 블로그 포스트에서는 Routers, Controllers, Services 및 Repositories로 구성된 구조화된 아키텍처를 사용하여 FastAPI 애플리케이션을 모놀리식 app.py 파일에서 리팩토링하는 방법을 살펴보겠습니다.</p>\n<h2>소개: 우리의 할 일 API</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>리팩터링 프로세스에 뛰어들기 전에 함께 작업할 API를 살펴보겠습니다. 다음과 같은 엔드포인트를 가진 간단한 할 일 애플리케이션을 구축 중입니다.</p>\n<p><img src=\"/assets/img/2024-07-09-FastAPIFromApppytoaModularArchitecture_1.png\" alt=\"API Image\"></p>\n<p>이러한 API를 통해 사용자는 할 일 항목에 대한 CRUD(Create, Read, Update, Delete) 작업을 수행할 수 있습니다. 각 할 일 항목은 다음과 같은 속성을 가지게 될 것입니다.</p>\n<p>이제 작업 중인 API를 이해했으므로 몇 가지 전제 조건 및 이를 구현하는 방법을 살펴보겠습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>준비 사항</h2>\n<p>처음 접근과 리팩토링을 시작하기 전에 FastAPI 프로젝트를 설정해 봅시다.</p>\n<pre><code class=\"hljs language-js\">python3 -m venv venv\nsource env/bin/activate  # <span class=\"hljs-title class_\">Windows</span>에서는 <span class=\"hljs-string\">`env\\Scripts\\activate\n</span></code></pre>\n<pre><code class=\"hljs language-js\">fastapi\nuvicorn\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-bash\">pip3 install -r requirements.txt\n</code></pre>\n<h2>초기 접근 방식: 모든 것을 app.py에서 처리</h2>\n<p>간단한 Todo API를 시작해봅시다. 이 API는 루트 레벨의 app.py에서 완전히 구현되어 있습니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> fastapi <span class=\"hljs-keyword\">import</span> FastAPI, HTTPException\n<span class=\"hljs-keyword\">from</span> pydantic <span class=\"hljs-keyword\">import</span> BaseModel\n\napp = FastAPI()\n\n<span class=\"hljs-comment\"># 새로운 todo를 생성하기 위한 Pydantic 모델</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoCreate</span>(<span class=\"hljs-title class_ inherited__\">BaseModel</span>):\n    title: <span class=\"hljs-built_in\">str</span>\n\n<span class=\"hljs-comment\"># todo 항목을 위한 Pydantic 모델. TodoCreate를 상속받고 id 및 completed 필드를 추가합니다.</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Todo</span>(<span class=\"hljs-title class_ inherited__\">TodoCreate</span>):\n    <span class=\"hljs-built_in\">id</span>: <span class=\"hljs-built_in\">int</span>\n    completed: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">False</span>\n\n<span class=\"hljs-comment\"># 데이터베이스를 모방한 todos의 인메모리 저장소</span>\ntodos = []\n\n<span class=\"hljs-comment\"># 새로운 todo를 생성하는 엔드포인트</span>\n<span class=\"hljs-meta\">@app.post(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/todos\"</span>, response_model=Todo</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_todo</span>(<span class=\"hljs-params\">todo: TodoCreate</span>):\n    <span class=\"hljs-comment\"># id를 증가시킨 새로운 todo 항목을 생성합니다.</span>\n    new_todo = Todo(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-built_in\">len</span>(todos) + <span class=\"hljs-number\">1</span>, **todo.model_dump())\n    todos.append(new_todo)  <span class=\"hljs-comment\"># 새로운 todo를 목록에 추가합니다.</span>\n    <span class=\"hljs-keyword\">return</span> new_todo  <span class=\"hljs-comment\"># 생성된 todo를 응답으로 반환합니다.</span>\n\n<span class=\"hljs-comment\"># 모든 todo를 가져오는 엔드포인트</span>\n<span class=\"hljs-meta\">@app.get(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/todos\"</span>, response_model=<span class=\"hljs-built_in\">list</span>[Todo]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_todos</span>():\n    <span class=\"hljs-keyword\">return</span> todos  <span class=\"hljs-comment\"># todo 목록을 응답으로 반환합니다.</span>\n\n<span class=\"hljs-comment\"># 특정 id의 todo를 가져오는 엔드포인트</span>\n<span class=\"hljs-meta\">@app.get(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/todos/{todo_id}\"</span>, response_model=Todo</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_todo</span>(<span class=\"hljs-params\">todo_id: <span class=\"hljs-built_in\">int</span></span>):\n    <span class=\"hljs-keyword\">for</span> todo <span class=\"hljs-keyword\">in</span> todos:\n        <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-built_in\">id</span> == todo_id:\n            <span class=\"hljs-keyword\">return</span> todo  <span class=\"hljs-comment\"># 찾은 경우 해당 todo를 반환합니다.</span>\n    <span class=\"hljs-comment\"># 해당 todo를 찾을 수 없는 경우 404 상태 코드와 메시지를 포함한 HTTPException을 발생시킵니다.</span>\n    <span class=\"hljs-keyword\">raise</span> HTTPException(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"Todo가 없습니다\"</span>)\n\n<span class=\"hljs-comment\"># id에 따라 todo를 업데이트하는 엔드포인트</span>\n<span class=\"hljs-meta\">@app.put(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/todos/{todo_id}\"</span>, response_model=Todo</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_todo</span>(<span class=\"hljs-params\">todo_id: <span class=\"hljs-built_in\">int</span>, updated_todo: TodoCreate</span>):\n    <span class=\"hljs-keyword\">for</span> todo <span class=\"hljs-keyword\">in</span> todos:\n        <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-built_in\">id</span> == todo_id:\n            todo.title = updated_todo.title  <span class=\"hljs-comment\"># todo의 제목을 업데이트합니다.</span>\n            <span class=\"hljs-keyword\">return</span> todo  <span class=\"hljs-comment\"># 업데이트된 todo를 반환합니다.</span>\n    <span class=\"hljs-comment\"># 해당 todo를 찾을 수 없는 경우 404 상태 코드와 메시지를 포함한 HTTPException을 발생시킵니다.</span>\n    <span class=\"hljs-keyword\">raise</span> HTTPException(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"Todo가 없습니다\"</span>)\n\n<span class=\"hljs-comment\"># id에 따라 todo를 삭제하는 엔드포인트</span>\n<span class=\"hljs-meta\">@app.delete(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/todos/{todo_id}\"</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_todo</span>(<span class=\"hljs-params\">todo_id: <span class=\"hljs-built_in\">int</span></span>):\n    <span class=\"hljs-keyword\">for</span> index, todo <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(todos):\n        <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-built_in\">id</span> == todo_id:\n            <span class=\"hljs-keyword\">del</span> todos[index]  <span class=\"hljs-comment\"># 목록에서 todo를 삭제합니다.</span>\n            <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"Todo가 성공적으로 삭제되었습니다\"</span>}  <span class=\"hljs-comment\"># 성공 메시지를 반환합니다.</span>\n    <span class=\"hljs-comment\"># 해당 todo를 찾을 수 없는 경우 404 상태 코드와 메시지를 포함한 HTTPException을 발생시킵니다.</span>\n    <span class=\"hljs-keyword\">raise</span> HTTPException(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"Todo가 없습니다\"</span>)\n\n<span class=\"hljs-comment\"># Uvicorn 서버를 사용하여 애플리케이션을 실행하는 주요 블록</span>\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-keyword\">import</span> uvicorn\n    uvicorn.run(<span class=\"hljs-string\">\"app:app\"</span>, port=<span class=\"hljs-number\">3000</span>, host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, reload=<span class=\"hljs-literal\">True</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>API를 시작하려면 python3 app.py 명령어를 사용해요</p>\n<p>음...</p>\n<p>이 방법은 작은 애플리케이션에는 작동하지만 몇 가지 단점이 있어요:</p>\n<ul>\n<li>모든 라우팅, 비즈니스 로직 및 데이터 저장소가 단일 파일에 혼합되어 있어요.</li>\n<li>애플리케이션이 성장함에 따라 유지 및 확장하기 어려워져요.</li>\n<li>개별 구성 요소를 테스트하는 것이 어려워져요.</li>\n<li>코드의 재사용성이 제한되어요</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-09-FastAPIFromApppytoaModularArchitecture_2.png\" alt=\"FastAPIFromApppytoaModularArchitecture\"></p>\n<p>Refactoring journey starts now...</p>\n<h2>Routers Introduction</h2>\n<p>To structure our application effectively, the first step is to introduce routers.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>새로운 폴더를 만들어 routers라는 이름을 붙이고 todo_router.py라는 파일을 추가해주세요.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> fastapi <span class=\"hljs-keyword\">import</span> APIRouter\n\nrouter = APIRouter()\n\n<span class=\"hljs-meta\">@router.post(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/todos\"</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_todo</span>():\n    <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-meta\">@router.get(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/todos\"</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_todos</span>():\n    <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-meta\">@router.get(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/todos/{todo_id}\"</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_todo</span>(<span class=\"hljs-params\">todo_id: <span class=\"hljs-built_in\">int</span></span>):\n    <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-meta\">@router.put(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/todos/{todo_id}\"</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_todo</span>(<span class=\"hljs-params\">todo_id: <span class=\"hljs-built_in\">int</span></span>):\n    <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-meta\">@router.delete(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/todos/{todo_id}\"</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_todo</span>(<span class=\"hljs-params\">todo_id: <span class=\"hljs-built_in\">int</span></span>):\n    <span class=\"hljs-keyword\">pass</span>\n</code></pre>\n<p>이제 app.py를 업데이트하여 라우터를 사용하세요.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> fastapi <span class=\"hljs-keyword\">import</span> FastAPI\n<span class=\"hljs-keyword\">from</span> routers <span class=\"hljs-keyword\">import</span> todo_router\n\napp = FastAPI()\n\napp.include_router(todo_router.router)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-keyword\">import</span> uvicorn\n    uvicorn.run(<span class=\"hljs-string\">\"app:app\"</span>, port=<span class=\"hljs-number\">3000</span>, host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, reload=<span class=\"hljs-literal\">True</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>라우터를 도입함으로써 작업 관련 라우트를 메인 app.py 파일에서 분리하여 코드를 더 깔끔하고 집중적으로 유지하였습니다.</p>\n<h2>컨트롤러 추가</h2>\n<p>다음으로, 요청 처리 로직을 처리하기 위한 컨트롤러를 도입할 예정입니다.</p>\n<p>controllers라는 새 디렉토리를 생성하고 todo_controller.py라는 파일을 추가하세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> fastapi <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">HTTPException</span>\n<span class=\"hljs-keyword\">from</span> pydantic <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">BaseModel</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoCreate</span>(<span class=\"hljs-title class_\">BaseModel</span>):\n    <span class=\"hljs-attr\">title</span>: str\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Todo</span>(<span class=\"hljs-title class_\">TodoCreate</span>):\n    <span class=\"hljs-attr\">id</span>: int\n    <span class=\"hljs-attr\">completed</span>: bool = <span class=\"hljs-title class_\">False</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoController</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self):\n        self.<span class=\"hljs-property\">todos</span> = []\n\n    def <span class=\"hljs-title function_\">create_todo</span>(self, <span class=\"hljs-attr\">todo</span>: <span class=\"hljs-title class_\">TodoCreate</span>):\n        new_todo = <span class=\"hljs-title class_\">Todo</span>(id=<span class=\"hljs-title function_\">len</span>(self.<span class=\"hljs-property\">todos</span>) + <span class=\"hljs-number\">1</span>, **todo.<span class=\"hljs-title function_\">model_dump</span>())\n        self.<span class=\"hljs-property\">todos</span>.<span class=\"hljs-title function_\">append</span>(new_todo)\n        <span class=\"hljs-keyword\">return</span> new_todo\n\n    def <span class=\"hljs-title function_\">get_todos</span>(self):\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">todos</span>\n\n    def <span class=\"hljs-title function_\">get_todo</span>(self, <span class=\"hljs-attr\">todo_id</span>: int):\n        <span class=\"hljs-keyword\">for</span> todo <span class=\"hljs-keyword\">in</span> self.<span class=\"hljs-property\">todos</span>:\n            <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-property\">id</span> == <span class=\"hljs-attr\">todo_id</span>:\n                <span class=\"hljs-keyword\">return</span> todo\n        raise <span class=\"hljs-title class_\">HTTPException</span>(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"Todo를 찾을 수 없습니다.\"</span>)\n\n    def <span class=\"hljs-title function_\">update_todo</span>(self, <span class=\"hljs-attr\">todo_id</span>: int, <span class=\"hljs-attr\">updated_todo</span>: <span class=\"hljs-title class_\">TodoCreate</span>):\n        <span class=\"hljs-keyword\">for</span> todo <span class=\"hljs-keyword\">in</span> self.<span class=\"hljs-property\">todos</span>:\n            <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-property\">id</span> == <span class=\"hljs-attr\">todo_id</span>:\n                todo.<span class=\"hljs-property\">title</span> = updated_todo.<span class=\"hljs-property\">title</span>\n                <span class=\"hljs-keyword\">return</span> todo\n        raise <span class=\"hljs-title class_\">HTTPException</span>(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"Todo를 찾을 수 없습니다.\"</span>)\n\n    def <span class=\"hljs-title function_\">delete_todo</span>(self, <span class=\"hljs-attr\">todo_id</span>: int):\n        <span class=\"hljs-keyword\">for</span> index, todo <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">enumerate</span>(self.<span class=\"hljs-property\">todos</span>):\n            <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-property\">id</span> == <span class=\"hljs-attr\">todo_id</span>:\n                del self.<span class=\"hljs-property\">todos</span>[index]\n                <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"Todo가 성공적으로 삭제되었습니다.\"</span>}\n        raise <span class=\"hljs-title class_\">HTTPException</span>(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"Todo를 찾을 수 없습니다.\"</span>)\n</code></pre>\n<p>todo_router.py 파일을 업데이트하여 컨트롤러를 사용하십시오.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> fastapi <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">APIRouter</span>\n<span class=\"hljs-keyword\">from</span> controllers.<span class=\"hljs-property\">todo_controller</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">TodoController</span>, <span class=\"hljs-title class_\">TodoCreate</span>, <span class=\"hljs-title class_\">Todo</span>\n\nrouter = <span class=\"hljs-title class_\">APIRouter</span>()\ntodo_controller = <span class=\"hljs-title class_\">TodoController</span>()\n\n@router.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/todos\"</span>, response_model=<span class=\"hljs-title class_\">Todo</span>)\ndef <span class=\"hljs-title function_\">create_todo</span>(<span class=\"hljs-attr\">todo</span>: <span class=\"hljs-title class_\">TodoCreate</span>):\n    <span class=\"hljs-keyword\">return</span> todo_controller.<span class=\"hljs-title function_\">create_todo</span>(todo)\n\n@router.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/todos\"</span>, response_model=list[<span class=\"hljs-title class_\">Todo</span>])\ndef <span class=\"hljs-title function_\">get_todos</span>():\n    <span class=\"hljs-keyword\">return</span> todo_controller.<span class=\"hljs-title function_\">get_todos</span>()\n\n@router.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/todos/{todo_id}\"</span>, response_model=<span class=\"hljs-title class_\">Todo</span>)\ndef <span class=\"hljs-title function_\">get_todo</span>(<span class=\"hljs-attr\">todo_id</span>: int):\n    <span class=\"hljs-keyword\">return</span> todo_controller.<span class=\"hljs-title function_\">get_todo</span>(todo_id)\n\n@router.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">\"/todos/{todo_id}\"</span>, response_model=<span class=\"hljs-title class_\">Todo</span>)\ndef <span class=\"hljs-title function_\">update_todo</span>(<span class=\"hljs-attr\">todo_id</span>: int, <span class=\"hljs-attr\">updated_todo</span>: <span class=\"hljs-title class_\">TodoCreate</span>):\n    <span class=\"hljs-keyword\">return</span> todo_controller.<span class=\"hljs-title function_\">update_todo</span>(todo_id, updated_todo)\n\n@router.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">\"/todos/{todo_id}\"</span>)\ndef <span class=\"hljs-title function_\">delete_todo</span>(<span class=\"hljs-attr\">todo_id</span>: int):\n    <span class=\"hljs-keyword\">return</span> todo_controller.<span class=\"hljs-title function_\">delete_todo</span>(todo_id)\n</code></pre>\n<h2>서비스 레이어 구현</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 비즈니스 로직을 처리하는 서비스 레이어를 소개해 봅시다.</p>\n<p>services 라는 새 디렉토리를 만들고 todo_service.py 라는 파일을 추가해 주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> pydantic <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">BaseModel</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoCreate</span>(<span class=\"hljs-title class_\">BaseModel</span>):\n    <span class=\"hljs-attr\">title</span>: str\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Todo</span>(<span class=\"hljs-title class_\">TodoCreate</span>):\n    <span class=\"hljs-attr\">id</span>: int\n    <span class=\"hljs-attr\">completed</span>: bool = <span class=\"hljs-title class_\">False</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoService</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self):\n        self.<span class=\"hljs-property\">todos</span> = []\n\n    def <span class=\"hljs-title function_\">create_todo</span>(self, <span class=\"hljs-attr\">todo</span>: <span class=\"hljs-title class_\">TodoCreate</span>) -> <span class=\"hljs-title class_\">Todo</span>:\n        new_todo = <span class=\"hljs-title class_\">Todo</span>(id=<span class=\"hljs-title function_\">len</span>(self.<span class=\"hljs-property\">todos</span>) + <span class=\"hljs-number\">1</span>, **todo.<span class=\"hljs-title function_\">model_dump</span>())\n        self.<span class=\"hljs-property\">todos</span>.<span class=\"hljs-title function_\">append</span>(new_todo)\n        <span class=\"hljs-keyword\">return</span> new_todo\n\n    def <span class=\"hljs-title function_\">get_todos</span>(self) -> list[<span class=\"hljs-title class_\">Todo</span>]:\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">todos</span>\n\n    def <span class=\"hljs-title function_\">get_todo</span>(self, <span class=\"hljs-attr\">todo_id</span>: int) -> <span class=\"hljs-title class_\">Todo</span> | <span class=\"hljs-title class_\">None</span>:\n        <span class=\"hljs-keyword\">for</span> todo <span class=\"hljs-keyword\">in</span> self.<span class=\"hljs-property\">todos</span>:\n            <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-property\">id</span> == <span class=\"hljs-attr\">todo_id</span>:\n                <span class=\"hljs-keyword\">return</span> todo\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">None</span>\n\n    def <span class=\"hljs-title function_\">update_todo</span>(self, <span class=\"hljs-attr\">todo_id</span>: int, <span class=\"hljs-attr\">updated_todo</span>: <span class=\"hljs-title class_\">TodoCreate</span>) -> <span class=\"hljs-title class_\">Todo</span> | <span class=\"hljs-title class_\">None</span>:\n        <span class=\"hljs-keyword\">for</span> todo <span class=\"hljs-keyword\">in</span> self.<span class=\"hljs-property\">todos</span>:\n            <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-property\">id</span> == <span class=\"hljs-attr\">todo_id</span>:\n                todo.<span class=\"hljs-property\">title</span> = updated_todo.<span class=\"hljs-property\">title</span>\n                <span class=\"hljs-keyword\">return</span> todo\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">None</span>\n\n    def <span class=\"hljs-title function_\">delete_todo</span>(self, <span class=\"hljs-attr\">todo_id</span>: int) -> <span class=\"hljs-attr\">bool</span>:\n        <span class=\"hljs-keyword\">for</span> index, todo <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">enumerate</span>(self.<span class=\"hljs-property\">todos</span>):\n            <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-property\">id</span> == <span class=\"hljs-attr\">todo_id</span>:\n                del self.<span class=\"hljs-property\">todos</span>[index]\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">True</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">False</span>\n</code></pre>\n<p>todo_controller.py를 업데이트하여 서비스를 사용하도록합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> fastapi <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">HTTPException</span>\n<span class=\"hljs-keyword\">from</span> services.<span class=\"hljs-property\">todo_service</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">TodoService</span>, <span class=\"hljs-title class_\">TodoCreate</span>, <span class=\"hljs-title class_\">Todo</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoController</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self):\n        self.<span class=\"hljs-property\">todo_service</span> = <span class=\"hljs-title class_\">TodoService</span>()\n\n    def <span class=\"hljs-title function_\">create_todo</span>(self, <span class=\"hljs-attr\">todo</span>: <span class=\"hljs-title class_\">TodoCreate</span>):\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">todo_service</span>.<span class=\"hljs-title function_\">create_todo</span>(todo)\n\n    def <span class=\"hljs-title function_\">get_todos</span>(self):\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">todo_service</span>.<span class=\"hljs-title function_\">get_todos</span>()\n\n    def <span class=\"hljs-title function_\">get_todo</span>(self, <span class=\"hljs-attr\">todo_id</span>: int):\n        todo = self.<span class=\"hljs-property\">todo_service</span>.<span class=\"hljs-title function_\">get_todo</span>(todo_id)\n        <span class=\"hljs-keyword\">if</span> todo is <span class=\"hljs-title class_\">None</span>:\n            raise <span class=\"hljs-title class_\">HTTPException</span>(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"할 일을 찾을 수 없습니다\"</span>)\n        <span class=\"hljs-keyword\">return</span> todo\n\n    def <span class=\"hljs-title function_\">update_todo</span>(self, <span class=\"hljs-attr\">todo_id</span>: int, <span class=\"hljs-attr\">updated_todo</span>: <span class=\"hljs-title class_\">TodoCreate</span>):\n        todo = self.<span class=\"hljs-property\">todo_service</span>.<span class=\"hljs-title function_\">update_todo</span>(todo_id, updated_todo)\n        <span class=\"hljs-keyword\">if</span> todo is <span class=\"hljs-title class_\">None</span>:\n            raise <span class=\"hljs-title class_\">HTTPException</span>(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"할 일을 찾을 수 없습니다\"</span>)\n        <span class=\"hljs-keyword\">return</span> todo\n\n    def <span class=\"hljs-title function_\">delete_todo</span>(self, <span class=\"hljs-attr\">todo_id</span>: int):\n        <span class=\"hljs-keyword\">if</span> self.<span class=\"hljs-property\">todo_service</span>.<span class=\"hljs-title function_\">delete_todo</span>(todo_id):\n            <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"할 일이 성공적으로 삭제되었습니다\"</span>}\n        raise <span class=\"hljs-title class_\">HTTPException</span>(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"할 일을 찾을 수 없습니다\"</span>)\n</code></pre>\n<h2>레포지터리 레이어 생성</h2>\n<p>마지막으로 데이터 지속성을 처리하는 레포지터리 레이어를 소개합니다.</p>\n<p>repositories라는 새 디렉토리를 만들고 todo_repository.py라는 파일을 추가하세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> pydantic <span class=\"hljs-keyword\">import</span> BaseModel\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoCreate</span>(<span class=\"hljs-title class_ inherited__\">BaseModel</span>):\n    title: <span class=\"hljs-built_in\">str</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Todo</span>(<span class=\"hljs-title class_ inherited__\">TodoCreate</span>):\n    <span class=\"hljs-built_in\">id</span>: <span class=\"hljs-built_in\">int</span>\n    completed: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">False</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoRepository</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.todos = []\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_todo</span>(<span class=\"hljs-params\">self, todo: TodoCreate</span>) -> Todo:\n        new_todo = Todo(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-built_in\">len</span>(self.todos) + <span class=\"hljs-number\">1</span>, **todo.model_dump())\n        self.todos.append(new_todo)\n        <span class=\"hljs-keyword\">return</span> new_todo\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_todos</span>(<span class=\"hljs-params\">self</span>) -> <span class=\"hljs-built_in\">list</span>[Todo]:\n        <span class=\"hljs-keyword\">return</span> self.todos\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_todo</span>(<span class=\"hljs-params\">self, todo_id: <span class=\"hljs-built_in\">int</span></span>) -> Todo | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">for</span> todo <span class=\"hljs-keyword\">in</span> self.todos:\n            <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-built_in\">id</span> == todo_id:\n                <span class=\"hljs-keyword\">return</span> todo\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_todo</span>(<span class=\"hljs-params\">self, todo_id: <span class=\"hljs-built_in\">int</span>, updated_todo: TodoCreate</span>) -> Todo | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">for</span> todo <span class=\"hljs-keyword\">in</span> self.todos:\n            <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-built_in\">id</span> == todo_id:\n                todo.title = updated_todo.title\n                <span class=\"hljs-keyword\">return</span> todo\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_todo</span>(<span class=\"hljs-params\">self, todo_id: <span class=\"hljs-built_in\">int</span></span>) -> <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-keyword\">for</span> index, todo <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.todos):\n            <span class=\"hljs-keyword\">if</span> todo.<span class=\"hljs-built_in\">id</span> == todo_id:\n                <span class=\"hljs-keyword\">del</span> self.todos[index]\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n</code></pre>\n<p>Update <code>todo_service.py</code> to use the repository,</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> repositories.todo_repository <span class=\"hljs-keyword\">import</span> TodoRepository, TodoCreate, Todo\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoService</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.todo_repository = TodoRepository()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_todo</span>(<span class=\"hljs-params\">self, todo: TodoCreate</span>) -> Todo:\n        <span class=\"hljs-keyword\">return</span> self.todo_repository.create_todo(todo)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_todos</span>(<span class=\"hljs-params\">self</span>) -> <span class=\"hljs-built_in\">list</span>[Todo]:\n        <span class=\"hljs-keyword\">return</span> self.todo_repository.get_todos()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_todo</span>(<span class=\"hljs-params\">self, todo_id: <span class=\"hljs-built_in\">int</span></span>) -> Todo | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> self.todo_repository.get_todo(todo_id)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_todo</span>(<span class=\"hljs-params\">self, todo_id: <span class=\"hljs-built_in\">int</span>, updated_todo: TodoCreate</span>) -> Todo | <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> self.todo_repository.update_todo(todo_id, updated_todo)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_todo</span>(<span class=\"hljs-params\">self, todo_id: <span class=\"hljs-built_in\">int</span></span>) -> <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-keyword\">return</span> self.todo_repository.delete_todo(todo_id)\n</code></pre>\n<p>우리의 리팩터링 여정은 여기서 끝납니다…</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파이썬 앱.py에서 구조화된 모듈 아키텍처로 이어지는 이 여정에서, 우리는 Todo API를 더 확장 가능하고 유지 관리 가능한 애플리케이션으로 변형시켰습니다. 라우터, 컨트롤러, 서비스 및 리포지토리를 도입함으로써, 우리는 관심사의 명확한 분리와 프로젝트 확장에 따른 복잡성 관리 능력을 향상시켰습니다.</p>\n<h2>모듈식 아키텍처의 주요 이점:</h2>\n<ul>\n<li>향상된 유지 보수성: 각 컴포넌트 - 라우터, 컨트롤러, 서비스 및 리포지토리 -는 이제 특정 책임을 처리하여 변경 시 의도치 않은 부작용의 위험을 줄입니다.</li>\n<li>향상된 테스트 용이성: 각 레이어가 명확하게 구분되어 유닛 테스트가 보다 간편해집니다. 우리는 각 컴포넌트를 독립적으로 테스트하여 응용 프로그램 전체에서 견고함과 신뢰성을 보장할 수 있습니다.</li>\n<li>확장성과 유연성: 모듈식 디자인은 확장을 용이하게 합니다. 새로운 기능을 추가하거나 기존 기능을 수정할 때 전체 코드베이스를 철저히 재작업하지 않고도 수행할 수 있습니다. 이 유연성은 데이터베이스 전환이나 비즈니스 로직 업데이트와 같은 작업에도 연결됩니다.</li>\n</ul>\n<p>우리의 리포지토리는 이제 다음과 같이 보입니다...</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><code>&#x3C;img src=\"/assets/img/2024-07-09-FastAPIFromApppytoaModularArchitecture_3.png\" /></code></p>\n<p>FastAPI 애플리케이션을 모듈식 아키텍처로 리팩토링함으로써, 지속적인 성장과 유연성을 위한 견고한 기반을 마련했습니다. 이 접근 방식은 현재 개발 노력을 향상시킬 뿐만 아니라 앞으로의 도전과 기회에 대비하는 데 도움이 됩니다.</p>\n<p>안녕히 가세요!!</p>\n</body>\n</html>\n"},"__N_SSG":true}