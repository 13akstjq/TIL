{"pageProps":{"post":{"title":"Kafka, Redis, Postgres, Kubernetes를 활용한 실시간 파이프라인 마이크로서비스 프로젝트 방법","description":"","date":"2024-07-09 19:43","slug":"2024-07-09-Real-TimePipelineMicroservicesProjectwithKafkaRedisPostgresandKubernetes","content":"\n\n# 소개\n\n이 문서는 데이터를 처리하여 분석을 위해 데이터베이스를 채우는 데 사용되는 실시간 마이크로서비스 프로젝트에 대한 안내서입니다.\n\n![이미지](/assets/img/2024-07-09-Real-TimePipelineMicroservicesProjectwithKafkaRedisPostgresandKubernetes_0.png)\n\n# STG-Service\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Redis 클라이언트\n\nRedis와 상호 작용하기 위한 간단한 클라이언트입니다. 특정 키로 객체를 가져오거나 새 키-값 쌍을 설정할 수 있습니다:\n\n```js\nimport json\nfrom typing import Dict\nimport redis\n\nclass RedisClient:\n    def __init__(self, host: str, port: int, password: str, cert_path: str) -> None:\n        self._client = redis.StrictRedis(\n            host=host,\n            port=port,\n            password=password,\n            ssl=True,\n            ssl_ca_certs=cert_path)\n    def set(self, k, v):\n        self._client.set(k, json.dumps(v))\n    def get(self, k) -> Dict:\n        obj: str = self._client.get(k)\n        return json.loads(obj)\n```\n\n# Postgres 클라이언트\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터베이스에 연결하는 것 외에도, 클라이언트는 하나의 컨텍스트 매니저의 일부로 여러 쿼리를 실행할 수 있는 기능을 제공하여 한 트랜잭션의 실행 명령을 커밋할 필요가 없어요 (나중에 사용 예제를 보게 될 거에요):\n\n```js\nfrom contextlib import contextmanager\nfrom typing import Generator\nimport psycopg2\n\nclass PgConnect:\n    def __init__(self, host: str, port: int, db_name: str, user: str, pw: str, sslmode: str = \"require\") -> None:\n        self.host = host\n        self.port = port\n        self.db_name = db_name\n        self.user = user\n        self.pw = pw\n        self.sslmode = sslmode\n    def url(self) -> str:\n        return \"\"\"\n            host={host}\n            port={port}\n            dbname={db_name}\n            user={user}\n            password={pw}\n            target_session_attrs=read-write\n            sslmode={sslmode}\n        \"\"\".format(\n            host=self.host,\n            port=self.port,\n            db_name=self.db_name,\n            user=self.user,\n            pw=self.pw,\n            sslmode=self.sslmode)\n    @contextmanager\n    def connection(self) -> Generator:\n        keepalive_kwargs = {\n            \"keepalives\": 1,\n            \"keepalives_idle\": 30,\n            \"keepalives_interval\": 5,\n            \"keepalives_count\": 5,\n        }\n        conn = psycopg2.connect(self.url(), **keepalive_kwargs)\n        try:\n            yield conn\n            conn.commit()\n        except Exception as e:\n            conn.rollback()\n            raise e\n        finally:\n            conn.close()\r\n```\n\n카프카에서 메시지를 생성하고 사용하는 두 개의 별도 및 간단한 클라이언트:\n\n```js\nimport json\nfrom typing import Dict, Optional\nfrom confluent_kafka import Consumer, Producer\n\ndef error_callback(err):\n    print('Something went wrong: {}'.format(err))\n\nclass KafkaProducer:\n    def __init__(self, host: str, port: int, user: str, password: str, topic: str, cert_path: str) -> None:\n        params = {\n            'bootstrap.servers': f'{host}:{port}',\n            'security.protocol': 'SASL_SSL',\n            'ssl.ca.location': cert_path,\n            'sasl.mechanism': 'SCRAM-SHA-512',\n            'sasl.username': user,\n            'sasl.password': password,\n            'error_cb': error_callback,\n        }\n        self.topic = topic\n        self.p = Producer(params)\n    def produce(self, payload: Dict) -> None:\n        self.p.produce(self.topic, json.dumps(payload))\n        self.p.flush(10)\n\nclass KafkaConsumer:\n    def __init__(self,\n                 host: str,\n                 port: int,\n                 user: str,\n                 password: str,\n                 topic: str,\n                 group: str,\n                 cert_path: str\n                 ) -> None:\n        params = {\n            'bootstrap.servers': f'{host}:{port}',\n            'security.protocol': 'SASL_SSL',\n            'ssl.ca.location': cert_path,\n            'sasl.mechanism': 'SCRAM-SHA-512',\n            'sasl.username': user,\n            'sasl.password': password,\n            'group.id': group,  # '',\n            'auto.offset.reset': 'earliest',\n            'enable.auto.commit': False,\n            'error_cb': error_callback,\n            'debug': 'all',\n            'client.id': 'someclientkey'\n        }\n        self.topic = topic\n        self.c = Consumer(params)\n        self.c.subscribe([topic])\n    def consume(self, timeout: float = 3.0) -> Optional[Dict]:\n        msg = self.c.poll(timeout=timeout)\n        if not msg:\n            return None\n        if msg.error():\n            raise Exception(msg.error())\n        val = msg.value().decode()\n        return json.loads(val)\r\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# STG Schema\n\n포스트그레스의 스테이징 레이어로, Kafka에서 나온 로우 메시지를 저장할 한 개의 테이블이 있을 것입니다. 이는 아래와 같이 정의되어 있습니다.\n\n```js\nCREATE SCHEMA IF NOT EXISTS stg;\n\nCREATE TABLE IF NOT EXISTS stg.order_events (\n    id SERIAL   PRIMARY KEY,\n    object_id   INTEGER NOT NULL UNIQUE,\n    object_type VARCHAR(20) NOT NULL,\n    sent_dttm   TIMESTAMP NOT NULL,\n    payload     JSON NOT NULL\n);\n```\n\n그리고 이를 실행할 파이썬 함수는:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom lib.pg.pg_connect import PgConnect\n\ndef make_stg_migrations(db: PgConnect) -> None:\n    with db.connection() as conn:\n        with conn.cursor() as cur:\n            # STG 스키마의 SQL 정의 경로는 다를 수 있습니다.\n            cur.execute(open(\"stg_schema.sql\", \"r\").read())\r\n```\n\n프로그램이 `db.connection()`으로 정의된 컨텍스트 매니저를 벗어나면 명시적으로 실행할 필요 없이 자동으로 커밋됩니다.\n\n# 메시지 처리\n\n먼저 소비된 카프카 메시지를 STG 포스트그레스 테이블(StgRepository)에 삽입한 다음, 레디스에서 레스토랑 데이터를 풍부하게하여 다른 카프카 클러스터(StgMessageProcessor)를 위한 출력 메시지를 구성해야 합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom datetime import datetime\n\nfrom lib.pg.pg_connect import PgConnect\n\nclass StgRepository:\n    def __init__(self, db: PgConnect) -> None:\n        self._db = db\n    \n    def order_events_insert(self,\n                            object_id: int,\n                            object_type: str,\n                            sent_dttm: datetime,\n                            payload: str\n                            ) -> None:\n        with self._db.connection() as conn:\n            with conn.cursor() as cur:\n                cur.execute(\n                    \"\"\"\n                        INSERT INTO stg.order_events (object_id, object_type, sent_dttm, payload) VALUES (%(object_id)s, %(object_type)s, %(sent_dttm)s, %(payload)s)\n                        ON CONFLICT (object_id)\n                        DO UPDATE \n                        SET object_type = EXCLUDED.object_type,\n                            sent_dttm = EXCLUDED.sent_dttm,\n                            payload = EXCLUDED.payload;\n                    \"\"\",\n                    {\n                        'object_id': object_id,\n                        'object_type': object_type,\n                        'sent_dttm': sent_dttm,\n                        'payload': payload\n                    }\n                )\r\n```\r\n\r\n```python\nimport json\nfrom datetime import datetime\nfrom logging import Logger\nfrom lib.kafka_connect.kafka_connectors import KafkaConsumer, KafkaProducer\nfrom lib.redis.redis_client import RedisClient\nfrom stg_loader.repository.stg_repository import StgRepository\n\nclass StgMessageProcessor:\n    def __init__(self,\n                 consumer: KafkaConsumer,\n                 producer: KafkaProducer,\n                 redis: RedisClient,\n                 stg_repository: StgRepository,\n                 logger: Logger) -> None:\n        self._logger = logger\n        self._consumer = consumer\n        self._producer = producer\n        self._redis = redis\n        self._stg_repository = stg_repository\n        self._batch_size = 100\n    \n    def run(self) -> None:\n        self._logger.info(f\"{datetime.utcnow()}: START\")\n        for i in range(self._batch_size):\n            msg = self._consumer.consume()\n            if not msg:\n                continue\n            self._stg_repository.order_events_insert(object_id=msg[\"object_id\"],\n                                                     object_type=msg[\"object_type\"],\n                                                     sent_dttm=msg[\"sent_dttm\"],\n                                                     payload=json.dumps(msg[\"payload\"]))\n            dst_msg = self._construct_output_message(msg)\n            self._producer.produce(dst_msg)\n        self._logger.info(f\"{datetime.utcnow()}: FINISH\")\n    \n    def _construct_output_message(self, original_message: dict) -> dict:\n        restaurant_id = original_message[\"payload\"][\"restaurant\"][\"id\"]\n        restaurant_data = self._redis.get(restaurant_id)\n        restaurant_name = restaurant_data[\"name\"]\n        user_id = original_message[\"payload\"][\"user\"][\"id\"]\n        user_data = self._redis.get(user_id)\n        user_name = user_data[\"name\"]\n        user_login = user_data[\"login\"]\n        order = original_message[\"payload\"]\n        restaurant_menu = {p[\"_id\"]: p for p in restaurant_data[\"menu\"]}\n        products = {p[\"id\"]: {**p, \"category\": restaurant_menu[p[\"id\"]][\"category\"]} for p in order[\"order_items\"]}\n        return {\n                \"object_id\": original_message[\"object_id\"],\n                \"object_type\": original_message[\"object_type\"],\n                \"payload\": {\n                    \"id\": original_message[\"object_id\"],\n                    \"date\": order[\"date\"],\n                    \"cost\": order[\"cost\"],\n                    \"payment\": order[\"payment\"],\n                    \"status\": order[\"final_status\"],\n                    \"restaurant\": {\n                        \"restaurant_id\": restaurant_id,\n                        \"restaurant_name\": restaurant_name\n                    },\n                    \"user\": {\n                        \"user_id\": user_id,\n                        \"user_name\": user_name,\n                        \"user_login\": user_login\n                    },\n                    \"products\": products\n                }\n            }\r\n```\r\n\r\n# 서비스 구성\r\n\r\n소스/싱크 카프카, Redis 및 포스트그레스와 연결해야 합니다. 이것은 확실히 많은 구성이 필요하며 환경 변수를 사용해야 하므로 이를 별도의 클래스에서 수용할 것입니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport os\n\nfrom lib.kafka_connect.kafka_connectors import KafkaConsumer, KafkaProducer\nfrom lib.redis.redis_client import RedisClient\nfrom lib.pg.pg_connect import PgConnect\nfrom stg_loader.repository.stg_repository import StgRepository\n\nclass AppConfig:\n    CERTIFICATE_PATH = '/crt/YandexInternalRootCA.crt'\n    DEFAULT_JOB_INTERVAL = 25\n    def __init__(self) -> None:\n        self.kafka_host = str(os.getenv('KAFKA_HOST') or \"\")\n        self.kafka_port = int(str(os.getenv('KAFKA_PORT')) or 0)\n        self.kafka_consumer_username = str(os.getenv('KAFKA_CONSUMER_USERNAME') or \"\")\n        self.kafka_consumer_password = str(os.getenv('KAFKA_CONSUMER_PASSWORD') or \"\")\n        self.kafka_consumer_group = str(os.getenv('KAFKA_CONSUMER_GROUP') or \"\")\n        self.kafka_consumer_topic = str(os.getenv('KAFKA_SOURCE_TOPIC') or \"\")\n        self.kafka_producer_username = str(os.getenv('KAFKA_PRODUCER_USERNAME') or \"\")\n        self.kafka_producer_password = str(os.getenv('KAFKA_PRODUCER_PASSWORD') or \"\")\n        self.kafka_producer_topic = str(os.getenv('KAFKA_DESTINATION_TOPIC') or \"\")\n        self.redis_host = str(os.getenv('REDIS_HOST') or \"\")\n        self.redis_port = int(str(os.getenv('REDIS_PORT')) or 0)\n        self.redis_password = str(os.getenv('REDIS_PASSWORD') or \"\")\n        self.pg_host = str(os.getenv('PG_HOST') or \"\")\n        self.pg_port = int(str(os.getenv('PG_PORT')) or 6432)\n        self.pg_db_name = str(os.getenv(\"PG_DB_NAME\"))\n        self.pg_user = str(os.getenv('PG_USER') or \"\")\n        self.pg_password = str(os.getenv('PG_PASSWORD') or \"\")\n    def kafka_producer(self):\n        return KafkaProducer(\n            self.kafka_host,\n            self.kafka_port,\n            self.kafka_producer_username,\n            self.kafka_producer_password,\n            self.kafka_producer_topic,\n            self.CERTIFICATE_PATH\n        )\n    def kafka_consumer(self):\n        return KafkaConsumer(\n            self.kafka_host,\n            self.kafka_port,\n            self.kafka_consumer_username,\n            self.kafka_consumer_password,\n            self.kafka_consumer_topic,\n            self.kafka_consumer_group,\n            self.CERTIFICATE_PATH\n        )\n    def redis_client(self) -> RedisClient:\n        return RedisClient(\n            self.redis_host,\n            self.redis_port,\n            self.redis_password,\n            self.CERTIFICATE_PATH\n        )\n    def stg_loader(self) -> StgRepository:\n        db: PgConnect = PgConnect(\n            self.pg_host,\n            self.pg_port,\n            self.pg_db_name,\n            self.pg_user,\n            self.pg_password\n        )\n        return StgRepository(db)\n    def pg_client(self) -> PgConnect:\n        return PgConnect(\n            self.pg_host,\n            self.pg_port,\n            self.pg_db_name,\n            self.pg_user,\n            self.pg_password\n        )\r\n```\n\n# STG Service 실행\n\nStgMessageProcessor를 백그라운드 프로세스로 실행해야 합니다 (apscheduler 파이썬 모듈의 BackgroundScheduler를 사용할 것입니다) 그리고 건강 상태를 확인하는 간단한 API를 추가할 것입니다.\n\n```python\nimport os\nimport logging\n\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom flask import Flask\nfrom stg_loader.stg_message_processor_job import StgMessageProcessor\nfrom app_config import AppConfig\nfrom stg_migrations import make_stg_migrations\n\napp = Flask(__name__)\n\n# 서비스가 정상인지 확인할 수 있는 엔드포인트 생성\n@app.get('/health')\ndef health():\n    return 'healthy'\n\nif __name__ == '__main__':\n    app.logger.setLevel(logging.DEBUG)\n    config = AppConfig()\n    make_stg_migrations(config.pg_client())\n    proc = StgMessageProcessor(logger=app.logger,\n                               consumer=config.kafka_consumer(),\n                               producer=config.kafka_producer(),\n                               redis=config.redis_client(),\n                               stg_repository=config.stg_loader())\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(func=proc.run, trigger=\"interval\", seconds=config.DEFAULT_JOB_INTERVAL)\n    scheduler.start()\n    app.run(debug=True, host='0.0.0.0', use_reloader=False)\r\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Dockerfile\n\n스테이징 서비스는 코어크레이트 기반의 쿠버네티스 클러스터에서 실행될 예정이므로, 서비스를 도커 이미지로 만들어주어야 합니다.\n\n```js\nFROM python:3.10\n\nRUN apt-get update -y\n# 컨테이너 내에서 confluent_kafka 파이썬 모듈이 작동되도록 필요합니다\nRUN git clone https://github.com/edenhill/librdkafka && cd librdkafka && ./configure && make && make install && ldconfig\nCOPY . .\nRUN pip install -r requirements.txt\n# Kafka 클러스터에 안전한 연결을 위한 인증서 다운로드\nRUN mkdir -p /crt\nRUN wget \"https://storage.yandexcloud.net/cloud-certs/CA.pem\" --output-document /crt/YandexInternalRootCA.crt\nRUN chmod 0600 /crt/YandexInternalRootCA.crt\nWORKDIR /src\n# 파이썬 임포트가 작동되도록 설정\nENV PYTHONPATH \"${PYTHONPATH}:/src\"\nENTRYPOINT [\"python\"]\nCMD [\"app.py\"]\n```\n\n로컬 테스트를 위해 Docker Compose를 사용하여 스테이징 서비스를 실행할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```yaml\nversion: \"3.9\"\n\nservices:\n  stg_service:\n    build:\n      context: .\n      network: host\n    image: stg_img:local\n    container_name: stg_container\n    environment:\n      FLASK_APP: ${STG_SERVICE_APP_NAME:-stg_service}\n      DEBUG: ${STG_SERVICE_DEBUG:-True}\n      KAFKA_HOST: ${KAFKA_HOST}\n      KAFKA_PORT: ${KAFKA_PORT}\n      KAFKA_CONSUMER_USERNAME: ${KAFKA_CONSUMER_USERNAME}\n      KAFKA_CONSUMER_PASSWORD: ${KAFKA_CONSUMER_PASSWORD}\n      KAFKA_CONSUMER_GROUP: ${KAFKA_CONSUMER_GROUP}\n      KAFKA_SOURCE_TOPIC: ${KAFKA_SOURCE_TOPIC}\n      KAFKA_DESTINATION_TOPIC: ${KAFKA_DESTINATION_TOPIC}\n      KAFKA_PRODUCER_USERNAME: ${KAFKA_PRODUCER_USERNAME}\n      KAFKA_PRODUCER_PASSWORD: ${KAFKA_PRODUCER_PASSWORD}\n      REDIS_HOST: ${REDIS_HOST}\n      REDIS_PORT: ${REDIS_PORT}\n      REDIS_PASSWORD: ${REDIS_PASSWORD}\n      PG_HOST: ${PG_HOST}\n      PG_PORT: ${PG_PORT}\n      PG_DB_NAME: ${PG_DB_NAME}\n      PG_USER: ${PG_USER}\n      PG_PASSWORD: ${PG_PASSWORD}\n    network_mode: \"bridge\"\n    ports:\n      - \"5101:5000\"\n    restart: unless-stopped\n```\n\n.env 파일:\n\n```yaml\nKAFKA_HOST=******.mdb.yandexcloud.net\nKAFKA_PORT=9091\nKAFKA_CONSUMER_USERNAME=producer_consumer\nKAFKA_CONSUMER_PASSWORD=******\nKAFKA_CONSUMER_GROUP=test-consumer1\nKAFKA_SOURCE_TOPIC=dds_input_topic\nKAFKA_PRODUCER_USERNAME=producer_consumer\nKAFKA_PRODUCER_PASSWORD=*******\nKAFKA_DESTINATION_TOPIC=cdm_input_topic\n\nREDIS_HOST=******.mdb.yandexcloud.net\nREDIS_PORT=6380\nREDIS_PASSWORD=******\nPG_HOST=********.mdb.yandexcloud.net\nPG_PORT=6432\nPG_DB_NAME=sprint9dwh\nPG_USER=yandex_pg\nPG_PASSWORD=**********\n```\n\n# HELM 차트\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nChart.yaml 파일:\n\n```yaml\napiVersion: v2\nname: first-service\ndescription: 쿠버네티스용 헬름 차트\n\n# 차트는 'application' 또는 'library' 차트 중 하나일 수 있습니다.\n#\n# Application 차트는 템플릿 모음이며 버전이 지정된 아카이브로 패키지화하여 배포될 수 있습니다.\n#\n# Library 차트는 차트 개발자를 위한 유용한 유틸리티 또는 함수를 제공합니다. Application 차트의 종속성으로 포함되어\n# 렌더링 파이프라인에 이러한 유틸리티와 함수를 삽입합니다. Library 차트는 템플릿을 정의하지 않으며 따라서 배포될 수 없습니다.\ntype: application\n# 이것은 차트 버전입니다. 이 번호는 차트 및 해당 템플릿에 변경이 있을 때마다 증가해야 합니다.\n# 버전은 Semantic Versioning (https://semver.org/)을 따르는 것으로 예상됩니다.\nversion: 0.1.0\n# 이것은 배포되는 애플리케이션의 버전 번호입니다. 이 버전 번호는 애플리케이션에 변경이 있는 경우마다 증가해야 합니다.\n# 버전은 Semantic Versioning을 따르지 않습니다. 애플리케이션이 사용 중인 버전을 반영해야 합니다.\n# 따옴표와 함께 사용하는 것이 권장됩니다.\nappVersion: \"1.16.0\"\n```\n\nvalues.yaml 파일:\n\n```yaml\n# 앱의 기본 값.\n# 이것은 YAML 형식의 파일입니다.\n# 템플릿에 전달할 변수를 선언합니다.\n\nreplicaCount: 3\nimage:\n  # 컨테이너 레지스트리에 대한 링크. 야н덱스 클라우드에서 실행할 것입니다.\n  repository: cr.yandex/crpr6naar69761ehm0bp/stg_service\n  pullPolicy: IfNotPresent\n  # 기본적으로 차트 appVersion인 이미지 태그를 덮어씁니다.\n  tag: \"v2022-12-13-r1\"\ncontainerPort: 5000\nconfig:\n  KAFKA_HOST: rc1a-hins1kp5qsfnsob3.mdb.yandexcloud.net\n  KAFKA_PORT: '9091'\n  KAFKA_CONSUMER_USERNAME: producer_consumer\n  KAFKA_CONSUMER_PASSWORD: '*****'\n  KAFKA_CONSUMER_GROUP: test-consumer1\n  KAFKA_SOURCE_TOPIC: order-service_orders\n  KAFKA_PRODUCER_USERNAME: producer_consumer\n  KAFKA_PRODUCER_PASSWORD: '*****'\n  KAFKA_DESTINATION_TOPIC: dds_topic_name\n  REDIS_HOST: c-c9qeltiiu2rkcr6v9net.rw.mdb.yandexcloud.net\n  REDIS_PORT: '6380'\n  REDIS_PASSWORD: '*****'\n  PG_HOST: rc1b-4olk4uzgdrdte114.mdb.yandexcloud.net\n  PG_PORT: '6432'\n  PG_DB_NAME: sprint9dwh\n  PG_USER: yandex_pg\n  PG_PASSWORD: '*****'\nimagePullSecrets: []\nnameOverride: \"\"\nfullnameOverride: \"\"\npodAnnotations: {}\nresources:\n  # 일반적으로 기본 리소스를 지정하지 않고 사용자의 명시적인 선택으로 유지하는 것을 권장합니다.\n  # 이것은 Minikube와 같은 리소스가 적은 환경에서 차트 실행 기회를 높이기도 합니다.\n  # 리소스를 지정하려면 아래 줄 주석 처리를 해제하고 필요에 맞게 조정한 다음 'resources:' 뒤의 중괄호를 제거하세요.\n  limits:\n    cpu: 100m\n    memory: 128Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```yaml\ntemplates/configmap.yaml은 우리 서비스의 구성을 저장하는 k8s 엔터티입니다. values.yaml 파일의 config 블록에서 모든 키-값 쌍을 가져올 것입니다:\n\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ include \"app.fullname\" . }}-config\n  labels:\n    {{- include \"app.labels\" . | nindent 4 }}\n{{- with .Values.config }}\ndata:\n  {{- toYaml . | nindent 2 }}\n{{- end }}\n\ntemplates/deployment.yaml 파일\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"app.fullname\" . }}\n  labels:\n    {{- include \"app.labels\" . | nindent 4 }}\nspec:\n  replicas: {{ .Values.replicaCount }}\n  selector:\n    matchLabels:\n      {{- include \"app.selectorLabels\" . | nindent 6 }}\n  template:\n    metadata:\n      {{- with .Values.podAnnotations }}\n      annotations:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      labels:\n        {{- include \"app.selectorLabels\" . | nindent 8 }}\n    spec:\n      {{- with .Values.imagePullSecrets }}\n      imagePullSecrets:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      containers:\n        - name: {{ .Chart.Name }}\n          securityContext:\n            {{- toYaml .Values.securityContext | nindent 12 }}\n          image: \"{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}\"\n          imagePullPolicy: {{ .Values.image.pullPolicy }}\n          envFrom:\n            - configMapRef:\n                name: {{ include \"app.fullname\" . }}-config\n          ports:\n            - name: http\n              containerPort: {{ .Values.containerPort }}\n              protocol: TCP\n          resources:\n            {{- toYaml .Values.resources | nindent 12 }}\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSTG-Service의 소스 코드는 여기에서 찾을 수 있어요.\n\n# DDS-Service\n\nSTG-Service 이후의 모든 것은 실제로 매우 쉬워집니다. 다른 서비스들도 거의 동일한 구조를 사용하기 때문이죠. DDS-Service의 경우, 모든 클라이언트 정의가 동일합니다. Dockerfile, Docker Compose 및 HELM Chart는 거의 동일합니다. 여기에서 소스 코드를 확인할 수 있어요.\n\n가장 큰 차이점은 데이터 모델링 방식에 있습니다 (Data Vault 2.0을 사용합니다):\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nCREATE SCHEMA IF NOT EXISTS dds;\n\n-- 데이터 보트 --\n-- 허브 --\nCREATE TABLE IF NOT EXISTS dds.h_user (\n    h_user_pk UUID PRIMARY KEY,\n    user_id   VARCHAR NOT NULL UNIQUE,\n    load_dt   TIMESTAMP NOT NULL,\n    load_src  VARCHAR NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.h_product (\n    h_product_pk UUID PRIMARY KEY,\n    product_id   VARCHAR NOT NULL UNIQUE,\n    load_dt      TIMESTAMP NOT NULL,\n    load_src     VARCHAR NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.h_category (\n    h_category_pk UUID PRIMARY KEY,\n    category_name VARCHAR NOT NULL UNIQUE,\n    load_dt       TIMESTAMP NOT NULL,\n    load_src      VARCHAR NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.h_restaurant (\n    h_restaurant_pk UUID PRIMARY KEY,\n    restaurant_id   VARCHAR NOT NULL UNIQUE,\n    load_dt         TIMESTAMP NOT NULL,\n    load_src        VARCHAR NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.h_order (\n    h_order_pk UUID PRIMARY KEY,\n    order_id   INTEGER NOT NULL UNIQUE,\n    order_dt   TIMESTAMP NOT NULL,\n    load_dt    TIMESTAMP NOT NULL,\n    load_src   VARCHAR NOT NULL\n);\n-- 훗들 --\nCREATE TABLE IF NOT EXISTS dds.s_user_names (\n    hk_user_names_pk UUID PRIMARY KEY,\n    h_user_pk        UUID NOT NULL UNIQUE REFERENCES dds.h_user (h_user_pk),\n    username         VARCHAR NOT NULL,\n    userlogin        VARCHAR NOT NULL,\n    load_src         VARCHAR NOT NULL,\n    load_dt          TIMESTAMP NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.s_product_names (\n    hk_product_names_pk UUID PRIMARY KEY,\n    h_product_pk        UUID NOT NULL UNIQUE REFERENCES dds.h_product (h_product_pk),\n    name                VARCHAR NOT NULL,\n    load_src            VARCHAR NOT NULL,\n    load_dt             TIMESTAMP NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.s_restaurant_names (\n    hk_restaurant_names_pk UUID PRIMARY KEY,\n    h_restaurant_pk        UUID NOT NULL UNIQUE REFERENCES dds.h_restaurant (h_restaurant_pk),\n    name                   VARCHAR NOT NULL,\n    load_src               VARCHAR NOT NULL,\n    load_dt                TIMESTAMP NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.s_order_cost (\n    hk_order_cost_pk UUID PRIMARY KEY,\n    h_order_pk       UUID NOT NULL UNIQUE REFERENCES dds.h_order (h_order_pk),\n    cost             DECIMAL(19, 5) NOT NULL,\n    payment          DECIMAL(19, 5) NOT NULL,\n    load_src         VARCHAR NOT NULL,\n    load_dt          TIMESTAMP NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.s_order_status (\n    hk_order_status_pk UUID PRIMARY KEY,\n    h_order_pk         UUID NOT NULL UNIQUE REFERENCES dds.h_order (h_order_pk),\n    status             VARCHAR NOT NULL,\n    load_src           VARCHAR NOT NULL,\n    load_dt            TIMESTAMP NOT NULL\n);\n-- 링크 --\nCREATE TABLE IF NOT EXISTS dds.l_order_product (\n    hk_order_product_pk UUID PRIMARY KEY,\n    h_order_pk          UUID NOT NULL REFERENCES dds.h_order (h_order_pk),\n    h_product_pk        UUID NOT NULL REFERENCES dds.h_product (h_product_pk),\n    load_src            VARCHAR NOT NULL,\n    load_dt             TIMESTAMP NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.l_product_restaurant (\n    hk_product_restaurant_pk UUID PRIMARY KEY,\n    h_restaurant_pk          UUID NOT NULL REFERENCES dds.h_restaurant (h_restaurant_pk),\n    h_product_pk             UUID NOT NULL REFERENCES dds.h_product (h_product_pk),\n    load_src                 VARCHAR NOT NULL,\n    load_dt                  TIMESTAMP NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.l_product_category (\n    hk_product_category_pk UUID PRIMARY KEY,\n    h_category_pk          UUID NOT NULL REFERENCES dds.h_category (h_category_pk),\n    h_product_pk           UUID NOT NULL REFERENCES dds.h_product (h_product_pk),\n    load_src               VARCHAR NOT NULL,\n    load_dt                TIMESTAMP NOT NULL\n);\nCREATE TABLE IF NOT EXISTS dds.l_order_user (\n    hk_order_user_pk UUID PRIMARY KEY,\n    h_order_pk       UUID NOT NULL REFERENCES dds.h_order (h_order_pk),\n    h_user_pk        UUID NOT NULL REFERENCES dds.h_user (h_user_pk),\n    load_src         VARCHAR NOT NULL,\n    load_dt          TIMESTAMP NOT NULL\n);\r\n\n우리 DDS-Service의 소스 Kafka 메시지는 STG-Service의 출력 메시지입니다. 또 다른 차이점은 Postgres에 이러한 메시지를 저장하는 방식에 있습니다. 데이터 보트 모델을 사용하므로 약간 복잡해집니다:\n\nimport os\nimport uuid\nfrom datetime import datetime\n\nfrom lib.pg.pg_connect import PgConnect\nfrom psycopg2.extras import execute_batch\n\nclass DdsRepository:\n    def __init__(self, db: PgConnect) -> None:\n        self._db = db\n        self._batch_size = 20\n    def h_user_insert(self, user_id: str) -> None:\n        with self._db.connection() as conn:\n            with conn.cursor() as cur:\n                cur.execute(\"\"\"\n                    INSERT INTO dds.h_user (h_user_pk, user_id, load_dt, load_src) VALUES (%(h_user_pk)s, %(user_id)s, %(load_dt)s, %(load_src)s)\n                    ON CONFLICT (user_id)\n                    DO NOTHING;\n                \"\"\",\n                {\n                    \"h_user_pk\": str(uuid.uuid4()),\n                    \"user_id\": user_id,\n                    \"load_dt\": datetime.now(),\n                    \"load_src\": str(os.getenv('KAFKA_SOURCE_TOPIC') or \"\")\n                })\n    def s_user_names_insert(self, user_id: str, username: str, userlogin: str) -> None:\n        with self._db.connection() as conn:\n            with conn.cursor() as cur:\n                cur.execute(f\"SELECT h_user_pk FROM dds.h_user WHERE user_id = '{user_id}'\")\n                h_user_pk = cur.fetchone()[0]\n                cur.execute(\"\"\"\n                    INSERT INTO dds.s_user_names (hk_user_names_pk, h_user_pk, username, userlogin, load_dt, load_src) VALUES (%(hk_user_names_pk)s, %(h_user_pk)s, %(username)s, %(userlogin)s, %(load_dt)s, %(load_src)s)\n                    ON CONFLICT (h_user_pk)\n                    DO NOTHING;\n                \"\"\",\n                {\n                    \"hk_user_names_pk\": str(uuid.uuid4()),\n                    \"h_user_pk\": h_user_pk,\n                    \"username\": username,\n                    \"userlogin\": userlogin,\n                    \"load_dt\": datetime.now(),\n                    \"load_src\": str(os.getenv('KAFKA_SOURCE_TOPIC') or \"\")\n                })\n    def h_order_insert(self, order_id: str, order_dt: datetime) -> None:\n        with self._db.connection() as conn:\n            with conn.cursor() as cur:\n                cur.execute(\"\"\"\n                    INSERT INTO dds.h_order (h_order_pk, order_id, order_dt, load_dt, load_src) VALUES (%(h_order_pk)s, %(order_id)s, %(order_dt)s, %(load_dt)s, %(load_src)s)\n                    ON CONFLICT (order_id)\n                    DO NOTHING;\n                \"\"\",\n                {\n                    \"h_order_pk\": str(uuid.uuid4()),\n                    \"order_id\": order_id,\n                    \"order_dt\": order_dt,\n                    \"load_dt\": datetime.now(),\n                    \"load_src\": str(os.getenv('KAFKA_SOURCE_TOPIC') or \"\")\n                })\n    def s_order_cost_insert(self, order_id: str, cost: float, payment: float) -> None:\n        with self._db.connection() as conn:\n            with conn.cursor() as cur:\n                cur.execute(f\"SELECT h_order_pk FROM dds.h_order WHERE order_id = '{order_id}'\")\n                h_order_pk = cur.fetchone()[0]\n                cur.execute(\"\"\"\n                    INSERT INTO dds.s_order_cost (hk_order_cost_pk, h_order_pk, cost, payment, load_dt, load_src) VALUES (%(hk_order_cost_pk)s, %(h_order_pk)s, %(cost)s, %(payment)s, %(load_dt)s, %(load_src)s)\n                    ON CONFLICT (h_order_pk)\n                    DO UPDATE SET cost = EXCLUDED.cost,\n                                  payment = EXCLUDED.payment;\n                \"\"\",\n                {\n                    \"hk_order_cost_pk\": str(uuid.uuid4()),\n                    \"h_order_pk\": h_order_pk,\n                    \"cost\": cost,\n                    \"payment\": payment,\n                    \"load_dt\": datetime.now(),\n                    \"load_src\": str(os.getenv('KAFKA_SOURCE_TOPIC') or \"\")\n                })\n    def s_order_status_insert(self, order_id: str, status: str) -> None:\n        with self._db.connection() as conn:\n            with conn.cursor() as cur:\n                cur.execute(f\"SELECT h_order_pk FROM dds.h_order WHERE order_id = '{order_id}'\")\n                h_order_pk = cur.fetchone()[0]\n                cur.execute(\"\"\"\n                    INSERT INTO dds.s_order_status (hk_order_status_pk, h_order_pk, status, load_dt, load_src) VALUES (%(hk_order_status_pk)s, %(h_order_pk)s, %(status)s, %(load_dt)s, %(load_src)s)\n                    ON CONFLICT (h_order_pk)\n                    DO UPDATE SET status=EXCLUDED.status;\n                \"\"\",\n                {\n                    \"hk_order_status_pk\": str(uuid.uuid4()),\n                    \"h_order_pk\": h_order_pk,\n                    \"status\": status,\n                    \"load_dt\": datetime.now(),\n                    \"load_src\": str(os.getenv('KAFKA_SOURCE_TOPIC') or \"\")\n                })\n    def l_order_user_insert(self, user_id: str, order_id:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리는 수신 메시지를 HUB, SATELLITE 및 LINK로 분할합니다 - 이는 우리 데이터 모델의 주요 개체입니다. 또한, 마지막 단계로, 메시지를 출력 Kafka 클러스터로 준비하여 다음 다운스트림 서비스에 전달합니다.\n\napp.py 파일은 기본적으로 동일합니다: 서비스를 백그라운드 작업으로 실행하고 서비스의 상태를 확인하기 위한 간단한 API를 생성합니다.\n\n# CDM-Service\n\n다른 서비스들과 유사하게 작동하며 여기에서 확인할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 스택아데믹 🎓\n\n끝까지 읽어주셔서 감사합니다. 떠나시기 전에:\n\n- 작가를 클랩하고 팔로우해주시면 감사하겠습니다! 👏\n- 저희를 팔로우해주세요: X | LinkedIn | YouTube | Discord\n- 저희 다른 플랫폼도 방문해주세요: In Plain English | CoFeed | Differ\n- 스택아데믹닷컴에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-07-09-Real-TimePipelineMicroservicesProjectwithKafkaRedisPostgresandKubernetes_0.png"},"coverImage":"/assets/img/2024-07-09-Real-TimePipelineMicroservicesProjectwithKafkaRedisPostgresandKubernetes_0.png","tag":["Tech"],"readingTime":34},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>소개</h1>\n<p>이 문서는 데이터를 처리하여 분석을 위해 데이터베이스를 채우는 데 사용되는 실시간 마이크로서비스 프로젝트에 대한 안내서입니다.</p>\n<p><img src=\"/assets/img/2024-07-09-Real-TimePipelineMicroservicesProjectwithKafkaRedisPostgresandKubernetes_0.png\" alt=\"이미지\"></p>\n<h1>STG-Service</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Redis 클라이언트</h1>\n<p>Redis와 상호 작용하기 위한 간단한 클라이언트입니다. 특정 키로 객체를 가져오거나 새 키-값 쌍을 설정할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Dict</span>\n<span class=\"hljs-keyword\">import</span> redis\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisClient</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self, <span class=\"hljs-attr\">host</span>: str, <span class=\"hljs-attr\">port</span>: int, <span class=\"hljs-attr\">password</span>: str, <span class=\"hljs-attr\">cert_path</span>: str) -> <span class=\"hljs-title class_\">None</span>:\n        self.<span class=\"hljs-property\">_client</span> = redis.<span class=\"hljs-title class_\">StrictRedis</span>(\n            host=host,\n            port=port,\n            password=password,\n            ssl=<span class=\"hljs-title class_\">True</span>,\n            ssl_ca_certs=cert_path)\n    def <span class=\"hljs-title function_\">set</span>(self, k, v):\n        self.<span class=\"hljs-property\">_client</span>.<span class=\"hljs-title function_\">set</span>(k, json.<span class=\"hljs-title function_\">dumps</span>(v))\n    def <span class=\"hljs-title function_\">get</span>(self, k) -> <span class=\"hljs-title class_\">Dict</span>:\n        <span class=\"hljs-attr\">obj</span>: str = self.<span class=\"hljs-property\">_client</span>.<span class=\"hljs-title function_\">get</span>(k)\n        <span class=\"hljs-keyword\">return</span> json.<span class=\"hljs-title function_\">loads</span>(obj)\n</code></pre>\n<h1>Postgres 클라이언트</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>데이터베이스에 연결하는 것 외에도, 클라이언트는 하나의 컨텍스트 매니저의 일부로 여러 쿼리를 실행할 수 있는 기능을 제공하여 한 트랜잭션의 실행 명령을 커밋할 필요가 없어요 (나중에 사용 예제를 보게 될 거에요):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> contextlib <span class=\"hljs-keyword\">import</span> contextmanager\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Generator</span>\n<span class=\"hljs-keyword\">import</span> psycopg2\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PgConnect</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self, <span class=\"hljs-attr\">host</span>: str, <span class=\"hljs-attr\">port</span>: int, <span class=\"hljs-attr\">db_name</span>: str, <span class=\"hljs-attr\">user</span>: str, <span class=\"hljs-attr\">pw</span>: str, <span class=\"hljs-attr\">sslmode</span>: str = <span class=\"hljs-string\">\"require\"</span>) -> <span class=\"hljs-title class_\">None</span>:\n        self.<span class=\"hljs-property\">host</span> = host\n        self.<span class=\"hljs-property\">port</span> = port\n        self.<span class=\"hljs-property\">db_name</span> = db_name\n        self.<span class=\"hljs-property\">user</span> = user\n        self.<span class=\"hljs-property\">pw</span> = pw\n        self.<span class=\"hljs-property\">sslmode</span> = sslmode\n    def <span class=\"hljs-title function_\">url</span>(self) -> <span class=\"hljs-attr\">str</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n            host={host}\n            port={port}\n            dbname={db_name}\n            user={user}\n            password={pw}\n            target_session_attrs=read-write\n            sslmode={sslmode}\n        \"</span><span class=\"hljs-string\">\"\"</span>.<span class=\"hljs-title function_\">format</span>(\n            host=self.<span class=\"hljs-property\">host</span>,\n            port=self.<span class=\"hljs-property\">port</span>,\n            db_name=self.<span class=\"hljs-property\">db_name</span>,\n            user=self.<span class=\"hljs-property\">user</span>,\n            pw=self.<span class=\"hljs-property\">pw</span>,\n            sslmode=self.<span class=\"hljs-property\">sslmode</span>)\n    @contextmanager\n    def <span class=\"hljs-title function_\">connection</span>(self) -> <span class=\"hljs-title class_\">Generator</span>:\n        keepalive_kwargs = {\n            <span class=\"hljs-string\">\"keepalives\"</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"keepalives_idle\"</span>: <span class=\"hljs-number\">30</span>,\n            <span class=\"hljs-string\">\"keepalives_interval\"</span>: <span class=\"hljs-number\">5</span>,\n            <span class=\"hljs-string\">\"keepalives_count\"</span>: <span class=\"hljs-number\">5</span>,\n        }\n        conn = psycopg2.<span class=\"hljs-title function_\">connect</span>(self.<span class=\"hljs-title function_\">url</span>(), **keepalive_kwargs)\n        <span class=\"hljs-attr\">try</span>:\n            <span class=\"hljs-keyword\">yield</span> conn\n            conn.<span class=\"hljs-title function_\">commit</span>()\n        except <span class=\"hljs-title class_\">Exception</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">e</span>:\n            conn.<span class=\"hljs-title function_\">rollback</span>()\n            raise e\n        <span class=\"hljs-attr\">finally</span>:\n            conn.<span class=\"hljs-title function_\">close</span>()\n</code></pre>\n<p>카프카에서 메시지를 생성하고 사용하는 두 개의 별도 및 간단한 클라이언트:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Dict</span>, <span class=\"hljs-title class_\">Optional</span>\n<span class=\"hljs-keyword\">from</span> confluent_kafka <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Consumer</span>, <span class=\"hljs-title class_\">Producer</span>\n\ndef <span class=\"hljs-title function_\">error_callback</span>(err):\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'Something went wrong: {}'</span>.<span class=\"hljs-title function_\">format</span>(err))\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KafkaProducer</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self, <span class=\"hljs-attr\">host</span>: str, <span class=\"hljs-attr\">port</span>: int, <span class=\"hljs-attr\">user</span>: str, <span class=\"hljs-attr\">password</span>: str, <span class=\"hljs-attr\">topic</span>: str, <span class=\"hljs-attr\">cert_path</span>: str) -> <span class=\"hljs-title class_\">None</span>:\n        params = {\n            <span class=\"hljs-string\">'bootstrap.servers'</span>: f<span class=\"hljs-string\">'{host}:{port}'</span>,\n            <span class=\"hljs-string\">'security.protocol'</span>: <span class=\"hljs-string\">'SASL_SSL'</span>,\n            <span class=\"hljs-string\">'ssl.ca.location'</span>: cert_path,\n            <span class=\"hljs-string\">'sasl.mechanism'</span>: <span class=\"hljs-string\">'SCRAM-SHA-512'</span>,\n            <span class=\"hljs-string\">'sasl.username'</span>: user,\n            <span class=\"hljs-string\">'sasl.password'</span>: password,\n            <span class=\"hljs-string\">'error_cb'</span>: error_callback,\n        }\n        self.<span class=\"hljs-property\">topic</span> = topic\n        self.<span class=\"hljs-property\">p</span> = <span class=\"hljs-title class_\">Producer</span>(params)\n    def <span class=\"hljs-title function_\">produce</span>(self, <span class=\"hljs-attr\">payload</span>: <span class=\"hljs-title class_\">Dict</span>) -> <span class=\"hljs-title class_\">None</span>:\n        self.<span class=\"hljs-property\">p</span>.<span class=\"hljs-title function_\">produce</span>(self.<span class=\"hljs-property\">topic</span>, json.<span class=\"hljs-title function_\">dumps</span>(payload))\n        self.<span class=\"hljs-property\">p</span>.<span class=\"hljs-title function_\">flush</span>(<span class=\"hljs-number\">10</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KafkaConsumer</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self,\n                 <span class=\"hljs-attr\">host</span>: str,\n                 <span class=\"hljs-attr\">port</span>: int,\n                 <span class=\"hljs-attr\">user</span>: str,\n                 <span class=\"hljs-attr\">password</span>: str,\n                 <span class=\"hljs-attr\">topic</span>: str,\n                 <span class=\"hljs-attr\">group</span>: str,\n                 <span class=\"hljs-attr\">cert_path</span>: str\n                 ) -> <span class=\"hljs-title class_\">None</span>:\n        params = {\n            <span class=\"hljs-string\">'bootstrap.servers'</span>: f<span class=\"hljs-string\">'{host}:{port}'</span>,\n            <span class=\"hljs-string\">'security.protocol'</span>: <span class=\"hljs-string\">'SASL_SSL'</span>,\n            <span class=\"hljs-string\">'ssl.ca.location'</span>: cert_path,\n            <span class=\"hljs-string\">'sasl.mechanism'</span>: <span class=\"hljs-string\">'SCRAM-SHA-512'</span>,\n            <span class=\"hljs-string\">'sasl.username'</span>: user,\n            <span class=\"hljs-string\">'sasl.password'</span>: password,\n            <span class=\"hljs-string\">'group.id'</span>: group,  # <span class=\"hljs-string\">''</span>,\n            <span class=\"hljs-string\">'auto.offset.reset'</span>: <span class=\"hljs-string\">'earliest'</span>,\n            <span class=\"hljs-string\">'enable.auto.commit'</span>: <span class=\"hljs-title class_\">False</span>,\n            <span class=\"hljs-string\">'error_cb'</span>: error_callback,\n            <span class=\"hljs-string\">'debug'</span>: <span class=\"hljs-string\">'all'</span>,\n            <span class=\"hljs-string\">'client.id'</span>: <span class=\"hljs-string\">'someclientkey'</span>\n        }\n        self.<span class=\"hljs-property\">topic</span> = topic\n        self.<span class=\"hljs-property\">c</span> = <span class=\"hljs-title class_\">Consumer</span>(params)\n        self.<span class=\"hljs-property\">c</span>.<span class=\"hljs-title function_\">subscribe</span>([topic])\n    def <span class=\"hljs-title function_\">consume</span>(self, <span class=\"hljs-attr\">timeout</span>: float = <span class=\"hljs-number\">3.0</span>) -> <span class=\"hljs-title class_\">Optional</span>[<span class=\"hljs-title class_\">Dict</span>]:\n        msg = self.<span class=\"hljs-property\">c</span>.<span class=\"hljs-title function_\">poll</span>(timeout=timeout)\n        <span class=\"hljs-keyword\">if</span> not <span class=\"hljs-attr\">msg</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">None</span>\n        <span class=\"hljs-keyword\">if</span> msg.<span class=\"hljs-title function_\">error</span>():\n            raise <span class=\"hljs-title class_\">Exception</span>(msg.<span class=\"hljs-title function_\">error</span>())\n        val = msg.<span class=\"hljs-title function_\">value</span>().<span class=\"hljs-title function_\">decode</span>()\n        <span class=\"hljs-keyword\">return</span> json.<span class=\"hljs-title function_\">loads</span>(val)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>STG Schema</h1>\n<p>포스트그레스의 스테이징 레이어로, Kafka에서 나온 로우 메시지를 저장할 한 개의 테이블이 있을 것입니다. 이는 아래와 같이 정의되어 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">CREATE</span> <span class=\"hljs-variable constant_\">SCHEMA</span> <span class=\"hljs-variable constant_\">IF</span> <span class=\"hljs-variable constant_\">NOT</span> <span class=\"hljs-variable constant_\">EXISTS</span> stg;\n\n<span class=\"hljs-variable constant_\">CREATE</span> <span class=\"hljs-variable constant_\">TABLE</span> <span class=\"hljs-variable constant_\">IF</span> <span class=\"hljs-variable constant_\">NOT</span> <span class=\"hljs-variable constant_\">EXISTS</span> stg.<span class=\"hljs-property\">order_events</span> (\n    id <span class=\"hljs-variable constant_\">SERIAL</span>   <span class=\"hljs-variable constant_\">PRIMARY</span> <span class=\"hljs-variable constant_\">KEY</span>,\n    object_id   <span class=\"hljs-variable constant_\">INTEGER</span> <span class=\"hljs-variable constant_\">NOT</span> <span class=\"hljs-variable constant_\">NULL</span> <span class=\"hljs-variable constant_\">UNIQUE</span>,\n    object_type <span class=\"hljs-title function_\">VARCHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-variable constant_\">NOT</span> <span class=\"hljs-variable constant_\">NULL</span>,\n    sent_dttm   <span class=\"hljs-variable constant_\">TIMESTAMP</span> <span class=\"hljs-variable constant_\">NOT</span> <span class=\"hljs-variable constant_\">NULL</span>,\n    payload     <span class=\"hljs-title class_\">JSON</span> <span class=\"hljs-variable constant_\">NOT</span> <span class=\"hljs-variable constant_\">NULL</span>\n);\n</code></pre>\n<p>그리고 이를 실행할 파이썬 함수는:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> lib.pg.pg_connect <span class=\"hljs-keyword\">import</span> PgConnect\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_stg_migrations</span>(<span class=\"hljs-params\">db: PgConnect</span>) -> <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-keyword\">with</span> db.connection() <span class=\"hljs-keyword\">as</span> conn:\n        <span class=\"hljs-keyword\">with</span> conn.cursor() <span class=\"hljs-keyword\">as</span> cur:\n            <span class=\"hljs-comment\"># STG 스키마의 SQL 정의 경로는 다를 수 있습니다.</span>\n            cur.execute(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"stg_schema.sql\"</span>, <span class=\"hljs-string\">\"r\"</span>).read())\n</code></pre>\n<p>프로그램이 <code>db.connection()</code>으로 정의된 컨텍스트 매니저를 벗어나면 명시적으로 실행할 필요 없이 자동으로 커밋됩니다.</p>\n<h1>메시지 처리</h1>\n<p>먼저 소비된 카프카 메시지를 STG 포스트그레스 테이블(StgRepository)에 삽입한 다음, 레디스에서 레스토랑 데이터를 풍부하게하여 다른 카프카 클러스터(StgMessageProcessor)를 위한 출력 메시지를 구성해야 합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\n\n<span class=\"hljs-keyword\">from</span> lib.pg.pg_connect <span class=\"hljs-keyword\">import</span> PgConnect\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StgRepository</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, db: PgConnect</span>) -> <span class=\"hljs-literal\">None</span>:\n        self._db = db\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">order_events_insert</span>(<span class=\"hljs-params\">self,\n                            object_id: <span class=\"hljs-built_in\">int</span>,\n                            object_type: <span class=\"hljs-built_in\">str</span>,\n                            sent_dttm: datetime,\n                            payload: <span class=\"hljs-built_in\">str</span>\n                            </span>) -> <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">with</span> self._db.connection() <span class=\"hljs-keyword\">as</span> conn:\n            <span class=\"hljs-keyword\">with</span> conn.cursor() <span class=\"hljs-keyword\">as</span> cur:\n                cur.execute(\n                    <span class=\"hljs-string\">\"\"\"\n                        INSERT INTO stg.order_events (object_id, object_type, sent_dttm, payload) VALUES (%(object_id)s, %(object_type)s, %(sent_dttm)s, %(payload)s)\n                        ON CONFLICT (object_id)\n                        DO UPDATE \n                        SET object_type = EXCLUDED.object_type,\n                            sent_dttm = EXCLUDED.sent_dttm,\n                            payload = EXCLUDED.payload;\n                    \"\"\"</span>,\n                    {\n                        <span class=\"hljs-string\">'object_id'</span>: object_id,\n                        <span class=\"hljs-string\">'object_type'</span>: object_type,\n                        <span class=\"hljs-string\">'sent_dttm'</span>: sent_dttm,\n                        <span class=\"hljs-string\">'payload'</span>: payload\n                    }\n                )\n</code></pre>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\n<span class=\"hljs-keyword\">from</span> logging <span class=\"hljs-keyword\">import</span> Logger\n<span class=\"hljs-keyword\">from</span> lib.kafka_connect.kafka_connectors <span class=\"hljs-keyword\">import</span> KafkaConsumer, KafkaProducer\n<span class=\"hljs-keyword\">from</span> lib.redis.redis_client <span class=\"hljs-keyword\">import</span> RedisClient\n<span class=\"hljs-keyword\">from</span> stg_loader.repository.stg_repository <span class=\"hljs-keyword\">import</span> StgRepository\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StgMessageProcessor</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,\n                 consumer: KafkaConsumer,\n                 producer: KafkaProducer,\n                 redis: RedisClient,\n                 stg_repository: StgRepository,\n                 logger: Logger</span>) -> <span class=\"hljs-literal\">None</span>:\n        self._logger = logger\n        self._consumer = consumer\n        self._producer = producer\n        self._redis = redis\n        self._stg_repository = stg_repository\n        self._batch_size = <span class=\"hljs-number\">100</span>\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">self</span>) -> <span class=\"hljs-literal\">None</span>:\n        self._logger.info(<span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{datetime.utcnow()}</span>: START\"</span>)\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self._batch_size):\n            msg = self._consumer.consume()\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> msg:\n                <span class=\"hljs-keyword\">continue</span>\n            self._stg_repository.order_events_insert(object_id=msg[<span class=\"hljs-string\">\"object_id\"</span>],\n                                                     object_type=msg[<span class=\"hljs-string\">\"object_type\"</span>],\n                                                     sent_dttm=msg[<span class=\"hljs-string\">\"sent_dttm\"</span>],\n                                                     payload=json.dumps(msg[<span class=\"hljs-string\">\"payload\"</span>]))\n            dst_msg = self._construct_output_message(msg)\n            self._producer.produce(dst_msg)\n        self._logger.info(<span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{datetime.utcnow()}</span>: FINISH\"</span>)\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_construct_output_message</span>(<span class=\"hljs-params\">self, original_message: <span class=\"hljs-built_in\">dict</span></span>) -> <span class=\"hljs-built_in\">dict</span>:\n        restaurant_id = original_message[<span class=\"hljs-string\">\"payload\"</span>][<span class=\"hljs-string\">\"restaurant\"</span>][<span class=\"hljs-string\">\"id\"</span>]\n        restaurant_data = self._redis.get(restaurant_id)\n        restaurant_name = restaurant_data[<span class=\"hljs-string\">\"name\"</span>]\n        user_id = original_message[<span class=\"hljs-string\">\"payload\"</span>][<span class=\"hljs-string\">\"user\"</span>][<span class=\"hljs-string\">\"id\"</span>]\n        user_data = self._redis.get(user_id)\n        user_name = user_data[<span class=\"hljs-string\">\"name\"</span>]\n        user_login = user_data[<span class=\"hljs-string\">\"login\"</span>]\n        order = original_message[<span class=\"hljs-string\">\"payload\"</span>]\n        restaurant_menu = {p[<span class=\"hljs-string\">\"_id\"</span>]: p <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> restaurant_data[<span class=\"hljs-string\">\"menu\"</span>]}\n        products = {p[<span class=\"hljs-string\">\"id\"</span>]: {**p, <span class=\"hljs-string\">\"category\"</span>: restaurant_menu[p[<span class=\"hljs-string\">\"id\"</span>]][<span class=\"hljs-string\">\"category\"</span>]} <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> order[<span class=\"hljs-string\">\"order_items\"</span>]}\n        <span class=\"hljs-keyword\">return</span> {\n                <span class=\"hljs-string\">\"object_id\"</span>: original_message[<span class=\"hljs-string\">\"object_id\"</span>],\n                <span class=\"hljs-string\">\"object_type\"</span>: original_message[<span class=\"hljs-string\">\"object_type\"</span>],\n                <span class=\"hljs-string\">\"payload\"</span>: {\n                    <span class=\"hljs-string\">\"id\"</span>: original_message[<span class=\"hljs-string\">\"object_id\"</span>],\n                    <span class=\"hljs-string\">\"date\"</span>: order[<span class=\"hljs-string\">\"date\"</span>],\n                    <span class=\"hljs-string\">\"cost\"</span>: order[<span class=\"hljs-string\">\"cost\"</span>],\n                    <span class=\"hljs-string\">\"payment\"</span>: order[<span class=\"hljs-string\">\"payment\"</span>],\n                    <span class=\"hljs-string\">\"status\"</span>: order[<span class=\"hljs-string\">\"final_status\"</span>],\n                    <span class=\"hljs-string\">\"restaurant\"</span>: {\n                        <span class=\"hljs-string\">\"restaurant_id\"</span>: restaurant_id,\n                        <span class=\"hljs-string\">\"restaurant_name\"</span>: restaurant_name\n                    },\n                    <span class=\"hljs-string\">\"user\"</span>: {\n                        <span class=\"hljs-string\">\"user_id\"</span>: user_id,\n                        <span class=\"hljs-string\">\"user_name\"</span>: user_name,\n                        <span class=\"hljs-string\">\"user_login\"</span>: user_login\n                    },\n                    <span class=\"hljs-string\">\"products\"</span>: products\n                }\n            }\n</code></pre>\n<h1>서비스 구성</h1>\n<p>소스/싱크 카프카, Redis 및 포스트그레스와 연결해야 합니다. 이것은 확실히 많은 구성이 필요하며 환경 변수를 사용해야 하므로 이를 별도의 클래스에서 수용할 것입니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n\n<span class=\"hljs-keyword\">from</span> lib.kafka_connect.kafka_connectors <span class=\"hljs-keyword\">import</span> KafkaConsumer, KafkaProducer\n<span class=\"hljs-keyword\">from</span> lib.redis.redis_client <span class=\"hljs-keyword\">import</span> RedisClient\n<span class=\"hljs-keyword\">from</span> lib.pg.pg_connect <span class=\"hljs-keyword\">import</span> PgConnect\n<span class=\"hljs-keyword\">from</span> stg_loader.repository.stg_repository <span class=\"hljs-keyword\">import</span> StgRepository\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span>:\n    CERTIFICATE_PATH = <span class=\"hljs-string\">'/crt/YandexInternalRootCA.crt'</span>\n    DEFAULT_JOB_INTERVAL = <span class=\"hljs-number\">25</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -> <span class=\"hljs-literal\">None</span>:\n        self.kafka_host = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'KAFKA_HOST'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.kafka_port = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'KAFKA_PORT'</span>)) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">0</span>)\n        self.kafka_consumer_username = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'KAFKA_CONSUMER_USERNAME'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.kafka_consumer_password = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'KAFKA_CONSUMER_PASSWORD'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.kafka_consumer_group = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'KAFKA_CONSUMER_GROUP'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.kafka_consumer_topic = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'KAFKA_SOURCE_TOPIC'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.kafka_producer_username = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'KAFKA_PRODUCER_USERNAME'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.kafka_producer_password = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'KAFKA_PRODUCER_PASSWORD'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.kafka_producer_topic = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'KAFKA_DESTINATION_TOPIC'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.redis_host = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'REDIS_HOST'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.redis_port = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'REDIS_PORT'</span>)) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">0</span>)\n        self.redis_password = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'REDIS_PASSWORD'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.pg_host = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'PG_HOST'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.pg_port = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'PG_PORT'</span>)) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">6432</span>)\n        self.pg_db_name = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">\"PG_DB_NAME\"</span>))\n        self.pg_user = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'PG_USER'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n        self.pg_password = <span class=\"hljs-built_in\">str</span>(os.getenv(<span class=\"hljs-string\">'PG_PASSWORD'</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"\"</span>)\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">kafka_producer</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> KafkaProducer(\n            self.kafka_host,\n            self.kafka_port,\n            self.kafka_producer_username,\n            self.kafka_producer_password,\n            self.kafka_producer_topic,\n            self.CERTIFICATE_PATH\n        )\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">kafka_consumer</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> KafkaConsumer(\n            self.kafka_host,\n            self.kafka_port,\n            self.kafka_consumer_username,\n            self.kafka_consumer_password,\n            self.kafka_consumer_topic,\n            self.kafka_consumer_group,\n            self.CERTIFICATE_PATH\n        )\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">redis_client</span>(<span class=\"hljs-params\">self</span>) -> RedisClient:\n        <span class=\"hljs-keyword\">return</span> RedisClient(\n            self.redis_host,\n            self.redis_port,\n            self.redis_password,\n            self.CERTIFICATE_PATH\n        )\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">stg_loader</span>(<span class=\"hljs-params\">self</span>) -> StgRepository:\n        db: PgConnect = PgConnect(\n            self.pg_host,\n            self.pg_port,\n            self.pg_db_name,\n            self.pg_user,\n            self.pg_password\n        )\n        <span class=\"hljs-keyword\">return</span> StgRepository(db)\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pg_client</span>(<span class=\"hljs-params\">self</span>) -> PgConnect:\n        <span class=\"hljs-keyword\">return</span> PgConnect(\n            self.pg_host,\n            self.pg_port,\n            self.pg_db_name,\n            self.pg_user,\n            self.pg_password\n        )\n</code></pre>\n<h1>STG Service 실행</h1>\n<p>StgMessageProcessor를 백그라운드 프로세스로 실행해야 합니다 (apscheduler 파이썬 모듈의 BackgroundScheduler를 사용할 것입니다) 그리고 건강 상태를 확인하는 간단한 API를 추가할 것입니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> logging\n\n<span class=\"hljs-keyword\">from</span> apscheduler.schedulers.background <span class=\"hljs-keyword\">import</span> BackgroundScheduler\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask\n<span class=\"hljs-keyword\">from</span> stg_loader.stg_message_processor_job <span class=\"hljs-keyword\">import</span> StgMessageProcessor\n<span class=\"hljs-keyword\">from</span> app_config <span class=\"hljs-keyword\">import</span> AppConfig\n<span class=\"hljs-keyword\">from</span> stg_migrations <span class=\"hljs-keyword\">import</span> make_stg_migrations\n\napp = Flask(__name__)\n\n<span class=\"hljs-comment\"># 서비스가 정상인지 확인할 수 있는 엔드포인트 생성</span>\n<span class=\"hljs-meta\">@app.get(<span class=\"hljs-params\"><span class=\"hljs-string\">'/health'</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">health</span>():\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'healthy'</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.logger.setLevel(logging.DEBUG)\n    config = AppConfig()\n    make_stg_migrations(config.pg_client())\n    proc = StgMessageProcessor(logger=app.logger,\n                               consumer=config.kafka_consumer(),\n                               producer=config.kafka_producer(),\n                               redis=config.redis_client(),\n                               stg_repository=config.stg_loader())\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(func=proc.run, trigger=<span class=\"hljs-string\">\"interval\"</span>, seconds=config.DEFAULT_JOB_INTERVAL)\n    scheduler.start()\n    app.run(debug=<span class=\"hljs-literal\">True</span>, host=<span class=\"hljs-string\">'0.0.0.0'</span>, use_reloader=<span class=\"hljs-literal\">False</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Dockerfile</h1>\n<p>스테이징 서비스는 코어크레이트 기반의 쿠버네티스 클러스터에서 실행될 예정이므로, 서비스를 도커 이미지로 만들어주어야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">python</span>:<span class=\"hljs-number\">3.10</span>\n\n<span class=\"hljs-variable constant_\">RUN</span> apt-get update -y\n# 컨테이너 내에서 confluent_kafka 파이썬 모듈이 작동되도록 필요합니다\n<span class=\"hljs-variable constant_\">RUN</span> git clone <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/edenhill/librdkafka &#x26;&#x26; cd librdkafka &#x26;&#x26; ./configure &#x26;&#x26; make &#x26;&#x26; make install &#x26;&#x26; ldconfig</span>\n<span class=\"hljs-variable constant_\">COPY</span> . .\n<span class=\"hljs-variable constant_\">RUN</span> pip install -r requirements.<span class=\"hljs-property\">txt</span>\n# <span class=\"hljs-title class_\">Kafka</span> 클러스터에 안전한 연결을 위한 인증서 다운로드\n<span class=\"hljs-variable constant_\">RUN</span> mkdir -p /crt\n<span class=\"hljs-variable constant_\">RUN</span> wget <span class=\"hljs-string\">\"https://storage.yandexcloud.net/cloud-certs/CA.pem\"</span> --output-<span class=\"hljs-variable language_\">document</span> /crt/<span class=\"hljs-title class_\">YandexInternalRootCA</span>.<span class=\"hljs-property\">crt</span>\n<span class=\"hljs-variable constant_\">RUN</span> chmod <span class=\"hljs-number\">0600</span> /crt/<span class=\"hljs-title class_\">YandexInternalRootCA</span>.<span class=\"hljs-property\">crt</span>\n<span class=\"hljs-variable constant_\">WORKDIR</span> /src\n# 파이썬 임포트가 작동되도록 설정\n<span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-variable constant_\">PYTHONPATH</span> <span class=\"hljs-string\">\"${PYTHONPATH}:/src\"</span>\n<span class=\"hljs-variable constant_\">ENTRYPOINT</span> [<span class=\"hljs-string\">\"python\"</span>]\n<span class=\"hljs-variable constant_\">CMD</span> [<span class=\"hljs-string\">\"app.py\"</span>]\n</code></pre>\n<p>로컬 테스트를 위해 Docker Compose를 사용하여 스테이징 서비스를 실행할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3.9\"</span>\n\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">stg_service:</span>\n    <span class=\"hljs-attr\">build:</span>\n      <span class=\"hljs-attr\">context:</span> <span class=\"hljs-string\">.</span>\n      <span class=\"hljs-attr\">network:</span> <span class=\"hljs-string\">host</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">stg_img:local</span>\n    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">stg_container</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-attr\">FLASK_APP:</span> <span class=\"hljs-string\">${STG_SERVICE_APP_NAME:-stg_service}</span>\n      <span class=\"hljs-attr\">DEBUG:</span> <span class=\"hljs-string\">${STG_SERVICE_DEBUG:-True}</span>\n      <span class=\"hljs-attr\">KAFKA_HOST:</span> <span class=\"hljs-string\">${KAFKA_HOST}</span>\n      <span class=\"hljs-attr\">KAFKA_PORT:</span> <span class=\"hljs-string\">${KAFKA_PORT}</span>\n      <span class=\"hljs-attr\">KAFKA_CONSUMER_USERNAME:</span> <span class=\"hljs-string\">${KAFKA_CONSUMER_USERNAME}</span>\n      <span class=\"hljs-attr\">KAFKA_CONSUMER_PASSWORD:</span> <span class=\"hljs-string\">${KAFKA_CONSUMER_PASSWORD}</span>\n      <span class=\"hljs-attr\">KAFKA_CONSUMER_GROUP:</span> <span class=\"hljs-string\">${KAFKA_CONSUMER_GROUP}</span>\n      <span class=\"hljs-attr\">KAFKA_SOURCE_TOPIC:</span> <span class=\"hljs-string\">${KAFKA_SOURCE_TOPIC}</span>\n      <span class=\"hljs-attr\">KAFKA_DESTINATION_TOPIC:</span> <span class=\"hljs-string\">${KAFKA_DESTINATION_TOPIC}</span>\n      <span class=\"hljs-attr\">KAFKA_PRODUCER_USERNAME:</span> <span class=\"hljs-string\">${KAFKA_PRODUCER_USERNAME}</span>\n      <span class=\"hljs-attr\">KAFKA_PRODUCER_PASSWORD:</span> <span class=\"hljs-string\">${KAFKA_PRODUCER_PASSWORD}</span>\n      <span class=\"hljs-attr\">REDIS_HOST:</span> <span class=\"hljs-string\">${REDIS_HOST}</span>\n      <span class=\"hljs-attr\">REDIS_PORT:</span> <span class=\"hljs-string\">${REDIS_PORT}</span>\n      <span class=\"hljs-attr\">REDIS_PASSWORD:</span> <span class=\"hljs-string\">${REDIS_PASSWORD}</span>\n      <span class=\"hljs-attr\">PG_HOST:</span> <span class=\"hljs-string\">${PG_HOST}</span>\n      <span class=\"hljs-attr\">PG_PORT:</span> <span class=\"hljs-string\">${PG_PORT}</span>\n      <span class=\"hljs-attr\">PG_DB_NAME:</span> <span class=\"hljs-string\">${PG_DB_NAME}</span>\n      <span class=\"hljs-attr\">PG_USER:</span> <span class=\"hljs-string\">${PG_USER}</span>\n      <span class=\"hljs-attr\">PG_PASSWORD:</span> <span class=\"hljs-string\">${PG_PASSWORD}</span>\n    <span class=\"hljs-attr\">network_mode:</span> <span class=\"hljs-string\">\"bridge\"</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"5101:5000\"</span>\n    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">unless-stopped</span>\n</code></pre>\n<p>.env 파일:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">KAFKA_HOST=******.mdb.yandexcloud.net</span>\n<span class=\"hljs-string\">KAFKA_PORT=9091</span>\n<span class=\"hljs-string\">KAFKA_CONSUMER_USERNAME=producer_consumer</span>\n<span class=\"hljs-string\">KAFKA_CONSUMER_PASSWORD=******</span>\n<span class=\"hljs-string\">KAFKA_CONSUMER_GROUP=test-consumer1</span>\n<span class=\"hljs-string\">KAFKA_SOURCE_TOPIC=dds_input_topic</span>\n<span class=\"hljs-string\">KAFKA_PRODUCER_USERNAME=producer_consumer</span>\n<span class=\"hljs-string\">KAFKA_PRODUCER_PASSWORD=*******</span>\n<span class=\"hljs-string\">KAFKA_DESTINATION_TOPIC=cdm_input_topic</span>\n\n<span class=\"hljs-string\">REDIS_HOST=******.mdb.yandexcloud.net</span>\n<span class=\"hljs-string\">REDIS_PORT=6380</span>\n<span class=\"hljs-string\">REDIS_PASSWORD=******</span>\n<span class=\"hljs-string\">PG_HOST=********.mdb.yandexcloud.net</span>\n<span class=\"hljs-string\">PG_PORT=6432</span>\n<span class=\"hljs-string\">PG_DB_NAME=sprint9dwh</span>\n<span class=\"hljs-string\">PG_USER=yandex_pg</span>\n<span class=\"hljs-string\">PG_PASSWORD=**********</span>\n</code></pre>\n<h1>HELM 차트</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Chart.yaml 파일:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v2</span>\n<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">first-service</span>\n<span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">쿠버네티스용</span> <span class=\"hljs-string\">헬름</span> <span class=\"hljs-string\">차트</span>\n\n<span class=\"hljs-comment\"># 차트는 'application' 또는 'library' 차트 중 하나일 수 있습니다.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Application 차트는 템플릿 모음이며 버전이 지정된 아카이브로 패키지화하여 배포될 수 있습니다.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Library 차트는 차트 개발자를 위한 유용한 유틸리티 또는 함수를 제공합니다. Application 차트의 종속성으로 포함되어</span>\n<span class=\"hljs-comment\"># 렌더링 파이프라인에 이러한 유틸리티와 함수를 삽입합니다. Library 차트는 템플릿을 정의하지 않으며 따라서 배포될 수 없습니다.</span>\n<span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">application</span>\n<span class=\"hljs-comment\"># 이것은 차트 버전입니다. 이 번호는 차트 및 해당 템플릿에 변경이 있을 때마다 증가해야 합니다.</span>\n<span class=\"hljs-comment\"># 버전은 Semantic Versioning (https://semver.org/)을 따르는 것으로 예상됩니다.</span>\n<span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">0.1</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-comment\"># 이것은 배포되는 애플리케이션의 버전 번호입니다. 이 버전 번호는 애플리케이션에 변경이 있는 경우마다 증가해야 합니다.</span>\n<span class=\"hljs-comment\"># 버전은 Semantic Versioning을 따르지 않습니다. 애플리케이션이 사용 중인 버전을 반영해야 합니다.</span>\n<span class=\"hljs-comment\"># 따옴표와 함께 사용하는 것이 권장됩니다.</span>\n<span class=\"hljs-attr\">appVersion:</span> <span class=\"hljs-string\">\"1.16.0\"</span>\n</code></pre>\n<p>values.yaml 파일:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-comment\"># 앱의 기본 값.</span>\n<span class=\"hljs-comment\"># 이것은 YAML 형식의 파일입니다.</span>\n<span class=\"hljs-comment\"># 템플릿에 전달할 변수를 선언합니다.</span>\n\n<span class=\"hljs-attr\">replicaCount:</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attr\">image:</span>\n  <span class=\"hljs-comment\"># 컨테이너 레지스트리에 대한 링크. 야н덱스 클라우드에서 실행할 것입니다.</span>\n  <span class=\"hljs-attr\">repository:</span> <span class=\"hljs-string\">cr.yandex/crpr6naar69761ehm0bp/stg_service</span>\n  <span class=\"hljs-attr\">pullPolicy:</span> <span class=\"hljs-string\">IfNotPresent</span>\n  <span class=\"hljs-comment\"># 기본적으로 차트 appVersion인 이미지 태그를 덮어씁니다.</span>\n  <span class=\"hljs-attr\">tag:</span> <span class=\"hljs-string\">\"v2022-12-13-r1\"</span>\n<span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">5000</span>\n<span class=\"hljs-attr\">config:</span>\n  <span class=\"hljs-attr\">KAFKA_HOST:</span> <span class=\"hljs-string\">rc1a-hins1kp5qsfnsob3.mdb.yandexcloud.net</span>\n  <span class=\"hljs-attr\">KAFKA_PORT:</span> <span class=\"hljs-string\">'9091'</span>\n  <span class=\"hljs-attr\">KAFKA_CONSUMER_USERNAME:</span> <span class=\"hljs-string\">producer_consumer</span>\n  <span class=\"hljs-attr\">KAFKA_CONSUMER_PASSWORD:</span> <span class=\"hljs-string\">'*****'</span>\n  <span class=\"hljs-attr\">KAFKA_CONSUMER_GROUP:</span> <span class=\"hljs-string\">test-consumer1</span>\n  <span class=\"hljs-attr\">KAFKA_SOURCE_TOPIC:</span> <span class=\"hljs-string\">order-service_orders</span>\n  <span class=\"hljs-attr\">KAFKA_PRODUCER_USERNAME:</span> <span class=\"hljs-string\">producer_consumer</span>\n  <span class=\"hljs-attr\">KAFKA_PRODUCER_PASSWORD:</span> <span class=\"hljs-string\">'*****'</span>\n  <span class=\"hljs-attr\">KAFKA_DESTINATION_TOPIC:</span> <span class=\"hljs-string\">dds_topic_name</span>\n  <span class=\"hljs-attr\">REDIS_HOST:</span> <span class=\"hljs-string\">c-c9qeltiiu2rkcr6v9net.rw.mdb.yandexcloud.net</span>\n  <span class=\"hljs-attr\">REDIS_PORT:</span> <span class=\"hljs-string\">'6380'</span>\n  <span class=\"hljs-attr\">REDIS_PASSWORD:</span> <span class=\"hljs-string\">'*****'</span>\n  <span class=\"hljs-attr\">PG_HOST:</span> <span class=\"hljs-string\">rc1b-4olk4uzgdrdte114.mdb.yandexcloud.net</span>\n  <span class=\"hljs-attr\">PG_PORT:</span> <span class=\"hljs-string\">'6432'</span>\n  <span class=\"hljs-attr\">PG_DB_NAME:</span> <span class=\"hljs-string\">sprint9dwh</span>\n  <span class=\"hljs-attr\">PG_USER:</span> <span class=\"hljs-string\">yandex_pg</span>\n  <span class=\"hljs-attr\">PG_PASSWORD:</span> <span class=\"hljs-string\">'*****'</span>\n<span class=\"hljs-attr\">imagePullSecrets:</span> []\n<span class=\"hljs-attr\">nameOverride:</span> <span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-attr\">fullnameOverride:</span> <span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-attr\">podAnnotations:</span> {}\n<span class=\"hljs-attr\">resources:</span>\n  <span class=\"hljs-comment\"># 일반적으로 기본 리소스를 지정하지 않고 사용자의 명시적인 선택으로 유지하는 것을 권장합니다.</span>\n  <span class=\"hljs-comment\"># 이것은 Minikube와 같은 리소스가 적은 환경에서 차트 실행 기회를 높이기도 합니다.</span>\n  <span class=\"hljs-comment\"># 리소스를 지정하려면 아래 줄 주석 처리를 해제하고 필요에 맞게 조정한 다음 'resources:' 뒤의 중괄호를 제거하세요.</span>\n  <span class=\"hljs-attr\">limits:</span>\n    <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">100m</span>\n    <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">128Mi</span>\n  <span class=\"hljs-attr\">requests:</span>\n    <span class=\"hljs-attr\">cpu:</span> <span class=\"hljs-string\">100m</span>\n    <span class=\"hljs-attr\">memory:</span> <span class=\"hljs-string\">128Mi</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">templates/configmap.yaml은</span> <span class=\"hljs-string\">우리</span> <span class=\"hljs-string\">서비스의</span> <span class=\"hljs-string\">구성을</span> <span class=\"hljs-string\">저장하는</span> <span class=\"hljs-string\">k8s</span> <span class=\"hljs-string\">엔터티입니다.</span> <span class=\"hljs-string\">values.yaml</span> <span class=\"hljs-string\">파일의</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">블록에서</span> <span class=\"hljs-string\">모든</span> <span class=\"hljs-string\">키-값</span> <span class=\"hljs-string\">쌍을</span> <span class=\"hljs-string\">가져올</span> <span class=\"hljs-string\">것입니다:</span>\n\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ConfigMap</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> {{ <span class=\"hljs-string\">include</span> <span class=\"hljs-string\">\"app.fullname\"</span> <span class=\"hljs-string\">.</span> }}<span class=\"hljs-string\">-config</span>\n  <span class=\"hljs-attr\">labels:</span>\n    {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">include</span> <span class=\"hljs-string\">\"app.labels\"</span> <span class=\"hljs-string\">.</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">nindent</span> <span class=\"hljs-number\">4</span> }}\n{{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">.Values.config</span> }}\n<span class=\"hljs-attr\">data:</span>\n  {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">toYaml</span> <span class=\"hljs-string\">.</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">nindent</span> <span class=\"hljs-number\">2</span> }}\n{{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">end</span> }}\n\n<span class=\"hljs-string\">templates/deployment.yaml</span> <span class=\"hljs-string\">파일</span>\n\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> {{ <span class=\"hljs-string\">include</span> <span class=\"hljs-string\">\"app.fullname\"</span> <span class=\"hljs-string\">.</span> }}\n  <span class=\"hljs-attr\">labels:</span>\n    {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">include</span> <span class=\"hljs-string\">\"app.labels\"</span> <span class=\"hljs-string\">.</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">nindent</span> <span class=\"hljs-number\">4</span> }}\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> {{ <span class=\"hljs-string\">.Values.replicaCount</span> }}\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">include</span> <span class=\"hljs-string\">\"app.selectorLabels\"</span> <span class=\"hljs-string\">.</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">nindent</span> <span class=\"hljs-number\">6</span> }}\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">.Values.podAnnotations</span> }}\n      <span class=\"hljs-attr\">annotations:</span>\n        {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">toYaml</span> <span class=\"hljs-string\">.</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">nindent</span> <span class=\"hljs-number\">8</span> }}\n      {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">end</span> }}\n      <span class=\"hljs-attr\">labels:</span>\n        {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">include</span> <span class=\"hljs-string\">\"app.selectorLabels\"</span> <span class=\"hljs-string\">.</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">nindent</span> <span class=\"hljs-number\">8</span> }}\n    <span class=\"hljs-attr\">spec:</span>\n      {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">.Values.imagePullSecrets</span> }}\n      <span class=\"hljs-attr\">imagePullSecrets:</span>\n        {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">toYaml</span> <span class=\"hljs-string\">.</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">nindent</span> <span class=\"hljs-number\">8</span> }}\n      {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">end</span> }}\n      <span class=\"hljs-attr\">containers:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> {{ <span class=\"hljs-string\">.Chart.Name</span> }}\n          <span class=\"hljs-attr\">securityContext:</span>\n            {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">toYaml</span> <span class=\"hljs-string\">.Values.securityContext</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">nindent</span> <span class=\"hljs-number\">12</span> }}\n          <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">\"<span class=\"hljs-template-variable\">{{ .Values.image.repository }}</span>:<span class=\"hljs-template-variable\">{{ .Values.image.tag | default .Chart.AppVersion }}</span>\"</span>\n          <span class=\"hljs-attr\">imagePullPolicy:</span> {{ <span class=\"hljs-string\">.Values.image.pullPolicy</span> }}\n          <span class=\"hljs-attr\">envFrom:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">configMapRef:</span>\n                <span class=\"hljs-attr\">name:</span> {{ <span class=\"hljs-string\">include</span> <span class=\"hljs-string\">\"app.fullname\"</span> <span class=\"hljs-string\">.</span> }}<span class=\"hljs-string\">-config</span>\n          <span class=\"hljs-attr\">ports:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span>\n              <span class=\"hljs-attr\">containerPort:</span> {{ <span class=\"hljs-string\">.Values.containerPort</span> }}\n              <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n          <span class=\"hljs-attr\">resources:</span>\n            {{<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">toYaml</span> <span class=\"hljs-string\">.Values.resources</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">nindent</span> <span class=\"hljs-number\">12</span> }}\n\n<span class=\"hljs-string\">&#x3C;!--</span> <span class=\"hljs-string\">TIL</span> <span class=\"hljs-string\">수평</span> <span class=\"hljs-string\">--></span>\n<span class=\"hljs-string\">&#x3C;ins</span> <span class=\"hljs-string\">class=\"adsbygoogle\"</span>\n     <span class=\"hljs-string\">style=\"display:block\"</span>\n     <span class=\"hljs-string\">data-ad-client=\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-string\">data-ad-slot=\"1549334788\"</span>\n     <span class=\"hljs-string\">data-ad-format=\"auto\"</span>\n     <span class=\"hljs-string\">data-full-width-responsive=\"true\">&#x3C;/ins></span>\n<span class=\"hljs-string\">&#x3C;script></span>\n<span class=\"hljs-string\">(adsbygoogle</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">window.adsbygoogle</span> <span class=\"hljs-string\">||</span> []<span class=\"hljs-string\">).push({});</span>\n<span class=\"hljs-string\">&#x3C;/script></span>\n\n<span class=\"hljs-string\">STG-Service의</span> <span class=\"hljs-string\">소스</span> <span class=\"hljs-string\">코드는</span> <span class=\"hljs-string\">여기에서</span> <span class=\"hljs-string\">찾을</span> <span class=\"hljs-string\">수</span> <span class=\"hljs-string\">있어요.</span>\n\n<span class=\"hljs-comment\"># DDS-Service</span>\n\n<span class=\"hljs-string\">STG-Service</span> <span class=\"hljs-string\">이후의</span> <span class=\"hljs-string\">모든</span> <span class=\"hljs-string\">것은</span> <span class=\"hljs-string\">실제로</span> <span class=\"hljs-string\">매우</span> <span class=\"hljs-string\">쉬워집니다.</span> <span class=\"hljs-string\">다른</span> <span class=\"hljs-string\">서비스들도</span> <span class=\"hljs-string\">거의</span> <span class=\"hljs-string\">동일한</span> <span class=\"hljs-string\">구조를</span> <span class=\"hljs-string\">사용하기</span> <span class=\"hljs-string\">때문이죠.</span> <span class=\"hljs-string\">DDS-Service의</span> <span class=\"hljs-string\">경우,</span> <span class=\"hljs-string\">모든</span> <span class=\"hljs-string\">클라이언트</span> <span class=\"hljs-string\">정의가</span> <span class=\"hljs-string\">동일합니다.</span> <span class=\"hljs-string\">Dockerfile,</span> <span class=\"hljs-string\">Docker</span> <span class=\"hljs-string\">Compose</span> <span class=\"hljs-string\">및</span> <span class=\"hljs-string\">HELM</span> <span class=\"hljs-string\">Chart는</span> <span class=\"hljs-string\">거의</span> <span class=\"hljs-string\">동일합니다.</span> <span class=\"hljs-string\">여기에서</span> <span class=\"hljs-string\">소스</span> <span class=\"hljs-string\">코드를</span> <span class=\"hljs-string\">확인할</span> <span class=\"hljs-string\">수</span> <span class=\"hljs-string\">있어요.</span>\n\n<span class=\"hljs-string\">가장</span> <span class=\"hljs-string\">큰</span> <span class=\"hljs-string\">차이점은</span> <span class=\"hljs-string\">데이터</span> <span class=\"hljs-string\">모델링</span> <span class=\"hljs-string\">방식에</span> <span class=\"hljs-string\">있습니다</span> <span class=\"hljs-string\">(Data</span> <span class=\"hljs-string\">Vault</span> <span class=\"hljs-number\">2.0</span><span class=\"hljs-string\">을</span> <span class=\"hljs-string\">사용합니다):</span>\n\n<span class=\"hljs-string\">&#x3C;!--</span> <span class=\"hljs-string\">TIL</span> <span class=\"hljs-string\">수평</span> <span class=\"hljs-string\">--></span>\n<span class=\"hljs-string\">&#x3C;ins</span> <span class=\"hljs-string\">class=\"adsbygoogle\"</span>\n     <span class=\"hljs-string\">style=\"display:block\"</span>\n     <span class=\"hljs-string\">data-ad-client=\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-string\">data-ad-slot=\"1549334788\"</span>\n     <span class=\"hljs-string\">data-ad-format=\"auto\"</span>\n     <span class=\"hljs-string\">data-full-width-responsive=\"true\">&#x3C;/ins></span>\n<span class=\"hljs-string\">&#x3C;script></span>\n<span class=\"hljs-string\">(adsbygoogle</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">window.adsbygoogle</span> <span class=\"hljs-string\">||</span> []<span class=\"hljs-string\">).push({});</span>\n<span class=\"hljs-string\">&#x3C;/script></span>\n\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">SCHEMA</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds;</span>\n\n<span class=\"hljs-string\">--</span> <span class=\"hljs-string\">데이터</span> <span class=\"hljs-string\">보트</span> <span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">--</span> <span class=\"hljs-string\">허브</span> <span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.h_user</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">h_user_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">user_id</span>   <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">UNIQUE,</span>\n    <span class=\"hljs-string\">load_dt</span>   <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_src</span>  <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.h_product</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">h_product_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">product_id</span>   <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">UNIQUE,</span>\n    <span class=\"hljs-string\">load_dt</span>      <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_src</span>     <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.h_category</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">h_category_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">category_name</span> <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">UNIQUE,</span>\n    <span class=\"hljs-string\">load_dt</span>       <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_src</span>      <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.h_restaurant</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">h_restaurant_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">restaurant_id</span>   <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">UNIQUE,</span>\n    <span class=\"hljs-string\">load_dt</span>         <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_src</span>        <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.h_order</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">h_order_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">order_id</span>   <span class=\"hljs-string\">INTEGER</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">UNIQUE,</span>\n    <span class=\"hljs-string\">order_dt</span>   <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_dt</span>    <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_src</span>   <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">--</span> <span class=\"hljs-string\">훗들</span> <span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.s_user_names</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">hk_user_names_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">h_user_pk</span>        <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">UNIQUE</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_user</span> <span class=\"hljs-string\">(h_user_pk),</span>\n    <span class=\"hljs-string\">username</span>         <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">userlogin</span>        <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_src</span>         <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_dt</span>          <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.s_product_names</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">hk_product_names_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">h_product_pk</span>        <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">UNIQUE</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_product</span> <span class=\"hljs-string\">(h_product_pk),</span>\n    <span class=\"hljs-string\">name</span>                <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_src</span>            <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_dt</span>             <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.s_restaurant_names</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">hk_restaurant_names_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">h_restaurant_pk</span>        <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">UNIQUE</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_restaurant</span> <span class=\"hljs-string\">(h_restaurant_pk),</span>\n    <span class=\"hljs-string\">name</span>                   <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_src</span>               <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_dt</span>                <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.s_order_cost</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">hk_order_cost_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">h_order_pk</span>       <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">UNIQUE</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_order</span> <span class=\"hljs-string\">(h_order_pk),</span>\n    <span class=\"hljs-string\">cost</span>             <span class=\"hljs-string\">DECIMAL(19,</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">)</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">payment</span>          <span class=\"hljs-string\">DECIMAL(19,</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">)</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_src</span>         <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_dt</span>          <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.s_order_status</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">hk_order_status_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">h_order_pk</span>         <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">UNIQUE</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_order</span> <span class=\"hljs-string\">(h_order_pk),</span>\n    <span class=\"hljs-string\">status</span>             <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_src</span>           <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_dt</span>            <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">--</span> <span class=\"hljs-string\">링크</span> <span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.l_order_product</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">hk_order_product_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">h_order_pk</span>          <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_order</span> <span class=\"hljs-string\">(h_order_pk),</span>\n    <span class=\"hljs-string\">h_product_pk</span>        <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_product</span> <span class=\"hljs-string\">(h_product_pk),</span>\n    <span class=\"hljs-string\">load_src</span>            <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_dt</span>             <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.l_product_restaurant</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">hk_product_restaurant_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">h_restaurant_pk</span>          <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_restaurant</span> <span class=\"hljs-string\">(h_restaurant_pk),</span>\n    <span class=\"hljs-string\">h_product_pk</span>             <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_product</span> <span class=\"hljs-string\">(h_product_pk),</span>\n    <span class=\"hljs-string\">load_src</span>                 <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_dt</span>                  <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.l_product_category</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">hk_product_category_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">h_category_pk</span>          <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_category</span> <span class=\"hljs-string\">(h_category_pk),</span>\n    <span class=\"hljs-string\">h_product_pk</span>           <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_product</span> <span class=\"hljs-string\">(h_product_pk),</span>\n    <span class=\"hljs-string\">load_src</span>               <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_dt</span>                <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\n<span class=\"hljs-string\">CREATE</span> <span class=\"hljs-string\">TABLE</span> <span class=\"hljs-string\">IF</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-string\">EXISTS</span> <span class=\"hljs-string\">dds.l_order_user</span> <span class=\"hljs-string\">(</span>\n    <span class=\"hljs-string\">hk_order_user_pk</span> <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">PRIMARY</span> <span class=\"hljs-string\">KEY,</span>\n    <span class=\"hljs-string\">h_order_pk</span>       <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_order</span> <span class=\"hljs-string\">(h_order_pk),</span>\n    <span class=\"hljs-string\">h_user_pk</span>        <span class=\"hljs-string\">UUID</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-string\">REFERENCES</span> <span class=\"hljs-string\">dds.h_user</span> <span class=\"hljs-string\">(h_user_pk),</span>\n    <span class=\"hljs-string\">load_src</span>         <span class=\"hljs-string\">VARCHAR</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span><span class=\"hljs-string\">,</span>\n    <span class=\"hljs-string\">load_dt</span>          <span class=\"hljs-string\">TIMESTAMP</span> <span class=\"hljs-string\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n<span class=\"hljs-string\">);</span>\r\n\n<span class=\"hljs-string\">우리</span> <span class=\"hljs-string\">DDS-Service의</span> <span class=\"hljs-string\">소스</span> <span class=\"hljs-string\">Kafka</span> <span class=\"hljs-string\">메시지는</span> <span class=\"hljs-string\">STG-Service의</span> <span class=\"hljs-string\">출력</span> <span class=\"hljs-string\">메시지입니다.</span> <span class=\"hljs-string\">또</span> <span class=\"hljs-string\">다른</span> <span class=\"hljs-string\">차이점은</span> <span class=\"hljs-string\">Postgres에</span> <span class=\"hljs-string\">이러한</span> <span class=\"hljs-string\">메시지를</span> <span class=\"hljs-string\">저장하는</span> <span class=\"hljs-string\">방식에</span> <span class=\"hljs-string\">있습니다.</span> <span class=\"hljs-string\">데이터</span> <span class=\"hljs-string\">보트</span> <span class=\"hljs-string\">모델을</span> <span class=\"hljs-string\">사용하므로</span> <span class=\"hljs-string\">약간</span> <span class=\"hljs-string\">복잡해집니다:</span>\n\n<span class=\"hljs-string\">import</span> <span class=\"hljs-string\">os</span>\n<span class=\"hljs-string\">import</span> <span class=\"hljs-string\">uuid</span>\n<span class=\"hljs-string\">from</span> <span class=\"hljs-string\">datetime</span> <span class=\"hljs-string\">import</span> <span class=\"hljs-string\">datetime</span>\n\n<span class=\"hljs-string\">from</span> <span class=\"hljs-string\">lib.pg.pg_connect</span> <span class=\"hljs-string\">import</span> <span class=\"hljs-string\">PgConnect</span>\n<span class=\"hljs-string\">from</span> <span class=\"hljs-string\">psycopg2.extras</span> <span class=\"hljs-string\">import</span> <span class=\"hljs-string\">execute_batch</span>\n\n<span class=\"hljs-attr\">class DdsRepository:</span>\n    <span class=\"hljs-string\">def</span> <span class=\"hljs-string\">__init__(self,</span> <span class=\"hljs-attr\">db:</span> <span class=\"hljs-string\">PgConnect)</span> <span class=\"hljs-string\">-></span> <span class=\"hljs-attr\">None:</span>\n        <span class=\"hljs-string\">self._db</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">db</span>\n        <span class=\"hljs-string\">self._batch_size</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">20</span>\n    <span class=\"hljs-string\">def</span> <span class=\"hljs-string\">h_user_insert(self,</span> <span class=\"hljs-attr\">user_id:</span> <span class=\"hljs-string\">str)</span> <span class=\"hljs-string\">-></span> <span class=\"hljs-attr\">None:</span>\n        <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">self._db.connection()</span> <span class=\"hljs-attr\">as conn:</span>\n            <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">conn.cursor()</span> <span class=\"hljs-attr\">as cur:</span>\n                <span class=\"hljs-string\">cur.execute(\"\"\"</span>\n                    <span class=\"hljs-string\">INSERT</span> <span class=\"hljs-string\">INTO</span> <span class=\"hljs-string\">dds.h_user</span> <span class=\"hljs-string\">(h_user_pk,</span> <span class=\"hljs-string\">user_id,</span> <span class=\"hljs-string\">load_dt,</span> <span class=\"hljs-string\">load_src)</span> <span class=\"hljs-string\">VALUES</span> <span class=\"hljs-string\">(%(h_user_pk)s,</span> <span class=\"hljs-string\">%(user_id)s,</span> <span class=\"hljs-string\">%(load_dt)s,</span> <span class=\"hljs-string\">%(load_src)s)</span>\n                    <span class=\"hljs-string\">ON</span> <span class=\"hljs-string\">CONFLICT</span> <span class=\"hljs-string\">(user_id)</span>\n                    <span class=\"hljs-string\">DO</span> <span class=\"hljs-string\">NOTHING;</span>\n                <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\",\n                {\n                    \"</span><span class=\"hljs-string\">h_user_pk\":</span> <span class=\"hljs-string\">str(uuid.uuid4()),</span>\n                    <span class=\"hljs-attr\">\"user_id\":</span> <span class=\"hljs-string\">user_id,</span>\n                    <span class=\"hljs-attr\">\"load_dt\":</span> <span class=\"hljs-string\">datetime.now(),</span>\n                    <span class=\"hljs-attr\">\"load_src\":</span> <span class=\"hljs-string\">str(os.getenv('KAFKA_SOURCE_TOPIC')</span> <span class=\"hljs-string\">or</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">)</span>\n                <span class=\"hljs-string\">})</span>\n    <span class=\"hljs-string\">def</span> <span class=\"hljs-string\">s_user_names_insert(self,</span> <span class=\"hljs-attr\">user_id:</span> <span class=\"hljs-string\">str,</span> <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">str,</span> <span class=\"hljs-attr\">userlogin:</span> <span class=\"hljs-string\">str)</span> <span class=\"hljs-string\">-></span> <span class=\"hljs-attr\">None:</span>\n        <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">self._db.connection()</span> <span class=\"hljs-attr\">as conn:</span>\n            <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">conn.cursor()</span> <span class=\"hljs-attr\">as cur:</span>\n                <span class=\"hljs-string\">cur.execute(f\"SELECT</span> <span class=\"hljs-string\">h_user_pk</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">dds.h_user</span> <span class=\"hljs-string\">WHERE</span> <span class=\"hljs-string\">user_id</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">'{user_id}'</span><span class=\"hljs-string\">\")\n                h_user_pk = cur.fetchone()[0]\n                cur.execute(\"</span><span class=\"hljs-string\">\"\"</span>\n                    <span class=\"hljs-string\">INSERT</span> <span class=\"hljs-string\">INTO</span> <span class=\"hljs-string\">dds.s_user_names</span> <span class=\"hljs-string\">(hk_user_names_pk,</span> <span class=\"hljs-string\">h_user_pk,</span> <span class=\"hljs-string\">username,</span> <span class=\"hljs-string\">userlogin,</span> <span class=\"hljs-string\">load_dt,</span> <span class=\"hljs-string\">load_src)</span> <span class=\"hljs-string\">VALUES</span> <span class=\"hljs-string\">(%(hk_user_names_pk)s,</span> <span class=\"hljs-string\">%(h_user_pk)s,</span> <span class=\"hljs-string\">%(username)s,</span> <span class=\"hljs-string\">%(userlogin)s,</span> <span class=\"hljs-string\">%(load_dt)s,</span> <span class=\"hljs-string\">%(load_src)s)</span>\n                    <span class=\"hljs-string\">ON</span> <span class=\"hljs-string\">CONFLICT</span> <span class=\"hljs-string\">(h_user_pk)</span>\n                    <span class=\"hljs-string\">DO</span> <span class=\"hljs-string\">NOTHING;</span>\n                <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\",\n                {\n                    \"</span><span class=\"hljs-string\">hk_user_names_pk\":</span> <span class=\"hljs-string\">str(uuid.uuid4()),</span>\n                    <span class=\"hljs-attr\">\"h_user_pk\":</span> <span class=\"hljs-string\">h_user_pk,</span>\n                    <span class=\"hljs-attr\">\"username\":</span> <span class=\"hljs-string\">username,</span>\n                    <span class=\"hljs-attr\">\"userlogin\":</span> <span class=\"hljs-string\">userlogin,</span>\n                    <span class=\"hljs-attr\">\"load_dt\":</span> <span class=\"hljs-string\">datetime.now(),</span>\n                    <span class=\"hljs-attr\">\"load_src\":</span> <span class=\"hljs-string\">str(os.getenv('KAFKA_SOURCE_TOPIC')</span> <span class=\"hljs-string\">or</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">)</span>\n                <span class=\"hljs-string\">})</span>\n    <span class=\"hljs-string\">def</span> <span class=\"hljs-string\">h_order_insert(self,</span> <span class=\"hljs-attr\">order_id:</span> <span class=\"hljs-string\">str,</span> <span class=\"hljs-attr\">order_dt:</span> <span class=\"hljs-string\">datetime)</span> <span class=\"hljs-string\">-></span> <span class=\"hljs-attr\">None:</span>\n        <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">self._db.connection()</span> <span class=\"hljs-attr\">as conn:</span>\n            <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">conn.cursor()</span> <span class=\"hljs-attr\">as cur:</span>\n                <span class=\"hljs-string\">cur.execute(\"\"\"</span>\n                    <span class=\"hljs-string\">INSERT</span> <span class=\"hljs-string\">INTO</span> <span class=\"hljs-string\">dds.h_order</span> <span class=\"hljs-string\">(h_order_pk,</span> <span class=\"hljs-string\">order_id,</span> <span class=\"hljs-string\">order_dt,</span> <span class=\"hljs-string\">load_dt,</span> <span class=\"hljs-string\">load_src)</span> <span class=\"hljs-string\">VALUES</span> <span class=\"hljs-string\">(%(h_order_pk)s,</span> <span class=\"hljs-string\">%(order_id)s,</span> <span class=\"hljs-string\">%(order_dt)s,</span> <span class=\"hljs-string\">%(load_dt)s,</span> <span class=\"hljs-string\">%(load_src)s)</span>\n                    <span class=\"hljs-string\">ON</span> <span class=\"hljs-string\">CONFLICT</span> <span class=\"hljs-string\">(order_id)</span>\n                    <span class=\"hljs-string\">DO</span> <span class=\"hljs-string\">NOTHING;</span>\n                <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\",\n                {\n                    \"</span><span class=\"hljs-string\">h_order_pk\":</span> <span class=\"hljs-string\">str(uuid.uuid4()),</span>\n                    <span class=\"hljs-attr\">\"order_id\":</span> <span class=\"hljs-string\">order_id,</span>\n                    <span class=\"hljs-attr\">\"order_dt\":</span> <span class=\"hljs-string\">order_dt,</span>\n                    <span class=\"hljs-attr\">\"load_dt\":</span> <span class=\"hljs-string\">datetime.now(),</span>\n                    <span class=\"hljs-attr\">\"load_src\":</span> <span class=\"hljs-string\">str(os.getenv('KAFKA_SOURCE_TOPIC')</span> <span class=\"hljs-string\">or</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">)</span>\n                <span class=\"hljs-string\">})</span>\n    <span class=\"hljs-string\">def</span> <span class=\"hljs-string\">s_order_cost_insert(self,</span> <span class=\"hljs-attr\">order_id:</span> <span class=\"hljs-string\">str,</span> <span class=\"hljs-attr\">cost:</span> <span class=\"hljs-string\">float,</span> <span class=\"hljs-attr\">payment:</span> <span class=\"hljs-string\">float)</span> <span class=\"hljs-string\">-></span> <span class=\"hljs-attr\">None:</span>\n        <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">self._db.connection()</span> <span class=\"hljs-attr\">as conn:</span>\n            <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">conn.cursor()</span> <span class=\"hljs-attr\">as cur:</span>\n                <span class=\"hljs-string\">cur.execute(f\"SELECT</span> <span class=\"hljs-string\">h_order_pk</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">dds.h_order</span> <span class=\"hljs-string\">WHERE</span> <span class=\"hljs-string\">order_id</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">'{order_id}'</span><span class=\"hljs-string\">\")\n                h_order_pk = cur.fetchone()[0]\n                cur.execute(\"</span><span class=\"hljs-string\">\"\"</span>\n                    <span class=\"hljs-string\">INSERT</span> <span class=\"hljs-string\">INTO</span> <span class=\"hljs-string\">dds.s_order_cost</span> <span class=\"hljs-string\">(hk_order_cost_pk,</span> <span class=\"hljs-string\">h_order_pk,</span> <span class=\"hljs-string\">cost,</span> <span class=\"hljs-string\">payment,</span> <span class=\"hljs-string\">load_dt,</span> <span class=\"hljs-string\">load_src)</span> <span class=\"hljs-string\">VALUES</span> <span class=\"hljs-string\">(%(hk_order_cost_pk)s,</span> <span class=\"hljs-string\">%(h_order_pk)s,</span> <span class=\"hljs-string\">%(cost)s,</span> <span class=\"hljs-string\">%(payment)s,</span> <span class=\"hljs-string\">%(load_dt)s,</span> <span class=\"hljs-string\">%(load_src)s)</span>\n                    <span class=\"hljs-string\">ON</span> <span class=\"hljs-string\">CONFLICT</span> <span class=\"hljs-string\">(h_order_pk)</span>\n                    <span class=\"hljs-string\">DO</span> <span class=\"hljs-string\">UPDATE</span> <span class=\"hljs-string\">SET</span> <span class=\"hljs-string\">cost</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">EXCLUDED.cost,</span>\n                                  <span class=\"hljs-string\">payment</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">EXCLUDED.payment;</span>\n                <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\",\n                {\n                    \"</span><span class=\"hljs-string\">hk_order_cost_pk\":</span> <span class=\"hljs-string\">str(uuid.uuid4()),</span>\n                    <span class=\"hljs-attr\">\"h_order_pk\":</span> <span class=\"hljs-string\">h_order_pk,</span>\n                    <span class=\"hljs-attr\">\"cost\":</span> <span class=\"hljs-string\">cost,</span>\n                    <span class=\"hljs-attr\">\"payment\":</span> <span class=\"hljs-string\">payment,</span>\n                    <span class=\"hljs-attr\">\"load_dt\":</span> <span class=\"hljs-string\">datetime.now(),</span>\n                    <span class=\"hljs-attr\">\"load_src\":</span> <span class=\"hljs-string\">str(os.getenv('KAFKA_SOURCE_TOPIC')</span> <span class=\"hljs-string\">or</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">)</span>\n                <span class=\"hljs-string\">})</span>\n    <span class=\"hljs-string\">def</span> <span class=\"hljs-string\">s_order_status_insert(self,</span> <span class=\"hljs-attr\">order_id:</span> <span class=\"hljs-string\">str,</span> <span class=\"hljs-attr\">status:</span> <span class=\"hljs-string\">str)</span> <span class=\"hljs-string\">-></span> <span class=\"hljs-attr\">None:</span>\n        <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">self._db.connection()</span> <span class=\"hljs-attr\">as conn:</span>\n            <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">conn.cursor()</span> <span class=\"hljs-attr\">as cur:</span>\n                <span class=\"hljs-string\">cur.execute(f\"SELECT</span> <span class=\"hljs-string\">h_order_pk</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">dds.h_order</span> <span class=\"hljs-string\">WHERE</span> <span class=\"hljs-string\">order_id</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">'{order_id}'</span><span class=\"hljs-string\">\")\n                h_order_pk = cur.fetchone()[0]\n                cur.execute(\"</span><span class=\"hljs-string\">\"\"</span>\n                    <span class=\"hljs-string\">INSERT</span> <span class=\"hljs-string\">INTO</span> <span class=\"hljs-string\">dds.s_order_status</span> <span class=\"hljs-string\">(hk_order_status_pk,</span> <span class=\"hljs-string\">h_order_pk,</span> <span class=\"hljs-string\">status,</span> <span class=\"hljs-string\">load_dt,</span> <span class=\"hljs-string\">load_src)</span> <span class=\"hljs-string\">VALUES</span> <span class=\"hljs-string\">(%(hk_order_status_pk)s,</span> <span class=\"hljs-string\">%(h_order_pk)s,</span> <span class=\"hljs-string\">%(status)s,</span> <span class=\"hljs-string\">%(load_dt)s,</span> <span class=\"hljs-string\">%(load_src)s)</span>\n                    <span class=\"hljs-string\">ON</span> <span class=\"hljs-string\">CONFLICT</span> <span class=\"hljs-string\">(h_order_pk)</span>\n                    <span class=\"hljs-string\">DO</span> <span class=\"hljs-string\">UPDATE</span> <span class=\"hljs-string\">SET</span> <span class=\"hljs-string\">status=EXCLUDED.status;</span>\n                <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\",\n                {\n                    \"</span><span class=\"hljs-string\">hk_order_status_pk\":</span> <span class=\"hljs-string\">str(uuid.uuid4()),</span>\n                    <span class=\"hljs-attr\">\"h_order_pk\":</span> <span class=\"hljs-string\">h_order_pk,</span>\n                    <span class=\"hljs-attr\">\"status\":</span> <span class=\"hljs-string\">status,</span>\n                    <span class=\"hljs-attr\">\"load_dt\":</span> <span class=\"hljs-string\">datetime.now(),</span>\n                    <span class=\"hljs-attr\">\"load_src\":</span> <span class=\"hljs-string\">str(os.getenv('KAFKA_SOURCE_TOPIC')</span> <span class=\"hljs-string\">or</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">)</span>\n                <span class=\"hljs-string\">})</span>\n    <span class=\"hljs-string\">def</span> <span class=\"hljs-string\">l_order_user_insert(self,</span> <span class=\"hljs-attr\">user_id:</span> <span class=\"hljs-string\">str,</span> <span class=\"hljs-attr\">order_id:</span>\n\n<span class=\"hljs-string\">&#x3C;!--</span> <span class=\"hljs-string\">TIL</span> <span class=\"hljs-string\">수평</span> <span class=\"hljs-string\">--></span>\n<span class=\"hljs-string\">&#x3C;ins</span> <span class=\"hljs-string\">class=\"adsbygoogle\"</span>\n     <span class=\"hljs-string\">style=\"display:block\"</span>\n     <span class=\"hljs-string\">data-ad-client=\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-string\">data-ad-slot=\"1549334788\"</span>\n     <span class=\"hljs-string\">data-ad-format=\"auto\"</span>\n     <span class=\"hljs-string\">data-full-width-responsive=\"true\">&#x3C;/ins></span>\n<span class=\"hljs-string\">&#x3C;script></span>\n<span class=\"hljs-string\">(adsbygoogle</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">window.adsbygoogle</span> <span class=\"hljs-string\">||</span> []<span class=\"hljs-string\">).push({});</span>\n<span class=\"hljs-string\">&#x3C;/script></span>\n\n<span class=\"hljs-string\">우리는</span> <span class=\"hljs-string\">수신</span> <span class=\"hljs-string\">메시지를</span> <span class=\"hljs-string\">HUB,</span> <span class=\"hljs-string\">SATELLITE</span> <span class=\"hljs-string\">및</span> <span class=\"hljs-string\">LINK로</span> <span class=\"hljs-string\">분할합니다</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">이는</span> <span class=\"hljs-string\">우리</span> <span class=\"hljs-string\">데이터</span> <span class=\"hljs-string\">모델의</span> <span class=\"hljs-string\">주요</span> <span class=\"hljs-string\">개체입니다.</span> <span class=\"hljs-string\">또한,</span> <span class=\"hljs-string\">마지막</span> <span class=\"hljs-string\">단계로,</span> <span class=\"hljs-string\">메시지를</span> <span class=\"hljs-string\">출력</span> <span class=\"hljs-string\">Kafka</span> <span class=\"hljs-string\">클러스터로</span> <span class=\"hljs-string\">준비하여</span> <span class=\"hljs-string\">다음</span> <span class=\"hljs-string\">다운스트림</span> <span class=\"hljs-string\">서비스에</span> <span class=\"hljs-string\">전달합니다.</span>\n\n<span class=\"hljs-string\">app.py</span> <span class=\"hljs-string\">파일은</span> <span class=\"hljs-string\">기본적으로</span> <span class=\"hljs-string\">동일합니다:</span> <span class=\"hljs-string\">서비스를</span> <span class=\"hljs-string\">백그라운드</span> <span class=\"hljs-string\">작업으로</span> <span class=\"hljs-string\">실행하고</span> <span class=\"hljs-string\">서비스의</span> <span class=\"hljs-string\">상태를</span> <span class=\"hljs-string\">확인하기</span> <span class=\"hljs-string\">위한</span> <span class=\"hljs-string\">간단한</span> <span class=\"hljs-string\">API를</span> <span class=\"hljs-string\">생성합니다.</span>\n\n<span class=\"hljs-comment\"># CDM-Service</span>\n\n<span class=\"hljs-string\">다른</span> <span class=\"hljs-string\">서비스들과</span> <span class=\"hljs-string\">유사하게</span> <span class=\"hljs-string\">작동하며</span> <span class=\"hljs-string\">여기에서</span> <span class=\"hljs-string\">확인할</span> <span class=\"hljs-string\">수</span> <span class=\"hljs-string\">있습니다.</span>\n\n<span class=\"hljs-string\">&#x3C;!--</span> <span class=\"hljs-string\">TIL</span> <span class=\"hljs-string\">수평</span> <span class=\"hljs-string\">--></span>\n<span class=\"hljs-string\">&#x3C;ins</span> <span class=\"hljs-string\">class=\"adsbygoogle\"</span>\n     <span class=\"hljs-string\">style=\"display:block\"</span>\n     <span class=\"hljs-string\">data-ad-client=\"ca-pub-4877378276818686\"</span>\n     <span class=\"hljs-string\">data-ad-slot=\"1549334788\"</span>\n     <span class=\"hljs-string\">data-ad-format=\"auto\"</span>\n     <span class=\"hljs-string\">data-full-width-responsive=\"true\">&#x3C;/ins></span>\n<span class=\"hljs-string\">&#x3C;script></span>\n<span class=\"hljs-string\">(adsbygoogle</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">window.adsbygoogle</span> <span class=\"hljs-string\">||</span> []<span class=\"hljs-string\">).push({});</span>\n<span class=\"hljs-string\">&#x3C;/script></span>\n\n<span class=\"hljs-comment\"># 스택아데믹 🎓</span>\n\n<span class=\"hljs-string\">끝까지</span> <span class=\"hljs-string\">읽어주셔서</span> <span class=\"hljs-string\">감사합니다.</span> <span class=\"hljs-string\">떠나시기</span> <span class=\"hljs-string\">전에:</span>\n\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">작가를</span> <span class=\"hljs-string\">클랩하고</span> <span class=\"hljs-string\">팔로우해주시면</span> <span class=\"hljs-string\">감사하겠습니다!</span> <span class=\"hljs-string\">👏</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">저희를</span> <span class=\"hljs-string\">팔로우해주세요:</span> <span class=\"hljs-string\">X</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">LinkedIn</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">YouTube</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Discord</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">저희</span> <span class=\"hljs-string\">다른</span> <span class=\"hljs-string\">플랫폼도</span> <span class=\"hljs-string\">방문해주세요:</span> <span class=\"hljs-string\">In</span> <span class=\"hljs-string\">Plain</span> <span class=\"hljs-string\">English</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">CoFeed</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Differ</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">스택아데믹닷컴에서</span> <span class=\"hljs-string\">더</span> <span class=\"hljs-string\">많은</span> <span class=\"hljs-string\">콘텐츠를</span> <span class=\"hljs-string\">만나보세요</span>\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}