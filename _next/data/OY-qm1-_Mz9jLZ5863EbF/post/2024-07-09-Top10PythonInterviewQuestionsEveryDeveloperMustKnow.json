{"pageProps":{"post":{"title":"모든 개발자가 알아야 할 Top 10 Python 인터뷰 질문","description":"","date":"2024-07-09 20:28","slug":"2024-07-09-Top10PythonInterviewQuestionsEveryDeveloperMustKnow","content":"\n\n## 파이썬 인터뷰 질문\n\n전 세계에는 800만 명 이상의 파이썬 개발자가 있습니다. 매일 수천 명의 새로운 학습자가 파이썬 커뮤니티에 가입합니다. 혹독한 진실은, 그 중에서도 단 10~20%만이 좋은 개발자가 되어 좋은 직장을 찾을 수 있습니다. 이유는 고급 인터뷰 질문을 해결하지 못하기 때문입니다. 이제 10가지 중요하고 흔한 파이썬 인터뷰 질문을 공유하겠습니다.\n\n# `.py` 파일과 `.pyc` 파일의 차이는 무엇인가요?\n\n`.py` 파일은 프로그램의 소스 코드입니다. `.pyc` 파일은 컴파일된 바이트 코드입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파이썬은 `.py` 파일을 컴파일하여 `.pyc` 파일로 저장하고, 이 파일은 파이썬 가상 머신에서 실행됩니다.\n\n주 소스 코드를 실행하기 전에 파이썬은 컴파일된 버전인 `.pyc` 파일을 찾습니다. 찾았다면 해당 파일을 가상 머신으로 실행합니다. 찾지 못했다면 `.py` 파일을 컴파일하고 실행합니다. 요컨대, `.pyc` 파일은 이미 컴파일된 코드를 재사용하여 컴파일 시간을 단축해줍니다.\n\n# 추상화란 무엇인가요? 파이썬에서는 어떻게 추상화를 구현할 수 있나요?\n\n추상화는 내부 함수를 사용자로부터 숨기는 것을 말합니다. 사용자는 결과가 어떻게 생성되었는지 알지 못한 채 함수와 상호 작용합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n간단히 말하면, 추상화는 프로그램 복잡성을 줄이기 위해 관련 없는 데이터를 숨기는 것을 의미합니다. 파이썬에서는 추상화를 달성하기 위해 ABC 모듈을 사용합니다.\n\n추상 클래스는 다른 클래스의 기반으로 사용할 수 있습니다. 추상 클래스의 객체는 생성할 수 없으므로 요소에 액세스하는 유일한 방법은 상속을 통해서입니다.\n\n```python\nfrom abc import ABC, abstractmethod\n```\n\n```python\nclass Parent(ABC):\n    @abstractmethod\n    def show(self):\n        pass\n  \nclass child(Parent):\n    def show(self):\n        print(\"Child Class\")\nobj = child() # 추상 클래스는 인스턴스화 할 수 없습니다\nobj.show() # Child Class\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# FrozenSet이란 무엇인가요? 예시와 함께 중요성을 설명해주세요.\n\nFrozenSets는 set과 비슷하지만 변경할 수 없습니다.\n\n`set` 요소를 언제든지 수정할 수 있지만, 생성된 후에는 `frozenset`을 변경할 수 없습니다.\n\n생성 후에는 요소를 추가, 삭제 또는 업데이트할 수 없습니다. `frozenset`은 반복 가능한 항목을 입력으로 받아들이고 변경할 수 없게 만듭니다. 변경할 수 없기 때문에 딕셔너리의 키로 사용할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndata = {\"Name\": \"Roger\", \"Pin\": 3056, \"ActNo\":9892345112234565}\nfSet = frozenset(data)\nprint(fSet) # frozenset({'Name', 'Pin', 'ActNo'})\n```\n\n**얕은 복사와 깊은 복사의 차이를 설명해보겠습니다.**\n\n`얕은 복사`는 객체에 대한 참조를 새로운 메모리 위치에 저장합니다. 새로운 위치에서의 변경 사항은 이전 위치에 반영됩니다. 깊은 복사보다 더 빠릅니다.\n\n`깊은 복사`는 객체의 값을 새로운 위치에 저장합니다. 새 위치에서의 변경 사항이 이전 위치에 영향을 미치지 않습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`id` 는 객체의 메모리 주소를 보는 데 사용됩니다. 예시에서의 주소는 여러분의 컴퓨터에서 다를 수 있습니다.\n\n```js\n## 얕은 복사\ndata = [1, 2, 3, 4, 5]\nupdated_data = data\nupdated_data.append(6)\nprint(updated_data) # [1, 2, 3, 4, 5, 6]\nprint(data) # [1, 2, 3, 4, 5, 6]\nprint(id(data)) # 16777216\nprint(id(updated_data)) # 16777216\n```\n\n```js\n## 깊은 복사\nimport copy\ndata = [1, 2, 3, 4, 5]\nupdated_data = copy.deepcopy(data)\nupdated_data.append(6)\nprint(updated_data) # [1, 2, 3, 4, 5, 6]\nprint(data) # [1, 2, 3, 4, 5]\nprint(id(updated_data)) # 16777216\nprint(id(data)) # 14020317\n```\n\n# pickle을 사용하는 방법은요?\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`피클링(Pickling)`은 Python 객체를 바이트 스트림으로 변환하여 직렬화하는 것을 말합니다.\n\n`언피클링(Unpickling)`은 그 반대로, 바이트 스트림을 다시 Python 객체로 변환하여 역직렬화하는 것을 의미합니다.\n\nPython에서는 직렬화와 역직렬화를 위해 `pickle.dump`와 `pickle.load`를 사용합니다.\n\n```python\n## Pickling\nimport pickle\ndata =  {\n    'Names': [\"Karl\",\"Robin\",\"Lary\"],\n    'Id': ('G770531','G770532','G770533'),\n    'Salary':[55600,88900,76000]\n    }\noutput = open('./data.pkl', 'wb')\npickle.dump(data, output)\noutput.close()\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n## 피클링\nimport pickle\nstream = open('./data.pkl', 'rb')\ndata = pickle.load(stream)\nprint(data) # {'Names': ['Karl', 'Robin', 'Lary'], 'Id': ('G770531', 'G770532', 'G770533'), 'Salary': [55600, 88900, 76000]}\nstream.close()\n```\n\n# *args와 **kwargs가 무엇인가요?\n\n*args와 **kwargs는 함수에 가변 개수의 인수를 전달하는 것을 가능하게 합니다. 전달되는 인수가 몇 개인지 확신이 없을 때 사용합니다.\n\n*args는 함수에 가변 개수의 인수를 전달하는 것을 가능하게 합니다.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\ndef addNumbers(*numbers):\n    sum = 0\n    for number in numbers:\n        sum = sum + number\n    print(\"Sum: \", sum)\naddNumbers(3,5) # Sum: 8\naddNumbers(5,6,7) # Sum: 18\n```\n\n**kwargs는 함수에 변수 수의 키워드 인수를 전달하는 데 사용됩니다.\n\n```python\ndef addNumbers(**data):\n    sum = 0\n    for key, value in data.items():\n        sum = sum + value\n    print(\"Sum: \", sum)\n    \naddNumbers(a=5, b=6) # Sum: 11\naddNumbers(a=5, b=8, c=10) # Sum: 23\n```\n\n# 파이썬에서 컨텍스트 매니저란 무엇인가요?\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n컨텍스트 관리자는 리소스를 관리합니다. 필요에 따라 리소스를 할당하고 해제할 수 있게 해줍니다.\n\n가장 일반적인 예시는 `with` 문입니다.\n\n주로 파일을 열고 닫는 데 사용됩니다.\n\n`with`를 사용하면 코드 한 줄에서 문제가 발생해도 파일이 올바르게 닫힙니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nwith open('./data.txt', 'w') as f:\n    f.write(\"Hello\")\n```\n\n# 파이썬에서 인스턴스 메소드, 클래스 메소드 및 정적 메소드란 무엇인가요?\n\n파이썬에서는 세 가지 종류의 메소드가 있습니다: 인스턴스 메소드, 클래스 메소드 및 정적 메소드.\n\n- 인스턴스 메소드: 클래스 내에 만드는 일반적인 메소드로, 객체와 관련이 있습니다. 인스턴스를 가리키기 위해 `self`를 사용합니다.\n- 클래스 메소드: 객체가 아닌 클래스에 바운드된 메소드로, 클래스 수준의 작업을 수행하며 클래스 상태를 변경할 수 있습니다. `@classmethod` 데코레이터를 사용합니다.\n- 정적 메소드: 클래스 내에 정의되어 있지만 클래스 자체와 관련이 없는 논리를 명확하게 하기 위해 사용합니다. `@staticmethod` 데코레이터를 사용합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# nonlocal과 global 변수란 무엇인가요?\n\n이들은 변수의 범위를 정의합니다. Global 변수는 함수 외부에서 정의됩니다.\n\n```js\npi = 3.14  ## Global 변수\ndef circle(radius):\n    area_of_circle = pi * (radius) ** 2\n    print(\"원의 면적은: \", area_of_circle)\ncircle(7) # 원의 면적은: 153.86\n```\n\n이들의 값은 코드 전체에서 동일하며 프로그램의 어디에서든 사용할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n중첩 함수에서 정의된 로컬 스코프 없이 비로컬 변수가 사용됩니다. 비로컬 변수의 값을 변경하면 로컬 변수의 값도 변경됩니다.\n\n```js\ndef outer_function():\n    x = \"로컬 변수\"\n    def inner_function():\n        nonlocal x\n        x = \"비로컬 변수\"\n        print(\"내부 함수:\", x)\n    inner_function()\n    print(\"외부 함수:\", x)\nouter_function()\n# 내부 함수: 비로컬 변수\n# 외부 함수: 비로컬 변수\n```\n\n# 예제와 함께 제너레이터에 대해 설명해주세요.\n\n제너레이터(generator)는 순회 가능한 객체(iterable objects)를 반환하는 함수입니다. 하나 이상의 `yield` 문을 포함해야 합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`yield`은 함수의 현재 상태나 로컬 변수 참조를 잃지 않고 값을 반환하는 키워드입니다. `yield`가 포함된 함수를 제너레이터라고 부릅니다.\n\n제너레이터는 필요할 때만 항목을 생성하여 메모리를 효율적으로 사용합니다.\n\n초보자들에게 `yield`를 함수를 중지하지 않고 값을 반환하는 `return`으로 생각해보세요.\n\n```js\ndef fibon(limit):\n    a,b = 0,1\n    while a < limit:\n        yield a\n        a, b = b, a + b\n        \nfor x in fibon(10):\n    print(x) # 1 2 3 5 8 13 21 34 55 89\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n저는 10가지 흔한 Python 면접 질문을 공유했습니다. 이 질문들이 직장을 바꾸거나 직장을 찾을 때 도움이 되길 바라요!\n\n저는 “Medium에서 빠르게 팔로워를 얻는 방법”에 대한 eBook을 쓰고 있어요. 왜냐하면 저는 최고의 증거이기 때문이죠 — 딱 한 달 만에 5,000명 이상의 팔로워를 얻었어요. 기대해주세요!\n\n저는 Substack에서 \"GPT 소개\" 시리즈를 쓰고 있어요. 관심 있으시면 팔로우 해주세요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n10개의 글 중 10번째가 이미 완료되었습니다!\n\n읽어주셔서 감사합니다📖, 강조해주셔서 감사합니다🖍️, 박수를 보내주셔서 감사합니다👏, 댓글을 달아주셔서 감사합니다💬, 그리고 공유해주셔서 감사합니다🗣️. \"미디움의 친구\"로써, 저는 매일 동료 작가들에게 제 게시물을 봐주며 보답하려 노력합니다.\n\n최신 AI 이야기에 대한 소식을 받으려면 Substack에서 저희와 연락을 유지하세요. 함께 AI의 미래를 함께 만들어 봅시다!","ogImage":{"url":"/TIL/assets/no-image.jpg"},"coverImage":"/TIL/assets/no-image.jpg","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>파이썬 인터뷰 질문</h2>\n<p>전 세계에는 800만 명 이상의 파이썬 개발자가 있습니다. 매일 수천 명의 새로운 학습자가 파이썬 커뮤니티에 가입합니다. 혹독한 진실은, 그 중에서도 단 10~20%만이 좋은 개발자가 되어 좋은 직장을 찾을 수 있습니다. 이유는 고급 인터뷰 질문을 해결하지 못하기 때문입니다. 이제 10가지 중요하고 흔한 파이썬 인터뷰 질문을 공유하겠습니다.</p>\n<h1><code>.py</code> 파일과 <code>.pyc</code> 파일의 차이는 무엇인가요?</h1>\n<p><code>.py</code> 파일은 프로그램의 소스 코드입니다. <code>.pyc</code> 파일은 컴파일된 바이트 코드입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파이썬은 <code>.py</code> 파일을 컴파일하여 <code>.pyc</code> 파일로 저장하고, 이 파일은 파이썬 가상 머신에서 실행됩니다.</p>\n<p>주 소스 코드를 실행하기 전에 파이썬은 컴파일된 버전인 <code>.pyc</code> 파일을 찾습니다. 찾았다면 해당 파일을 가상 머신으로 실행합니다. 찾지 못했다면 <code>.py</code> 파일을 컴파일하고 실행합니다. 요컨대, <code>.pyc</code> 파일은 이미 컴파일된 코드를 재사용하여 컴파일 시간을 단축해줍니다.</p>\n<h1>추상화란 무엇인가요? 파이썬에서는 어떻게 추상화를 구현할 수 있나요?</h1>\n<p>추상화는 내부 함수를 사용자로부터 숨기는 것을 말합니다. 사용자는 결과가 어떻게 생성되었는지 알지 못한 채 함수와 상호 작용합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>간단히 말하면, 추상화는 프로그램 복잡성을 줄이기 위해 관련 없는 데이터를 숨기는 것을 의미합니다. 파이썬에서는 추상화를 달성하기 위해 ABC 모듈을 사용합니다.</p>\n<p>추상 클래스는 다른 클래스의 기반으로 사용할 수 있습니다. 추상 클래스의 객체는 생성할 수 없으므로 요소에 액세스하는 유일한 방법은 상속을 통해서입니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> abc <span class=\"hljs-keyword\">import</span> ABC, abstractmethod\n</code></pre>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Parent</span>(<span class=\"hljs-title class_ inherited__\">ABC</span>):\n<span class=\"hljs-meta\">    @abstractmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">pass</span>\n  \n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">child</span>(<span class=\"hljs-title class_ inherited__\">Parent</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Child Class\"</span>)\nobj = child() <span class=\"hljs-comment\"># 추상 클래스는 인스턴스화 할 수 없습니다</span>\nobj.show() <span class=\"hljs-comment\"># Child Class</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>FrozenSet이란 무엇인가요? 예시와 함께 중요성을 설명해주세요.</h1>\n<p>FrozenSets는 set과 비슷하지만 변경할 수 없습니다.</p>\n<p><code>set</code> 요소를 언제든지 수정할 수 있지만, 생성된 후에는 <code>frozenset</code>을 변경할 수 없습니다.</p>\n<p>생성 후에는 요소를 추가, 삭제 또는 업데이트할 수 없습니다. <code>frozenset</code>은 반복 가능한 항목을 입력으로 받아들이고 변경할 수 없게 만듭니다. 변경할 수 없기 때문에 딕셔너리의 키로 사용할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">data = {<span class=\"hljs-string\">\"Name\"</span>: <span class=\"hljs-string\">\"Roger\"</span>, <span class=\"hljs-string\">\"Pin\"</span>: <span class=\"hljs-number\">3056</span>, <span class=\"hljs-string\">\"ActNo\"</span>:<span class=\"hljs-number\">9892345112234565</span>}\nfSet = <span class=\"hljs-title function_\">frozenset</span>(data)\n<span class=\"hljs-title function_\">print</span>(fSet) # <span class=\"hljs-title function_\">frozenset</span>({<span class=\"hljs-string\">'Name'</span>, <span class=\"hljs-string\">'Pin'</span>, <span class=\"hljs-string\">'ActNo'</span>})\n</code></pre>\n<p><strong>얕은 복사와 깊은 복사의 차이를 설명해보겠습니다.</strong></p>\n<p><code>얕은 복사</code>는 객체에 대한 참조를 새로운 메모리 위치에 저장합니다. 새로운 위치에서의 변경 사항은 이전 위치에 반영됩니다. 깊은 복사보다 더 빠릅니다.</p>\n<p><code>깊은 복사</code>는 객체의 값을 새로운 위치에 저장합니다. 새 위치에서의 변경 사항이 이전 위치에 영향을 미치지 않습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><code>id</code> 는 객체의 메모리 주소를 보는 데 사용됩니다. 예시에서의 주소는 여러분의 컴퓨터에서 다를 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">## 얕은 복사\ndata = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\nupdated_data = data\nupdated_data.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-number\">6</span>)\n<span class=\"hljs-title function_\">print</span>(updated_data) # [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]\n<span class=\"hljs-title function_\">print</span>(data) # [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">id</span>(data)) # <span class=\"hljs-number\">16777216</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">id</span>(updated_data)) # <span class=\"hljs-number\">16777216</span>\n</code></pre>\n<pre><code class=\"hljs language-js\">## 깊은 복사\n<span class=\"hljs-keyword\">import</span> copy\ndata = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\nupdated_data = copy.<span class=\"hljs-title function_\">deepcopy</span>(data)\nupdated_data.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-number\">6</span>)\n<span class=\"hljs-title function_\">print</span>(updated_data) # [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]\n<span class=\"hljs-title function_\">print</span>(data) # [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">id</span>(updated_data)) # <span class=\"hljs-number\">16777216</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">id</span>(data)) # <span class=\"hljs-number\">14020317</span>\n</code></pre>\n<h1>pickle을 사용하는 방법은요?</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><code>피클링(Pickling)</code>은 Python 객체를 바이트 스트림으로 변환하여 직렬화하는 것을 말합니다.</p>\n<p><code>언피클링(Unpickling)</code>은 그 반대로, 바이트 스트림을 다시 Python 객체로 변환하여 역직렬화하는 것을 의미합니다.</p>\n<p>Python에서는 직렬화와 역직렬화를 위해 <code>pickle.dump</code>와 <code>pickle.load</code>를 사용합니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\">## Pickling</span>\n<span class=\"hljs-keyword\">import</span> pickle\ndata =  {\n    <span class=\"hljs-string\">'Names'</span>: [<span class=\"hljs-string\">\"Karl\"</span>,<span class=\"hljs-string\">\"Robin\"</span>,<span class=\"hljs-string\">\"Lary\"</span>],\n    <span class=\"hljs-string\">'Id'</span>: (<span class=\"hljs-string\">'G770531'</span>,<span class=\"hljs-string\">'G770532'</span>,<span class=\"hljs-string\">'G770533'</span>),\n    <span class=\"hljs-string\">'Salary'</span>:[<span class=\"hljs-number\">55600</span>,<span class=\"hljs-number\">88900</span>,<span class=\"hljs-number\">76000</span>]\n    }\noutput = <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'./data.pkl'</span>, <span class=\"hljs-string\">'wb'</span>)\npickle.dump(data, output)\noutput.close()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">## 피클링\n<span class=\"hljs-keyword\">import</span> pickle\nstream = <span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'./data.pkl'</span>, <span class=\"hljs-string\">'rb'</span>)\ndata = pickle.<span class=\"hljs-title function_\">load</span>(stream)\n<span class=\"hljs-title function_\">print</span>(data) # {<span class=\"hljs-string\">'Names'</span>: [<span class=\"hljs-string\">'Karl'</span>, <span class=\"hljs-string\">'Robin'</span>, <span class=\"hljs-string\">'Lary'</span>], <span class=\"hljs-string\">'Id'</span>: (<span class=\"hljs-string\">'G770531'</span>, <span class=\"hljs-string\">'G770532'</span>, <span class=\"hljs-string\">'G770533'</span>), <span class=\"hljs-string\">'Salary'</span>: [<span class=\"hljs-number\">55600</span>, <span class=\"hljs-number\">88900</span>, <span class=\"hljs-number\">76000</span>]}\nstream.<span class=\"hljs-title function_\">close</span>()\n</code></pre>\n<h1>*args와 **kwargs가 무엇인가요?</h1>\n<p>*args와 **kwargs는 함수에 가변 개수의 인수를 전달하는 것을 가능하게 합니다. 전달되는 인수가 몇 개인지 확신이 없을 때 사용합니다.</p>\n<p>*args는 함수에 가변 개수의 인수를 전달하는 것을 가능하게 합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">addNumbers</span>(<span class=\"hljs-params\">*numbers</span>):\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> numbers:\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">sum</span> + number\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Sum: \"</span>, <span class=\"hljs-built_in\">sum</span>)\naddNumbers(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>) <span class=\"hljs-comment\"># Sum: 8</span>\naddNumbers(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\"># Sum: 18</span>\n</code></pre>\n<p>**kwargs는 함수에 변수 수의 키워드 인수를 전달하는 데 사용됩니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">addNumbers</span>(<span class=\"hljs-params\">**data</span>):\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> data.items():\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">sum</span> + value\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Sum: \"</span>, <span class=\"hljs-built_in\">sum</span>)\n    \naddNumbers(a=<span class=\"hljs-number\">5</span>, b=<span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\"># Sum: 11</span>\naddNumbers(a=<span class=\"hljs-number\">5</span>, b=<span class=\"hljs-number\">8</span>, c=<span class=\"hljs-number\">10</span>) <span class=\"hljs-comment\"># Sum: 23</span>\n</code></pre>\n<h1>파이썬에서 컨텍스트 매니저란 무엇인가요?</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>컨텍스트 관리자는 리소스를 관리합니다. 필요에 따라 리소스를 할당하고 해제할 수 있게 해줍니다.</p>\n<p>가장 일반적인 예시는 <code>with</code> 문입니다.</p>\n<p>주로 파일을 열고 닫는 데 사용됩니다.</p>\n<p><code>with</code>를 사용하면 코드 한 줄에서 문제가 발생해도 파일이 올바르게 닫힙니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'./data.txt'</span>, <span class=\"hljs-string\">'w'</span>) <span class=\"hljs-keyword\">as</span> f:\n    f.write(<span class=\"hljs-string\">\"Hello\"</span>)\n</code></pre>\n<h1>파이썬에서 인스턴스 메소드, 클래스 메소드 및 정적 메소드란 무엇인가요?</h1>\n<p>파이썬에서는 세 가지 종류의 메소드가 있습니다: 인스턴스 메소드, 클래스 메소드 및 정적 메소드.</p>\n<ul>\n<li>인스턴스 메소드: 클래스 내에 만드는 일반적인 메소드로, 객체와 관련이 있습니다. 인스턴스를 가리키기 위해 <code>self</code>를 사용합니다.</li>\n<li>클래스 메소드: 객체가 아닌 클래스에 바운드된 메소드로, 클래스 수준의 작업을 수행하며 클래스 상태를 변경할 수 있습니다. <code>@classmethod</code> 데코레이터를 사용합니다.</li>\n<li>정적 메소드: 클래스 내에 정의되어 있지만 클래스 자체와 관련이 없는 논리를 명확하게 하기 위해 사용합니다. <code>@staticmethod</code> 데코레이터를 사용합니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>nonlocal과 global 변수란 무엇인가요?</h1>\n<p>이들은 변수의 범위를 정의합니다. Global 변수는 함수 외부에서 정의됩니다.</p>\n<pre><code class=\"hljs language-js\">pi = <span class=\"hljs-number\">3.14</span>  ## <span class=\"hljs-title class_\">Global</span> 변수\ndef <span class=\"hljs-title function_\">circle</span>(radius):\n    area_of_circle = pi * (radius) ** <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"원의 면적은: \"</span>, area_of_circle)\n<span class=\"hljs-title function_\">circle</span>(<span class=\"hljs-number\">7</span>) # 원의 면적은: <span class=\"hljs-number\">153.86</span>\n</code></pre>\n<p>이들의 값은 코드 전체에서 동일하며 프로그램의 어디에서든 사용할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>중첩 함수에서 정의된 로컬 스코프 없이 비로컬 변수가 사용됩니다. 비로컬 변수의 값을 변경하면 로컬 변수의 값도 변경됩니다.</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">outer_function</span>():\n    x = <span class=\"hljs-string\">\"로컬 변수\"</span>\n    def <span class=\"hljs-title function_\">inner_function</span>():\n        nonlocal x\n        x = <span class=\"hljs-string\">\"비로컬 변수\"</span>\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"내부 함수:\"</span>, x)\n    <span class=\"hljs-title function_\">inner_function</span>()\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"외부 함수:\"</span>, x)\n<span class=\"hljs-title function_\">outer_function</span>()\n# 내부 함수: 비로컬 변수\n# 외부 함수: 비로컬 변수\n</code></pre>\n<h1>예제와 함께 제너레이터에 대해 설명해주세요.</h1>\n<p>제너레이터(generator)는 순회 가능한 객체(iterable objects)를 반환하는 함수입니다. 하나 이상의 <code>yield</code> 문을 포함해야 합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><code>yield</code>은 함수의 현재 상태나 로컬 변수 참조를 잃지 않고 값을 반환하는 키워드입니다. <code>yield</code>가 포함된 함수를 제너레이터라고 부릅니다.</p>\n<p>제너레이터는 필요할 때만 항목을 생성하여 메모리를 효율적으로 사용합니다.</p>\n<p>초보자들에게 <code>yield</code>를 함수를 중지하지 않고 값을 반환하는 <code>return</code>으로 생각해보세요.</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">fibon</span>(limit):\n    a,b = <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> a &#x3C; <span class=\"hljs-attr\">limit</span>:\n        <span class=\"hljs-keyword\">yield</span> a\n        a, b = b, a + b\n        \n<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">fibon</span>(<span class=\"hljs-number\">10</span>):\n    <span class=\"hljs-title function_\">print</span>(x) # <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">34</span> <span class=\"hljs-number\">55</span> <span class=\"hljs-number\">89</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>결론</h1>\n<p>저는 10가지 흔한 Python 면접 질문을 공유했습니다. 이 질문들이 직장을 바꾸거나 직장을 찾을 때 도움이 되길 바라요!</p>\n<p>저는 “Medium에서 빠르게 팔로워를 얻는 방법”에 대한 eBook을 쓰고 있어요. 왜냐하면 저는 최고의 증거이기 때문이죠 — 딱 한 달 만에 5,000명 이상의 팔로워를 얻었어요. 기대해주세요!</p>\n<p>저는 Substack에서 \"GPT 소개\" 시리즈를 쓰고 있어요. 관심 있으시면 팔로우 해주세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>10개의 글 중 10번째가 이미 완료되었습니다!</p>\n<p>읽어주셔서 감사합니다📖, 강조해주셔서 감사합니다🖍️, 박수를 보내주셔서 감사합니다👏, 댓글을 달아주셔서 감사합니다💬, 그리고 공유해주셔서 감사합니다🗣️. \"미디움의 친구\"로써, 저는 매일 동료 작가들에게 제 게시물을 봐주며 보답하려 노력합니다.</p>\n<p>최신 AI 이야기에 대한 소식을 받으려면 Substack에서 저희와 연락을 유지하세요. 함께 AI의 미래를 함께 만들어 봅시다!</p>\n</body>\n</html>\n"},"__N_SSG":true}