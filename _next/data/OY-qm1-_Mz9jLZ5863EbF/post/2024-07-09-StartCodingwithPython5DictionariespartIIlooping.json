{"pageProps":{"post":{"title":"파이썬으로 코딩 시작하기 5 딕셔너리 part II  반복문 사용법","description":"","date":"2024-07-09 20:57","slug":"2024-07-09-StartCodingwithPython5DictionariespartIIlooping","content":"\n\n딕셔너리를 순회하는 방법을 배울 거에요. 딕셔너리는 여러 가지 방법으로 정보를 저장할 수 있기 때문에 이를 순회하는 다양한 방법이 있어요. 주어진 딕셔너리의 키, 값 또는 모든 키-값 쌍을 순회할 수 있어요.\n\n## 키-값 쌍을 순회하기\n\n세 개의 키-값 쌍을 포함하는 scientist_0 딕셔너리를 고려해봐요:\n\n```js\n# 파일 이름: scientist.py\n\nscientist_0 = {\n    'username': 'rfeynman',\n    'first name': 'richard',\n    'last name': 'feynman',\n    }\n\nfor key, value in scientist_0.items():\n    print(f\"\\n키: {key}\")\n    print(f\"값: {value}\")\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루프에 대한 예시를 보면, 코드를 실행하면 다음과 같이 결과가 나옵니다\n\n```js\n$ python3 scientist.py\n\nKey: username\nValue: rfeynman\n\nKey: first name\nValue: richard\n\nKey: last name\nValue: feynman\n```\n\n이후에 자세히 설명하겠습니다.\n\n키와 값에 대해 간단히 k와 v를 사용할 수 있습니다. 따라서 아래와 같이 코드를 작성하면 (특히 루프 부분을 참조하십시오), Python이 이전 코드와 정확히 동일하게 이해합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 파일 이름: scientist.py\n\nscientist_0 = {\n    'username': 'rfeynman',\n    'first name': 'richard',\n    'last name': 'feynman',\n    }\n\nfor k, v in scientist_0.items():\n    print(f\"\\nKey: {k}\")\n    print(f\"Value: {v}\")\n```\n\n위의 for 문에서 scientist_0 사전의 이름 뒤에 items() 메서드가 따라옵니다. 이 메서드는 키-값 쌍을 반환합니다. 그런 다음 각 키-값 쌍이 여기에서 Key와 Value로 정의된 두 변수에 할당됩니다.\n\n## 키값만 루핑\n\nitems() 메서드 대신 keys() 메서드를 사용하면 사전의 키만을 순회할 수 있습니다.\n\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# file name: scientist_hobby.py\n\nscientist_hobby = {\n    'einstein': '바이올린',\n    'feynman': '봉고',\n    'dirac': '사색',\n    }\n\nfor name in scientist_hobby.keys():\n    print(name.title())\n```\n\n위 코드에서는 scientist_hobby라는 사전이 정의되어 있습니다. 이 사전은 이름이 과학자의 이름이고 값이 과학자의 취미인 세 개의 키-값 쌍으로 이루어져 있습니다. 만약 여기서 값이 아닌 과학자들의 이름인 키만 필요하다면, keys() 메서드를 사용하면 됩니다.\n\n```js\n$ python3 scientist_hobby.py\nEinstein\nFeynman\nDirac\n```\n\n위 코드를 실행하면 사전의 키만을 반환합니다. 여기서 간단히 언급하고 싶은데, 이러한 상황(값이 아닌 키만 반환하는 것)은 keys() 메서드를 특별히 지정하지 않을 때의 기본 동작입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\n# 파일명: scientist_hobby.py\n\nscientist_hobby = {\n    'einstein': '바이올린',\n    'feynman': '봉고',\n    'dirac': '사색',\n    }\n\nfor anything in scientist_hobby:\n    print(anything.title())\n```\n\n위 코드에서 .keys()를 제외하였지만, 이 코드를 실행하면 과학자들의 이름만 반환하여 결과는 똑같이 나올 것입니다.\n\n알파벳 순서로 키를 순회하고 싶다면 sorted() 메서드를 사용할 수 있습니다:\n\n```python\n# 파일명: scientist_hobby.py\n\nscientist_hobby = {\n    'einstein': '바이올린',\n    'feynman': '봉고',\n    'dirac': '사색',\n    }\n\nfor name in sorted(scientist_hobby.keys()):\n    print(name.title())\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 코드를 실행하면 다음과 같이 됩니다\n\n```js\n$ python3 scientist_hobby.py\nDirac\nEinstein\nFeynman\n```\n\n## 값만 반복\n\n상담하신 것처럼, 우리는 키가 없는 값의 순서를 반환하기 위해 위에서 논의한 keys() 메소드와 대조해서 values() 메소드를 사용할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 파일 이름: scientist_hobby.py\n\nscientist_hobby = {\n    'einstein': 'violin',\n    'feynman': 'bongo',\n    'dirac': 'pondering',\n    'heisenberg': 'violin',\n    }\n\nprint(\"이러한 취미가 언급되었습니다:\")\nfor hobby in scientist_hobby.values():\n    print(hobby.title())\n```\n\n위의 코드를 실행하면 다음이 반환됩니다:\n\n```js\n$ python3 scientist_hobby.py\n이러한 취미가 언급되었습니다:\nViolin\nBongo\nPondering\nViolin\n```\n\n여기서 바이올린은 두 명이 동일한 취미를 가지고 있기 때문에 반복됩니다. 이러한 종류의 반복을 방지하고 싶은 경우 아래에 표시된 대로 set() 메소드를 사용할 수 있습니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\n# file name: scientist_hobby.py\n\nscientist_hobby = {\n    'einstein': 'violin',\n    'feynman': 'bongo',\n    'dirac': 'pondering',\n    'heisenberg': 'violin',\n    }\n\nprint(\"These hobbies have been mentioned:\")\nfor hobby in set(scientist_hobby.values()):\n    print(hobby.title())\n```\n\n```python\n$ python3 scientist_hobby.py\nThese hobbies have been mentioned:\nViolin\nPondering\nBongo\n```\n\nNow Violin is returned only once.\n\nOne can also make a set using braces ({}). However, in contrast to a dictionary where a set of key-value pairs are given inside '{}', in a set each single element should be separated by a comma.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n>>> 취미 = {'바이올린', '봉고', '사색', '바이올린', '봉고'}\n>>> 취미\n{'사색', '바이올린', '봉고'}\n```\n\n딕셔너리와 집합 사이의 차이를 알아두면 혼란을 방지할 수 있어요.\n\n![이미지](/assets/img/2024-07-09-StartCodingwithPython5DictionariespartIIlooping_0.png)\n\n![이미지](/assets/img/2024-07-09-StartCodingwithPython5DictionariespartIIlooping_1.png)\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![image](/assets/img/2024-07-09-StartCodingwithPython5DictionariespartIIlooping_2.png)\n","ogImage":{"url":"/assets/img/2024-07-09-StartCodingwithPython5DictionariespartIIlooping_0.png"},"coverImage":"/assets/img/2024-07-09-StartCodingwithPython5DictionariespartIIlooping_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>딕셔너리를 순회하는 방법을 배울 거에요. 딕셔너리는 여러 가지 방법으로 정보를 저장할 수 있기 때문에 이를 순회하는 다양한 방법이 있어요. 주어진 딕셔너리의 키, 값 또는 모든 키-값 쌍을 순회할 수 있어요.</p>\n<h2>키-값 쌍을 순회하기</h2>\n<p>세 개의 키-값 쌍을 포함하는 scientist_0 딕셔너리를 고려해봐요:</p>\n<pre><code class=\"hljs language-js\"># 파일 이름: scientist.<span class=\"hljs-property\">py</span>\n\nscientist_0 = {\n    <span class=\"hljs-string\">'username'</span>: <span class=\"hljs-string\">'rfeynman'</span>,\n    <span class=\"hljs-string\">'first name'</span>: <span class=\"hljs-string\">'richard'</span>,\n    <span class=\"hljs-string\">'last name'</span>: <span class=\"hljs-string\">'feynman'</span>,\n    }\n\n<span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> scientist_0.<span class=\"hljs-title function_\">items</span>():\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"\\n키: {key}\"</span>)\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"값: {value}\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>루프에 대한 예시를 보면, 코드를 실행하면 다음과 같이 결과가 나옵니다</p>\n<pre><code class=\"hljs language-js\">$ python3 scientist.<span class=\"hljs-property\">py</span>\n\n<span class=\"hljs-title class_\">Key</span>: username\n<span class=\"hljs-title class_\">Value</span>: rfeynman\n\n<span class=\"hljs-title class_\">Key</span>: first name\n<span class=\"hljs-title class_\">Value</span>: richard\n\n<span class=\"hljs-title class_\">Key</span>: last name\n<span class=\"hljs-title class_\">Value</span>: feynman\n</code></pre>\n<p>이후에 자세히 설명하겠습니다.</p>\n<p>키와 값에 대해 간단히 k와 v를 사용할 수 있습니다. 따라서 아래와 같이 코드를 작성하면 (특히 루프 부분을 참조하십시오), Python이 이전 코드와 정확히 동일하게 이해합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># 파일 이름: scientist.<span class=\"hljs-property\">py</span>\n\nscientist_0 = {\n    <span class=\"hljs-string\">'username'</span>: <span class=\"hljs-string\">'rfeynman'</span>,\n    <span class=\"hljs-string\">'first name'</span>: <span class=\"hljs-string\">'richard'</span>,\n    <span class=\"hljs-string\">'last name'</span>: <span class=\"hljs-string\">'feynman'</span>,\n    }\n\n<span class=\"hljs-keyword\">for</span> k, v <span class=\"hljs-keyword\">in</span> scientist_0.<span class=\"hljs-title function_\">items</span>():\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"\\nKey: {k}\"</span>)\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Value: {v}\"</span>)\n</code></pre>\n<p>위의 for 문에서 scientist_0 사전의 이름 뒤에 items() 메서드가 따라옵니다. 이 메서드는 키-값 쌍을 반환합니다. 그런 다음 각 키-값 쌍이 여기에서 Key와 Value로 정의된 두 변수에 할당됩니다.</p>\n<h2>키값만 루핑</h2>\n<p>items() 메서드 대신 keys() 메서드를 사용하면 사전의 키만을 순회할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># file <span class=\"hljs-attr\">name</span>: scientist_hobby.<span class=\"hljs-property\">py</span>\n\nscientist_hobby = {\n    <span class=\"hljs-string\">'einstein'</span>: <span class=\"hljs-string\">'바이올린'</span>,\n    <span class=\"hljs-string\">'feynman'</span>: <span class=\"hljs-string\">'봉고'</span>,\n    <span class=\"hljs-string\">'dirac'</span>: <span class=\"hljs-string\">'사색'</span>,\n    }\n\n<span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> scientist_hobby.<span class=\"hljs-title function_\">keys</span>():\n    <span class=\"hljs-title function_\">print</span>(name.<span class=\"hljs-title function_\">title</span>())\n</code></pre>\n<p>위 코드에서는 scientist_hobby라는 사전이 정의되어 있습니다. 이 사전은 이름이 과학자의 이름이고 값이 과학자의 취미인 세 개의 키-값 쌍으로 이루어져 있습니다. 만약 여기서 값이 아닌 과학자들의 이름인 키만 필요하다면, keys() 메서드를 사용하면 됩니다.</p>\n<pre><code class=\"hljs language-js\">$ python3 scientist_hobby.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-title class_\">Einstein</span>\n<span class=\"hljs-title class_\">Feynman</span>\n<span class=\"hljs-title class_\">Dirac</span>\n</code></pre>\n<p>위 코드를 실행하면 사전의 키만을 반환합니다. 여기서 간단히 언급하고 싶은데, 이러한 상황(값이 아닌 키만 반환하는 것)은 keys() 메서드를 특별히 지정하지 않을 때의 기본 동작입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># 파일명: scientist_hobby.py</span>\n\nscientist_hobby = {\n    <span class=\"hljs-string\">'einstein'</span>: <span class=\"hljs-string\">'바이올린'</span>,\n    <span class=\"hljs-string\">'feynman'</span>: <span class=\"hljs-string\">'봉고'</span>,\n    <span class=\"hljs-string\">'dirac'</span>: <span class=\"hljs-string\">'사색'</span>,\n    }\n\n<span class=\"hljs-keyword\">for</span> anything <span class=\"hljs-keyword\">in</span> scientist_hobby:\n    <span class=\"hljs-built_in\">print</span>(anything.title())\n</code></pre>\n<p>위 코드에서 .keys()를 제외하였지만, 이 코드를 실행하면 과학자들의 이름만 반환하여 결과는 똑같이 나올 것입니다.</p>\n<p>알파벳 순서로 키를 순회하고 싶다면 sorted() 메서드를 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># 파일명: scientist_hobby.py</span>\n\nscientist_hobby = {\n    <span class=\"hljs-string\">'einstein'</span>: <span class=\"hljs-string\">'바이올린'</span>,\n    <span class=\"hljs-string\">'feynman'</span>: <span class=\"hljs-string\">'봉고'</span>,\n    <span class=\"hljs-string\">'dirac'</span>: <span class=\"hljs-string\">'사색'</span>,\n    }\n\n<span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">sorted</span>(scientist_hobby.keys()):\n    <span class=\"hljs-built_in\">print</span>(name.title())\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 코드를 실행하면 다음과 같이 됩니다</p>\n<pre><code class=\"hljs language-js\">$ python3 scientist_hobby.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-title class_\">Dirac</span>\n<span class=\"hljs-title class_\">Einstein</span>\n<span class=\"hljs-title class_\">Feynman</span>\n</code></pre>\n<h2>값만 반복</h2>\n<p>상담하신 것처럼, 우리는 키가 없는 값의 순서를 반환하기 위해 위에서 논의한 keys() 메소드와 대조해서 values() 메소드를 사용할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># 파일 이름: scientist_hobby.<span class=\"hljs-property\">py</span>\n\nscientist_hobby = {\n    <span class=\"hljs-string\">'einstein'</span>: <span class=\"hljs-string\">'violin'</span>,\n    <span class=\"hljs-string\">'feynman'</span>: <span class=\"hljs-string\">'bongo'</span>,\n    <span class=\"hljs-string\">'dirac'</span>: <span class=\"hljs-string\">'pondering'</span>,\n    <span class=\"hljs-string\">'heisenberg'</span>: <span class=\"hljs-string\">'violin'</span>,\n    }\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"이러한 취미가 언급되었습니다:\"</span>)\n<span class=\"hljs-keyword\">for</span> hobby <span class=\"hljs-keyword\">in</span> scientist_hobby.<span class=\"hljs-title function_\">values</span>():\n    <span class=\"hljs-title function_\">print</span>(hobby.<span class=\"hljs-title function_\">title</span>())\n</code></pre>\n<p>위의 코드를 실행하면 다음이 반환됩니다:</p>\n<pre><code class=\"hljs language-js\">$ python3 scientist_hobby.<span class=\"hljs-property\">py</span>\n이러한 취미가 언급되었습니다:\n<span class=\"hljs-title class_\">Violin</span>\n<span class=\"hljs-title class_\">Bongo</span>\n<span class=\"hljs-title class_\">Pondering</span>\n<span class=\"hljs-title class_\">Violin</span>\n</code></pre>\n<p>여기서 바이올린은 두 명이 동일한 취미를 가지고 있기 때문에 반복됩니다. 이러한 종류의 반복을 방지하고 싶은 경우 아래에 표시된 대로 set() 메소드를 사용할 수 있습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># file name: scientist_hobby.py</span>\n\nscientist_hobby = {\n    <span class=\"hljs-string\">'einstein'</span>: <span class=\"hljs-string\">'violin'</span>,\n    <span class=\"hljs-string\">'feynman'</span>: <span class=\"hljs-string\">'bongo'</span>,\n    <span class=\"hljs-string\">'dirac'</span>: <span class=\"hljs-string\">'pondering'</span>,\n    <span class=\"hljs-string\">'heisenberg'</span>: <span class=\"hljs-string\">'violin'</span>,\n    }\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"These hobbies have been mentioned:\"</span>)\n<span class=\"hljs-keyword\">for</span> hobby <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span>(scientist_hobby.values()):\n    <span class=\"hljs-built_in\">print</span>(hobby.title())\n</code></pre>\n<pre><code class=\"hljs language-python\">$ python3 scientist_hobby.py\nThese hobbies have been mentioned:\nViolin\nPondering\nBongo\n</code></pre>\n<p>Now Violin is returned only once.</p>\n<p>One can also make a set using braces ({}). However, in contrast to a dictionary where a set of key-value pairs are given inside '{}', in a set each single element should be separated by a comma.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">>>> 취미 = {<span class=\"hljs-string\">'바이올린'</span>, <span class=\"hljs-string\">'봉고'</span>, <span class=\"hljs-string\">'사색'</span>, <span class=\"hljs-string\">'바이올린'</span>, <span class=\"hljs-string\">'봉고'</span>}\n>>> 취미\n{<span class=\"hljs-string\">'사색'</span>, <span class=\"hljs-string\">'바이올린'</span>, <span class=\"hljs-string\">'봉고'</span>}\n</code></pre>\n<p>딕셔너리와 집합 사이의 차이를 알아두면 혼란을 방지할 수 있어요.</p>\n<p><img src=\"/assets/img/2024-07-09-StartCodingwithPython5DictionariespartIIlooping_0.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-07-09-StartCodingwithPython5DictionariespartIIlooping_1.png\" alt=\"이미지\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-09-StartCodingwithPython5DictionariespartIIlooping_2.png\" alt=\"image\"></p>\n</body>\n</html>\n"},"__N_SSG":true}