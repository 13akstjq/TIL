{"pageProps":{"post":{"title":"Next.js 15 CLI 사용하는 방법","description":"","date":"2025-04-22 13:38","slug":"2025-04-22-nextCLI","content":"\n\n# Next.js CLI란?\n\nNext.js CLI는 Next.js 애플리케이션을 개발하고, 빌드하고, 시작하는 등 다양한 작업을 도와주는 명령어 도구예요. 명령어 한 줄로 손쉽게 앱을 관리할 수 있어서 개발자에게 아주 편리하답니다.\n\n기본 사용법은 아주 간단해요:\n\n```bash\nnpx next [command] [options]\n```\n\n예를 들어, 개발 서버를 실행하고 싶으면:\n\n```bash\nnpx next dev\n```\n\n빌드를 하려면:\n\n```bash\nnpx next build\n```\n\n완성된 앱을 실행하고 싶다면:\n\n```bash\nnpx next start\n```\n\n이렇게 기본적인 명령어만 알아도 Next.js 프로젝트 관리가 훨씬 수월해지죠.\n\n추가로, `npx`를 사용하지 않고 전역 설치를 통해 바로 `next` 명령어를 쓰기도 하는데, 개인적으로 프로젝트마다 버전 충돌 없이 쓰려면 `npx`나 `package.json`의 스크립트로 실행하는 걸 추천해요. \n\n다음 글에서는 Next.js CLI에서 자주 쓰이는 주요 명령어들을 좀 더 파헤쳐 볼게요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 참고 자료\n\n다음과 같은 옵션들을 사용할 수 있어요:\n\n| 옵션               | 설명                            |\n|------------------|-------------------------------|\n| `-h` 또는 `--help`   | 사용 가능한 모든 옵션을 보여줘요          |\n| `-v` 또는 `--version`| 현재 설치된 Next.js 버전 번호를 출력해줘요 |\n\n### 커맨드\n\n여기서 잠깐! 이렇게 옵션과 설명을 표로 정리하면 훨씬 한눈에 보기 쉽죠? 실제 개발할 때도 README 파일이나 문서 작성할 때 Markdown 표를 자주 쓰는데, 꼭 기억해두세요! 옵션을 한눈에 정리해두면 협업할 때도 도움이 많이 된답니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 Next.js에서 사용할 수 있는 주요 명령어들입니다:\n\n| Command         | Description                                                                                                                                            |\n|-----------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `dev`           | Next.js를 개발 모드로 실행합니다. 핫 모듈 리로딩(HMR), 에러 리포팅 등 개발에 편리한 기능들이 활성화됩니다.                                           |\n| `build`         | 애플리케이션의 최적화된 프로덕션 빌드를 생성합니다. 각 라우트에 대한 정보도 함께 보여줍니다.                                                           |\n| `start`         | 프로덕션 모드에서 Next.js를 실행합니다. 이 명령어를 사용하려면 먼저 `next build`로 빌드를 완료해야 합니다.                                            |\n| `info`          | 현재 시스템에 관한 유용한 정보를 출력합니다. Next.js 버그 리포트를 작성할 때 참고할 수 있습니다.                                                      |\n| `lint`          | `/src`, `/app`, `/pages`, `/components`, `/lib` 디렉토리 내 모든 파일에 대해 ESLint를 실행합니다. ESLint가 설정되어 있지 않으면 가이드에 따라 필요한 의존성을 설치할 수 있게 도와줍니다. |\n| `telemetry`     | Next.js의 완전 익명화된 텔레메트리 데이터 수집 기능을 켜거나 끌 수 있습니다.                                                                             |\n\n> 참고로, `next` 커맨드만 입력하면 자동으로 `next dev` 명령어를 실행하는 것과 같습니다.\n\n---\n\n### next dev 옵션\n\n---\n\n여기서 잠깐!  \n개발하면서 `next dev` 명령어를 자주 쓰게 되는데, 이 모드는 개발자 경험을 엄청나게 개선해줘요. HMR 덕분에 코드를 바꿀 때마다 새로 고침을 하지 않아도 되고, 에러도 바로바로 알려주거든요. 또 프로젝트 진행 중에는 `lint` 명령어로 코드 규칙을 점검하는 것도 잊지 마세요. 깔끔한 코드가 버그를 줄이고 협업에도 좋아요!\n\n추가로 `telemetry` 기능은 익명으로 사용 데이터를 수집해서 Next.js 개발팀이 더 좋은 기능을 만드는데 도움을 줍니다. 개인정보 침해 걱정 없이 사용 가능한데, 원치 않으면 꺼둘 수도 있으니 마음 편히 설정하세요.\n\n앞으로 Next.js로 프로젝트 하면서 이 명령어들 잘 활용해보시면 개발 속도가 훨씬 빨라질 거예요! 필요한 부분 있으면 언제든지 질문하거나 검색해서 도움받으세요~\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nnext dev는 개발 모드에서 애플리케이션을 시작할 때 사용하는 명령어로, 핫 모듈 리로딩(HMR), 에러 리포팅 등 개발에 도움 되는 기능들이 자동으로 활성화돼요. 이 때 사용할 수 있는 옵션들이 몇 가지 있는데, 아래 표로 정리해봤어요.\n\n| 옵션                                       | 설명                                                                                                  |\n|------------------------------------------|-----------------------------------------------------------------------------------------------------|\n| `-h, --help`                             | 사용 가능한 모든 옵션을 보여줍니다.                                                                   |\n| `[directory]`                           | 애플리케이션을 빌드할 디렉토리를 지정합니다. 지정하지 않으면 현재 디렉토리를 사용해요.                |\n| `--turbopack`                           | [Turbopack](https://nextjs.org/docs/app/api-reference/turbopack)을 사용해 개발 모드를 시작합니다.      |\n| `-p` 또는 `--port <port>`                | 애플리케이션을 시작할 포트 번호를 지정합니다. 기본값은 3000번이며, 환경 변수 PORT도 지원해요.          |\n| `-H` 또는 `--hostname <hostname>`        | 애플리케이션을 시작할 호스트네임(주소)를 지정합니다. 네트워크에 연결된 다른 기기에서 접속할 수 있게 할 때 유용합니다. 기본값은 0.0.0.0입니다. |\n| `--experimental-https`                   | HTTPS 서버를 시작하며, 자체 서명된 인증서를 생성합니다.                                                |\n| `--experimental-https-key <path>`       | HTTPS 키 파일의 경로를 지정합니다.                                                                  |\n| `--experimental-https-cert <path>`      | HTTPS 인증서 파일 경로를 지정합니다.                                                                |\n| `--experimental-https-ca <path>`        | HTTPS 인증서 권한(CA) 파일 경로를 지정합니다.                                                      |\n| `--experimental-upload-trace <traceUrl>`| 디버깅 트레이스의 일부 정보를 원격 HTTP URL로 전송해 리포팅합니다.                                    |\n\n---\n\n### next build 옵션\n\n`next build`는 프로덕션에 최적화된 빌드를 만들어 줘요. 빌드가 끝나면 각 라우트(route)에 대한 정보들을 출력해줍니다.  \n\n예를 들어, 페이지마다 빌드 결과 크기와 성능 정보를 확인할 수 있는데, 이걸 참고해서 용량 최적화나 로딩 속도 향상을 고민할 수 있죠. 실제로 빌드 명령어에 옵션을 더 붙여서 좀 더 디테일하게 빌드 과정이나 성능을 분석하는 방법도 있어요.  \n\n추가로, `next build` 명령어는 프로덕션 모드 빌드이기 때문에 개발 모드(`next dev`)와 달리 HMR 같은 즉각적인 반영 기능은 없어요. 따라서 수정 → 빌드 → 배포 과정을 반복하게 되니 점진적 배포에 유의하세요!\n\n---\n\n혹시 HMR이나 Turbopack에 대해 잘 모른다면 간단히 설명해볼게요.\n\n- **핫 모듈 리로딩(HMR)**: 코드를 수정하면 전체 페이지를 새로고침하지 않고도 그 부분만 즉시 반영해주는 기능이에요. 덕분에 개발할 때 훨씬 빠르게 결과를 확인할 수 있죠.  \n- **Turbopack**: Next.js가 공식적으로 지원하는 새로운 초고속 번들러(bundler)인데, Webpack보다 훨씬 빠르다고 알려져 있어요. 아직 실험적 기능이긴 하지만, 향후 Next.js 개발 방식에 큰 변화를 불러올 주목할 만한 기술이에요.\n\nNext.js를 사용하는 개발자라면 `next dev`와 `next build` 명령어의 옵션들을 잘 이해하고 활용하는 게 개발 효율을 크게 올리는 지름길이니, 꼭 익혀두길 추천합니다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n| Route (app)            | Size | First Load JS  |\n|-----------------------|-------|----------------|\n| ○ /_not-found         | 0 B   | 0 kB           |\n| └ ƒ /products/[id]    | 0 B   | 0 kB           |\n\n- **Size**: 클라이언트 사이드에서 해당 페이지로 이동할 때 다운로드되는 자산 크기입니다. 각 라우트의 크기는 해당 라우트가 필요로 하는 의존성만 포함합니다.\n- **First Load JS**: 서버에서 페이지를 처음 방문할 때 다운로드되는 자바스크립트 크기입니다. 모든 페이지가 공유하는 JS 크기는 별도로 표시됩니다.\n\n여기서 두 값 모두 gzip 압축된 크기이고, 첫 로드 시 크기는 초록, 노랑, 빨강 색상으로 퍼포먼스를 간단하게 표현해줘요. 초록색일수록 빠르고 최적화된 상태라고 보면 됩니다.\n\n이런 정보를 통해 우리가 직접 개발할 때 페이지별 리소스 최적화가 얼마나 잘 되어있는지 쉽게 파악할 수 있죠. 나중에 프로젝트 빌드할 때 `next build` 명령어에 다양한 옵션들도 줄 수 있으니 필요하면 그 부분도 한번 살펴보시면 좋아요.\n\n\n위 내용을 보시면서, 다음과 같은 팁도 같이 공유할게요.\n\n### 개발 시 참고할 점\n- **프리렌더링(Static Generation)**을 적극 활용하면, 성능 향상에 큰 도움이 됩니다. 위 예시에서 `○ (Static)` 표시가 있는 페이지가 바로 그런 경우에 해당해요.\n- 반대로, `ƒ (Dynamic)`는 필요할 때마다 서버에서 데이터를 받아 렌더링하는 방식이라 처음 로딩 시 시간이 좀 더 걸릴 수 있답니다.\n- gzip 압축은 기본이기 때문에 이걸 해제하거나 신경 쓸 필요 없지만, 만약 페이지 로딩 속도가 느리다면 번들 크기를 분석해서 꼭 줄일 방법을 찾아보세요.\n- 네트워크 환경이 좋지 않은 사용자도 많으니, 가능한 한 `First Load JS` 크기를 작게 유지하는 게 중요합니다.\n  \n이렇게 최적화를 의식하며 작업하면 사용자 경험이 훨씬 좋아질 거예요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 `next build` 명령어에 사용할 수 있는 여러 가지 옵션들입니다. 개발할 때 빌드 설정을 세밀하게 조절할 수 있어서 상황에 맞게 활용하면 좋아요.\n\n| 옵션 | 설명 |\n| --- | --- |\n| `-h, --help` | 사용 가능한 모든 옵션을 보여줍니다. |\n| `[directory]` | 앱을 빌드할 디렉터리를 지정해요. 만약 생략하면 현재 디렉터리가 기본으로 사용됩니다. |\n| `-d` 또는 `--debug` | 빌드 과정에 대한 자세한 로그를 보고 싶을 때 사용해요. 이 옵션을 켜면 리다이렉션, 헤더 설정, 리라이트 같은 추가 정보들이 출력됩니다. |\n| `--profile` | React 프로파일링을 활성화해요. 프로덕션 환경에서 React 컴포넌트 성능을 자세히 분석할 수 있습니다. (React Profiler에 대해 더 알고 싶다면 [React 공식 문서](https://react.dev/reference/react/Profiler)를 참고!) |\n| `--no-lint` | 린팅(linting)을 비활성화합니다. 린트 검사 없이 빠르게 빌드할 때 유용하지만, 코드 품질은 직접 신경 써야 해요. |\n| `--no-mangling` | 네이밍 맹글링(Name Mangling)을 비활성화합니다. 맹글링은 코드 압축 성능을 높이는데, 해제하면 디버깅이 편해지지만 수행 속도에는 영향이 있을 수 있습니다. |\n| `--experimental-app-only` | App Router 경로만 빌드합니다. Next.js의 실험적 기능을 사용하고 싶을 때 쓰여요. |\n| `--experimental-build-mode [mode]` | 실험적 빌드 모드를 사용합니다. 선택지는 `\"compile\"`, `\"generate\"`, 기본값은 `\"default\"`입니다. 새 기능을 시험해보고 싶을 때 도움이 됩니다. |\n\n### next start 옵션\n\n`next start` 명령어는 빌드가 완료된 애플리케이션을 프로덕션 모드로 실행할 때 사용합니다. 빌드(`next build`)가 먼저 되어 있어야 하죠.\n\n`next start`에 사용할 수 있는 옵션들도 있는데, 필요하면 알려드릴게요!\n\n---\n\n추가 팁을 하나 더 드리자면, `--debug` 옵션은 빌드 문제를 찾을 때 정말 유용해요. 예를 들어, 설정한 리다이렉션이 제대로 적용되는지, 특정 헤더가 붙는지 등을 확인할 때 말이죠. 빌드 시간이 조금 더 걸리긴 하지만 디버깅 시간이 훨씬 단축됩니다! \n\nReact 프로파일링도 성능 최적화할 때 꼭 써보세요. 사용자 경험에 큰 영향을 주는 렌더링 병목을 쉽게 찾아낼 수 있답니다. \n\n필요하면 좀 더 자세히 알려드릴게요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n| Option                         | Description                                                                                     |\n|-------------------------------|-------------------------------------------------------------------------------------------------|\n| `-h` or `--help`               | 사용 가능한 모든 옵션을 보여줍니다.                                                             |\n| `[directory]`                  | 애플리케이션을 시작할 디렉토리입니다. 지정하지 않으면 현재 디렉토리가 사용됩니다.                  |\n| `-p` or `--port <port>`        | 애플리케이션을 시작할 포트 번호를 지정합니다. 기본값은 3000이며 환경 변수 PORT가 우선 적용됩니다.        |\n| `-H` or `--hostname <hostname>`| 애플리케이션을 시작할 호스트 이름을 지정합니다. 기본값은 `0.0.0.0` 입니다.                        |\n| `--keepAliveTimeout <keepAliveTimeout>`| 비활성 연결을 닫기 전 대기할 최대 시간을 밀리초 단위로 지정합니다.                              |\n\n---\n\n### next info 옵션 설명\n\n`next info` 명령어는 현재 시스템에 관한 다양한 정보를 출력해줍니다. 이 정보들은 Next.js 관련 버그를 GitHub에 리포트할 때 아주 유용합니다. 출력되는 내용에는 운영체제 플랫폼/아키텍처/버전 정보부터, Node.js, npm, Yarn, pnpm 같은 바이너리 버전, 그리고 Next.js, React, React DOM 등 주요 패키지들의 버전 정보가 포함됩니다.\n\n예를 들어, 이런 식으로 보이게 되죠:\n\n\nSystem:\n  OS: macOS 13.4\n  CPU: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n  Memory: 16 GB\n\nBinaries:\n  Node: v18.15.0\n  npm: 9.5.1\n  Yarn: 1.22.19\n\nDependencies:\n  next: 13.4.4\n  react: 18.2.0\n  react-dom: 18.2.0\n\n\n제가 개인적으로 느낄 때, 이런 시스템 정보를 미리 확인하는 습관은 문제 해결과 협업에 큰 도움이 돼요. 특히 버전 차이에서 발생하는 문제를 빠르게 파악할 수 있거든요. 그래서 `next info` 같은 명령어를 모르셨다면 꼭 한번 써보시길 추천합니다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n운영 체제(OS):\n  플랫폼: darwin (맥OS)\n  아키텍처: arm64 (애플 실리콘 M1/M2 등)\n  버전: Darwin Kernel Version 23.6.0\n  사용 가능한 메모리(MB): 65536 (64GB)\n  사용 가능한 CPU 코어 수: 10\n\n바이너리 정보:\n  Node.js: 20.12.0\n  npm: 10.5.0\n  Yarn: 1.22.19\n  pnpm: 9.6.0\n\n주요 패키지:\n  next: 15.0.0-canary.115 (최신 베타 버전)\n  eslint-config-next: 14.2.5\n  react: 19.0.0-rc (릴리즈 후보)\n  react-dom: 19.0.0\n  typescript: 5.5.4\n\nNext.js 설정:\n  output: N/A\n```\n\n---\n\n여기서 살펴본 정보들은 `next info` 명령어를 실행했을 때 나오는 시스템 정보와 설정값들이에요. 이 명령어는 Next.js 프로젝트를 디버깅할 때 굉장히 유용하답니다.\n\n추가로, `next info` 명령어에는 몇 가지 옵션이 있어요:\n\n| 옵션               | 설명                                    |\n|--------------------|----------------------------------------|\n| `-h` 또는 `--help` | 사용 가능한 모든 옵션을 확인할 수 있어요. |\n| `--verbose`        | 디버깅에 필요한 추가 정보를 수집해요.   |\n\n예를 들어, 문제가 생겨서 더 자세한 정보를 보고 싶다면 다음과 같이 명령어를 쓰면 되죠.\n\n```bash\nnext info --verbose\n```\n\n---\n\n### next lint 옵션\n\n사실 Next.js는lint(코드 품질 검사)도 아주 중요한 부분에요. `next lint` 명령어를 통해 프로젝트 내 코드를 검사할 수 있는데, 여기서도 여러가지 옵션이 있답니다. 예를 들어, 특정 파일만 검사하거나, 자동으로 고치기도 가능하죠.\n\n다음 포스팅에서는 `next lint` 명령어와 그 옵션들을 상세히 다뤄볼게요! 코드 퀄리티 올리는 데 큰 도움이 될 거예요.\n\n---\n\n> 참고로, 현재 Next.js 버전 is canary(미리보기/베타 버전)이어서 안정된 버전과는 차이가 있을 수 있어요. 실무에서 쓸 땐 조금 주의하셔야 합니다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nnext lint 명령어는 pages/, app/, components/, lib/, 그리고 src/ 디렉터리에 있는 모든 파일에 대해 ESLint를 실행해주는 도구에요. ESLint 설정이 아직 안 되어 있다면, 필요한 의존성 설치를 위한 가이드도 함께 제공해준답니다.\n\n그럼 next lint 명령어에서 사용할 수 있는 옵션들을 살펴볼게요!\n\n| 옵션                                      | 설명                                                                                      |\n|-----------------------------------------|-----------------------------------------------------------------------------------------|\n| `[directory]`                           | lint를 실행할 기본 디렉터리를 지정해요. 지정하지 않으면 현재 디렉터리가 기본값이에요.     |\n| `-d, --dir, <dirs...>`                  | ESLint를 실행할 디렉터리를 하나 이상 지정할 수 있어요.                                   |\n| `--file, <files...>`                    | ESLint를 실행할 파일을 직접 지정할 수 있어요.                                            |\n| `--ext, [exts...]`                      | 검사할 JavaScript 파일 확장자를 지정해요. 기본값은 [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"] 입니다. |\n| `-c, --config, <config>`                | 이 옵션을 사용하면 다른 모든 설정을 무시하고 지정한 ESLint 설정 파일만 사용해요.          |\n| `--resolve-plugins-relative-to, <rprt>`| 플러그인을 어디서부터 찾을지 디렉터리를 지정할 수 있어요.                                |\n| `--strict`                             | Next.js 권장 strict 설정으로 `.eslintrc.json` 파일을 생성해줘요.                         |\n| `--rulesdir, <rulesdir...>`              | 추가적으로 사용할 ESLint 규칙들이 있는 디렉터리를 지정할 수 있어요.                      |\n| `--fix`                               | 자동으로 수정 가능한 lint 문제들을 고쳐줘요.                                            |\n| `--fix-type <fixType>`                  | 적용할 fix 타입을 지정할 수 있어요 (예: problem, suggestion, layout).                   |\n| `--ignore-path <path>`                   | lint 검사에서 제외할 파일이나 디렉터리 패턴을 지정하는 파일 경로를 지정해요.             |\n| `--no-ignore <path>`                     | `--ignore-path` 옵션을 비활성화해요.                                                   |\n| `--quiet`                             | 경고 메시지를 숨기고 에러만 보고해요.                                                  |\n| `--max-warnings [maxWarnings]`          | 지정한 경고 수 이상이면 non-zero 종료 코드를 반환해요. 기본값은 -1(제한 없음)입니다.    |\n| `-o, --output-file, <outputFile>`       | ESLint 결과를 저장할 파일을 지정해요.                                                  |\n| `-f, --format, <format>`                 | 결과 출력 형식을 지정할 수 있어요.                                                     |\n| `--no-inline-config`                    | 코드 내에 주석으로 ESLint 설정 변경을 막아요.                                          |\n| `--report-unused-disable-directives-severity <level>` | 사용하지 않는 `eslint-disable` 지시어에 대한 심각도 수준 지정 (error, off, warn)          |\n| `--no-cache`                           | 캐시를 사용하지 않도록 해요.                                                           |\n| `--cache-location, <cacheLocation>`       | 캐시 위치를 지정할 수 있어요.                                                          |\n| `--cache-strategy, [cacheStrategy]`       | 변경 파일을 감지하는 캐시 전략을 지정할 수 있어요. 기본값은 `metadata`입니다.           |\n| `--error-on-unmatched-pattern`           | 지정한 패턴에 맞는 파일이 없으면 에러로 처리해요.                                       |\n| `-h, --help`                           | 도움말 메시지를 보여줘요.                                                              |\n\n---\n\n### 조금 더 팁!\n\n- `--fix` 옵션을 잘 활용하면 코드 스타일을 자동으로 맞춰줘서 개발 속도를 올릴 수 있어요.\n- `--quiet` 모드는 CI 환경에서 에러만 보고 싶을 때 매우 유용해요.\n- 여러 디렉터리나 파일을 지정해 특정 부분만 검사하는 것도 가능하니, 프로젝트 상황에 맞게 유연하게 사용해보세요.\n\nnext lint 옵션을 잘 익히면 코드 품질 관리가 훨씬 편해진답니다! 도움이 되었길 바라요 :)\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNext.js는 완전히 익명으로 일반 사용 패턴에 관한 텔레메트리(사용 데이터)를 수집해요. 이 프로그램 참여는 선택사항이고, 원하지 않으면 언제든지 옵트아웃(참여 중지) 할 수 있답니다.\n\n텔레메트리 관련 명령어(next telemetry)에서 사용할 수 있는 옵션들은 다음과 같아요:\n\n| 옵션               | 설명                           |\n|--------------------|------------------------------|\n| `-h`, `--help`     | 사용 가능한 모든 옵션을 보여줍니다. |\n| `--enable`         | Next.js 텔레메트리 수집을 활성화합니다. |\n| `--disable`        | Next.js 텔레메트리 수집을 비활성화합니다. |\n\n참고로, 텔레메트리를 통해 수집되는 데이터는 프로젝트가 얼마나 잘 동작하는지, 어떤 기능이 자주 사용되는지 같은 정보들이에요. 이를 통해 Next.js 팀은 더 나은 기능을 만들고 버그를 빠르게 잡을 수 있답니다.\n\n텔레메트리에 관해 더 자세히 알고 싶다면 공식 문서를 참고해보세요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 예제들\n\n### 기본 포트 바꾸기\n\nNext.js는 기본적으로 개발할 때나 `next start` 명령어를 사용할 때 http://localhost:3000 포트를 씁니다. 근데 가끔 3000번 포트가 이미 다른 프로그램에서 사용 중일 수도 있고, 다른 포트를 쓰고 싶을 때가 있죠? 그럴 땐 `-p` 옵션을 써서 쉽게 바꿀 수 있어요. 예를 들어, 4000번 포트로 바꾸려면 이렇게 하면 됩니다:\n\n```bash\nnext dev -p 4000\n```\n\n위 명령어에서 `next dev`는 개발 모드로 서버를 실행하는 거고, `-p 4000`이 4000번 포트로 바꾸는 옵션이에요.\n\n참고로, 실제 운영 모드에서 사용하는 `next start` 명령에도 동일하게 `-p` 옵션을 쓸 수 있어요. 예를 들어:\n\n```bash\nnext start -p 5000\n```\n\n이렇게 하면 운영 서버가 5000번 포트에서 실행되겠죠.\n\n또 한 가지 팁을 드리자면, package.json 스크립트에 이 옵션을 추가해서 명령어를 짧게 관리하는 것도 좋아요. 예를 들어:\n\n```json\n\"scripts\": {\n  \"dev\": \"next dev -p 4000\",\n  \"start\": \"next start -p 4000\"\n}\n```\n\n이렇게 해두면 터미널에 `npm run dev` 혹은 `npm run start`만 쳐서 원하는 포트에 서버를 띄울 수 있으니, 기억해두면 편리합니다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPORT 환경 변수로 설정하는 방법도 있어요:\n\n```bash\nPORT=4000 next dev\n```\n\n> 참고할 점: `.env` 파일에서 PORT를 설정해도 효과가 없어요. HTTP 서버가 가장 먼저 실행되기 때문에, 다른 코드들이 초기화되기 전에 이미 포트가 정해져 버리거든요.\n\n### 개발 환경에서 HTTPS 사용하기\n\n개발할 때도 HTTPS를 쓰면 진짜 서비스 환경과 비슷하게 테스트할 수 있어서 좋아요. 다만, 로컬 개발 환경이라 SSL 인증서를 직접 만들어 써야 하죠. 이를 위해 `mkcert` 같은 툴을 사용하면 쉽게 로컬용 신뢰할 수 있는 인증서를 만들 수 있어요.\n\n예를 들어, `next.js` 애플리케이션에 HTTPS를 적용하려면 커스텀 서버를 한번 설정해줘야 하는데, `https` 모듈을 사용하거나 `next-https` 같은 라이브러리를 활용할 수도 있어요.\n\n직접 HTTPS 개발 환경을 구성하는 게 번거롭다면, 최근에 Next.js 관련 도구들이 HTTPS 옵션을 좀 더 쉽게 지원하는 방향으로 업데이트되고 있으니 공식 문서나 깃허브 이슈를 참고하는 것도 추천해요.\n\n혹시 HTTPS 개발 환경에서 겪는 문제나 궁금한 점 있으면 편하게 알려주세요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n로컬 개발 환경에서 웹후크(webhooks)나 인증(authentication) 같은 보안이 필요한 작업을 할 때, HTTPS를 사용하는 게 좋아요. Next.js에서는 `--experimental-https` 플래그를 사용해서 간단하게 자체 서명된(self-signed) 인증서를 생성하고 HTTPS 환경을 띄울 수 있답니다.\n\n```bash\nnext dev --experimental-https\n```\n\n이렇게 하면 Next.js 개발 서버가 https://localhost:3000 에서 실행되는데요, 기본 포트인 3000번이 사용되고, 만약 다른 포트를 쓰고 싶다면 `-p`, `--port` 옵션이나 환경변수 `PORT`를 통해 지정할 수 있어요.\n\n더 나아가서, 자신만의 인증서나 키를 직접 넣고 싶다면 아래 옵션을 활용하면 됩니다.\n\n| 옵션                       | 설명                           |\n|----------------------------|--------------------------------|\n| `--experimental-https-key` | 커스텀 HTTPS 키 파일 경로 지정  |\n| `--experimental-https-cert`| 커스텀 인증서 파일 경로 지정    |\n| `--experimental-https-ca`  | 커스텀 CA 인증서 파일 경로 지정 |\n\n예를 들어, 회사 내부에서 자체 인증서를 관리하고 있다면 이 옵션들을 사용해서 그대로 적용할 수 있겠죠.\n\n**참고로!**  \n로컬에서 HTTPS를 사용할 때 브라우저가 '안전하지 않다'고 경고하는 경우가 있어요. 이유는 자체 서명된 인증서이기 때문이죠. 실제 서비스용으로 사용하려면 공인된 인증서를 발급받아야 하지만, 개발할 때는 그냥 이 경고 무시하고 진행해도 크게 문제없어요. 그래도 개발 중에도 HTTPS 환경을 미리 만들어 테스트해보면 많은 문제가 사전에 걸러져서 좋아요!\n\n이렇게 Next.js가 HTTPS 환경 구축을 좀 더 쉽게 도와주니, 보안이 필요한 기능 개발 시 꼭 활용해 보세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n```bash\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n```\n\n`next dev --experimental-https` 옵션은 오직 개발 환경에서만 사용하도록 설계되어 있습니다. 이 옵션을 쓰면 mkcert를 통해 로컬에서 신뢰할 수 있는 인증서를 자동으로 만들어주는데, 편리하긴 하지만 진짜 운영 환경에선 신뢰할 수 있는 인증 기관에서 발급받은 정식 인증서를 써야 합니다.\n\n> 참고로, Vercel에 배포할 경우에는 HTTPS 설정이 자동으로 처리되니 별도로 신경 쓰지 않아도 됩니다.\n\n---\n\n### 아래 방향 프록시(downstream proxy)에서 타임아웃 설정하기\n\n여기서 잠깐! 개발 중에 프록시 서버를 쓰다가 요청 지연 때문에 문제가 생긴 경험 있으신가요? 프록시 설정 시 타임아웃 시간을 적절하게 조절해주면 네트워크 안정성을 높이는 데 도움이 됩니다.\n\n예를 들어, Next.js 프로젝트에서 프록시를 설정할 때 `http-proxy-middleware` 같은 라이브러리를 사용한다면, 아래처럼 타임아웃 옵션을 넣을 수 있어요:\n\n```js\nconst { createProxyMiddleware } = require('http-proxy-middleware');\n\nmodule.exports = function(app) {\n  app.use('/api', createProxyMiddleware({\n    target: 'http://backend.server',\n    changeOrigin: true,\n    timeout: 5000, // 5초 대기 후 타임아웃 처리\n    proxyTimeout: 5000,\n  }));\n};\n```\n\n타임아웃 설정을 해주면, 백엔드 API가 응답하지 않을 때 프론트엔드가 무한 대기 상태에 빠지지 않도록 방지할 수 있으니 꼭 활용해 보세요!\n\n---\n\n개발할 때 HTTPS 설정, 프록시 타임아웃 등 이런 작은 디테일 하나하나가 전체 앱의 안정성과 개발 경험을 훨씬 더 좋게 만들어요. 앞으로도 이런 팁들 계속 공유할게요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNext.js를 AWS ELB나 ALB 같은 다운스트림 프록시(Load Balancer 등) 뒤에 배포할 때, Next.js가 내부적으로 사용하는 HTTP 서버의 keep-alive 타임아웃 설정을 프록시의 타임아웃보다 크게 해주는 게 정말 중요해요.  \n이걸 안 하게 되면, keep-alive 타임아웃이 도달한 순간 Node.js가 아무런 알림 없이 TCP 연결을 끊어버리는데, 프록시는 여전히 그 연결을 재사용하려고 시도하거든요. 그래서 결국 프록시 에러가 발생해요.\n\n### 해결 방법  \nNext.js 프로덕션 서버를 실행할 때는 `--keepAliveTimeout` 옵션을 밀리초 단위로 넘겨주면 됩니다. 예를 들어 70초(70000ms)로 설정하려면 이렇게 해요:\n\n```bash\nnext start --keepAliveTimeout 70000\n```\n\n---\n\n### Node.js 인자 추가 전달하기  \n만약 직접 Node.js 인자를 주고 싶다면 `NODE_OPTIONS` 환경변수를 활용할 수도 있는데요, 예를 들어 메모리 제한을 늘리거나 디버깅 옵션을 넣고 싶을 때 유용해요.\n\n```bash\nNODE_OPTIONS=\"--max-old-space-size=4096\" next start --keepAliveTimeout 70000\n```\n\n---\n\n### 추가 팁  \n- ALB, ELB 같은 프록시는 기본적으로 60초 전후로 타임아웃이 설정되어 있어요. 그래서 Node.js 서버의 keepAliveTimeout은 그보다 약간 더 길게 세팅하는 게 좋습니다.  \n- 만약 타임아웃이 너무 짧게 설정되어 있으면 “502 Bad Gateway” 같은 프록시 에러가 발생하는 걸 보실 수 있어요.  \n- 이 외에도, 내부 네트워크 상태나 트래픽 특성에 맞춰서 적절히 값을 튜닝해주는 걸 추천합니다.\n\n이렇게만 설정해줘도 Next.js 앱 안정성이 한층 높아지니 꼭 기억해두세요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNode.js에서 `NODE_OPTIONS` 환경변수를 활용하면, 다음에 실행할 명령어에 다양한 옵션들을 간편하게 넘길 수 있어요. 특히 Next.js 같은 프레임워크를 실행할 때 유용하죠.\n\n예를 들어 이렇게 쓸 수 있어요:\n\n```bash\nNODE_OPTIONS='--throw-deprecation' next\n```\n- 이 옵션은 deprecated(사용 중단 예정)된 기능을 사용할 때 경고 대신 에러를 던져서 문제를 더 빨리 발견하게 도와줘요.\n\n```bash\nNODE_OPTIONS='-r esm' next\n```\n- `-r esm` 옵션은 실행 전에 esm 모듈을 리퀴어해서 ES 모듈을 사용할 수 있도록 환경을 세팅해줘요. 물론 Node.js 최신 버전은 기본 지원하지만, 호환성 이슈가 있을 때 유용하답니다.\n\n```bash\nNODE_OPTIONS='--inspect' next\n```\n- 이 옵션은 디버깅 모드를 켜서 크롬 개발자도구나 VSCode 같은 툴로 디버깅할 수 있게 해줘요.\n\n실제로 `NODE_OPTIONS`는 Node.js가 실행될 때 항상 참조하기 때문에, 여러 설정을 한 번에 전달 가능해 작업 효율을 올려주죠. 단, 옵션이 복잡해지면 환경변수 길이가 길어질 수 있으니 주의하세요!\n\n필요한 옵션을 적절히 활용해서 Next.js 개발환경을 좀 더 편리하게 만들어보세요~","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":24},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>Next.js CLI란?</h1>\n<p>Next.js CLI는 Next.js 애플리케이션을 개발하고, 빌드하고, 시작하는 등 다양한 작업을 도와주는 명령어 도구예요. 명령어 한 줄로 손쉽게 앱을 관리할 수 있어서 개발자에게 아주 편리하답니다.</p>\n<p>기본 사용법은 아주 간단해요:</p>\n<pre><code class=\"hljs language-bash\">npx next [<span class=\"hljs-built_in\">command</span>] [options]\n</code></pre>\n<p>예를 들어, 개발 서버를 실행하고 싶으면:</p>\n<pre><code class=\"hljs language-bash\">npx next dev\n</code></pre>\n<p>빌드를 하려면:</p>\n<pre><code class=\"hljs language-bash\">npx next build\n</code></pre>\n<p>완성된 앱을 실행하고 싶다면:</p>\n<pre><code class=\"hljs language-bash\">npx next start\n</code></pre>\n<p>이렇게 기본적인 명령어만 알아도 Next.js 프로젝트 관리가 훨씬 수월해지죠.</p>\n<p>추가로, <code>npx</code>를 사용하지 않고 전역 설치를 통해 바로 <code>next</code> 명령어를 쓰기도 하는데, 개인적으로 프로젝트마다 버전 충돌 없이 쓰려면 <code>npx</code>나 <code>package.json</code>의 스크립트로 실행하는 걸 추천해요.</p>\n<p>다음 글에서는 Next.js CLI에서 자주 쓰이는 주요 명령어들을 좀 더 파헤쳐 볼게요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>참고 자료</h2>\n<p>다음과 같은 옵션들을 사용할 수 있어요:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td><code>-h</code> 또는 <code>--help</code></td><td>사용 가능한 모든 옵션을 보여줘요</td></tr><tr><td><code>-v</code> 또는 <code>--version</code></td><td>현재 설치된 Next.js 버전 번호를 출력해줘요</td></tr></tbody></table>\n<h3>커맨드</h3>\n<p>여기서 잠깐! 이렇게 옵션과 설명을 표로 정리하면 훨씬 한눈에 보기 쉽죠? 실제 개발할 때도 README 파일이나 문서 작성할 때 Markdown 표를 자주 쓰는데, 꼭 기억해두세요! 옵션을 한눈에 정리해두면 협업할 때도 도움이 많이 된답니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다음은 Next.js에서 사용할 수 있는 주요 명령어들입니다:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>dev</code></td><td>Next.js를 개발 모드로 실행합니다. 핫 모듈 리로딩(HMR), 에러 리포팅 등 개발에 편리한 기능들이 활성화됩니다.</td></tr><tr><td><code>build</code></td><td>애플리케이션의 최적화된 프로덕션 빌드를 생성합니다. 각 라우트에 대한 정보도 함께 보여줍니다.</td></tr><tr><td><code>start</code></td><td>프로덕션 모드에서 Next.js를 실행합니다. 이 명령어를 사용하려면 먼저 <code>next build</code>로 빌드를 완료해야 합니다.</td></tr><tr><td><code>info</code></td><td>현재 시스템에 관한 유용한 정보를 출력합니다. Next.js 버그 리포트를 작성할 때 참고할 수 있습니다.</td></tr><tr><td><code>lint</code></td><td><code>/src</code>, <code>/app</code>, <code>/pages</code>, <code>/components</code>, <code>/lib</code> 디렉토리 내 모든 파일에 대해 ESLint를 실행합니다. ESLint가 설정되어 있지 않으면 가이드에 따라 필요한 의존성을 설치할 수 있게 도와줍니다.</td></tr><tr><td><code>telemetry</code></td><td>Next.js의 완전 익명화된 텔레메트리 데이터 수집 기능을 켜거나 끌 수 있습니다.</td></tr></tbody></table>\n<blockquote>\n<p>참고로, <code>next</code> 커맨드만 입력하면 자동으로 <code>next dev</code> 명령어를 실행하는 것과 같습니다.</p>\n</blockquote>\n<hr>\n<h3>next dev 옵션</h3>\n<hr>\n<p>여기서 잠깐!<br>\n개발하면서 <code>next dev</code> 명령어를 자주 쓰게 되는데, 이 모드는 개발자 경험을 엄청나게 개선해줘요. HMR 덕분에 코드를 바꿀 때마다 새로 고침을 하지 않아도 되고, 에러도 바로바로 알려주거든요. 또 프로젝트 진행 중에는 <code>lint</code> 명령어로 코드 규칙을 점검하는 것도 잊지 마세요. 깔끔한 코드가 버그를 줄이고 협업에도 좋아요!</p>\n<p>추가로 <code>telemetry</code> 기능은 익명으로 사용 데이터를 수집해서 Next.js 개발팀이 더 좋은 기능을 만드는데 도움을 줍니다. 개인정보 침해 걱정 없이 사용 가능한데, 원치 않으면 꺼둘 수도 있으니 마음 편히 설정하세요.</p>\n<p>앞으로 Next.js로 프로젝트 하면서 이 명령어들 잘 활용해보시면 개발 속도가 훨씬 빨라질 거예요! 필요한 부분 있으면 언제든지 질문하거나 검색해서 도움받으세요~</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>next dev는 개발 모드에서 애플리케이션을 시작할 때 사용하는 명령어로, 핫 모듈 리로딩(HMR), 에러 리포팅 등 개발에 도움 되는 기능들이 자동으로 활성화돼요. 이 때 사용할 수 있는 옵션들이 몇 가지 있는데, 아래 표로 정리해봤어요.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td><code>-h, --help</code></td><td>사용 가능한 모든 옵션을 보여줍니다.</td></tr><tr><td><code>[directory]</code></td><td>애플리케이션을 빌드할 디렉토리를 지정합니다. 지정하지 않으면 현재 디렉토리를 사용해요.</td></tr><tr><td><code>--turbopack</code></td><td><a href=\"https://nextjs.org/docs/app/api-reference/turbopack\" rel=\"nofollow\" target=\"_blank\">Turbopack</a>을 사용해 개발 모드를 시작합니다.</td></tr><tr><td><code>-p</code> 또는 <code>--port &#x3C;port></code></td><td>애플리케이션을 시작할 포트 번호를 지정합니다. 기본값은 3000번이며, 환경 변수 PORT도 지원해요.</td></tr><tr><td><code>-H</code> 또는 <code>--hostname &#x3C;hostname></code></td><td>애플리케이션을 시작할 호스트네임(주소)를 지정합니다. 네트워크에 연결된 다른 기기에서 접속할 수 있게 할 때 유용합니다. 기본값은 0.0.0.0입니다.</td></tr><tr><td><code>--experimental-https</code></td><td>HTTPS 서버를 시작하며, 자체 서명된 인증서를 생성합니다.</td></tr><tr><td><code>--experimental-https-key &#x3C;path></code></td><td>HTTPS 키 파일의 경로를 지정합니다.</td></tr><tr><td><code>--experimental-https-cert &#x3C;path></code></td><td>HTTPS 인증서 파일 경로를 지정합니다.</td></tr><tr><td><code>--experimental-https-ca &#x3C;path></code></td><td>HTTPS 인증서 권한(CA) 파일 경로를 지정합니다.</td></tr><tr><td><code>--experimental-upload-trace &#x3C;traceUrl></code></td><td>디버깅 트레이스의 일부 정보를 원격 HTTP URL로 전송해 리포팅합니다.</td></tr></tbody></table>\n<hr>\n<h3>next build 옵션</h3>\n<p><code>next build</code>는 프로덕션에 최적화된 빌드를 만들어 줘요. 빌드가 끝나면 각 라우트(route)에 대한 정보들을 출력해줍니다.</p>\n<p>예를 들어, 페이지마다 빌드 결과 크기와 성능 정보를 확인할 수 있는데, 이걸 참고해서 용량 최적화나 로딩 속도 향상을 고민할 수 있죠. 실제로 빌드 명령어에 옵션을 더 붙여서 좀 더 디테일하게 빌드 과정이나 성능을 분석하는 방법도 있어요.</p>\n<p>추가로, <code>next build</code> 명령어는 프로덕션 모드 빌드이기 때문에 개발 모드(<code>next dev</code>)와 달리 HMR 같은 즉각적인 반영 기능은 없어요. 따라서 수정 → 빌드 → 배포 과정을 반복하게 되니 점진적 배포에 유의하세요!</p>\n<hr>\n<p>혹시 HMR이나 Turbopack에 대해 잘 모른다면 간단히 설명해볼게요.</p>\n<ul>\n<li><strong>핫 모듈 리로딩(HMR)</strong>: 코드를 수정하면 전체 페이지를 새로고침하지 않고도 그 부분만 즉시 반영해주는 기능이에요. 덕분에 개발할 때 훨씬 빠르게 결과를 확인할 수 있죠.</li>\n<li><strong>Turbopack</strong>: Next.js가 공식적으로 지원하는 새로운 초고속 번들러(bundler)인데, Webpack보다 훨씬 빠르다고 알려져 있어요. 아직 실험적 기능이긴 하지만, 향후 Next.js 개발 방식에 큰 변화를 불러올 주목할 만한 기술이에요.</li>\n</ul>\n<p>Next.js를 사용하는 개발자라면 <code>next dev</code>와 <code>next build</code> 명령어의 옵션들을 잘 이해하고 활용하는 게 개발 효율을 크게 올리는 지름길이니, 꼭 익혀두길 추천합니다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Route (app)</th><th>Size</th><th>First Load JS</th></tr></thead><tbody><tr><td>○ /_not-found</td><td>0 B</td><td>0 kB</td></tr><tr><td>└ ƒ /products/[id]</td><td>0 B</td><td>0 kB</td></tr></tbody></table>\n<ul>\n<li><strong>Size</strong>: 클라이언트 사이드에서 해당 페이지로 이동할 때 다운로드되는 자산 크기입니다. 각 라우트의 크기는 해당 라우트가 필요로 하는 의존성만 포함합니다.</li>\n<li><strong>First Load JS</strong>: 서버에서 페이지를 처음 방문할 때 다운로드되는 자바스크립트 크기입니다. 모든 페이지가 공유하는 JS 크기는 별도로 표시됩니다.</li>\n</ul>\n<p>여기서 두 값 모두 gzip 압축된 크기이고, 첫 로드 시 크기는 초록, 노랑, 빨강 색상으로 퍼포먼스를 간단하게 표현해줘요. 초록색일수록 빠르고 최적화된 상태라고 보면 됩니다.</p>\n<p>이런 정보를 통해 우리가 직접 개발할 때 페이지별 리소스 최적화가 얼마나 잘 되어있는지 쉽게 파악할 수 있죠. 나중에 프로젝트 빌드할 때 <code>next build</code> 명령어에 다양한 옵션들도 줄 수 있으니 필요하면 그 부분도 한번 살펴보시면 좋아요.</p>\n<p>위 내용을 보시면서, 다음과 같은 팁도 같이 공유할게요.</p>\n<h3>개발 시 참고할 점</h3>\n<ul>\n<li>**프리렌더링(Static Generation)**을 적극 활용하면, 성능 향상에 큰 도움이 됩니다. 위 예시에서 <code>○ (Static)</code> 표시가 있는 페이지가 바로 그런 경우에 해당해요.</li>\n<li>반대로, <code>ƒ (Dynamic)</code>는 필요할 때마다 서버에서 데이터를 받아 렌더링하는 방식이라 처음 로딩 시 시간이 좀 더 걸릴 수 있답니다.</li>\n<li>gzip 압축은 기본이기 때문에 이걸 해제하거나 신경 쓸 필요 없지만, 만약 페이지 로딩 속도가 느리다면 번들 크기를 분석해서 꼭 줄일 방법을 찾아보세요.</li>\n<li>네트워크 환경이 좋지 않은 사용자도 많으니, 가능한 한 <code>First Load JS</code> 크기를 작게 유지하는 게 중요합니다.</li>\n</ul>\n<p>이렇게 최적화를 의식하며 작업하면 사용자 경험이 훨씬 좋아질 거예요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다음은 <code>next build</code> 명령어에 사용할 수 있는 여러 가지 옵션들입니다. 개발할 때 빌드 설정을 세밀하게 조절할 수 있어서 상황에 맞게 활용하면 좋아요.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td><code>-h, --help</code></td><td>사용 가능한 모든 옵션을 보여줍니다.</td></tr><tr><td><code>[directory]</code></td><td>앱을 빌드할 디렉터리를 지정해요. 만약 생략하면 현재 디렉터리가 기본으로 사용됩니다.</td></tr><tr><td><code>-d</code> 또는 <code>--debug</code></td><td>빌드 과정에 대한 자세한 로그를 보고 싶을 때 사용해요. 이 옵션을 켜면 리다이렉션, 헤더 설정, 리라이트 같은 추가 정보들이 출력됩니다.</td></tr><tr><td><code>--profile</code></td><td>React 프로파일링을 활성화해요. 프로덕션 환경에서 React 컴포넌트 성능을 자세히 분석할 수 있습니다. (React Profiler에 대해 더 알고 싶다면 <a href=\"https://react.dev/reference/react/Profiler\" rel=\"nofollow\" target=\"_blank\">React 공식 문서</a>를 참고!)</td></tr><tr><td><code>--no-lint</code></td><td>린팅(linting)을 비활성화합니다. 린트 검사 없이 빠르게 빌드할 때 유용하지만, 코드 품질은 직접 신경 써야 해요.</td></tr><tr><td><code>--no-mangling</code></td><td>네이밍 맹글링(Name Mangling)을 비활성화합니다. 맹글링은 코드 압축 성능을 높이는데, 해제하면 디버깅이 편해지지만 수행 속도에는 영향이 있을 수 있습니다.</td></tr><tr><td><code>--experimental-app-only</code></td><td>App Router 경로만 빌드합니다. Next.js의 실험적 기능을 사용하고 싶을 때 쓰여요.</td></tr><tr><td><code>--experimental-build-mode [mode]</code></td><td>실험적 빌드 모드를 사용합니다. 선택지는 <code>\"compile\"</code>, <code>\"generate\"</code>, 기본값은 <code>\"default\"</code>입니다. 새 기능을 시험해보고 싶을 때 도움이 됩니다.</td></tr></tbody></table>\n<h3>next start 옵션</h3>\n<p><code>next start</code> 명령어는 빌드가 완료된 애플리케이션을 프로덕션 모드로 실행할 때 사용합니다. 빌드(<code>next build</code>)가 먼저 되어 있어야 하죠.</p>\n<p><code>next start</code>에 사용할 수 있는 옵션들도 있는데, 필요하면 알려드릴게요!</p>\n<hr>\n<p>추가 팁을 하나 더 드리자면, <code>--debug</code> 옵션은 빌드 문제를 찾을 때 정말 유용해요. 예를 들어, 설정한 리다이렉션이 제대로 적용되는지, 특정 헤더가 붙는지 등을 확인할 때 말이죠. 빌드 시간이 조금 더 걸리긴 하지만 디버깅 시간이 훨씬 단축됩니다!</p>\n<p>React 프로파일링도 성능 최적화할 때 꼭 써보세요. 사용자 경험에 큰 영향을 주는 렌더링 병목을 쉽게 찾아낼 수 있답니다.</p>\n<p>필요하면 좀 더 자세히 알려드릴게요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>-h</code> or <code>--help</code></td><td>사용 가능한 모든 옵션을 보여줍니다.</td></tr><tr><td><code>[directory]</code></td><td>애플리케이션을 시작할 디렉토리입니다. 지정하지 않으면 현재 디렉토리가 사용됩니다.</td></tr><tr><td><code>-p</code> or <code>--port &#x3C;port></code></td><td>애플리케이션을 시작할 포트 번호를 지정합니다. 기본값은 3000이며 환경 변수 PORT가 우선 적용됩니다.</td></tr><tr><td><code>-H</code> or <code>--hostname &#x3C;hostname></code></td><td>애플리케이션을 시작할 호스트 이름을 지정합니다. 기본값은 <code>0.0.0.0</code> 입니다.</td></tr><tr><td><code>--keepAliveTimeout &#x3C;keepAliveTimeout></code></td><td>비활성 연결을 닫기 전 대기할 최대 시간을 밀리초 단위로 지정합니다.</td></tr></tbody></table>\n<hr>\n<h3>next info 옵션 설명</h3>\n<p><code>next info</code> 명령어는 현재 시스템에 관한 다양한 정보를 출력해줍니다. 이 정보들은 Next.js 관련 버그를 GitHub에 리포트할 때 아주 유용합니다. 출력되는 내용에는 운영체제 플랫폼/아키텍처/버전 정보부터, Node.js, npm, Yarn, pnpm 같은 바이너리 버전, 그리고 Next.js, React, React DOM 등 주요 패키지들의 버전 정보가 포함됩니다.</p>\n<p>예를 들어, 이런 식으로 보이게 되죠:</p>\n<p>System:\nOS: macOS 13.4\nCPU: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\nMemory: 16 GB</p>\n<p>Binaries:\nNode: v18.15.0\nnpm: 9.5.1\nYarn: 1.22.19</p>\n<p>Dependencies:\nnext: 13.4.4\nreact: 18.2.0\nreact-dom: 18.2.0</p>\n<p>제가 개인적으로 느낄 때, 이런 시스템 정보를 미리 확인하는 습관은 문제 해결과 협업에 큰 도움이 돼요. 특히 버전 차이에서 발생하는 문제를 빠르게 파악할 수 있거든요. 그래서 <code>next info</code> 같은 명령어를 모르셨다면 꼭 한번 써보시길 추천합니다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">운영 체제(<span class=\"hljs-variable constant_\">OS</span>):\n  플랫폼: darwin (맥<span class=\"hljs-variable constant_\">OS</span>)\n  아키텍처: arm64 (애플 실리콘 <span class=\"hljs-variable constant_\">M1</span>/<span class=\"hljs-variable constant_\">M2</span> 등)\n  버전: <span class=\"hljs-title class_\">Darwin</span> <span class=\"hljs-title class_\">Kernel</span> <span class=\"hljs-title class_\">Version</span> <span class=\"hljs-number\">23.6</span><span class=\"hljs-number\">.0</span>\n  사용 가능한 메모리(<span class=\"hljs-variable constant_\">MB</span>): <span class=\"hljs-number\">65536</span> (64GB)\n  사용 가능한 <span class=\"hljs-variable constant_\">CPU</span> 코어 수: <span class=\"hljs-number\">10</span>\n\n바이너리 정보:\n  <span class=\"hljs-title class_\">Node</span>.<span class=\"hljs-property\">js</span>: <span class=\"hljs-number\">20.12</span><span class=\"hljs-number\">.0</span>\n  <span class=\"hljs-attr\">npm</span>: <span class=\"hljs-number\">10.5</span><span class=\"hljs-number\">.0</span>\n  <span class=\"hljs-title class_\">Yarn</span>: <span class=\"hljs-number\">1.22</span><span class=\"hljs-number\">.19</span>\n  <span class=\"hljs-attr\">pnpm</span>: <span class=\"hljs-number\">9.6</span><span class=\"hljs-number\">.0</span>\n\n주요 패키지:\n  <span class=\"hljs-attr\">next</span>: <span class=\"hljs-number\">15.0</span><span class=\"hljs-number\">.0</span>-canary<span class=\"hljs-number\">.115</span> (최신 베타 버전)\n  eslint-config-<span class=\"hljs-attr\">next</span>: <span class=\"hljs-number\">14.2</span><span class=\"hljs-number\">.5</span>\n  <span class=\"hljs-attr\">react</span>: <span class=\"hljs-number\">19.0</span><span class=\"hljs-number\">.0</span>-rc (릴리즈 후보)\n  react-<span class=\"hljs-attr\">dom</span>: <span class=\"hljs-number\">19.0</span><span class=\"hljs-number\">.0</span>\n  <span class=\"hljs-attr\">typescript</span>: <span class=\"hljs-number\">5.5</span><span class=\"hljs-number\">.4</span>\n\n<span class=\"hljs-title class_\">Next</span>.<span class=\"hljs-property\">js</span> 설정:\n  <span class=\"hljs-attr\">output</span>: N/A\n</code></pre>\n<hr>\n<p>여기서 살펴본 정보들은 <code>next info</code> 명령어를 실행했을 때 나오는 시스템 정보와 설정값들이에요. 이 명령어는 Next.js 프로젝트를 디버깅할 때 굉장히 유용하답니다.</p>\n<p>추가로, <code>next info</code> 명령어에는 몇 가지 옵션이 있어요:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td><code>-h</code> 또는 <code>--help</code></td><td>사용 가능한 모든 옵션을 확인할 수 있어요.</td></tr><tr><td><code>--verbose</code></td><td>디버깅에 필요한 추가 정보를 수집해요.</td></tr></tbody></table>\n<p>예를 들어, 문제가 생겨서 더 자세한 정보를 보고 싶다면 다음과 같이 명령어를 쓰면 되죠.</p>\n<pre><code class=\"hljs language-bash\">next info --verbose\n</code></pre>\n<hr>\n<h3>next lint 옵션</h3>\n<p>사실 Next.js는lint(코드 품질 검사)도 아주 중요한 부분에요. <code>next lint</code> 명령어를 통해 프로젝트 내 코드를 검사할 수 있는데, 여기서도 여러가지 옵션이 있답니다. 예를 들어, 특정 파일만 검사하거나, 자동으로 고치기도 가능하죠.</p>\n<p>다음 포스팅에서는 <code>next lint</code> 명령어와 그 옵션들을 상세히 다뤄볼게요! 코드 퀄리티 올리는 데 큰 도움이 될 거예요.</p>\n<hr>\n<blockquote>\n<p>참고로, 현재 Next.js 버전 is canary(미리보기/베타 버전)이어서 안정된 버전과는 차이가 있을 수 있어요. 실무에서 쓸 땐 조금 주의하셔야 합니다!</p>\n</blockquote>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>next lint 명령어는 pages/, app/, components/, lib/, 그리고 src/ 디렉터리에 있는 모든 파일에 대해 ESLint를 실행해주는 도구에요. ESLint 설정이 아직 안 되어 있다면, 필요한 의존성 설치를 위한 가이드도 함께 제공해준답니다.</p>\n<p>그럼 next lint 명령어에서 사용할 수 있는 옵션들을 살펴볼게요!</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td><code>[directory]</code></td><td>lint를 실행할 기본 디렉터리를 지정해요. 지정하지 않으면 현재 디렉터리가 기본값이에요.</td></tr><tr><td><code>-d, --dir, &#x3C;dirs...></code></td><td>ESLint를 실행할 디렉터리를 하나 이상 지정할 수 있어요.</td></tr><tr><td><code>--file, &#x3C;files...></code></td><td>ESLint를 실행할 파일을 직접 지정할 수 있어요.</td></tr><tr><td><code>--ext, [exts...]</code></td><td>검사할 JavaScript 파일 확장자를 지정해요. 기본값은 [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"] 입니다.</td></tr><tr><td><code>-c, --config, &#x3C;config></code></td><td>이 옵션을 사용하면 다른 모든 설정을 무시하고 지정한 ESLint 설정 파일만 사용해요.</td></tr><tr><td><code>--resolve-plugins-relative-to, &#x3C;rprt></code></td><td>플러그인을 어디서부터 찾을지 디렉터리를 지정할 수 있어요.</td></tr><tr><td><code>--strict</code></td><td>Next.js 권장 strict 설정으로 <code>.eslintrc.json</code> 파일을 생성해줘요.</td></tr><tr><td><code>--rulesdir, &#x3C;rulesdir...></code></td><td>추가적으로 사용할 ESLint 규칙들이 있는 디렉터리를 지정할 수 있어요.</td></tr><tr><td><code>--fix</code></td><td>자동으로 수정 가능한 lint 문제들을 고쳐줘요.</td></tr><tr><td><code>--fix-type &#x3C;fixType></code></td><td>적용할 fix 타입을 지정할 수 있어요 (예: problem, suggestion, layout).</td></tr><tr><td><code>--ignore-path &#x3C;path></code></td><td>lint 검사에서 제외할 파일이나 디렉터리 패턴을 지정하는 파일 경로를 지정해요.</td></tr><tr><td><code>--no-ignore &#x3C;path></code></td><td><code>--ignore-path</code> 옵션을 비활성화해요.</td></tr><tr><td><code>--quiet</code></td><td>경고 메시지를 숨기고 에러만 보고해요.</td></tr><tr><td><code>--max-warnings [maxWarnings]</code></td><td>지정한 경고 수 이상이면 non-zero 종료 코드를 반환해요. 기본값은 -1(제한 없음)입니다.</td></tr><tr><td><code>-o, --output-file, &#x3C;outputFile></code></td><td>ESLint 결과를 저장할 파일을 지정해요.</td></tr><tr><td><code>-f, --format, &#x3C;format></code></td><td>결과 출력 형식을 지정할 수 있어요.</td></tr><tr><td><code>--no-inline-config</code></td><td>코드 내에 주석으로 ESLint 설정 변경을 막아요.</td></tr><tr><td><code>--report-unused-disable-directives-severity &#x3C;level></code></td><td>사용하지 않는 <code>eslint-disable</code> 지시어에 대한 심각도 수준 지정 (error, off, warn)</td></tr><tr><td><code>--no-cache</code></td><td>캐시를 사용하지 않도록 해요.</td></tr><tr><td><code>--cache-location, &#x3C;cacheLocation></code></td><td>캐시 위치를 지정할 수 있어요.</td></tr><tr><td><code>--cache-strategy, [cacheStrategy]</code></td><td>변경 파일을 감지하는 캐시 전략을 지정할 수 있어요. 기본값은 <code>metadata</code>입니다.</td></tr><tr><td><code>--error-on-unmatched-pattern</code></td><td>지정한 패턴에 맞는 파일이 없으면 에러로 처리해요.</td></tr><tr><td><code>-h, --help</code></td><td>도움말 메시지를 보여줘요.</td></tr></tbody></table>\n<hr>\n<h3>조금 더 팁!</h3>\n<ul>\n<li><code>--fix</code> 옵션을 잘 활용하면 코드 스타일을 자동으로 맞춰줘서 개발 속도를 올릴 수 있어요.</li>\n<li><code>--quiet</code> 모드는 CI 환경에서 에러만 보고 싶을 때 매우 유용해요.</li>\n<li>여러 디렉터리나 파일을 지정해 특정 부분만 검사하는 것도 가능하니, 프로젝트 상황에 맞게 유연하게 사용해보세요.</li>\n</ul>\n<p>next lint 옵션을 잘 익히면 코드 품질 관리가 훨씬 편해진답니다! 도움이 되었길 바라요 :)</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Next.js는 완전히 익명으로 일반 사용 패턴에 관한 텔레메트리(사용 데이터)를 수집해요. 이 프로그램 참여는 선택사항이고, 원하지 않으면 언제든지 옵트아웃(참여 중지) 할 수 있답니다.</p>\n<p>텔레메트리 관련 명령어(next telemetry)에서 사용할 수 있는 옵션들은 다음과 같아요:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td><code>-h</code>, <code>--help</code></td><td>사용 가능한 모든 옵션을 보여줍니다.</td></tr><tr><td><code>--enable</code></td><td>Next.js 텔레메트리 수집을 활성화합니다.</td></tr><tr><td><code>--disable</code></td><td>Next.js 텔레메트리 수집을 비활성화합니다.</td></tr></tbody></table>\n<p>참고로, 텔레메트리를 통해 수집되는 데이터는 프로젝트가 얼마나 잘 동작하는지, 어떤 기능이 자주 사용되는지 같은 정보들이에요. 이를 통해 Next.js 팀은 더 나은 기능을 만들고 버그를 빠르게 잡을 수 있답니다.</p>\n<p>텔레메트리에 관해 더 자세히 알고 싶다면 공식 문서를 참고해보세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>예제들</h2>\n<h3>기본 포트 바꾸기</h3>\n<p>Next.js는 기본적으로 개발할 때나 <code>next start</code> 명령어를 사용할 때 <a href=\"http://localhost:3000\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000</a> 포트를 씁니다. 근데 가끔 3000번 포트가 이미 다른 프로그램에서 사용 중일 수도 있고, 다른 포트를 쓰고 싶을 때가 있죠? 그럴 땐 <code>-p</code> 옵션을 써서 쉽게 바꿀 수 있어요. 예를 들어, 4000번 포트로 바꾸려면 이렇게 하면 됩니다:</p>\n<pre><code class=\"hljs language-bash\">next dev -p 4000\n</code></pre>\n<p>위 명령어에서 <code>next dev</code>는 개발 모드로 서버를 실행하는 거고, <code>-p 4000</code>이 4000번 포트로 바꾸는 옵션이에요.</p>\n<p>참고로, 실제 운영 모드에서 사용하는 <code>next start</code> 명령에도 동일하게 <code>-p</code> 옵션을 쓸 수 있어요. 예를 들어:</p>\n<pre><code class=\"hljs language-bash\">next start -p 5000\n</code></pre>\n<p>이렇게 하면 운영 서버가 5000번 포트에서 실행되겠죠.</p>\n<p>또 한 가지 팁을 드리자면, package.json 스크립트에 이 옵션을 추가해서 명령어를 짧게 관리하는 것도 좋아요. 예를 들어:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"dev\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"next dev -p 4000\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"start\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"next start -p 4000\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>이렇게 해두면 터미널에 <code>npm run dev</code> 혹은 <code>npm run start</code>만 쳐서 원하는 포트에 서버를 띄울 수 있으니, 기억해두면 편리합니다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>PORT 환경 변수로 설정하는 방법도 있어요:</p>\n<pre><code class=\"hljs language-bash\">PORT=4000 next dev\n</code></pre>\n<blockquote>\n<p>참고할 점: <code>.env</code> 파일에서 PORT를 설정해도 효과가 없어요. HTTP 서버가 가장 먼저 실행되기 때문에, 다른 코드들이 초기화되기 전에 이미 포트가 정해져 버리거든요.</p>\n</blockquote>\n<h3>개발 환경에서 HTTPS 사용하기</h3>\n<p>개발할 때도 HTTPS를 쓰면 진짜 서비스 환경과 비슷하게 테스트할 수 있어서 좋아요. 다만, 로컬 개발 환경이라 SSL 인증서를 직접 만들어 써야 하죠. 이를 위해 <code>mkcert</code> 같은 툴을 사용하면 쉽게 로컬용 신뢰할 수 있는 인증서를 만들 수 있어요.</p>\n<p>예를 들어, <code>next.js</code> 애플리케이션에 HTTPS를 적용하려면 커스텀 서버를 한번 설정해줘야 하는데, <code>https</code> 모듈을 사용하거나 <code>next-https</code> 같은 라이브러리를 활용할 수도 있어요.</p>\n<p>직접 HTTPS 개발 환경을 구성하는 게 번거롭다면, 최근에 Next.js 관련 도구들이 HTTPS 옵션을 좀 더 쉽게 지원하는 방향으로 업데이트되고 있으니 공식 문서나 깃허브 이슈를 참고하는 것도 추천해요.</p>\n<p>혹시 HTTPS 개발 환경에서 겪는 문제나 궁금한 점 있으면 편하게 알려주세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>로컬 개발 환경에서 웹후크(webhooks)나 인증(authentication) 같은 보안이 필요한 작업을 할 때, HTTPS를 사용하는 게 좋아요. Next.js에서는 <code>--experimental-https</code> 플래그를 사용해서 간단하게 자체 서명된(self-signed) 인증서를 생성하고 HTTPS 환경을 띄울 수 있답니다.</p>\n<pre><code class=\"hljs language-bash\">next dev --experimental-https\n</code></pre>\n<p>이렇게 하면 Next.js 개발 서버가 <a href=\"https://localhost:3000\" rel=\"nofollow\" target=\"_blank\">https://localhost:3000</a> 에서 실행되는데요, 기본 포트인 3000번이 사용되고, 만약 다른 포트를 쓰고 싶다면 <code>-p</code>, <code>--port</code> 옵션이나 환경변수 <code>PORT</code>를 통해 지정할 수 있어요.</p>\n<p>더 나아가서, 자신만의 인증서나 키를 직접 넣고 싶다면 아래 옵션을 활용하면 됩니다.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td><code>--experimental-https-key</code></td><td>커스텀 HTTPS 키 파일 경로 지정</td></tr><tr><td><code>--experimental-https-cert</code></td><td>커스텀 인증서 파일 경로 지정</td></tr><tr><td><code>--experimental-https-ca</code></td><td>커스텀 CA 인증서 파일 경로 지정</td></tr></tbody></table>\n<p>예를 들어, 회사 내부에서 자체 인증서를 관리하고 있다면 이 옵션들을 사용해서 그대로 적용할 수 있겠죠.</p>\n<p><strong>참고로!</strong><br>\n로컬에서 HTTPS를 사용할 때 브라우저가 '안전하지 않다'고 경고하는 경우가 있어요. 이유는 자체 서명된 인증서이기 때문이죠. 실제 서비스용으로 사용하려면 공인된 인증서를 발급받아야 하지만, 개발할 때는 그냥 이 경고 무시하고 진행해도 크게 문제없어요. 그래도 개발 중에도 HTTPS 환경을 미리 만들어 테스트해보면 많은 문제가 사전에 걸러져서 좋아요!</p>\n<p>이렇게 Next.js가 HTTPS 환경 구축을 좀 더 쉽게 도와주니, 보안이 필요한 기능 개발 시 꼭 활용해 보세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-bash\">next dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n</code></pre>\n<p><code>next dev --experimental-https</code> 옵션은 오직 개발 환경에서만 사용하도록 설계되어 있습니다. 이 옵션을 쓰면 mkcert를 통해 로컬에서 신뢰할 수 있는 인증서를 자동으로 만들어주는데, 편리하긴 하지만 진짜 운영 환경에선 신뢰할 수 있는 인증 기관에서 발급받은 정식 인증서를 써야 합니다.</p>\n<blockquote>\n<p>참고로, Vercel에 배포할 경우에는 HTTPS 설정이 자동으로 처리되니 별도로 신경 쓰지 않아도 됩니다.</p>\n</blockquote>\n<hr>\n<h3>아래 방향 프록시(downstream proxy)에서 타임아웃 설정하기</h3>\n<p>여기서 잠깐! 개발 중에 프록시 서버를 쓰다가 요청 지연 때문에 문제가 생긴 경험 있으신가요? 프록시 설정 시 타임아웃 시간을 적절하게 조절해주면 네트워크 안정성을 높이는 데 도움이 됩니다.</p>\n<p>예를 들어, Next.js 프로젝트에서 프록시를 설정할 때 <code>http-proxy-middleware</code> 같은 라이브러리를 사용한다면, 아래처럼 타임아웃 옵션을 넣을 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { createProxyMiddleware } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http-proxy-middleware'</span>);\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">app</span>) {\n  app.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'/api'</span>, <span class=\"hljs-title function_\">createProxyMiddleware</span>({\n    <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">'http://backend.server'</span>,\n    <span class=\"hljs-attr\">changeOrigin</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">5000</span>, <span class=\"hljs-comment\">// 5초 대기 후 타임아웃 처리</span>\n    <span class=\"hljs-attr\">proxyTimeout</span>: <span class=\"hljs-number\">5000</span>,\n  }));\n};\n</code></pre>\n<p>타임아웃 설정을 해주면, 백엔드 API가 응답하지 않을 때 프론트엔드가 무한 대기 상태에 빠지지 않도록 방지할 수 있으니 꼭 활용해 보세요!</p>\n<hr>\n<p>개발할 때 HTTPS 설정, 프록시 타임아웃 등 이런 작은 디테일 하나하나가 전체 앱의 안정성과 개발 경험을 훨씬 더 좋게 만들어요. 앞으로도 이런 팁들 계속 공유할게요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Next.js를 AWS ELB나 ALB 같은 다운스트림 프록시(Load Balancer 등) 뒤에 배포할 때, Next.js가 내부적으로 사용하는 HTTP 서버의 keep-alive 타임아웃 설정을 프록시의 타임아웃보다 크게 해주는 게 정말 중요해요.<br>\n이걸 안 하게 되면, keep-alive 타임아웃이 도달한 순간 Node.js가 아무런 알림 없이 TCP 연결을 끊어버리는데, 프록시는 여전히 그 연결을 재사용하려고 시도하거든요. 그래서 결국 프록시 에러가 발생해요.</p>\n<h3>해결 방법</h3>\n<p>Next.js 프로덕션 서버를 실행할 때는 <code>--keepAliveTimeout</code> 옵션을 밀리초 단위로 넘겨주면 됩니다. 예를 들어 70초(70000ms)로 설정하려면 이렇게 해요:</p>\n<pre><code class=\"hljs language-bash\">next start --keepAliveTimeout 70000\n</code></pre>\n<hr>\n<h3>Node.js 인자 추가 전달하기</h3>\n<p>만약 직접 Node.js 인자를 주고 싶다면 <code>NODE_OPTIONS</code> 환경변수를 활용할 수도 있는데요, 예를 들어 메모리 제한을 늘리거나 디버깅 옵션을 넣고 싶을 때 유용해요.</p>\n<pre><code class=\"hljs language-bash\">NODE_OPTIONS=<span class=\"hljs-string\">\"--max-old-space-size=4096\"</span> next start --keepAliveTimeout 70000\n</code></pre>\n<hr>\n<h3>추가 팁</h3>\n<ul>\n<li>ALB, ELB 같은 프록시는 기본적으로 60초 전후로 타임아웃이 설정되어 있어요. 그래서 Node.js 서버의 keepAliveTimeout은 그보다 약간 더 길게 세팅하는 게 좋습니다.</li>\n<li>만약 타임아웃이 너무 짧게 설정되어 있으면 “502 Bad Gateway” 같은 프록시 에러가 발생하는 걸 보실 수 있어요.</li>\n<li>이 외에도, 내부 네트워크 상태나 트래픽 특성에 맞춰서 적절히 값을 튜닝해주는 걸 추천합니다.</li>\n</ul>\n<p>이렇게만 설정해줘도 Next.js 앱 안정성이 한층 높아지니 꼭 기억해두세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Node.js에서 <code>NODE_OPTIONS</code> 환경변수를 활용하면, 다음에 실행할 명령어에 다양한 옵션들을 간편하게 넘길 수 있어요. 특히 Next.js 같은 프레임워크를 실행할 때 유용하죠.</p>\n<p>예를 들어 이렇게 쓸 수 있어요:</p>\n<pre><code class=\"hljs language-bash\">NODE_OPTIONS=<span class=\"hljs-string\">'--throw-deprecation'</span> next\n</code></pre>\n<ul>\n<li>이 옵션은 deprecated(사용 중단 예정)된 기능을 사용할 때 경고 대신 에러를 던져서 문제를 더 빨리 발견하게 도와줘요.</li>\n</ul>\n<pre><code class=\"hljs language-bash\">NODE_OPTIONS=<span class=\"hljs-string\">'-r esm'</span> next\n</code></pre>\n<ul>\n<li><code>-r esm</code> 옵션은 실행 전에 esm 모듈을 리퀴어해서 ES 모듈을 사용할 수 있도록 환경을 세팅해줘요. 물론 Node.js 최신 버전은 기본 지원하지만, 호환성 이슈가 있을 때 유용하답니다.</li>\n</ul>\n<pre><code class=\"hljs language-bash\">NODE_OPTIONS=<span class=\"hljs-string\">'--inspect'</span> next\n</code></pre>\n<ul>\n<li>이 옵션은 디버깅 모드를 켜서 크롬 개발자도구나 VSCode 같은 툴로 디버깅할 수 있게 해줘요.</li>\n</ul>\n<p>실제로 <code>NODE_OPTIONS</code>는 Node.js가 실행될 때 항상 참조하기 때문에, 여러 설정을 한 번에 전달 가능해 작업 효율을 올려주죠. 단, 옵션이 복잡해지면 환경변수 길이가 길어질 수 있으니 주의하세요!</p>\n<p>필요한 옵션을 적절히 활용해서 Next.js 개발환경을 좀 더 편리하게 만들어보세요~</p>\n</body>\n</html>\n"},"__N_SSG":true}