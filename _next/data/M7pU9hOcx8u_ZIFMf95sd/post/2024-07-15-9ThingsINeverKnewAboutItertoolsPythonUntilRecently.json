{"pageProps":{"post":{"title":"알고 나서 놀란 Itertools Python의 9가지 비밀","description":"","date":"2024-07-15 00:04","slug":"2024-07-15-9ThingsINeverKnewAboutItertoolsPythonUntilRecently","content":"\n\n이미지 태그를 아래와 같이 수정해주세요.\n\n\n![image](/TIL/assets/img/2024-07-15-9ThingsINeverKnewAboutItertoolsPythonUntilRecently_0.png)\n\n\n비디오 콘텐츠 실험 64일차\n\n## 1) Batched\n\nitertools.batched 함수(파이썬 3.12 이상에서만 사용 가능)를 사용하면 이터러블을 일괄 처리하는 것이 쉬워집니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport itertools\n\nfor i in itertools.batched('abcdefg', 3):\n    print(i)\n\n# ('a', 'b', 'c')\n# ('d', 'e', 'f')\n# ('g',)\n```\n\n^ 문자열을 3개씩 묶어 반복하는 코드입니다. (마지막 묶음은 원소가 부족하므로 1개의 원소만 포함됩니다)\n\n## 2) Pairwise\n\nitertools.pairwise 함수를 사용하면 iterable의 각 이웃하는 두 원소를 비교할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport itertools\n\nfor i in itertools.pairwise('abcdefg'):\n    print(i)\n\n'''\n('a', 'b')\n('b', 'c')\n('c', 'd')\n('d', 'e')\n('e', 'f')\n('f', 'g')\n'''\n```\n\n^우리가 iterable에 있는 각 쌍 (bigram)의 요소를 순회하는 것입니다. 각 요소를 그 다음 요소와 비교해야 할 때 유용합니다.\n\n만약 필요하다면 이 함수를 구현하는 번거로움을 피할 수 있습니다.\n\n# 3) Accumulate\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nitertools.accumulate 함수를 사용하면 다음을 수행할 수 있습니다:\n\n```js\nimport itertools\n\nfor i in itertools.accumulate('abcdefg'):\n    print(i)\n\n'''\na\nab\nabc\nabcd\nabcde\nabcdef\nabcdefg\n'''\n```\n\n# 4) 조합 및 순열\n\nitertools.combinations(iterable, n) 함수를 사용하면 iterable의 요소들 중 길이 n인 모든 조합을 생성할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`itertools.permutations(iterable, n)` 함수를 사용하면 길이 n의 iterable 요소들의 모든 순열을 생성할 수 있어요.\n\n참고 - 순열에서는 요소의 순서가 중요합니다. 조합에서는 요소의 순서가 중요하지 않아요.\n\n```js\nimport itertools\n\nfor i in itertools.permutations([1, 2, 3, 4], 2):\n    print(i, end=' ')\n\n# (1, 2) (1, 3) (1, 4) (2, 1) (2, 3) (2, 4) (3, 1) (3, 2) (3, 4) (4, 1) (4, 2) (4, 3)\n```\n\n^ [1, 2, 3, 4]의 요소 중에서 길이가 2인 모든 순열을 찾으려면 — 여기에서 [1, 4]와 [4, 1]은 서로 다르게 간주되는 것을 주목해주세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport itertools\n\nfor i in itertools.combinations([1, 2, 3, 4], 2):\n    print(i, end=' ')\n\n# (1, 2) (1, 3) (1, 4) (2, 3) (2, 4) (3, 4)                                                     \n```\n\n^ [1, 2, 3, 4] 요소의 길이가 2인 모든 조합을 찾습니다. [4, 1]은 [1, 4]와 동일하게 간주되어 존재하지 않음을 주목해 주세요.\n\n## 5) 곱셈\n\n```js\nfor i in [1, 2]:\n    for j in [3, 4]:\n        for k in [5, 6]:\n            print(i, j, k)\n\n'''\n1 3 5\n1 3 6\n1 4 5\n1 4 6\n2 3 5\n2 3 6\n2 4 5\n2 4 6\n'''\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nMarkdown 형식으로 표 태그를 변경하려면 다음과 같이 하면 됩니다.\n\n\n^ a triple nested for loop.\n\n```js\nfrom itertools import product\n\nfor i, j, k in product([1, 2], [3, 4], [5, 6]):\n  print(i, j, k)\n\n'''\n1 3 5\n1 3 6\n1 4 5\n1 4 6\n2 3 5\n2 3 6\n2 4 5\n2 4 6\n'''\n```\n\n^ itertools.product를 사용한 위의 삼중 중첩 for 루프와 똑같이 작업을 수행하여 우리는 여러 중첩된 for 루프를 간단하고 우아한 한 줄의 코드로 단축할 수 있습니다.\n\n# 6) Groupby\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nitertools.groupby 함수를 사용하면 함수를 통해 동시에 요소를 반복하고 그룹화할 수 있습니다.\n\n```python\nimport itertools \n\nwords = ['apple', 'ant', 'arm', 'boy', 'bee', 'cat', 'donkey']\n\ndef condition(x):\n  return x[0]  # 요소의 첫 글자를 반환\n\nfor key, group in itertools.groupby(words, condition):\n    print(key, list(group))\n\n'''\na ['apple', 'ant', 'arm']\nb ['boy', 'bee']\nc ['cat']\nd ['donkey']\n'''\n```\n\n^ 첫 글자를 기준으로 요소를 그룹화합니다 — 이를 수행하기 위해 사용자 정의 함수 condition을 전달합니다.\n\n```python\nimport itertools \n\nwords = ['apple', 'ant', 'arm', 'boy', 'bee', 'cat', 'donkey']\nfor key, group in itertools.groupby(words, lambda x:x[0]):\n    print(key, list(group))\n\n'''\na ['apple', 'ant', 'arm']\nb ['boy', 'bee']\nc ['cat']\nd ['donkey']\n'''\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n^ 첫 글자를 기준으로 요소를 그룹화하는 것 (람다 x : x[0]) — 우리는 함수를 정의하기 위해 def 키워드를 사용할 필요가 없도록 작은 익명 함수인 람다 함수를 작성할 수 있습니다.\n\n```js\nimport itertools\n\nwords = ['apple', 'ant', 'arm', 'boy', 'bee', 'cat', 'donkey', 'aa', 'ab']\nfor key, group in itertools.groupby(words, lambda x: x[0]):\n    print(key, list(group))\n\n'''\na ['apple', 'ant', 'arm']\nb ['boy', 'bee']\nc ['cat']\nd ['donkey']\na ['aa', 'ab']\n'''\n```\n\n^ 그룹은 서로 옆에 있어야 합니다 — 여기서 [`aa`, `ab`]는 앞에서 a로 시작하는 그룹에 합류하지 않습니다.\n\n# 7) 압축\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nitertools.compress 함수는 2개의 이터러블을 사용합니다 — 주 이터러블과 True/False 또는 1/0 값을 포함하는 다른 이터러블인데 이 값들은 주 이터러블에서 생성할 요소를 결정합니다.\n\n```js\nimport itertools\n\nfor i in itertools.compress('ABCD', [1,0,0,0]):\n    print(i, end=' ')\n\n# A\n```\n\n```js\nimport itertools\n\nfor i in itertools.compress('ABCD', [1,1,0,0]):\n    print(i, end=' ')\n\n# A B\n```\n\n```js\nimport itertools\n\nfor i in itertools.compress('ABCD', [1,1,1,0]):\n    print(i, end=' ')\n\n# A B C\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n```js\nimport itertools\n\nfor i in itertools.compress('ABCD', [1,1,1,1]):\n    print(i, end=' ')\n\n# A B C D\n```\n\n```js\nimport itertools\n\nfor i in itertools.compress('ABCD', [1,0,1,0]):\n    print(i, end=' ')\n\n# A C \n```\n\n# 8) Zip_longest\n\n```js\nfor i,j,k in zip([1,2,3,4], [5,6,7,8], [9,10]):\n  print(i, j, k)\n\n# 1 5 9\n# 2 6 10\n```\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n^ 일반적인 zip() 함수를 사용할 때, 한 번에 여러 이터러블을 반복할 수 있지만, 가장 짧은 이터러블에 제한을 받습니다. 예를 들어, [9, 10]가 가장 짧은 이터러블이기 때문에 zip()은 2개의 행만 생성합니다.\n\n```js\nfrom itertools import zip_longest\n\nfor i, j, k in zip_longest([1, 2, 3, 4], [5, 6, 7, 8], [9, 10]):\n  print(i, j, k)\n\n# 1 5 9\n# 2 6 10\n# 3 7 None\n# 4 8 None\n```\n\n^ 이 한계를 우회하기 위해 zip_longest로 이를 대체할 수 있으며, 이 경우 가장 긴 이터러블을 통해 zip할 수 있습니다. 그러나 특정한 이터러블에서 값이 부족해지면 None이 사용됩니다.\n\n# 9) 반복 & 사이클\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport itertools\n\nfor i in itertools.repeat('ABC'):\n  print(i)\n\n# ABC\n# ABC\n# ABC\n# ABC\n\n# 무한한 수의 ABC\n\n```\n\n^ itertools.repeat()을 사용하면 무한히 반복할 수 있습니다.\n\n```js\nimport itertools\n\nfor i in itertools.cycle('ABC'):\n  print(i)\n\n# A\n# B\n# C\n# A\n# B\n# C\n# A\n# B\n# C\n\n# 무한한 A, B, C의 순환, 그리고 다시 A로, B로, C로...\n\n```\n\n# 결론\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이해하기 쉽고 명확했길 바랍니다.\n\n# 마무리의 한 마디\n\n만약 이 이야기가 도움이 되었고 조금이라도 지지를 표현하고 싶다면:\n\n- 이 이야기에 대해 50번 박수를 칩니다\n- 어떻게 생각하는지 댓글을 남깁니다\n- 당신에게 공감되는 부분을 강조합니다\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이러한 조치들은 정말로 저를 도와주고, 정말 감사합니다!\n\n제가 쓴 Ebooks: [여기를 클릭하세요!](https://zlliu.co/ebooks)\n\nLinkedIn: [프로필 링크](https://www.linkedin.com/in/zlliu/)","ogImage":{"url":"/TIL/assets/img/2024-07-15-9ThingsINeverKnewAboutItertoolsPythonUntilRecently_0.png"},"coverImage":"/TIL/assets/img/2024-07-15-9ThingsINeverKnewAboutItertoolsPythonUntilRecently_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이미지 태그를 아래와 같이 수정해주세요.</p>\n<p><img src=\"/TIL/assets/img/2024-07-15-9ThingsINeverKnewAboutItertoolsPythonUntilRecently_0.png\" alt=\"image\"></p>\n<p>비디오 콘텐츠 실험 64일차</p>\n<h2>1) Batched</h2>\n<p>itertools.batched 함수(파이썬 3.12 이상에서만 사용 가능)를 사용하면 이터러블을 일괄 처리하는 것이 쉬워집니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">batched</span>(<span class=\"hljs-string\">'abcdefg'</span>, <span class=\"hljs-number\">3</span>):\n    <span class=\"hljs-title function_\">print</span>(i)\n\n# (<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>)\n# (<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>)\n# (<span class=\"hljs-string\">'g'</span>,)\n</code></pre>\n<p>^ 문자열을 3개씩 묶어 반복하는 코드입니다. (마지막 묶음은 원소가 부족하므로 1개의 원소만 포함됩니다)</p>\n<h2>2) Pairwise</h2>\n<p>itertools.pairwise 함수를 사용하면 iterable의 각 이웃하는 두 원소를 비교할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">pairwise</span>(<span class=\"hljs-string\">'abcdefg'</span>):\n    <span class=\"hljs-title function_\">print</span>(i)\n\n<span class=\"hljs-string\">''</span><span class=\"hljs-string\">'\n('</span>a<span class=\"hljs-string\">', '</span>b<span class=\"hljs-string\">')\n('</span>b<span class=\"hljs-string\">', '</span>c<span class=\"hljs-string\">')\n('</span>c<span class=\"hljs-string\">', '</span>d<span class=\"hljs-string\">')\n('</span>d<span class=\"hljs-string\">', '</span>e<span class=\"hljs-string\">')\n('</span>e<span class=\"hljs-string\">', '</span>f<span class=\"hljs-string\">')\n('</span>f<span class=\"hljs-string\">', '</span>g<span class=\"hljs-string\">')\n'</span><span class=\"hljs-string\">''</span>\n</code></pre>\n<p>^우리가 iterable에 있는 각 쌍 (bigram)의 요소를 순회하는 것입니다. 각 요소를 그 다음 요소와 비교해야 할 때 유용합니다.</p>\n<p>만약 필요하다면 이 함수를 구현하는 번거로움을 피할 수 있습니다.</p>\n<h1>3) Accumulate</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>itertools.accumulate 함수를 사용하면 다음을 수행할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">accumulate</span>(<span class=\"hljs-string\">'abcdefg'</span>):\n    <span class=\"hljs-title function_\">print</span>(i)\n\n<span class=\"hljs-string\">''</span><span class=\"hljs-string\">'\na\nab\nabc\nabcd\nabcde\nabcdef\nabcdefg\n'</span><span class=\"hljs-string\">''</span>\n</code></pre>\n<h1>4) 조합 및 순열</h1>\n<p>itertools.combinations(iterable, n) 함수를 사용하면 iterable의 요소들 중 길이 n인 모든 조합을 생성할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><code>itertools.permutations(iterable, n)</code> 함수를 사용하면 길이 n의 iterable 요소들의 모든 순열을 생성할 수 있어요.</p>\n<p>참고 - 순열에서는 요소의 순서가 중요합니다. 조합에서는 요소의 순서가 중요하지 않아요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">permutations</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">2</span>):\n    <span class=\"hljs-title function_\">print</span>(i, end=<span class=\"hljs-string\">' '</span>)\n\n# (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>) (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>) (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>) (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>) (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>) (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>) (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>) (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>) (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>) (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>)\n</code></pre>\n<p>^ [1, 2, 3, 4]의 요소 중에서 길이가 2인 모든 순열을 찾으려면 — 여기에서 [1, 4]와 [4, 1]은 서로 다르게 간주되는 것을 주목해주세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">combinations</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">2</span>):\n    <span class=\"hljs-title function_\">print</span>(i, end=<span class=\"hljs-string\">' '</span>)\n\n# (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>) (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>) (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>) (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)                                                     \n</code></pre>\n<p>^ [1, 2, 3, 4] 요소의 길이가 2인 모든 조합을 찾습니다. [4, 1]은 [1, 4]와 동일하게 간주되어 존재하지 않음을 주목해 주세요.</p>\n<h2>5) 곱셈</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]:\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]:\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]:\n            <span class=\"hljs-title function_\">print</span>(i, j, k)\n\n<span class=\"hljs-string\">''</span><span class=\"hljs-string\">'\n1 3 5\n1 3 6\n1 4 5\n1 4 6\n2 3 5\n2 3 6\n2 4 5\n2 4 6\n'</span><span class=\"hljs-string\">''</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Markdown 형식으로 표 태그를 변경하려면 다음과 같이 하면 됩니다.</p>\n<p>^ a triple nested for loop.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> itertools <span class=\"hljs-keyword\">import</span> product\n\n<span class=\"hljs-keyword\">for</span> i, j, k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">product</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]):\n  <span class=\"hljs-title function_\">print</span>(i, j, k)\n\n<span class=\"hljs-string\">''</span><span class=\"hljs-string\">'\n1 3 5\n1 3 6\n1 4 5\n1 4 6\n2 3 5\n2 3 6\n2 4 5\n2 4 6\n'</span><span class=\"hljs-string\">''</span>\n</code></pre>\n<p>^ itertools.product를 사용한 위의 삼중 중첩 for 루프와 똑같이 작업을 수행하여 우리는 여러 중첩된 for 루프를 간단하고 우아한 한 줄의 코드로 단축할 수 있습니다.</p>\n<h1>6) Groupby</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>itertools.groupby 함수를 사용하면 함수를 통해 동시에 요소를 반복하고 그룹화할 수 있습니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> itertools \n\nwords = [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'ant'</span>, <span class=\"hljs-string\">'arm'</span>, <span class=\"hljs-string\">'boy'</span>, <span class=\"hljs-string\">'bee'</span>, <span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-string\">'donkey'</span>]\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">condition</span>(<span class=\"hljs-params\">x</span>):\n  <span class=\"hljs-keyword\">return</span> x[<span class=\"hljs-number\">0</span>]  <span class=\"hljs-comment\"># 요소의 첫 글자를 반환</span>\n\n<span class=\"hljs-keyword\">for</span> key, group <span class=\"hljs-keyword\">in</span> itertools.groupby(words, condition):\n    <span class=\"hljs-built_in\">print</span>(key, <span class=\"hljs-built_in\">list</span>(group))\n\n<span class=\"hljs-string\">'''\na ['apple', 'ant', 'arm']\nb ['boy', 'bee']\nc ['cat']\nd ['donkey']\n'''</span>\n</code></pre>\n<p>^ 첫 글자를 기준으로 요소를 그룹화합니다 — 이를 수행하기 위해 사용자 정의 함수 condition을 전달합니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> itertools \n\nwords = [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'ant'</span>, <span class=\"hljs-string\">'arm'</span>, <span class=\"hljs-string\">'boy'</span>, <span class=\"hljs-string\">'bee'</span>, <span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-string\">'donkey'</span>]\n<span class=\"hljs-keyword\">for</span> key, group <span class=\"hljs-keyword\">in</span> itertools.groupby(words, <span class=\"hljs-keyword\">lambda</span> x:x[<span class=\"hljs-number\">0</span>]):\n    <span class=\"hljs-built_in\">print</span>(key, <span class=\"hljs-built_in\">list</span>(group))\n\n<span class=\"hljs-string\">'''\na ['apple', 'ant', 'arm']\nb ['boy', 'bee']\nc ['cat']\nd ['donkey']\n'''</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>^ 첫 글자를 기준으로 요소를 그룹화하는 것 (람다 x : x[0]) — 우리는 함수를 정의하기 위해 def 키워드를 사용할 필요가 없도록 작은 익명 함수인 람다 함수를 작성할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\nwords = [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'ant'</span>, <span class=\"hljs-string\">'arm'</span>, <span class=\"hljs-string\">'boy'</span>, <span class=\"hljs-string\">'bee'</span>, <span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-string\">'donkey'</span>, <span class=\"hljs-string\">'aa'</span>, <span class=\"hljs-string\">'ab'</span>]\n<span class=\"hljs-keyword\">for</span> key, group <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">groupby</span>(words, lambda <span class=\"hljs-attr\">x</span>: x[<span class=\"hljs-number\">0</span>]):\n    <span class=\"hljs-title function_\">print</span>(key, <span class=\"hljs-title function_\">list</span>(group))\n\n<span class=\"hljs-string\">''</span><span class=\"hljs-string\">'\na ['</span>apple<span class=\"hljs-string\">', '</span>ant<span class=\"hljs-string\">', '</span>arm<span class=\"hljs-string\">']\nb ['</span>boy<span class=\"hljs-string\">', '</span>bee<span class=\"hljs-string\">']\nc ['</span>cat<span class=\"hljs-string\">']\nd ['</span>donkey<span class=\"hljs-string\">']\na ['</span>aa<span class=\"hljs-string\">', '</span>ab<span class=\"hljs-string\">']\n'</span><span class=\"hljs-string\">''</span>\n</code></pre>\n<p>^ 그룹은 서로 옆에 있어야 합니다 — 여기서 [<code>aa</code>, <code>ab</code>]는 앞에서 a로 시작하는 그룹에 합류하지 않습니다.</p>\n<h1>7) 압축</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>itertools.compress 함수는 2개의 이터러블을 사용합니다 — 주 이터러블과 True/False 또는 1/0 값을 포함하는 다른 이터러블인데 이 값들은 주 이터러블에서 생성할 요소를 결정합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">compress</span>(<span class=\"hljs-string\">'ABCD'</span>, [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]):\n    <span class=\"hljs-title function_\">print</span>(i, end=<span class=\"hljs-string\">' '</span>)\n\n# A\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">compress</span>(<span class=\"hljs-string\">'ABCD'</span>, [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]):\n    <span class=\"hljs-title function_\">print</span>(i, end=<span class=\"hljs-string\">' '</span>)\n\n# A B\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">compress</span>(<span class=\"hljs-string\">'ABCD'</span>, [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>]):\n    <span class=\"hljs-title function_\">print</span>(i, end=<span class=\"hljs-string\">' '</span>)\n\n# A B C\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">compress</span>(<span class=\"hljs-string\">'ABCD'</span>, [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>]):\n    <span class=\"hljs-title function_\">print</span>(i, end=<span class=\"hljs-string\">' '</span>)\n\n# A B C D\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">compress</span>(<span class=\"hljs-string\">'ABCD'</span>, [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>]):\n    <span class=\"hljs-title function_\">print</span>(i, end=<span class=\"hljs-string\">' '</span>)\n\n# A C \n</code></pre>\n<h1>8) Zip_longest</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> i,j,k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">zip</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>]):\n  <span class=\"hljs-title function_\">print</span>(i, j, k)\n\n# <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">9</span>\n# <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">10</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>^ 일반적인 zip() 함수를 사용할 때, 한 번에 여러 이터러블을 반복할 수 있지만, 가장 짧은 이터러블에 제한을 받습니다. 예를 들어, [9, 10]가 가장 짧은 이터러블이기 때문에 zip()은 2개의 행만 생성합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> itertools <span class=\"hljs-keyword\">import</span> zip_longest\n\n<span class=\"hljs-keyword\">for</span> i, j, k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">zip_longest</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]):\n  <span class=\"hljs-title function_\">print</span>(i, j, k)\n\n# <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">9</span>\n# <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">10</span>\n# <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-title class_\">None</span>\n# <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-title class_\">None</span>\n</code></pre>\n<p>^ 이 한계를 우회하기 위해 zip_longest로 이를 대체할 수 있으며, 이 경우 가장 긴 이터러블을 통해 zip할 수 있습니다. 그러나 특정한 이터러블에서 값이 부족해지면 None이 사용됩니다.</p>\n<h1>9) 반복 &#x26; 사이클</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">repeat</span>(<span class=\"hljs-string\">'ABC'</span>):\n  <span class=\"hljs-title function_\">print</span>(i)\n\n# <span class=\"hljs-variable constant_\">ABC</span>\n# <span class=\"hljs-variable constant_\">ABC</span>\n# <span class=\"hljs-variable constant_\">ABC</span>\n# <span class=\"hljs-variable constant_\">ABC</span>\n\n# 무한한 수의 <span class=\"hljs-variable constant_\">ABC</span>\n\n</code></pre>\n<p>^ itertools.repeat()을 사용하면 무한히 반복할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> itertools\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> itertools.<span class=\"hljs-title function_\">cycle</span>(<span class=\"hljs-string\">'ABC'</span>):\n  <span class=\"hljs-title function_\">print</span>(i)\n\n# A\n# B\n# C\n# A\n# B\n# C\n# A\n# B\n# C\n\n# 무한한 A, B, C의 순환, 그리고 다시 A로, B로, C로...\n\n</code></pre>\n<h1>결론</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이해하기 쉽고 명확했길 바랍니다.</p>\n<h1>마무리의 한 마디</h1>\n<p>만약 이 이야기가 도움이 되었고 조금이라도 지지를 표현하고 싶다면:</p>\n<ul>\n<li>이 이야기에 대해 50번 박수를 칩니다</li>\n<li>어떻게 생각하는지 댓글을 남깁니다</li>\n<li>당신에게 공감되는 부분을 강조합니다</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이러한 조치들은 정말로 저를 도와주고, 정말 감사합니다!</p>\n<p>제가 쓴 Ebooks: <a href=\"https://zlliu.co/ebooks\" rel=\"nofollow\" target=\"_blank\">여기를 클릭하세요!</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/zlliu/\" rel=\"nofollow\" target=\"_blank\">프로필 링크</a></p>\n</body>\n</html>\n"},"__N_SSG":true}