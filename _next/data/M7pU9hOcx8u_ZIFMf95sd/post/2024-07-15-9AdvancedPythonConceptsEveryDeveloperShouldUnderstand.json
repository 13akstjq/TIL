{"pageProps":{"post":{"title":"모든 개발자가 알아야 할 고급 파이썬 개념 9가지","description":"","date":"2024-07-15 00:03","slug":"2024-07-15-9AdvancedPythonConceptsEveryDeveloperShouldUnderstand","content":"\n\n\n![이미지](/TIL/assets/img/2024-07-15-9AdvancedPythonConceptsEveryDeveloperShouldUnderstand_0.png)\n\nPython은 간단하고 가독성이 좋아 초보자들 사이에서 인기가 높습니다. 그러나 Python의 전체 잠재력을 활용하기 위해 개발자들은 일부 고급 개념을 숙달해야 합니다. 여기 개발자들이 더 효율적이고 유지보수 가능하며 확장 가능한 코드를 작성하기 위해 이해해야 하는 9가지 고급 Python 개념이 소개됩니다.\n\n# 1. 제너레이터와 이터레이터\n\n제너레이터와 이터레이터를 사용하면 게으른(lazy) 평가가 가능하며, 이는 메모리를 절약하고 성능을 향상시킬 수 있습니다. 제너레이터는 함수와 yield 문을 사용하여 이터레이터를 만드는 간단한 방법입니다.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 이터레이터\n\n이터레이터는 이터레이터 프로토콜을 구현한 객체로, __iter__()와 __next__() 메서드로 구성됩니다.\n\n```js\nclass MyIterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        value = self.data[self.index]\n        self.index += 1\n        return value\n\nmy_iter = MyIterator([1, 2, 3])\nfor item in my_iter:\n    print(item)\n```\n\n# 제너레이터\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n생성기는 반복자를 쉽게 만드는 방법을 제공합니다.\n\n```js\ndef my_generator():\n    yield 1\n    yield 2\n    yield 3\n\ngen = my_generator()\nfor item in gen:\n    print(item)\n```\n\n# 2. 데코레이터\n\n데코레이터는 함수 또는 클래스의 동작을 수정하는 강력한 기능입니다. 주로 로깅, 접근 제어, 측정 및 캐싱에 사용됩니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\ndef my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"함수 호출 전\")\n        result = func(*args, **kwargs)\n        print(\"함수 호출 후\")\n        return result\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"안녕!\")\n\nsay_hello()\r\n```\n\n# 3. 컨텍스트 매니저\n\n컨텍스트 매니저는 원하는 시점에 정확히 리소스를 할당하고 해제할 수 있도록 해줍니다. 가장 흔한 컨텍스트 매니저의 사용 방법은 `with` 문과 함께 사용하는 것입니다.\n\n```python\nclass MyContextManager:\n    def __enter__(self):\n        print(\"컨텍스트 진입\")\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print(\"컨텍스트 종료\")\n\nwith MyContextManager():\n    print(\"컨텍스트 내부\")\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파일 처리는 일반적인 사용 사례입니다.\n\n```python\nwith open('file.txt', 'w') as file:\n    file.write('Hello, World!')\n```\n\n## 4. 메타클래스\n\n메타클래스는 클래스의 동작을 정의하는 방법입니다. 클래스 속성이나 메서드를 정의할 때 클래스를 수정하여 클래스 생성을 사용자 정의할 수 있게 합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\r\nclass Meta(type):\n    def __new__(cls, name, bases, attrs):\n        attrs['greet'] = lambda self: f\"Hello from {self.__class__.__name__}\"\n        return super().__new__(cls, name, bases, attrs)\n\nclass MyClass(metaclass=Meta):\n    pass\n\nobj = MyClass()\nprint(obj.greet())\r\n```\n\n# 5.  디스크립터\n\n디스크립터는 클래스 내에서 관리 속성을 만드는 방법입니다. 속성에 대한 액세스, 설정 및 삭제 동작을 정의할 수 있도록 합니다.\n\n```js\r\nclass MyDescriptor:\n    def __init__(self, name=None):\n        self.name = name\n\n    def __get__(self, instance, owner):\n        return instance.__dict__.get(self.name)\n\n    def __set__(self, instance, value):\n        instance.__dict__[self.name] = value\n\n    def __delete__(self, instance):\n        del instance.__dict__[self.name]\n\nclass MyClass:\n    attr = MyDescriptor('attr')\n\nobj = MyClass()\nobj.attr = 42\nprint(obj.attr)\ndel obj.attr\r\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 코루틴과 Asyncio\n\n코루틴과 asyncio 모듈을 사용하면 Python에서 비동기 프로그래밍을 할 수 있어요. 이를 통해 블로킹 되지 않는 I/O 작업을 수행할 수 있는 코드를 작성할 수 있어요.\n\n## 코루틴\n\n코루틴은 실행을 일시 중지하고 다시 시작할 수 있는 함수들이에요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\r\nimport asyncio\n\nasync def my_coroutine():\n    print(\"Start coroutine\")\n    await asyncio.sleep(1)\n    print(\"End coroutine\")\n\nasyncio.run(my_coroutine())\r\n```\n\n# Asyncio\n\nAsyncio는 async/await 구문을 사용하여 동시성 코드를 작성하기 위한 라이브러리입니다.\n\n```js\r\nasync def main():\n    await asyncio.gather(my_coroutine(), my_coroutine())\n\nasyncio.run(main())\r\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 타입 주석\n\n타입 주석은 변수, 함수 매개변수 및 반환 값을 정의하여 코드 가독성을 향상시키고 오류를 초기에 잡아낼 수 있습니다.\n\n```python\ndef greet(name: str) -> str:\n    return f\"Hello, {name}\"\n\ndef add(a: int, b: int) -> int:\n    return a + b\n\nname: str = \"Alice\"\nage: int = 30\n```\n\n# 8. 슬롯\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n인스턴스 속성을 미리 정의된 목록으로 제한하여 메모리를 절약하고 속성 액세스 속도를 높일 수 있는 슬롯은 유용합니다.\n\n```python\nclass MyClass:\n    __slots__ = ['name', 'age']\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nobj = MyClass('Alice', 30)\nprint(obj.name, obj.age)\n```\n\n# 9. Multiprocessing\n\nmultiprocessing 모듈을 사용하면 별도의 프로세스를 생성하고 관리할 수 있어 Python 애플리케이션에서 진정한 병렬 처리를 수행할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom multiprocessing import Process\n\ndef worker(num):\n    print(f'Worker: {num}')\n\nif __name__ == '__main__':\n    processes = []\n    for i in range(5):\n        p = Process(target=worker, args=(i,))\n        processes.append(p)\n        p.start()\n\n    for p in processes:\n        p.join()\n```\n\n이러한 고급 Python 개념을 습득함으로써 더 효율적이고 유지보수가 쉬운 확장 가능한 코드를 작성할 수 있습니다. 이러한 개념은 코딩 기술뿐만 아니라 더 복잡한 문제와 프로젝트에 자신감을 갖고 접근할 수 있도록 도와줍니다. 즐거운 코딩하세요!","ogImage":{"url":"/TIL/assets/img/2024-07-15-9AdvancedPythonConceptsEveryDeveloperShouldUnderstand_0.png"},"coverImage":"/TIL/assets/img/2024-07-15-9AdvancedPythonConceptsEveryDeveloperShouldUnderstand_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/TIL/assets/img/2024-07-15-9AdvancedPythonConceptsEveryDeveloperShouldUnderstand_0.png\" alt=\"이미지\"></p>\n<p>Python은 간단하고 가독성이 좋아 초보자들 사이에서 인기가 높습니다. 그러나 Python의 전체 잠재력을 활용하기 위해 개발자들은 일부 고급 개념을 숙달해야 합니다. 여기 개발자들이 더 효율적이고 유지보수 가능하며 확장 가능한 코드를 작성하기 위해 이해해야 하는 9가지 고급 Python 개념이 소개됩니다.</p>\n<h1>1. 제너레이터와 이터레이터</h1>\n<p>제너레이터와 이터레이터를 사용하면 게으른(lazy) 평가가 가능하며, 이는 메모리를 절약하고 성능을 향상시킬 수 있습니다. 제너레이터는 함수와 yield 문을 사용하여 이터레이터를 만드는 간단한 방법입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>이터레이터</h1>\n<p>이터레이터는 이터레이터 프로토콜을 구현한 객체로, <strong>iter</strong>()와 <strong>next</strong>() 메서드로 구성됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyIterator</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self, data):\n        self.<span class=\"hljs-property\">data</span> = data\n        self.<span class=\"hljs-property\">index</span> = <span class=\"hljs-number\">0</span>\n\n    def <span class=\"hljs-title function_\">__iter__</span>(self):\n        <span class=\"hljs-keyword\">return</span> self\n\n    def <span class=\"hljs-title function_\">__next__</span>(self):\n        <span class=\"hljs-keyword\">if</span> self.<span class=\"hljs-property\">index</span> >= <span class=\"hljs-title function_\">len</span>(self.<span class=\"hljs-property\">data</span>):\n            raise <span class=\"hljs-title class_\">StopIteration</span>\n        value = self.<span class=\"hljs-property\">data</span>[self.<span class=\"hljs-property\">index</span>]\n        self.<span class=\"hljs-property\">index</span> += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> value\n\nmy_iter = <span class=\"hljs-title class_\">MyIterator</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\n<span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">my_iter</span>:\n    <span class=\"hljs-title function_\">print</span>(item)\n</code></pre>\n<h1>제너레이터</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>생성기는 반복자를 쉽게 만드는 방법을 제공합니다.</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">my_generator</span>():\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">3</span>\n\ngen = <span class=\"hljs-title function_\">my_generator</span>()\n<span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">gen</span>:\n    <span class=\"hljs-title function_\">print</span>(item)\n</code></pre>\n<h1>2. 데코레이터</h1>\n<p>데코레이터는 함수 또는 클래스의 동작을 수정하는 강력한 기능입니다. 주로 로깅, 접근 제어, 측정 및 캐싱에 사용됩니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_decorator</span>(<span class=\"hljs-params\">func</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">wrapper</span>(<span class=\"hljs-params\">*args, **kwargs</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"함수 호출 전\"</span>)\n        result = func(*args, **kwargs)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"함수 호출 후\"</span>)\n        <span class=\"hljs-keyword\">return</span> result\n    <span class=\"hljs-keyword\">return</span> wrapper\n\n<span class=\"hljs-meta\">@my_decorator</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">say_hello</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"안녕!\"</span>)\n\nsay_hello()\n</code></pre>\n<h1>3. 컨텍스트 매니저</h1>\n<p>컨텍스트 매니저는 원하는 시점에 정확히 리소스를 할당하고 해제할 수 있도록 해줍니다. 가장 흔한 컨텍스트 매니저의 사용 방법은 <code>with</code> 문과 함께 사용하는 것입니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyContextManager</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__enter__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"컨텍스트 진입\"</span>)\n        <span class=\"hljs-keyword\">return</span> self\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__exit__</span>(<span class=\"hljs-params\">self, exc_type, exc_value, traceback</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"컨텍스트 종료\"</span>)\n\n<span class=\"hljs-keyword\">with</span> MyContextManager():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"컨텍스트 내부\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파일 처리는 일반적인 사용 사례입니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'file.txt'</span>, <span class=\"hljs-string\">'w'</span>) <span class=\"hljs-keyword\">as</span> file:\n    file.write(<span class=\"hljs-string\">'Hello, World!'</span>)\n</code></pre>\n<h2>4. 메타클래스</h2>\n<p>메타클래스는 클래스의 동작을 정의하는 방법입니다. 클래스 속성이나 메서드를 정의할 때 클래스를 수정하여 클래스 생성을 사용자 정의할 수 있게 합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>(type):\n    def <span class=\"hljs-title function_\">__new__</span>(cls, name, bases, attrs):\n        attrs[<span class=\"hljs-string\">'greet'</span>] = lambda <span class=\"hljs-attr\">self</span>: f<span class=\"hljs-string\">\"Hello from {self.__class__.__name__}\"</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">super</span>().<span class=\"hljs-title function_\">__new__</span>(cls, name, bases, attrs)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>(metaclass=<span class=\"hljs-title class_\">Meta</span>):\n    pass\n\nobj = <span class=\"hljs-title class_\">MyClass</span>()\n<span class=\"hljs-title function_\">print</span>(obj.<span class=\"hljs-title function_\">greet</span>())\n</code></pre>\n<h1>5.  디스크립터</h1>\n<p>디스크립터는 클래스 내에서 관리 속성을 만드는 방법입니다. 속성에 대한 액세스, 설정 및 삭제 동작을 정의할 수 있도록 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyDescriptor</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self, name=<span class=\"hljs-title class_\">None</span>):\n        self.<span class=\"hljs-property\">name</span> = name\n\n    def <span class=\"hljs-title function_\">__get__</span>(self, instance, owner):\n        <span class=\"hljs-keyword\">return</span> instance.<span class=\"hljs-property\">__dict__</span>.<span class=\"hljs-title function_\">get</span>(self.<span class=\"hljs-property\">name</span>)\n\n    def <span class=\"hljs-title function_\">__set__</span>(self, instance, value):\n        instance.<span class=\"hljs-property\">__dict__</span>[self.<span class=\"hljs-property\">name</span>] = value\n\n    def <span class=\"hljs-title function_\">__delete__</span>(self, instance):\n        del instance.<span class=\"hljs-property\">__dict__</span>[self.<span class=\"hljs-property\">name</span>]\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n    attr = <span class=\"hljs-title class_\">MyDescriptor</span>(<span class=\"hljs-string\">'attr'</span>)\n\nobj = <span class=\"hljs-title class_\">MyClass</span>()\nobj.<span class=\"hljs-property\">attr</span> = <span class=\"hljs-number\">42</span>\n<span class=\"hljs-title function_\">print</span>(obj.<span class=\"hljs-property\">attr</span>)\ndel obj.<span class=\"hljs-property\">attr</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>6. 코루틴과 Asyncio</h1>\n<p>코루틴과 asyncio 모듈을 사용하면 Python에서 비동기 프로그래밍을 할 수 있어요. 이를 통해 블로킹 되지 않는 I/O 작업을 수행할 수 있는 코드를 작성할 수 있어요.</p>\n<h2>코루틴</h2>\n<p>코루틴은 실행을 일시 중지하고 다시 시작할 수 있는 함수들이에요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">my_coroutine</span>():\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Start coroutine\"</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.<span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"End coroutine\"</span>)\n\nasyncio.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title function_\">my_coroutine</span>())\n</code></pre>\n<h1>Asyncio</h1>\n<p>Asyncio는 async/await 구문을 사용하여 동시성 코드를 작성하기 위한 라이브러리입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">await</span> asyncio.<span class=\"hljs-title function_\">gather</span>(<span class=\"hljs-title function_\">my_coroutine</span>(), <span class=\"hljs-title function_\">my_coroutine</span>())\n\nasyncio.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title function_\">main</span>())\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>7. 타입 주석</h1>\n<p>타입 주석은 변수, 함수 매개변수 및 반환 값을 정의하여 코드 가독성을 향상시키고 오류를 초기에 잡아낼 수 있습니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">str</span></span>) -> <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"Hello, <span class=\"hljs-subst\">{name}</span>\"</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -> <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-keyword\">return</span> a + b\n\nname: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"Alice\"</span>\nage: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">30</span>\n</code></pre>\n<h1>8. 슬롯</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>인스턴스 속성을 미리 정의된 목록으로 제한하여 메모리를 절약하고 속성 액세스 속도를 높일 수 있는 슬롯은 유용합니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n    __slots__ = [<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'age'</span>]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, age</span>):\n        self.name = name\n        self.age = age\n\nobj = MyClass(<span class=\"hljs-string\">'Alice'</span>, <span class=\"hljs-number\">30</span>)\n<span class=\"hljs-built_in\">print</span>(obj.name, obj.age)\n</code></pre>\n<h1>9. Multiprocessing</h1>\n<p>multiprocessing 모듈을 사용하면 별도의 프로세스를 생성하고 관리할 수 있어 Python 애플리케이션에서 진정한 병렬 처리를 수행할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> multiprocessing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Process</span>\n\ndef <span class=\"hljs-title function_\">worker</span>(num):\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">'Worker: {num}'</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    processes = []\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">5</span>):\n        p = <span class=\"hljs-title class_\">Process</span>(target=worker, args=(i,))\n        processes.<span class=\"hljs-title function_\">append</span>(p)\n        p.<span class=\"hljs-title function_\">start</span>()\n\n    <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">processes</span>:\n        p.<span class=\"hljs-title function_\">join</span>()\n</code></pre>\n<p>이러한 고급 Python 개념을 습득함으로써 더 효율적이고 유지보수가 쉬운 확장 가능한 코드를 작성할 수 있습니다. 이러한 개념은 코딩 기술뿐만 아니라 더 복잡한 문제와 프로젝트에 자신감을 갖고 접근할 수 있도록 도와줍니다. 즐거운 코딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}