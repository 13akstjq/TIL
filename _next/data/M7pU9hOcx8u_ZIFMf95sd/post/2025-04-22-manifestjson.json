{"pageProps":{"post":{"title":"Nextjs15에서 manifest.json 설정하는 방법","description":"","date":"2025-04-22 02:50","slug":"2025-04-22-manifestjson","content":"\n\n# manifest.json이란?\n\n웹 앱을 만들 때 'manifest.json' 또는 'manifest.webmanifest' 파일을 루트 디렉토리에 넣어주는 게 좋아요. 이 파일은 웹 앱이 어떻게 동작하는지, 어떤 이름을 가졌는지, 아이콘은 무엇인지 등 브라우저가 알아야 할 정보를 담고 있답니다. 쉽게 말해, 내 웹 앱의 소개서를 만들어서 브라우저에게 알려주는 역할이에요.\n\n## 고정된(static) manifest 파일 예시\n\n아래는 간단한 manifest.json 예시입니다. 주로 이런 형식으로 만들어서 프로젝트 루트에 넣어주면 되죠.\n\n```json\n{\n  \"name\": \"My Next.js Application\",\n  \"short_name\": \"Next.js App\",\n  \"description\": \"An application built with Next.js\",\n  \"start_url\": \"/\"\n  // 기타 설정들...\n}\n```\n\n여기서 주요 속성들을 짚어볼게요.\n\n| 속성명       | 설명                                             |\n|--------------|--------------------------------------------------|\n| name         | 웹 앱의 전체 이름, 기기나 설치 시 표시됨         |\n| short_name   | 이름 대신 사용할 짧은 이름, 아이콘 밑 등에서 표시 |\n| description  | 앱에 대한 간단한 설명                             |\n| start_url    | 앱을 실행할 때 열릴 기본 URL                      |\n\n---\n\n### manifest.json을 왜 넣어야 할까?\n\n* **PWA 지원**: Progressive Web App을 지원하려면 필수! 홈 화면에 아이콘을 추가하거나 오프라인 모드 같은 기능을 쓸 때 manifest가 필요해요.\n\n* **탭 이름 및 아이콘 설정**: 브라우저 탭이나 북마크에 나타나는 이름과 아이콘을 설정할 수 있어요.\n\n* **앱처럼 보이게 하기**: 풀스크린 모드, 방향 고정 등 다양한 옵션도 manifest에서 설정 가능하니 더 앱다운 느낌을 줄 수 있죠.\n\n---\n\n### 참고! manifest.json에 자주 쓰이는 주요 옵션들\n\n| 속성명          | 설명                                                          |\n|-----------------|---------------------------------------------------------------|\n| icons           | 앱 아이콘 목록, 크기별 이미지를 배열로 넣음                     |\n| display         | 앱이 실행될 때 UI 모드 (예: standalone, fullscreen, minimal-ui) |\n| background_color| 앱 시작화면 배경색                                           |\n| theme_color     | 브라우저 툴바 색상 등, 테마 컬러                               |\n| scope           | 앱의 유효 범위 URL, 이 범위 내에서만 앱으로 인식됨             |\n\n---\n\nmanifest.json 설정만 잘해줘도 사용자 경험이 크게 향상되니, Next.js 같은 프레임워크에서 PWA를 고민한다면 꼭 챙겨보세요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 매니페스트 파일 생성하기\n\n이번에는 `manifest.js` 또는 `manifest.ts` 파일을 만들어서 `Manifest` 객체를 반환하는 방법을 알려드릴게요.\n\n> 참고로 `manifest.js`는 Next.js의 특별한 Route Handler 중 하나예요. 기본적으로 캐시가 되지만, 만약 동적 API나 동적 설정 옵션을 사용하면 캐시되지 않아요.\n\n```js\nimport type { MetadataRoute } from 'next'\n \nexport default function manifest(): MetadataRoute.Manifest {\n  return {\n    name: 'Next.js App',\n    short_name: 'Next.js App',\n    description: 'Next.js App',\n    start_url: '/',\n    display: 'standalone',\n    background_color: '#fff',\n    theme_color: '#fff',\n    icons: [\n      {\n        src: '/favicon.ico',\n        sizes: 'any',\n        type: 'image/x-icon',\n      },\n    ],\n  }\n}\n```\n\n### 더 알아두면 좋은 팁!\n- `start_url`은 사용자가 앱을 실행했을 때 기본으로 열리는 경로를 설정하는 거예요. 보통 루트(`/`)로 지정하지만 필요에 따라 다르게 할 수 있어요.\n- `display` 옵션에는 `'standalone'` 외에도 `'fullscreen'`, `'minimal-ui'`, `'browser'` 등이 있어요. 각 옵션마다 앱을 어떻게 보여줄지 달라지니 원하는 사용자 경험에 맞게 선택하세요.\n- `icons` 배열에는 여러 크기의 아이콘을 넣어두는 게 좋아요. 그래야 다양한 기기와 해상도에서 깔끔하게 앱 아이콘이 보여지거든요.\n\n덤으로 매니페스트 파일은 PWA(Progressive Web App)를 만들 때 꼭 필요한 파일이니, 만약 여러분이 웹 앱을 좀 더 앱처럼 보이고 싶다면 꼭 만들어 보세요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n### Manifest Object\n\nManifest Object는 웹 표준이 새로워짐에 따라 업데이트될 수 있는 다양한 옵션들을 담고 있는 객체예요. 최신 옵션들에 대해 자세히 알고 싶다면, TypeScript를 사용 중이라면 코드 에디터 안에서 `MetadataRoute.Manifest` 타입을 참고하는 게 가장 확실하고요. 그렇지 않으면 [MDN 문서](https://developer.mozilla.org/en-US/docs/Web/Manifest)를 보는 것도 좋은 방법이에요.\n\n참고로, Manifest Object는 주로 웹 앱이 어떻게 보이고 동작할지를 정의하는데 쓰여서, 푸시 알림, 아이콘, 시작 URL, 테마 컬러 같은 설정들을 포함하죠. 요즘에는 PWA(Progressive Web App)를 만들 때 꼭 필요한 요소 중 하나랍니다. 그래서 웹앱 개발자라면 한 번쯤 꼼꼼히 살펴볼 만한 부분이에요!","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>manifest.json이란?</h1>\n<p>웹 앱을 만들 때 'manifest.json' 또는 'manifest.webmanifest' 파일을 루트 디렉토리에 넣어주는 게 좋아요. 이 파일은 웹 앱이 어떻게 동작하는지, 어떤 이름을 가졌는지, 아이콘은 무엇인지 등 브라우저가 알아야 할 정보를 담고 있답니다. 쉽게 말해, 내 웹 앱의 소개서를 만들어서 브라우저에게 알려주는 역할이에요.</p>\n<h2>고정된(static) manifest 파일 예시</h2>\n<p>아래는 간단한 manifest.json 예시입니다. 주로 이런 형식으로 만들어서 프로젝트 루트에 넣어주면 되죠.</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"My Next.js Application\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"short_name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Next.js App\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"description\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"An application built with Next.js\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"start_url\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"/\"</span>\n  <span class=\"hljs-comment\">// 기타 설정들...</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>여기서 주요 속성들을 짚어볼게요.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>속성명</th><th>설명</th></tr></thead><tbody><tr><td>name</td><td>웹 앱의 전체 이름, 기기나 설치 시 표시됨</td></tr><tr><td>short_name</td><td>이름 대신 사용할 짧은 이름, 아이콘 밑 등에서 표시</td></tr><tr><td>description</td><td>앱에 대한 간단한 설명</td></tr><tr><td>start_url</td><td>앱을 실행할 때 열릴 기본 URL</td></tr></tbody></table>\n<hr>\n<h3>manifest.json을 왜 넣어야 할까?</h3>\n<ul>\n<li>\n<p><strong>PWA 지원</strong>: Progressive Web App을 지원하려면 필수! 홈 화면에 아이콘을 추가하거나 오프라인 모드 같은 기능을 쓸 때 manifest가 필요해요.</p>\n</li>\n<li>\n<p><strong>탭 이름 및 아이콘 설정</strong>: 브라우저 탭이나 북마크에 나타나는 이름과 아이콘을 설정할 수 있어요.</p>\n</li>\n<li>\n<p><strong>앱처럼 보이게 하기</strong>: 풀스크린 모드, 방향 고정 등 다양한 옵션도 manifest에서 설정 가능하니 더 앱다운 느낌을 줄 수 있죠.</p>\n</li>\n</ul>\n<hr>\n<h3>참고! manifest.json에 자주 쓰이는 주요 옵션들</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>속성명</th><th>설명</th></tr></thead><tbody><tr><td>icons</td><td>앱 아이콘 목록, 크기별 이미지를 배열로 넣음</td></tr><tr><td>display</td><td>앱이 실행될 때 UI 모드 (예: standalone, fullscreen, minimal-ui)</td></tr><tr><td>background_color</td><td>앱 시작화면 배경색</td></tr><tr><td>theme_color</td><td>브라우저 툴바 색상 등, 테마 컬러</td></tr><tr><td>scope</td><td>앱의 유효 범위 URL, 이 범위 내에서만 앱으로 인식됨</td></tr></tbody></table>\n<hr>\n<p>manifest.json 설정만 잘해줘도 사용자 경험이 크게 향상되니, Next.js 같은 프레임워크에서 PWA를 고민한다면 꼭 챙겨보세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>매니페스트 파일 생성하기</h2>\n<p>이번에는 <code>manifest.js</code> 또는 <code>manifest.ts</code> 파일을 만들어서 <code>Manifest</code> 객체를 반환하는 방법을 알려드릴게요.</p>\n<blockquote>\n<p>참고로 <code>manifest.js</code>는 Next.js의 특별한 Route Handler 중 하나예요. 기본적으로 캐시가 되지만, 만약 동적 API나 동적 설정 옵션을 사용하면 캐시되지 않아요.</p>\n</blockquote>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> type { <span class=\"hljs-title class_\">MetadataRoute</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next'</span>\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">manifest</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title class_\">MetadataRoute</span>.<span class=\"hljs-property\">Manifest</span> {\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Next.js App'</span>,\n    <span class=\"hljs-attr\">short_name</span>: <span class=\"hljs-string\">'Next.js App'</span>,\n    <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'Next.js App'</span>,\n    <span class=\"hljs-attr\">start_url</span>: <span class=\"hljs-string\">'/'</span>,\n    <span class=\"hljs-attr\">display</span>: <span class=\"hljs-string\">'standalone'</span>,\n    <span class=\"hljs-attr\">background_color</span>: <span class=\"hljs-string\">'#fff'</span>,\n    <span class=\"hljs-attr\">theme_color</span>: <span class=\"hljs-string\">'#fff'</span>,\n    <span class=\"hljs-attr\">icons</span>: [\n      {\n        <span class=\"hljs-attr\">src</span>: <span class=\"hljs-string\">'/favicon.ico'</span>,\n        <span class=\"hljs-attr\">sizes</span>: <span class=\"hljs-string\">'any'</span>,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'image/x-icon'</span>,\n      },\n    ],\n  }\n}\n</code></pre>\n<h3>더 알아두면 좋은 팁!</h3>\n<ul>\n<li><code>start_url</code>은 사용자가 앱을 실행했을 때 기본으로 열리는 경로를 설정하는 거예요. 보통 루트(<code>/</code>)로 지정하지만 필요에 따라 다르게 할 수 있어요.</li>\n<li><code>display</code> 옵션에는 <code>'standalone'</code> 외에도 <code>'fullscreen'</code>, <code>'minimal-ui'</code>, <code>'browser'</code> 등이 있어요. 각 옵션마다 앱을 어떻게 보여줄지 달라지니 원하는 사용자 경험에 맞게 선택하세요.</li>\n<li><code>icons</code> 배열에는 여러 크기의 아이콘을 넣어두는 게 좋아요. 그래야 다양한 기기와 해상도에서 깔끔하게 앱 아이콘이 보여지거든요.</li>\n</ul>\n<p>덤으로 매니페스트 파일은 PWA(Progressive Web App)를 만들 때 꼭 필요한 파일이니, 만약 여러분이 웹 앱을 좀 더 앱처럼 보이고 싶다면 꼭 만들어 보세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h3>Manifest Object</h3>\n<p>Manifest Object는 웹 표준이 새로워짐에 따라 업데이트될 수 있는 다양한 옵션들을 담고 있는 객체예요. 최신 옵션들에 대해 자세히 알고 싶다면, TypeScript를 사용 중이라면 코드 에디터 안에서 <code>MetadataRoute.Manifest</code> 타입을 참고하는 게 가장 확실하고요. 그렇지 않으면 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest\" rel=\"nofollow\" target=\"_blank\">MDN 문서</a>를 보는 것도 좋은 방법이에요.</p>\n<p>참고로, Manifest Object는 주로 웹 앱이 어떻게 보이고 동작할지를 정의하는데 쓰여서, 푸시 알림, 아이콘, 시작 URL, 테마 컬러 같은 설정들을 포함하죠. 요즘에는 PWA(Progressive Web App)를 만들 때 꼭 필요한 요소 중 하나랍니다. 그래서 웹앱 개발자라면 한 번쯤 꼼꼼히 살펴볼 만한 부분이에요!</p>\n</body>\n</html>\n"},"__N_SSG":true}