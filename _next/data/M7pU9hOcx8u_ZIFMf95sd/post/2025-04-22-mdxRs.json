{"pageProps":{"post":{"title":"Nextjs에서 mdxRs 사용하는 방법","description":"","date":"2025-04-22 13:15","slug":"2025-04-22-mdxRs","content":"\n\n# mdxRs\n\n이번 글에서는 Next.js에서 MDX 파일을 컴파일 할 때 사용하는 새로운 러스트(Rust) 기반 컴파일러인 `mdxRs`에 대해 이야기해볼게요.\n\n---\n\nMDX란, 마크다운(Markdown)과 JSX가 합쳐진 형태로, 리액트 컴포넌트를 마크다운 문서에 자연스럽게 섞어서 사용할 수 있게 해줘서 개발자들에게 아주 인기 있는 포맷이에요.\n\n기존 `@next/mdx` 플러그인은 자바스크립트로 작성된 컴파일러를 사용했는데요, 이번에 실험적으로 러스트로 작성된 훨씬 빠른 컴파일러를 지원하는 게 바로 `mdxRs`입니다. 러스트 컴파일러 덕분에 속도가 빨라지고 메모리 사용량도 줄일 수 있어 성능 효율이 좋아졌다는 장점이 있어요.\n\n---\n\n다음은 `mdxRs`를 Next.js 프로젝트에 적용하는 기본 설정입니다:\n\n```js\nconst withMDX = require('@next/mdx')()\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['ts', 'tsx', 'mdx'], // mdx 파일도 페이지로 인식하게 합니다.\n  experimental: {\n    mdxRs: true, // 러스트 기반 MDX 컴파일러 활성화\n  },\n}\n\nmodule.exports = withMDX(nextConfig)\n```\n\n- `pageExtensions`: 여기서 MDX 확장자를 추가해서 `.mdx` 파일을 라우트 페이지로 사용할 수 있게 해주고요.\n- `experimental.mdxRs`: 실험 기능인 러스트 MDX 컴파일러를 활성화합니다. (오늘 기준으로는 실험 단계라 API가 바뀔 가능성도 있으니 참고하세요!)\n\n---\n\n### 참고로, 더 알아두면 좋은 점들\n\n- `mdxRs` 기능은 Next.js의 실험적인 기능에 해당하기 때문에, 버전을 업그레이드 할 때 호환성 문제나 기능 변경이 있을 수 있어요.\n- Rust 기반 컴파일러라서 최적화가 잘 되어 있어 특히 대용량 MDX 파일이나 빌드 시간이 긴 프로젝트에서 효과를 더 느낄 수 있습니다.\n- 이미 `@next/mdx` 플러그인에 익숙하다면, 특별한 변경 없이 옵션만 켜주면 되니까 도입도 쉽다는 장점이 있습니다.\n- 만약 MDX 내부에 복잡한 커스텀 컴포넌트가 많거나, 특별한 Babel/ESLint 설정이 필요하면 `withMDX` 함수 인자로 옵션들을 함께 전달해 더 세밀한 설정이 가능합니다.\n\n---\n\n마지막으로 실험적으로 만나볼 수 있는 이 기능, 직접 적용해보고 빌드 속도나 번들 결과물 차이가 어떤지 체감해 보는 것도 개발자로서 재미있는 경험이 될 거예요!\n\n더 많은 Next.js, MDX 관련 이야기는 앞으로도 공유할게요. 궁금한 점 있으면 댓글로 알려주세요 :)","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>mdxRs</h1>\n<p>이번 글에서는 Next.js에서 MDX 파일을 컴파일 할 때 사용하는 새로운 러스트(Rust) 기반 컴파일러인 <code>mdxRs</code>에 대해 이야기해볼게요.</p>\n<hr>\n<p>MDX란, 마크다운(Markdown)과 JSX가 합쳐진 형태로, 리액트 컴포넌트를 마크다운 문서에 자연스럽게 섞어서 사용할 수 있게 해줘서 개발자들에게 아주 인기 있는 포맷이에요.</p>\n<p>기존 <code>@next/mdx</code> 플러그인은 자바스크립트로 작성된 컴파일러를 사용했는데요, 이번에 실험적으로 러스트로 작성된 훨씬 빠른 컴파일러를 지원하는 게 바로 <code>mdxRs</code>입니다. 러스트 컴파일러 덕분에 속도가 빨라지고 메모리 사용량도 줄일 수 있어 성능 효율이 좋아졌다는 장점이 있어요.</p>\n<hr>\n<p>다음은 <code>mdxRs</code>를 Next.js 프로젝트에 적용하는 기본 설정입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> withMDX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@next/mdx'</span>)()\n\n<span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@type</span> {<span class=\"hljs-type\">import('next').NextConfig</span>} */</span>\n<span class=\"hljs-keyword\">const</span> nextConfig = {\n  <span class=\"hljs-attr\">pageExtensions</span>: [<span class=\"hljs-string\">'ts'</span>, <span class=\"hljs-string\">'tsx'</span>, <span class=\"hljs-string\">'mdx'</span>], <span class=\"hljs-comment\">// mdx 파일도 페이지로 인식하게 합니다.</span>\n  <span class=\"hljs-attr\">experimental</span>: {\n    <span class=\"hljs-attr\">mdxRs</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 러스트 기반 MDX 컴파일러 활성화</span>\n  },\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-title function_\">withMDX</span>(nextConfig)\n</code></pre>\n<ul>\n<li><code>pageExtensions</code>: 여기서 MDX 확장자를 추가해서 <code>.mdx</code> 파일을 라우트 페이지로 사용할 수 있게 해주고요.</li>\n<li><code>experimental.mdxRs</code>: 실험 기능인 러스트 MDX 컴파일러를 활성화합니다. (오늘 기준으로는 실험 단계라 API가 바뀔 가능성도 있으니 참고하세요!)</li>\n</ul>\n<hr>\n<h3>참고로, 더 알아두면 좋은 점들</h3>\n<ul>\n<li><code>mdxRs</code> 기능은 Next.js의 실험적인 기능에 해당하기 때문에, 버전을 업그레이드 할 때 호환성 문제나 기능 변경이 있을 수 있어요.</li>\n<li>Rust 기반 컴파일러라서 최적화가 잘 되어 있어 특히 대용량 MDX 파일이나 빌드 시간이 긴 프로젝트에서 효과를 더 느낄 수 있습니다.</li>\n<li>이미 <code>@next/mdx</code> 플러그인에 익숙하다면, 특별한 변경 없이 옵션만 켜주면 되니까 도입도 쉽다는 장점이 있습니다.</li>\n<li>만약 MDX 내부에 복잡한 커스텀 컴포넌트가 많거나, 특별한 Babel/ESLint 설정이 필요하면 <code>withMDX</code> 함수 인자로 옵션들을 함께 전달해 더 세밀한 설정이 가능합니다.</li>\n</ul>\n<hr>\n<p>마지막으로 실험적으로 만나볼 수 있는 이 기능, 직접 적용해보고 빌드 속도나 번들 결과물 차이가 어떤지 체감해 보는 것도 개발자로서 재미있는 경험이 될 거예요!</p>\n<p>더 많은 Next.js, MDX 관련 이야기는 앞으로도 공유할게요. 궁금한 점 있으면 댓글로 알려주세요 :)</p>\n</body>\n</html>\n"},"__N_SSG":true}