{"pageProps":{"post":{"title":"Next.js 15에서 ImageResponse를 활용해 이미지 생성 방법","description":"","date":"2025-04-22 12:41","slug":"2025-04-22-ImageResponse","content":"\n\n# ImageResponse 사용법 간단 정리\n\nNext.js의 `ImageResponse`는 JSX와 CSS를 활용해 동적인 이미지를 만들어낼 수 있는 아주 멋진 기능이에요. 특히 소셜미디어용 이미지, 예를 들어 Open Graph 이미지나 트위터 카드 이미지를 자동으로 생성할 때 많이 쓰이죠.\n\n---\n\n## ImageResponse 생성자 옵션\n\n```js\nimport { ImageResponse } from 'next/og'\n\nnew ImageResponse(\n  element: ReactElement,\n  options: {\n    width?: number = 1200, // 이미지 가로 크기 (기본 1200px)\n    height?: number = 630, // 이미지 세로 크기 (기본 630px)\n    emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji', // 이모지 스타일 선택 가능\n    fonts?: {\n      name: string,        // 폰트 이름\n      data: ArrayBuffer,   // 폰트 데이터 (ArrayBuffer 포맷)\n      weight: number,      // 폰트 두께\n      style: 'normal' | 'italic' // 폰트 스타일 지정\n    }[],\n    debug?: boolean = false, // 디버그 모드 활성화 여부\n\n    // HTTP 응답에 쓰일 추가 옵션들\n    status?: number = 200,       // HTTP 상태 코드\n    statusText?: string,         // 상태 메시지\n    headers?: Record<string, string> // 헤더 정보\n  },\n)\n```\n\n---\n\n## 간단 설명\n\n- **element**: JSX 요소를 넘겨주면 그걸로 이미지를 만들어냅니다.\n- **width / height**: 생성될 이미지의 크기를 결정합니다. 보통 소셜 미디어용 이미지 사이즈로 1200x630을 많이 사용해요.\n- **emoji**: 이모지 스타일을 지정할 수 있어요. 원하는 이모지 스타일을 골라서 좀 더 개성있는 이미지를 만들어보세요.\n- **fonts**: 원하는 커스텀 폰트를 불러와서 쓸 수도 있습니다. ArrayBuffer 포맷으로 폰트 데이터를 준비해야 하는데, 웹에서 폰트를 직접 임포트해서 사용하는 것과는 조금 다르니 참고하세요.\n- **debug**: 이미지 생성할 때 콘솔이나 에러 정보가 더 많이 보고 싶다면 true로 설정하면 됩니다.\n- **status / statusText / headers**: HTTP 응답 설정용. 이미지 API를 만들 때 상태 코드를 따로 지정하거나 헤더를 붙이고 싶을 때 사용해요.\n\n---\n\n## 추가 팁!\n\n- 커스텀 폰트를 적용하려면 미리 폰트를 ArrayBuffer로 변환하는 과정이 필요해요. 예를 들어, `fetch`로 폰트 파일을 받은 뒤 `arrayBuffer()`를 호출해서 준비하면 됩니다.\n- 이모지 스타일을 바꾸면 이미지 분위기가 확 달라져서, 브랜딩에 맞게 적용하면 좋아요.\n- 디버그 모드를 켜면 어떤 CSS나 요소가 문제인지 더 쉽게 파악할 수 있어서 개발 초반에 유용해요.\n\n---\n\nNext.js에서 동적 이미지 생성하는 게 필요하다면 `ImageResponse` 한 번 꼭 써보세요! 특히 자동으로 OG 이미지를 만들어주는 환경에서는 시간을 엄청 아껴준답니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 지원하는 CSS 속성들\n\nSatori의 문서를 참고하면 어떤 HTML과 CSS 기능들이 지원되는지 자세히 확인할 수 있어요. 직접 사용해보면서 어떤 스타일들이 잘 먹히는지도 체크해보시면 좋습니다.\n\n## 버전 히스토리\n\n| 버전       | 변경 사항                                                      |\n|------------|---------------------------------------------------------------|\n| `v14.0.0`  | `ImageResponse`가 `next/server`에서 `next/og`로 이동되었습니다.   |\n| `v13.3.0`  | `ImageResponse`를 `next/server`에서 임포트할 수 있게 되었습니다.  |\n| `v13.0.0`  | `@vercel/og` 패키지를 통해 `ImageResponse`가 도입되었습니다.       |\n\n요즘 Next.js에서 이미지 관련 기능들이 점점 발전하고 있는데요, 특히 `ImageResponse` 같은 기능은 동적으로 이미지를 생성할 때 굉장히 편리해요. 다만 버전에 따라서 임포트 경로나 패키지가 달라질 수 있으니 사용 전 문서를 한번만 꼭 확인하는 것을 추천합니다. 이 부분을 미리 숙지해두면 버전 업그레이드 시에 불필요한 에러를 줄일 수 있거든요!","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>ImageResponse 사용법 간단 정리</h1>\n<p>Next.js의 <code>ImageResponse</code>는 JSX와 CSS를 활용해 동적인 이미지를 만들어낼 수 있는 아주 멋진 기능이에요. 특히 소셜미디어용 이미지, 예를 들어 Open Graph 이미지나 트위터 카드 이미지를 자동으로 생성할 때 많이 쓰이죠.</p>\n<hr>\n<h2>ImageResponse 생성자 옵션</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ImageResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/og'</span>\n\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ImageResponse</span>(\n  <span class=\"hljs-attr\">element</span>: <span class=\"hljs-title class_\">ReactElement</span>,\n  <span class=\"hljs-attr\">options</span>: {\n    width?: number = <span class=\"hljs-number\">1200</span>, <span class=\"hljs-comment\">// 이미지 가로 크기 (기본 1200px)</span>\n    height?: number = <span class=\"hljs-number\">630</span>, <span class=\"hljs-comment\">// 이미지 세로 크기 (기본 630px)</span>\n    emoji?: <span class=\"hljs-string\">'twemoji'</span> | <span class=\"hljs-string\">'blobmoji'</span> | <span class=\"hljs-string\">'noto'</span> | <span class=\"hljs-string\">'openmoji'</span> = <span class=\"hljs-string\">'twemoji'</span>, <span class=\"hljs-comment\">// 이모지 스타일 선택 가능</span>\n    fonts?: {\n      <span class=\"hljs-attr\">name</span>: string,        <span class=\"hljs-comment\">// 폰트 이름</span>\n      <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">ArrayBuffer</span>,   <span class=\"hljs-comment\">// 폰트 데이터 (ArrayBuffer 포맷)</span>\n      <span class=\"hljs-attr\">weight</span>: number,      <span class=\"hljs-comment\">// 폰트 두께</span>\n      <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">'normal'</span> | <span class=\"hljs-string\">'italic'</span> <span class=\"hljs-comment\">// 폰트 스타일 지정</span>\n    }[],\n    debug?: boolean = <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 디버그 모드 활성화 여부</span>\n\n    <span class=\"hljs-comment\">// HTTP 응답에 쓰일 추가 옵션들</span>\n    status?: number = <span class=\"hljs-number\">200</span>,       <span class=\"hljs-comment\">// HTTP 상태 코드</span>\n    statusText?: string,         <span class=\"hljs-comment\">// 상태 메시지</span>\n    headers?: <span class=\"hljs-title class_\">Record</span>&#x3C;string, string> <span class=\"hljs-comment\">// 헤더 정보</span>\n  },\n)\n</code></pre>\n<hr>\n<h2>간단 설명</h2>\n<ul>\n<li><strong>element</strong>: JSX 요소를 넘겨주면 그걸로 이미지를 만들어냅니다.</li>\n<li><strong>width / height</strong>: 생성될 이미지의 크기를 결정합니다. 보통 소셜 미디어용 이미지 사이즈로 1200x630을 많이 사용해요.</li>\n<li><strong>emoji</strong>: 이모지 스타일을 지정할 수 있어요. 원하는 이모지 스타일을 골라서 좀 더 개성있는 이미지를 만들어보세요.</li>\n<li><strong>fonts</strong>: 원하는 커스텀 폰트를 불러와서 쓸 수도 있습니다. ArrayBuffer 포맷으로 폰트 데이터를 준비해야 하는데, 웹에서 폰트를 직접 임포트해서 사용하는 것과는 조금 다르니 참고하세요.</li>\n<li><strong>debug</strong>: 이미지 생성할 때 콘솔이나 에러 정보가 더 많이 보고 싶다면 true로 설정하면 됩니다.</li>\n<li><strong>status / statusText / headers</strong>: HTTP 응답 설정용. 이미지 API를 만들 때 상태 코드를 따로 지정하거나 헤더를 붙이고 싶을 때 사용해요.</li>\n</ul>\n<hr>\n<h2>추가 팁!</h2>\n<ul>\n<li>커스텀 폰트를 적용하려면 미리 폰트를 ArrayBuffer로 변환하는 과정이 필요해요. 예를 들어, <code>fetch</code>로 폰트 파일을 받은 뒤 <code>arrayBuffer()</code>를 호출해서 준비하면 됩니다.</li>\n<li>이모지 스타일을 바꾸면 이미지 분위기가 확 달라져서, 브랜딩에 맞게 적용하면 좋아요.</li>\n<li>디버그 모드를 켜면 어떤 CSS나 요소가 문제인지 더 쉽게 파악할 수 있어서 개발 초반에 유용해요.</li>\n</ul>\n<hr>\n<p>Next.js에서 동적 이미지 생성하는 게 필요하다면 <code>ImageResponse</code> 한 번 꼭 써보세요! 특히 자동으로 OG 이미지를 만들어주는 환경에서는 시간을 엄청 아껴준답니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>지원하는 CSS 속성들</h2>\n<p>Satori의 문서를 참고하면 어떤 HTML과 CSS 기능들이 지원되는지 자세히 확인할 수 있어요. 직접 사용해보면서 어떤 스타일들이 잘 먹히는지도 체크해보시면 좋습니다.</p>\n<h2>버전 히스토리</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td><code>v14.0.0</code></td><td><code>ImageResponse</code>가 <code>next/server</code>에서 <code>next/og</code>로 이동되었습니다.</td></tr><tr><td><code>v13.3.0</code></td><td><code>ImageResponse</code>를 <code>next/server</code>에서 임포트할 수 있게 되었습니다.</td></tr><tr><td><code>v13.0.0</code></td><td><code>@vercel/og</code> 패키지를 통해 <code>ImageResponse</code>가 도입되었습니다.</td></tr></tbody></table>\n<p>요즘 Next.js에서 이미지 관련 기능들이 점점 발전하고 있는데요, 특히 <code>ImageResponse</code> 같은 기능은 동적으로 이미지를 생성할 때 굉장히 편리해요. 다만 버전에 따라서 임포트 경로나 패키지가 달라질 수 있으니 사용 전 문서를 한번만 꼭 확인하는 것을 추천합니다. 이 부분을 미리 숙지해두면 버전 업그레이드 시에 불필요한 에러를 줄일 수 있거든요!</p>\n</body>\n</html>\n"},"__N_SSG":true}