{"pageProps":{"post":{"title":"알아두면 유용한 파이썬 프로그래밍 문법 10가지","description":"","date":"2024-07-14 20:37","slug":"2024-07-14-PeculiarPythonProgrammingSyntax","content":"\n\n## 프로그래밍 언어 배우기\n\n![Peculiar Python Programming Syntax](/TIL/assets/img/2024-07-14-PeculiarPythonProgrammingSyntax_0.png)\n\n만약 C++, Java 또는 Kotlin을 알고 있다면, Python을 배우는 것은 비교적 쉬울 것입니다. 그러나 Python에는 그 언어들에서는 만나지 못할 독특한 프로그래밍 규칙이 몇 가지 있습니다. 이를 공식적인 학습 없이 발견하기란 거의 불가능할 것입니다.\n\nPython의 이러한 특징에 익숙해지는 것은 유익하지만, 모두를 발견하려면 공식 Python 3 튜토리얼 (글쓴 시점에서 Python 3.12.3 사용중)을 살펴보는 것은 꽤 지루할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 프로세스를 편리하게 만들기 위해, C++, Java 또는 Kotlin을 배우며 접하지 못한 Python의 독특한 기능과 관용구 목록을 정리해왔어요. Python 프로그래밍의 독특한 측면을 이해하려는 누구에게나 이 개요가 도움이 되기를 바랍니다.\n\n이 목록이 모두를 포함하지 않을 수 있고, 다른 언어에도 몇 가지 기능이 존재할 수 있음을 주의해 주세요. Python에만 해당되는 것이 아닐 수 있는 누락 사항이나 사항에 대한 피드백을 환영합니다.\n\n# Python Repl 사용\n\n## 마지막으로 출력된 값 할당\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n인터랙티브 모드에서는 마지막으로 출력된 표현식이 변수 `_`에 할당됩니다. 이는 Python을 계산기로 사용할 때 계산을 계속하기가 다소 쉽다는 것을 의미합니다. 예를 들어:\n\n```js\n>>> tax = 12.5 / 100\n>>> price = 100.50\n>>> price * tax\n12.5625\n>>> price + _\n113.0625\n>>> round(_, 2)\n113.06\n```\n\n# 텍스트\n\n## Raw String (이스케이프 문자 \\ 사용 안 함)\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 \\로 시작하는 문자를 특수 문자로 해석하지 않으려면, 첫 따옴표 앞에 r을 추가하여 raw 문자열을 사용할 수 있어요:\n\n```js\n>>> print('C:\\some\\name')  # 여기서 \\n은 새 줄을 의미해요!\nC:\\some\name\n>>> print(r'C:\\some\\name')  # 따옴표 앞의 r을 주목해 주세요\nC:\\some\\name\n```\n\n## 문자열 곱하기\n\n문자열은 + 연산자로 이어붙이거나 *를 통해 반복할 수 있어요:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n>>> # 3번의 'un', 그리고 'ium'이 이어집니다\n>>> 3 * 'un' + 'ium'\n'unununium'\n```\n\n## 연산자를 사용한 문자열 결합\n\n따옴표로 둘러싸인 두 개 이상의 문자열 리터럴은 자동으로 연결됩니다. 이 기능은 변수에는 적용되지 않습니다.\n\n```js\n>>> 'Py' 'thon'\n'Python'\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 문자열 색인화\n\n문자열이 할당되었을 때...\n\n```js\n>>> word = 'Python'\n```\n\n다음과 같이 색인화됩니다\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n 0   1   2   3   4   5   6\n-6  -5  -4  -3  -2  -1\n\n\n다양한 흥미로운 예시들을 통해 접근하는 방법을 살펴보겠습니다.\n\n```js\n>>> word[0]  # 위치 0에 있는 문자\n'P'\n>>> word[5]  # 위치 5에 있는 문자\n'n'\n>>> word[-1]  # 마지막 문자\n'n'\n>>> word[-2]  # 끝에서 두 번째 문자\n'o'\n>>> word[-6]\n'P'\n>>> word[0:2]  # 위치 0부터 (포함) 2까지 (미포함)의 문자\n'Py'\n>>> word[2:5]  # 위치 2부터 (포함) 5까지 (미포함)의 문자\n'tho'\n>>> word[:2]   # 시작부터 위치 2까지 (미포함)의 문자\n'Py'\n>>> word[4:]   # 위치 4부터 (포함) 끝까지의 문자\n'on'\n>>> word[-2:]  # 끝에서 두 번째부터 (포함) 끝까지의 문자\n'on'\n>>> word[:2] + word[2:]\n'Python'\n>>> word[:4] + word[4:]\n'Python'\n>>> word[4:42]\n'on'\n>>> word[42:]\n''\n>>> word[42]  # 단어는 6개의 문자만 있습니다\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: string index out of range\n```\n\n## 참고 및 얕은 복사\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n보통의 할당은 참조를 할당합니다.\n\n```js\n>>> rgb = [\"Red\", \"Green\", \"Blue\"]\n>>> rgba = rgb\n>>> id(rgb) == id(rgba)  # 같은 객체를 참조합니다\nTrue\n>>> rgba.append(\"Alph\")\n>>> rgb\n[\"Red\", \"Green\", \"Blue\", \"Alph\"]\n```\n\n하지만 = 와 [:] 를 사용하면 얕은 복사가 됩니다.\n\n```js\n>>> correct_rgba = rgba[:]\n>>> correct_rgba[-1] = \"Alpha\"\n>>> correct_rgba\n[\"Red\", \"Green\", \"Blue\", \"Alpha\"]\n>>> rgba\n[\"Red\", \"Green\", \"Blue\", \"Alph\"]\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 프로그래밍으로 나아가는 첫걸음\n\n## 더 짧은 피보나치 알고리즘\n\n동일한 라인 할당을 사용하면 피보나치 알고리즘을 훨씬 더 짧게 작성할 수 있습니다.\n\n```js\n>>> a, b = 0, 1\n>>> while a < 1000:\n...     print(a, end=',')\n...     a, b = b, a+b\n...\n0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## print 문에서의 자동 공백 삽입\n\nprint 문을 사용할 때, 입력값들 사이에 자동으로 공백이 추가됩니다. 즉, '이것의 값은'과 'i' 사이에 자동으로 공백이 추가됩니다.\n\n```js\n>>> i = 256*256\n>>> print('이것의 값은', i)\n이것의 값은 65536\n```\n\n# 제어 흐름 도구 더 알아보기\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## For - Else Flow Control\n\nIf-Else에 대해 들어보셨나요? Kotlin에서 소수를 확인하는 것과 같이, 찾아낸 소수가 아닌 경우 멈출 수 있는 방법이 있습니다. 불리언 변수 `isPrime`를 false로 설정할 수 있어요.\n\n```js\nfor (n in 2..9) { \n    var isPrime = true\n    for (x in 2 until n) { \n        if (n % x == 0) {\n            println(\"$n equals $x * ${n / x}\")\n            isPrime = false\n            break\n        }\n    }\n    if (isPrime) {\n        println(\"$n is a prime number\")\n    } \n}\n```\n\n하지만 Python에서는 For-Else를 사용해 isPrime 변수를 생략할 수 있어요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n>>> for n in range(2, 10):\n...    for x in range(2, n):\n...       if n % x == 0:\n...          print(n, 'equals', x, '*', n//x)\n...          break\n...    else:\n...       print(n, 'is a prime number')\n\n2 is a prime number\n3 is a prime number\n4 equals 2 * 2\n5 is a prime number\n6 equals 2 * 3\n7 is a prime number\n8 equals 2 * 4\n9 equals 3 * 3\n```\n\n## Pass Flow Control\n\nThe pass keyword is just to let Python know it’s doing nothing, than thinking it’s a syntax error\n\n```js\n>>> while True:\n...    pass  # Busy-wait for keyboard interrupt (Ctrl+C)\n\n>>> class MyEmptyClass:\n...    pass\n\n>>> def initlog(*args):\n...    pass   # Remember to implement this!\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## Match Statements\n\n파이썬에서 `match`는 C++이나 Java에서의 `switch`와 Kotlin의 `when`과 유사합니다. 그러나 이는 패턴 매칭과 언패킹 할당에서 더 강력합니다. 주어진 사전의 패턴을 매칭하고 결과를 변수에 언패킹할 수 있습니다.\n\n```js\ndef process_sequence(seq):\n    match seq:\n        case [\"first\", (left, right), _, *rest]:\n            print(f\"Matched pattern:\")\n            print(f\"First element: 'first'\")\n            print(f\"Tuple: ({left}, {right})\")\n            print(f\"Rest of the list: {rest}\")\n        case _:\n            print(\"No match found\")\n\n# Example sequences\nsequence1 = [\"first\", (1, 2), 3, 4, 5, 6]\nsequence2 = [\"first\", (10, 20), \"x\", \"y\", \"z\"]\nsequence3 = [\"second\", (1, 2), 3, 4, 5]\n\n# Process sequences\nprocess_sequence(sequence1)\nprocess_sequence(sequence2)\nprocess_sequence(sequence3)\n```\n\n결과는 아래와 같습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n일치하는 패턴:\n첫 번째 요소: 'first'\n튜플: (1, 2)\n나머지 목록: [4, 5, 6]\n일치하는 패턴:\n첫 번째 요소: 'first'\n튜플: (10, 20)\n나머지 목록: ['y', 'z']\n일치하는 항목이 없습니다\n```\n\n이 스마트한 패턴 매칭은 데이터 추출 로직을 효과적으로 처리했습니다. 더 많은 통찰을 위해 PEP646 튜토리얼을 참조해보세요.\n\n## 함수 매개변수 제어\n\n이전 언어에서는 함수의 매개변수가 엄격히 위치에 따라 정해졌습니다. 최신 언어에서는 매개변수를 키워드로 할당하고 위치 요구 사항을 무시할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파이썬은 개발자들이 원하는 대로 선택할 수 있게 해줘요.\n\n```js\n#############################\n## 기본값: 위치 및 키워드 모두 허용\n#############################\n>>> def standard_arg(arg):\n...    print(arg)\n\n>>> standard_arg(2)\n2\n\n>>> standard_arg(arg=2)\n2\n\n#############################\n## 위치 전용\n#############################\n>>> def pos_only_arg(arg, /):\n...    print(arg)\n\n>>> pos_only_arg(1)\n1\n\n>>> pos_only_arg(arg=1)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: pos_only_arg() got some positional-only arguments passed as keyword arguments: 'arg'\n\n#############################\n## 키워드 전용\n#############################\n>>> def kwd_only_arg(*, arg):\n...    print(arg)\n\n>>> kwd_only_arg(3)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: kwd_only_arg() takes 0 positional arguments but 1 was given\n\n>>> kwd_only_arg(arg=3)\n3\n\n#############################\n## 결합된 키워드 및 위치\n#############################\n\n>>> def combined_example(pos_only, /, standard, *, kwd_only):\n...    print(pos_only, standard, kwd_only)\n\n>>> combined_example(1, 2, 3)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: combined_example() takes 2 positional arguments but 3 were given\n\n>>> combined_example(1, 2, kwd_only=3)\n1 2 3\n\n>>> combined_example(1, standard=2, kwd_only=3)\n1 2 3\n\n>>> combined_example(pos_only=1, standard=2, kwd_only=3)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: combined_example() got some positional-only arguments passed as keyword arguments: 'pos_only'\r\n```\n\n## 임의 매개변수 뒤에 매개변수\n\nC++, Java 및 Kotlin에서 임의 매개변수를 허용하지만, 그 뒤에 가능한 고정 매개변수를 누가 상상할까요?\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n하지만 Python으로는 아래와 같이 가능합니다. 여기서 sep은 임의의 매개변수 뒤에 고정된 매개변수입니다.\n\n```python\n>>> def concat(*args, sep=\"/\"):\n...    return sep.join(args)\n\n>>> concat(\"earth\", \"mars\", \"venus\")\n'earth/mars/venus'\n>>> concat(\"earth\", \"mars\", \"venus\", sep=\".\")\n'earth.mars.venus'\n```\n\n## JSON 처리 함수 매개변수\n\n함수에 JSON을 제공하고 모든 것을 처리할 수 있다면 멋지지 않을까요?\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파이썬을 사용하면 함수 매개변수로 보내는 변수에 **를 사용하여 가능합니다.\n\n```python\n>>> def testing(voltage, state='a stiff', action='voom'):\n...    print(\"action =\", action)\n...    print(\"voltage =\", voltage)\n...    print(\"state =\", state)\n\n>>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", \"action\": \"VOOM\"}\n>>> testing(**d)\n\naction = VOOM\nvoltage = four million\nstate = bleedin' demised\n```\n\n## 람다: 한 줄 함수\n\n우리는 Java 8 및 Kotlin에서 Lambda에 대해 배웠지만, lambda 키워드는 사용되지 않았습니다. 대신 Lambda로 함수 포인터가 보내지고, 일반적으로 그 함수를 정의해야 했습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파이썬에서는 lambda 키워드를 사용하여 해당 함수를 정의할 수 있어요\n\n예시\n\n```js\ndef getKey(pair):\n    return pair[1]\n\n# 같은 효과를 내는 코드입니다    \ngetKey_lambda = lambda pair: pair[1]\n```\n\n다음과 같이 간단한 사용 사례가 있어요. 람다 함수를 별도로 정의할 필요가 없는 경우입니다\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n>>> # 튜플 리스트\n>>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\n\n>>> # 각 튜플의 두 번째 요소를 기준으로 리스트 정렬하기 (람다 사용)\n>>> pairs.sort(key=lambda pair: pair[1])\n\n>>> print(pairs)\n[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]\n```\n\n## 함수 설명서 출력하기\n\n일반적으로 주석은 프로그래밍 코드의 일부가 아닙니다. 그러나 Python에서는 함수.__doc__을 사용하여 함수 설명서를 출력할 수 있습니다.\n\n```js\n>>> def my_function():\n...    \"\"\"아무것도 하지 않지만 문서화합니다.\n...\n...    정말로, 아무것도 실행하지 않습니다.\n...    \"\"\"\n...    pass\n\n>>> print(my_function.__doc__)\n아무것도 하지 않지만 문서화합니다.\n\n    정말로, 아무것도 실행하지 않습니다.\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n하지만 매개변수만 알고 싶다면 .__annotations__를 사용할 수 있어요.\n\n```python\n>>> def f(ham: str, eggs: str = 'eggs') -> str:\n...    print(\"Annotations:\", f.__annotations__)\n...    print(\"Arguments:\", ham, eggs)\n...    return ham + ' and ' + eggs\n\n>>> f('spam')\nAnnotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}\nArguments: spam eggs\n'spam and eggs'\n```\n\n# 데이터 구조\n\n## 리스트 내포\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n코드를 훨씬 간략하게 만들어주는 목록 내 항목을 이해해요.\n\n```js\n>>> squares = [x**2 for x in range(10)]\n>>> print(squares)\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n```\n\n이를 통해 우리는 리스트를 변환하거나 필터링하는 등 알고리즘 함수를 수행할 수 있어요. 예를 들어,\n\n```js\n>>> vec = [-4, -2, 0, 2, 4]\n>>> # 값이 두 배인 새 리스트 생성\n>>> [x*2 for x in vec]\n[-8, -4, 0, 4, 8]\n\n>>> # 음수를 제외한 리스트 필터링\n>>> [x for x in vec if x >= 0]\n[0, 2, 4]\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 콤마 할당은 튜플을 만듭니다\n\n할당 뒤에 쉼표(,)를 추가하면 전체 할당이 튜플 유형이 됩니다.\n\n```js\n>>> noComma = '안녕하세요'\n>>> withComma = '안녕하세요',\n\n>>> print(len(noComma))\n5\n>>> print(len(withComma))\n1\n\n>>> print(noComma)\n안녕하세요\n>>> print(withComma)\n('안녕하세요',)\n```\n\n## 튜플 언패킹\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n튜플에서의 역 언패킹 할당은 가능합니다.\n\n```js\n>>> # 튜플 만들기\n>>> t = 12345, 54321, 'hello!'\n\n>>> # 튜플을 3개의 변수로 언패킹 (튜플의 크기와 정확히 일치해야 함)\n>>> x, y, z = t\n```\n\n## 집합: 고유한 목록\n\n중복을 없애는 리스트와 유사합니다. 꺽은 괄호 `{}`를 사용합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n>>> a = set('abracadabra')\n>>> b = set('alacazam')\n>>> a                                  # a 안의 고유한 문자\n{'a', 'r', 'b', 'c', 'd'}\n>>> a - b                              # a에만 있는 문자\n{'r', 'd', 'b'}\n>>> a | b                              # a나 b 또는 둘 다에 있는 문자\n{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}\n>>> a & b                              # a와 b에 모두 있는 문자\n{'a', 'c'}\n>>> a ^ b                              # a나 b에만 있는 문자\n{'r', 'd', 'b', 'm', 'z', 'l'}\r\n```\n\n이것이 사전의 기초를 이룹니다.\n\n## 문자열 불리언 비교\n\n파이썬에서는 문자열을 비교하여 결과로 참/거짓 값을 얻을 수 있으며, 결과는 불리언으로 평가된 마지막 변수를 반환합니다.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n>>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'\n>>> non_null = string1 or string2 or string3\n>>> # 'Trondheim'가 출력됩니다. 첫 번째로 true를 반환한 OR 연산자\n>>> print(non_null)\n'Trondheim'\n\n\n>>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'\n>>> non_null = string1 and string2 and string3\n>>> # 빈 문자열이 하나라도 있으면 아무것도 출력되지 않습니다\n>>> print(non_null) \n\n\n>>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'\n>>> non_null = string1 and string2 and string3\n>>> # 'Hammer Dance'가 출력됩니다. true를 반환하는 마지막 AND 연산자\n>>> print(non_null)\nHammer Dance\r\n```\n\n# 입력과 출력\n\n## “=”를 사용하여 print 출력 결과 포맷팅하기\n\n```js\n>>> bugs = 'roaches'\n>>> count = 13\n>>> area = 'living room'\n>>> print(f'Debugging {bugs=} {count=} {area=}')\nDebugging bugs='roaches' count=13 area='living room'\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 클래스\n\n## 데이터 멤버는 외부에서 생성할 수 있습니다\n\n데이터 멤버는 클래스 외부에서 생성하고 삭제할 수 있습니다.\n\n```js\n>>> class MyClass:\n...    \"\"\"간단한 예제 클래스\"\"\"\n...    def f(self):\n...        return 'hello world'\n\n>>> x = MyClass()        \n>>> x.counter = 1\n>>> print(x.counter)\n1\n\n>>> del x.counter\n\n>>> try:\n...    print(x.counter)\n... except:\n...    print(\"x.counter가 더 이상 존재하지 않습니다\")\nx.counter가 더 이상 존재하지 않습니다\n```  \n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 도움이 되었으면 좋겣습니다! AI를 배우기 시작할 수 있는 프로그래밍 언어인 Python을 즐겁게 배우세요!","ogImage":{"url":"/TIL/assets/img/2024-07-14-PeculiarPythonProgrammingSyntax_0.png"},"coverImage":"/TIL/assets/img/2024-07-14-PeculiarPythonProgrammingSyntax_0.png","tag":["Tech"],"readingTime":20},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>프로그래밍 언어 배우기</h2>\n<p><img src=\"/TIL/assets/img/2024-07-14-PeculiarPythonProgrammingSyntax_0.png\" alt=\"Peculiar Python Programming Syntax\"></p>\n<p>만약 C++, Java 또는 Kotlin을 알고 있다면, Python을 배우는 것은 비교적 쉬울 것입니다. 그러나 Python에는 그 언어들에서는 만나지 못할 독특한 프로그래밍 규칙이 몇 가지 있습니다. 이를 공식적인 학습 없이 발견하기란 거의 불가능할 것입니다.</p>\n<p>Python의 이러한 특징에 익숙해지는 것은 유익하지만, 모두를 발견하려면 공식 Python 3 튜토리얼 (글쓴 시점에서 Python 3.12.3 사용중)을 살펴보는 것은 꽤 지루할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 프로세스를 편리하게 만들기 위해, C++, Java 또는 Kotlin을 배우며 접하지 못한 Python의 독특한 기능과 관용구 목록을 정리해왔어요. Python 프로그래밍의 독특한 측면을 이해하려는 누구에게나 이 개요가 도움이 되기를 바랍니다.</p>\n<p>이 목록이 모두를 포함하지 않을 수 있고, 다른 언어에도 몇 가지 기능이 존재할 수 있음을 주의해 주세요. Python에만 해당되는 것이 아닐 수 있는 누락 사항이나 사항에 대한 피드백을 환영합니다.</p>\n<h1>Python Repl 사용</h1>\n<h2>마지막으로 출력된 값 할당</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>인터랙티브 모드에서는 마지막으로 출력된 표현식이 변수 <code>_</code>에 할당됩니다. 이는 Python을 계산기로 사용할 때 계산을 계속하기가 다소 쉽다는 것을 의미합니다. 예를 들어:</p>\n<pre><code class=\"hljs language-js\">>>> tax = <span class=\"hljs-number\">12.5</span> / <span class=\"hljs-number\">100</span>\n>>> price = <span class=\"hljs-number\">100.50</span>\n>>> price * tax\n<span class=\"hljs-number\">12.5625</span>\n>>> price + _\n<span class=\"hljs-number\">113.0625</span>\n>>> <span class=\"hljs-title function_\">round</span>(_, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">113.06</span>\n</code></pre>\n<h1>텍스트</h1>\n<h2>Raw String (이스케이프 문자 \\ 사용 안 함)</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>만약 \\로 시작하는 문자를 특수 문자로 해석하지 않으려면, 첫 따옴표 앞에 r을 추가하여 raw 문자열을 사용할 수 있어요:</p>\n<pre><code class=\"hljs language-js\">>>> <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'C:\\some\\name'</span>)  # 여기서 \\n은 새 줄을 의미해요!\n<span class=\"hljs-attr\">C</span>:\\some\name\n>>> <span class=\"hljs-title function_\">print</span>(r<span class=\"hljs-string\">'C:\\some\\name'</span>)  # 따옴표 앞의 r을 주목해 주세요\n<span class=\"hljs-attr\">C</span>:\\some\\name\n</code></pre>\n<h2>문자열 곱하기</h2>\n<p>문자열은 + 연산자로 이어붙이거나 *를 통해 반복할 수 있어요:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">>>> # <span class=\"hljs-number\">3</span>번의 <span class=\"hljs-string\">'un'</span>, 그리고 <span class=\"hljs-string\">'ium'</span>이 이어집니다\n>>> <span class=\"hljs-number\">3</span> * <span class=\"hljs-string\">'un'</span> + <span class=\"hljs-string\">'ium'</span>\n<span class=\"hljs-string\">'unununium'</span>\n</code></pre>\n<h2>연산자를 사용한 문자열 결합</h2>\n<p>따옴표로 둘러싸인 두 개 이상의 문자열 리터럴은 자동으로 연결됩니다. 이 기능은 변수에는 적용되지 않습니다.</p>\n<pre><code class=\"hljs language-js\">>>> <span class=\"hljs-string\">'Py'</span> <span class=\"hljs-string\">'thon'</span>\n<span class=\"hljs-string\">'Python'</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>문자열 색인화</h2>\n<p>문자열이 할당되었을 때...</p>\n<pre><code class=\"hljs language-js\">>>> word = <span class=\"hljs-string\">'Python'</span>\n</code></pre>\n<p>다음과 같이 색인화됩니다</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>+---+---+---+---+---+---+\n| P | y | t | h | o | n |\n+---+---+---+---+---+---+\n0   1   2   3   4   5   6\n-6  -5  -4  -3  -2  -1</p>\n<p>다양한 흥미로운 예시들을 통해 접근하는 방법을 살펴보겠습니다.</p>\n<pre><code class=\"hljs language-js\">>>> word[<span class=\"hljs-number\">0</span>]  # 위치 <span class=\"hljs-number\">0</span>에 있는 문자\n<span class=\"hljs-string\">'P'</span>\n>>> word[<span class=\"hljs-number\">5</span>]  # 위치 <span class=\"hljs-number\">5</span>에 있는 문자\n<span class=\"hljs-string\">'n'</span>\n>>> word[-<span class=\"hljs-number\">1</span>]  # 마지막 문자\n<span class=\"hljs-string\">'n'</span>\n>>> word[-<span class=\"hljs-number\">2</span>]  # 끝에서 두 번째 문자\n<span class=\"hljs-string\">'o'</span>\n>>> word[-<span class=\"hljs-number\">6</span>]\n<span class=\"hljs-string\">'P'</span>\n>>> word[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">2</span>]  # 위치 <span class=\"hljs-number\">0</span>부터 (포함) <span class=\"hljs-number\">2</span>까지 (미포함)의 문자\n<span class=\"hljs-string\">'Py'</span>\n>>> word[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">5</span>]  # 위치 <span class=\"hljs-number\">2</span>부터 (포함) <span class=\"hljs-number\">5</span>까지 (미포함)의 문자\n<span class=\"hljs-string\">'tho'</span>\n>>> word[:<span class=\"hljs-number\">2</span>]   # 시작부터 위치 <span class=\"hljs-number\">2</span>까지 (미포함)의 문자\n<span class=\"hljs-string\">'Py'</span>\n>>> word[<span class=\"hljs-number\">4</span>:]   # 위치 <span class=\"hljs-number\">4</span>부터 (포함) 끝까지의 문자\n<span class=\"hljs-string\">'on'</span>\n>>> word[-<span class=\"hljs-number\">2</span>:]  # 끝에서 두 번째부터 (포함) 끝까지의 문자\n<span class=\"hljs-string\">'on'</span>\n>>> word[:<span class=\"hljs-number\">2</span>] + word[<span class=\"hljs-number\">2</span>:]\n<span class=\"hljs-string\">'Python'</span>\n>>> word[:<span class=\"hljs-number\">4</span>] + word[<span class=\"hljs-number\">4</span>:]\n<span class=\"hljs-string\">'Python'</span>\n>>> word[<span class=\"hljs-number\">4</span>:<span class=\"hljs-number\">42</span>]\n<span class=\"hljs-string\">'on'</span>\n>>> word[<span class=\"hljs-number\">42</span>:]\n<span class=\"hljs-string\">''</span>\n>>> word[<span class=\"hljs-number\">42</span>]  # 단어는 <span class=\"hljs-number\">6</span>개의 문자만 있습니다\n<span class=\"hljs-title class_\">Traceback</span> (most recent call last):\n  <span class=\"hljs-title class_\">File</span> <span class=\"hljs-string\">\"&#x3C;stdin>\"</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &#x3C;<span class=\"hljs-variable language_\">module</span>>\n<span class=\"hljs-title class_\">IndexError</span>: string index out <span class=\"hljs-keyword\">of</span> range\n</code></pre>\n<h2>참고 및 얕은 복사</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>보통의 할당은 참조를 할당합니다.</p>\n<pre><code class=\"hljs language-js\">>>> rgb = [<span class=\"hljs-string\">\"Red\"</span>, <span class=\"hljs-string\">\"Green\"</span>, <span class=\"hljs-string\">\"Blue\"</span>]\n>>> rgba = rgb\n>>> <span class=\"hljs-title function_\">id</span>(rgb) == <span class=\"hljs-title function_\">id</span>(rgba)  # 같은 객체를 참조합니다\n<span class=\"hljs-title class_\">True</span>\n>>> rgba.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">\"Alph\"</span>)\n>>> rgb\n[<span class=\"hljs-string\">\"Red\"</span>, <span class=\"hljs-string\">\"Green\"</span>, <span class=\"hljs-string\">\"Blue\"</span>, <span class=\"hljs-string\">\"Alph\"</span>]\n</code></pre>\n<p>하지만 = 와 [:] 를 사용하면 얕은 복사가 됩니다.</p>\n<pre><code class=\"hljs language-js\">>>> correct_rgba = rgba[:]\n>>> correct_rgba[-<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"Alpha\"</span>\n>>> correct_rgba\n[<span class=\"hljs-string\">\"Red\"</span>, <span class=\"hljs-string\">\"Green\"</span>, <span class=\"hljs-string\">\"Blue\"</span>, <span class=\"hljs-string\">\"Alpha\"</span>]\n>>> rgba\n[<span class=\"hljs-string\">\"Red\"</span>, <span class=\"hljs-string\">\"Green\"</span>, <span class=\"hljs-string\">\"Blue\"</span>, <span class=\"hljs-string\">\"Alph\"</span>]\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>프로그래밍으로 나아가는 첫걸음</h1>\n<h2>더 짧은 피보나치 알고리즘</h2>\n<p>동일한 라인 할당을 사용하면 피보나치 알고리즘을 훨씬 더 짧게 작성할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">>>> a, b = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\n>>> <span class=\"hljs-keyword\">while</span> a &#x3C; <span class=\"hljs-number\">1000</span>:\n...     <span class=\"hljs-title function_\">print</span>(a, end=<span class=\"hljs-string\">','</span>)\n...     a, b = b, a+b\n...\n<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">21</span>,<span class=\"hljs-number\">34</span>,<span class=\"hljs-number\">55</span>,<span class=\"hljs-number\">89</span>,<span class=\"hljs-number\">144</span>,<span class=\"hljs-number\">233</span>,<span class=\"hljs-number\">377</span>,<span class=\"hljs-number\">610</span>,<span class=\"hljs-number\">987</span>,\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>print 문에서의 자동 공백 삽입</h2>\n<p>print 문을 사용할 때, 입력값들 사이에 자동으로 공백이 추가됩니다. 즉, '이것의 값은'과 'i' 사이에 자동으로 공백이 추가됩니다.</p>\n<pre><code class=\"hljs language-js\">>>> i = <span class=\"hljs-number\">256</span>*<span class=\"hljs-number\">256</span>\n>>> <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'이것의 값은'</span>, i)\n이것의 값은 <span class=\"hljs-number\">65536</span>\n</code></pre>\n<h1>제어 흐름 도구 더 알아보기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>For - Else Flow Control</h2>\n<p>If-Else에 대해 들어보셨나요? Kotlin에서 소수를 확인하는 것과 같이, 찾아낸 소수가 아닌 경우 멈출 수 있는 방법이 있습니다. 불리언 변수 <code>isPrime</code>를 false로 설정할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> (n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2.</span><span class=\"hljs-number\">.9</span>) { \n    <span class=\"hljs-keyword\">var</span> isPrime = <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">for</span> (x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span> until n) { \n        <span class=\"hljs-keyword\">if</span> (n % x == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"$n equals $x * ${n / x}\"</span>)\n            isPrime = <span class=\"hljs-literal\">false</span>\n            <span class=\"hljs-keyword\">break</span>\n        }\n    }\n    <span class=\"hljs-keyword\">if</span> (isPrime) {\n        <span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"$n is a prime number\"</span>)\n    } \n}\n</code></pre>\n<p>하지만 Python에서는 For-Else를 사용해 isPrime 변수를 생략할 수 있어요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">>>> <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>):\n...    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">2</span>, n):\n...       <span class=\"hljs-keyword\">if</span> n % x == <span class=\"hljs-number\">0</span>:\n...          <span class=\"hljs-title function_\">print</span>(n, <span class=\"hljs-string\">'equals'</span>, x, <span class=\"hljs-string\">'*'</span>, n<span class=\"hljs-comment\">//x)</span>\n...          <span class=\"hljs-keyword\">break</span>\n...    <span class=\"hljs-attr\">else</span>:\n...       <span class=\"hljs-title function_\">print</span>(n, <span class=\"hljs-string\">'is a prime number'</span>)\n\n<span class=\"hljs-number\">2</span> is a prime number\n<span class=\"hljs-number\">3</span> is a prime number\n<span class=\"hljs-number\">4</span> equals <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">5</span> is a prime number\n<span class=\"hljs-number\">6</span> equals <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">7</span> is a prime number\n<span class=\"hljs-number\">8</span> equals <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">9</span> equals <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">3</span>\n</code></pre>\n<h2>Pass Flow Control</h2>\n<p>The pass keyword is just to let Python know it’s doing nothing, than thinking it’s a syntax error</p>\n<pre><code class=\"hljs language-js\">>>> <span class=\"hljs-keyword\">while</span> <span class=\"hljs-title class_\">True</span>:\n...    pass  # <span class=\"hljs-title class_\">Busy</span>-wait <span class=\"hljs-keyword\">for</span> keyboard interrupt (<span class=\"hljs-title class_\">Ctrl</span>+C)\n\n>>> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyEmptyClass</span>:\n...    pass\n\n>>> def <span class=\"hljs-title function_\">initlog</span>(*args):\n...    pass   # <span class=\"hljs-title class_\">Remember</span> to implement <span class=\"hljs-variable language_\">this</span>!\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>Match Statements</h2>\n<p>파이썬에서 <code>match</code>는 C++이나 Java에서의 <code>switch</code>와 Kotlin의 <code>when</code>과 유사합니다. 그러나 이는 패턴 매칭과 언패킹 할당에서 더 강력합니다. 주어진 사전의 패턴을 매칭하고 결과를 변수에 언패킹할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">process_sequence</span>(seq):\n    match <span class=\"hljs-attr\">seq</span>:\n        <span class=\"hljs-keyword\">case</span> [<span class=\"hljs-string\">\"first\"</span>, (left, right), _, *rest]:\n            <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Matched pattern:\"</span>)\n            <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"First element: 'first'\"</span>)\n            <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Tuple: ({left}, {right})\"</span>)\n            <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Rest of the list: {rest}\"</span>)\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">_</span>:\n            <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"No match found\"</span>)\n\n# <span class=\"hljs-title class_\">Example</span> sequences\nsequence1 = [<span class=\"hljs-string\">\"first\"</span>, (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]\nsequence2 = [<span class=\"hljs-string\">\"first\"</span>, (<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>), <span class=\"hljs-string\">\"x\"</span>, <span class=\"hljs-string\">\"y\"</span>, <span class=\"hljs-string\">\"z\"</span>]\nsequence3 = [<span class=\"hljs-string\">\"second\"</span>, (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n# <span class=\"hljs-title class_\">Process</span> sequences\n<span class=\"hljs-title function_\">process_sequence</span>(sequence1)\n<span class=\"hljs-title function_\">process_sequence</span>(sequence2)\n<span class=\"hljs-title function_\">process_sequence</span>(sequence3)\n</code></pre>\n<p>결과는 아래와 같습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">일치하는 패턴:\n첫 번째 요소: <span class=\"hljs-string\">'first'</span>\n튜플: (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n나머지 목록: [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]\n일치하는 패턴:\n첫 번째 요소: <span class=\"hljs-string\">'first'</span>\n튜플: (<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>)\n나머지 목록: [<span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'z'</span>]\n일치하는 항목이 없습니다\n</code></pre>\n<p>이 스마트한 패턴 매칭은 데이터 추출 로직을 효과적으로 처리했습니다. 더 많은 통찰을 위해 PEP646 튜토리얼을 참조해보세요.</p>\n<h2>함수 매개변수 제어</h2>\n<p>이전 언어에서는 함수의 매개변수가 엄격히 위치에 따라 정해졌습니다. 최신 언어에서는 매개변수를 키워드로 할당하고 위치 요구 사항을 무시할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파이썬은 개발자들이 원하는 대로 선택할 수 있게 해줘요.</p>\n<pre><code class=\"hljs language-js\">#############################\n## 기본값: 위치 및 키워드 모두 허용\n#############################\n>>> def <span class=\"hljs-title function_\">standard_arg</span>(arg):\n...    <span class=\"hljs-title function_\">print</span>(arg)\n\n>>> <span class=\"hljs-title function_\">standard_arg</span>(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">2</span>\n\n>>> <span class=\"hljs-title function_\">standard_arg</span>(arg=<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">2</span>\n\n#############################\n## 위치 전용\n#############################\n>>> def <span class=\"hljs-title function_\">pos_only_arg</span>(arg, /):\n...    <span class=\"hljs-title function_\">print</span>(arg)\n\n>>> <span class=\"hljs-title function_\">pos_only_arg</span>(<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-number\">1</span>\n\n>>> <span class=\"hljs-title function_\">pos_only_arg</span>(arg=<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-title class_\">Traceback</span> (most recent call last):\n  <span class=\"hljs-title class_\">File</span> <span class=\"hljs-string\">\"&#x3C;stdin>\"</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &#x3C;<span class=\"hljs-variable language_\">module</span>>\n<span class=\"hljs-title class_\">TypeError</span>: <span class=\"hljs-title function_\">pos_only_arg</span>() got some positional-only <span class=\"hljs-variable language_\">arguments</span> passed <span class=\"hljs-keyword\">as</span> keyword <span class=\"hljs-attr\">arguments</span>: <span class=\"hljs-string\">'arg'</span>\n\n#############################\n## 키워드 전용\n#############################\n>>> def <span class=\"hljs-title function_\">kwd_only_arg</span>(*, arg):\n...    <span class=\"hljs-title function_\">print</span>(arg)\n\n>>> <span class=\"hljs-title function_\">kwd_only_arg</span>(<span class=\"hljs-number\">3</span>)\n<span class=\"hljs-title class_\">Traceback</span> (most recent call last):\n  <span class=\"hljs-title class_\">File</span> <span class=\"hljs-string\">\"&#x3C;stdin>\"</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &#x3C;<span class=\"hljs-variable language_\">module</span>>\n<span class=\"hljs-title class_\">TypeError</span>: <span class=\"hljs-title function_\">kwd_only_arg</span>() takes <span class=\"hljs-number\">0</span> positional <span class=\"hljs-variable language_\">arguments</span> but <span class=\"hljs-number\">1</span> was given\n\n>>> <span class=\"hljs-title function_\">kwd_only_arg</span>(arg=<span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">3</span>\n\n#############################\n## 결합된 키워드 및 위치\n#############################\n\n>>> def <span class=\"hljs-title function_\">combined_example</span>(pos_only, /, standard, *, kwd_only):\n...    <span class=\"hljs-title function_\">print</span>(pos_only, standard, kwd_only)\n\n>>> <span class=\"hljs-title function_\">combined_example</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-title class_\">Traceback</span> (most recent call last):\n  <span class=\"hljs-title class_\">File</span> <span class=\"hljs-string\">\"&#x3C;stdin>\"</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &#x3C;<span class=\"hljs-variable language_\">module</span>>\n<span class=\"hljs-title class_\">TypeError</span>: <span class=\"hljs-title function_\">combined_example</span>() takes <span class=\"hljs-number\">2</span> positional <span class=\"hljs-variable language_\">arguments</span> but <span class=\"hljs-number\">3</span> were given\n\n>>> <span class=\"hljs-title function_\">combined_example</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, kwd_only=<span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>\n\n>>> <span class=\"hljs-title function_\">combined_example</span>(<span class=\"hljs-number\">1</span>, standard=<span class=\"hljs-number\">2</span>, kwd_only=<span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>\n\n>>> <span class=\"hljs-title function_\">combined_example</span>(pos_only=<span class=\"hljs-number\">1</span>, standard=<span class=\"hljs-number\">2</span>, kwd_only=<span class=\"hljs-number\">3</span>)\n<span class=\"hljs-title class_\">Traceback</span> (most recent call last):\n  <span class=\"hljs-title class_\">File</span> <span class=\"hljs-string\">\"&#x3C;stdin>\"</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &#x3C;<span class=\"hljs-variable language_\">module</span>>\n<span class=\"hljs-title class_\">TypeError</span>: <span class=\"hljs-title function_\">combined_example</span>() got some positional-only <span class=\"hljs-variable language_\">arguments</span> passed <span class=\"hljs-keyword\">as</span> keyword <span class=\"hljs-attr\">arguments</span>: <span class=\"hljs-string\">'pos_only'</span>\n</code></pre>\n<h2>임의 매개변수 뒤에 매개변수</h2>\n<p>C++, Java 및 Kotlin에서 임의 매개변수를 허용하지만, 그 뒤에 가능한 고정 매개변수를 누가 상상할까요?</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>하지만 Python으로는 아래와 같이 가능합니다. 여기서 sep은 임의의 매개변수 뒤에 고정된 매개변수입니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">concat</span>(<span class=\"hljs-params\">*args, sep=<span class=\"hljs-string\">\"/\"</span></span>):\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-keyword\">return</span> sep.join(args)\n\n<span class=\"hljs-meta\">>>> </span>concat(<span class=\"hljs-string\">\"earth\"</span>, <span class=\"hljs-string\">\"mars\"</span>, <span class=\"hljs-string\">\"venus\"</span>)\n<span class=\"hljs-string\">'earth/mars/venus'</span>\n<span class=\"hljs-meta\">>>> </span>concat(<span class=\"hljs-string\">\"earth\"</span>, <span class=\"hljs-string\">\"mars\"</span>, <span class=\"hljs-string\">\"venus\"</span>, sep=<span class=\"hljs-string\">\".\"</span>)\n<span class=\"hljs-string\">'earth.mars.venus'</span>\n</code></pre>\n<h2>JSON 처리 함수 매개변수</h2>\n<p>함수에 JSON을 제공하고 모든 것을 처리할 수 있다면 멋지지 않을까요?</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파이썬을 사용하면 함수 매개변수로 보내는 변수에 **를 사용하여 가능합니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">testing</span>(<span class=\"hljs-params\">voltage, state=<span class=\"hljs-string\">'a stiff'</span>, action=<span class=\"hljs-string\">'voom'</span></span>):\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"action =\"</span>, action)\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"voltage =\"</span>, voltage)\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"state =\"</span>, state)\n\n<span class=\"hljs-meta\">>>> </span>d = {<span class=\"hljs-string\">\"voltage\"</span>: <span class=\"hljs-string\">\"four million\"</span>, <span class=\"hljs-string\">\"state\"</span>: <span class=\"hljs-string\">\"bleedin' demised\"</span>, <span class=\"hljs-string\">\"action\"</span>: <span class=\"hljs-string\">\"VOOM\"</span>}\n<span class=\"hljs-meta\">>>> </span>testing(**d)\n\naction = VOOM\nvoltage = four million\nstate = bleedin<span class=\"hljs-string\">' demised\n</span></code></pre>\n<h2>람다: 한 줄 함수</h2>\n<p>우리는 Java 8 및 Kotlin에서 Lambda에 대해 배웠지만, lambda 키워드는 사용되지 않았습니다. 대신 Lambda로 함수 포인터가 보내지고, 일반적으로 그 함수를 정의해야 했습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파이썬에서는 lambda 키워드를 사용하여 해당 함수를 정의할 수 있어요</p>\n<p>예시</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">getKey</span>(pair):\n    <span class=\"hljs-keyword\">return</span> pair[<span class=\"hljs-number\">1</span>]\n\n# 같은 효과를 내는 코드입니다    \ngetKey_lambda = lambda <span class=\"hljs-attr\">pair</span>: pair[<span class=\"hljs-number\">1</span>]\n</code></pre>\n<p>다음과 같이 간단한 사용 사례가 있어요. 람다 함수를 별도로 정의할 필요가 없는 경우입니다</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">>>> # 튜플 리스트\n>>> pairs = [(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'one'</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'two'</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'three'</span>), (<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">'four'</span>)]\n\n>>> # 각 튜플의 두 번째 요소를 기준으로 리스트 정렬하기 (람다 사용)\n>>> pairs.<span class=\"hljs-title function_\">sort</span>(key=lambda <span class=\"hljs-attr\">pair</span>: pair[<span class=\"hljs-number\">1</span>])\n\n>>> <span class=\"hljs-title function_\">print</span>(pairs)\n[(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">'four'</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'one'</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'three'</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'two'</span>)]\n</code></pre>\n<h2>함수 설명서 출력하기</h2>\n<p>일반적으로 주석은 프로그래밍 코드의 일부가 아닙니다. 그러나 Python에서는 함수.__doc__을 사용하여 함수 설명서를 출력할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">>>> def <span class=\"hljs-title function_\">my_function</span>():\n...    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"아무것도 하지 않지만 문서화합니다.\n...\n...    정말로, 아무것도 실행하지 않습니다.\n...    \"</span><span class=\"hljs-string\">\"\"</span>\n...    pass\n\n>>> <span class=\"hljs-title function_\">print</span>(my_function.<span class=\"hljs-property\">__doc__</span>)\n아무것도 하지 않지만 문서화합니다.\n\n    정말로, 아무것도 실행하지 않습니다.\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>하지만 매개변수만 알고 싶다면 .__annotations__를 사용할 수 있어요.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">ham: <span class=\"hljs-built_in\">str</span>, eggs: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">'eggs'</span></span>) -> <span class=\"hljs-built_in\">str</span>:\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Annotations:\"</span>, f.__annotations__)\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Arguments:\"</span>, ham, eggs)\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-keyword\">return</span> ham + <span class=\"hljs-string\">' and '</span> + eggs\n\n<span class=\"hljs-meta\">>>> </span>f(<span class=\"hljs-string\">'spam'</span>)\nAnnotations: {<span class=\"hljs-string\">'ham'</span>: &#x3C;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'str'</span>>, <span class=\"hljs-string\">'return'</span>: &#x3C;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'str'</span>>, <span class=\"hljs-string\">'eggs'</span>: &#x3C;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'str'</span>>}\nArguments: spam eggs\n<span class=\"hljs-string\">'spam and eggs'</span>\n</code></pre>\n<h1>데이터 구조</h1>\n<h2>리스트 내포</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>코드를 훨씬 간략하게 만들어주는 목록 내 항목을 이해해요.</p>\n<pre><code class=\"hljs language-js\">>>> squares = [x**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">10</span>)]\n>>> <span class=\"hljs-title function_\">print</span>(squares)\n[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">81</span>]\n\n>>> [(x, y) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>] <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>] <span class=\"hljs-keyword\">if</span> x != y]\n[(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)]\n</code></pre>\n<p>이를 통해 우리는 리스트를 변환하거나 필터링하는 등 알고리즘 함수를 수행할 수 있어요. 예를 들어,</p>\n<pre><code class=\"hljs language-js\">>>> vec = [-<span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]\n>>> # 값이 두 배인 새 리스트 생성\n>>> [x*<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> vec]\n[-<span class=\"hljs-number\">8</span>, -<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>]\n\n>>> # 음수를 제외한 리스트 필터링\n>>> [x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> vec <span class=\"hljs-keyword\">if</span> x >= <span class=\"hljs-number\">0</span>]\n[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>콤마 할당은 튜플을 만듭니다</h2>\n<p>할당 뒤에 쉼표(,)를 추가하면 전체 할당이 튜플 유형이 됩니다.</p>\n<pre><code class=\"hljs language-js\">>>> noComma = <span class=\"hljs-string\">'안녕하세요'</span>\n>>> withComma = <span class=\"hljs-string\">'안녕하세요'</span>,\n\n>>> <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">len</span>(noComma))\n<span class=\"hljs-number\">5</span>\n>>> <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">len</span>(withComma))\n<span class=\"hljs-number\">1</span>\n\n>>> <span class=\"hljs-title function_\">print</span>(noComma)\n안녕하세요\n>>> <span class=\"hljs-title function_\">print</span>(withComma)\n(<span class=\"hljs-string\">'안녕하세요'</span>,)\n</code></pre>\n<h2>튜플 언패킹</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>튜플에서의 역 언패킹 할당은 가능합니다.</p>\n<pre><code class=\"hljs language-js\">>>> # 튜플 만들기\n>>> t = <span class=\"hljs-number\">12345</span>, <span class=\"hljs-number\">54321</span>, <span class=\"hljs-string\">'hello!'</span>\n\n>>> # 튜플을 <span class=\"hljs-number\">3</span>개의 변수로 언패킹 (튜플의 크기와 정확히 일치해야 함)\n>>> x, y, z = t\n</code></pre>\n<h2>집합: 고유한 목록</h2>\n<p>중복을 없애는 리스트와 유사합니다. 꺽은 괄호 <code>{}</code>를 사용합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">>>> a = <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'abracadabra'</span>)\n>>> b = <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'alacazam'</span>)\n>>> a                                  # a 안의 고유한 문자\n{<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'r'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>}\n>>> a - b                              # a에만 있는 문자\n{<span class=\"hljs-string\">'r'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'b'</span>}\n>>> a | b                              # a나 b 또는 둘 다에 있는 문자\n{<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'r'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'m'</span>, <span class=\"hljs-string\">'z'</span>, <span class=\"hljs-string\">'l'</span>}\n>>> a &#x26; b                              # a와 b에 모두 있는 문자\n{<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>}\n>>> a ^ b                              # a나 b에만 있는 문자\n{<span class=\"hljs-string\">'r'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'m'</span>, <span class=\"hljs-string\">'z'</span>, <span class=\"hljs-string\">'l'</span>}\n</code></pre>\n<p>이것이 사전의 기초를 이룹니다.</p>\n<h2>문자열 불리언 비교</h2>\n<p>파이썬에서는 문자열을 비교하여 결과로 참/거짓 값을 얻을 수 있으며, 결과는 불리언으로 평가된 마지막 변수를 반환합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">>>> string1, string2, string3 = <span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Trondheim'</span>, <span class=\"hljs-string\">'Hammer Dance'</span>\n>>> non_null = string1 or string2 or string3\n>>> # <span class=\"hljs-string\">'Trondheim'</span>가 출력됩니다. 첫 번째로 <span class=\"hljs-literal\">true</span>를 반환한 <span class=\"hljs-variable constant_\">OR</span> 연산자\n>>> <span class=\"hljs-title function_\">print</span>(non_null)\n<span class=\"hljs-string\">'Trondheim'</span>\n\n\n>>> string1, string2, string3 = <span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Trondheim'</span>, <span class=\"hljs-string\">'Hammer Dance'</span>\n>>> non_null = string1 and string2 and string3\n>>> # 빈 문자열이 하나라도 있으면 아무것도 출력되지 않습니다\n>>> <span class=\"hljs-title function_\">print</span>(non_null) \n\n\n>>> string1, string2, string3 = <span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Trondheim'</span>, <span class=\"hljs-string\">'Hammer Dance'</span>\n>>> non_null = string1 and string2 and string3\n>>> # <span class=\"hljs-string\">'Hammer Dance'</span>가 출력됩니다. <span class=\"hljs-literal\">true</span>를 반환하는 마지막 <span class=\"hljs-variable constant_\">AND</span> 연산자\n>>> <span class=\"hljs-title function_\">print</span>(non_null)\n<span class=\"hljs-title class_\">Hammer</span> <span class=\"hljs-title class_\">Dance</span>\n</code></pre>\n<h1>입력과 출력</h1>\n<h2>“=”를 사용하여 print 출력 결과 포맷팅하기</h2>\n<pre><code class=\"hljs language-js\">>>> bugs = <span class=\"hljs-string\">'roaches'</span>\n>>> count = <span class=\"hljs-number\">13</span>\n>>> area = <span class=\"hljs-string\">'living room'</span>\n>>> <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">'Debugging {bugs=} {count=} {area=}'</span>)\n<span class=\"hljs-title class_\">Debugging</span> bugs=<span class=\"hljs-string\">'roaches'</span> count=<span class=\"hljs-number\">13</span> area=<span class=\"hljs-string\">'living room'</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>클래스</h1>\n<h2>데이터 멤버는 외부에서 생성할 수 있습니다</h2>\n<p>데이터 멤버는 클래스 외부에서 생성하고 삭제할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">>>> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n...    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"간단한 예제 클래스\"</span><span class=\"hljs-string\">\"\"</span>\n...    def <span class=\"hljs-title function_\">f</span>(self):\n...        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello world'</span>\n\n>>> x = <span class=\"hljs-title class_\">MyClass</span>()        \n>>> x.<span class=\"hljs-property\">counter</span> = <span class=\"hljs-number\">1</span>\n>>> <span class=\"hljs-title function_\">print</span>(x.<span class=\"hljs-property\">counter</span>)\n<span class=\"hljs-number\">1</span>\n\n>>> del x.<span class=\"hljs-property\">counter</span>\n\n>>> <span class=\"hljs-attr\">try</span>:\n...    <span class=\"hljs-title function_\">print</span>(x.<span class=\"hljs-property\">counter</span>)\n... <span class=\"hljs-attr\">except</span>:\n...    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"x.counter가 더 이상 존재하지 않습니다\"</span>)\nx.<span class=\"hljs-property\">counter</span>가 더 이상 존재하지 않습니다\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 도움이 되었으면 좋겣습니다! AI를 배우기 시작할 수 있는 프로그래밍 언어인 Python을 즐겁게 배우세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}