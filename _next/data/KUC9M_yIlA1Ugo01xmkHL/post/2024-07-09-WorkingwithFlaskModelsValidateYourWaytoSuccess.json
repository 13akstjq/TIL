{"pageProps":{"post":{"title":"Flask 모델 작업 성공을 위한 유효성 검사 방법","description":"","date":"2024-07-09 14:53","slug":"2024-07-09-WorkingwithFlaskModelsValidateYourWaytoSuccess","content":"\n\n알다시피, Flask는 간단하고 유연성이 뛰어난 Python의 인기 웹 프레임워크입니다. Flask를 사용하여 애플리케이션을 개발할 때 데이터를 나타내는 방법으로 모델을 사용해야 합니다. 이 블로그에서는 Flask에서 모델을 작성하고 데이터 유효성 검사에 @validates 데코레이터를 사용하는 방법을 탐구해보겠습니다.\n\nSQLAlchemy로 Flask 설정하기\n\n시작하려면 Flask와 SQLAlchemy를 설정해야 합니다. SQLAlchemy는 Flask에서 데이터베이스 작업을 쉽게 할 수 있도록 해주는 강력한 ORM(객체 관계 매퍼)입니다. 필요한 패키지를 설치하고 Flask 애플리케이션을 설정하는 방법부터 시작해봅시다.\n\n```js\n# 서버/app.py 파일에서\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 설정에서는 Flask 애플리케이션을 생성하고 'app.db'라는 SQLite 데이터베이스를 사용하도록 구성하며, SQLAlchemy는 Flask 앱과 함께 초기화됩니다.\n\n기본 모델 생성\n\n다음으로, 애플리케이션에서 데이터를 나타내는 기본 모델을 만들어 보겠습니다. id, username 및 email 필드가 있는 간단한 User 모델을 정의해 보겠습니다.\n\n```js\nclass User(db.Model):\n    __tablename__='users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\n    def __repr__(self):\n        return f'<User {self.username}>'\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 예시에서는 사용자 클래스를 정의했습니다. 이 클래스는 db.Model을 상속하며, 데이터베이스에서 'users'라는 테이블을 생성합니다. 이 테이블은 세 개의 열(id, username, email)을 가지고 있습니다. id는 정수를 취하며 기본 키이므로 자체 증가하며, username은 최대 80자의 문자열을 취하며 고유해야하고 비워둘 수 없습니다. 이메일 열은 username과 같이 작동하지만 120자를 취합니다. 또한 모델 인스턴스의 문자열 표현을 제공하는 __repr__ 메서드도 추가했습니다. 다음 섹션에서는 이러한 데이터 유형에 더 많은 제한을 설정하는 방법에 대해 더 자세히 설명하겠습니다.\n\n필드 유효성 검사를 위해 @validates 사용\n\n유효성 검사는 데이터베이스에 추가되는 데이터의 무결성을 보장하기 위해 중요합니다. Flask-SQLAlchemy는 데이터가 데이터베이스에 쓰여지기 전에 데이터 필드를 유효성 검사할 수 있도록 하는 @validates 데코레이터를 제공합니다. 사용자 모델에 유효성 검사를 추가해봅시다.\n\n```python\nfrom sqlalchemy.orm import validates\n\nclass User(db.Model):\n\n    __tablename__='users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\n    @validates('username')\n    def validate_username(self, key, username):\n        if not username:\n            raise ValueError(\"Username cannot be empty\")\n        if len(username) < 3:\n            raise ValueError(\"Username must be at least 3 characters long\")\n        return username\n\n    @validates('email')\n    def validate_email(self, key, email):\n        if '@' not in email:\n            raise ValueError(\"Invalid email address\")\n        return email\n\n    def __repr__(self):\n        return f'<User {self.username}>'\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 예시에서는 username과 email 필드에 대한 유효성 검사 방법을 추가하는 @validates 데코레이터를 사용합니다. validate_user 함수에서 \"if not username:\"를 사용하여 User 테이블에 새 인스턴스 데이터가 추가될 때 username이 있는지 확인합니다. 만약 없다면 ValueError를 발생시킵니다. 이 함수에서 \"if len(username) ` 3\"을 사용하여 username이 적어도 3자 이상이어야 하며 그렇지 않으면 다른 ValueError를 발생시킵니다. 두 번째 유효성 검사인 validate_email에서는 주어진 이메일이 적어도 `@` 기호를 포함해야 유효하다고 확인하고 있습니다.\n\n레코드 생성 및 유효성 검사\n\n이제 모델과 유효성 검사가 준비되었으므로 테스트해 보겠습니다. 새 레코드를 만들고 사용자를 데이터베이스에 추가할 때 발생하는 유효성 오류를 처리하는 방법을 보여드리겠습니다.\n\n```js\n#server/app.py\n@app.route('/add_user')\ndef add_user():\n    try:\n        new_user = User(username='js', email='jsmith@example.com')\n        db.session.add(new_user)\n        db.session.commit()\n        return \"사용자가 성공적으로 추가되었습니다!\"\n    except ValueError as e:\n        return str(e)\n\nif __name__ == '__main__':\n    db.create_all()\n    app.run(debug=True)\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 예시에서는 유효하지 않은 사용자 이름(`js`)으로 새 사용자를 추가하려고 시도합니다. 유효성 검사 로직에서 문제를 감지하면 ValueError가 발생합니다. 이 예외를 처리하고 적절한 오류 메시지를 반환하여 데이터베이스에 유효한 데이터만 추가되도록 합니다. 이 방법을 통해 데이터 무결성을 유지하고 잘못된 항목을 방지할 수 있습니다.\n\n결론\n\n총론적으로, 이 블로그가 Python Flask 코드에서 @validates 데코레이터가 어떻게 작동하는지 더 잘 알 수 있도록 도움이 되었으면 좋겠습니다. 모델 설정, 유효성 검사 구현, 오류 처리, 고급 유효성 검사 기법 탐색을 통해 Flask 애플리케이션이 데이터 무결성을 유지하고 비즈니스 규칙을 준수하도록 할 수 있습니다. 이러한 도구를 활용하면 견고하고 신뢰할 수 있는 웹 애플리케이션을 만들 수 있습니다.","ogImage":{"url":"/TIL/assets/no-image.jpg"},"coverImage":"/TIL/assets/no-image.jpg","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>알다시피, Flask는 간단하고 유연성이 뛰어난 Python의 인기 웹 프레임워크입니다. Flask를 사용하여 애플리케이션을 개발할 때 데이터를 나타내는 방법으로 모델을 사용해야 합니다. 이 블로그에서는 Flask에서 모델을 작성하고 데이터 유효성 검사에 @validates 데코레이터를 사용하는 방법을 탐구해보겠습니다.</p>\n<p>SQLAlchemy로 Flask 설정하기</p>\n<p>시작하려면 Flask와 SQLAlchemy를 설정해야 합니다. SQLAlchemy는 Flask에서 데이터베이스 작업을 쉽게 할 수 있도록 해주는 강력한 ORM(객체 관계 매퍼)입니다. 필요한 패키지를 설치하고 Flask 애플리케이션을 설정하는 방법부터 시작해봅시다.</p>\n<pre><code class=\"hljs language-js\"># 서버/app.<span class=\"hljs-property\">py</span> 파일에서\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Flask</span>\n<span class=\"hljs-keyword\">from</span> flask_sqlalchemy <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">SQLAlchemy</span>\n\napp = <span class=\"hljs-title class_\">Flask</span>(__name__)\napp.<span class=\"hljs-property\">config</span>[<span class=\"hljs-string\">'SQLALCHEMY_DATABASE_URI'</span>] = <span class=\"hljs-string\">'sqlite:///app.db'</span>\napp.<span class=\"hljs-property\">config</span>[<span class=\"hljs-string\">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class=\"hljs-title class_\">False</span>\n\ndb = <span class=\"hljs-title class_\">SQLAlchemy</span>(app)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 설정에서는 Flask 애플리케이션을 생성하고 'app.db'라는 SQLite 데이터베이스를 사용하도록 구성하며, SQLAlchemy는 Flask 앱과 함께 초기화됩니다.</p>\n<p>기본 모델 생성</p>\n<p>다음으로, 애플리케이션에서 데이터를 나타내는 기본 모델을 만들어 보겠습니다. id, username 및 email 필드가 있는 간단한 User 모델을 정의해 보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>(db.<span class=\"hljs-property\">Model</span>):\n    __tablename__=<span class=\"hljs-string\">'users'</span>\n\n    id = db.<span class=\"hljs-title class_\">Column</span>(db.<span class=\"hljs-property\">Integer</span>, primary_key=<span class=\"hljs-title class_\">True</span>)\n    username = db.<span class=\"hljs-title class_\">Column</span>(db.<span class=\"hljs-title class_\">String</span>(<span class=\"hljs-number\">80</span>), unique=<span class=\"hljs-title class_\">True</span>, nullable=<span class=\"hljs-title class_\">False</span>)\n    email = db.<span class=\"hljs-title class_\">Column</span>(db.<span class=\"hljs-title class_\">String</span>(<span class=\"hljs-number\">120</span>), unique=<span class=\"hljs-title class_\">True</span>, nullable=<span class=\"hljs-title class_\">False</span>)\n\n    def <span class=\"hljs-title function_\">__repr__</span>(self):\n        <span class=\"hljs-keyword\">return</span> f<span class=\"hljs-string\">'&#x3C;User {self.username}>'</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 예시에서는 사용자 클래스를 정의했습니다. 이 클래스는 db.Model을 상속하며, 데이터베이스에서 'users'라는 테이블을 생성합니다. 이 테이블은 세 개의 열(id, username, email)을 가지고 있습니다. id는 정수를 취하며 기본 키이므로 자체 증가하며, username은 최대 80자의 문자열을 취하며 고유해야하고 비워둘 수 없습니다. 이메일 열은 username과 같이 작동하지만 120자를 취합니다. 또한 모델 인스턴스의 문자열 표현을 제공하는 <strong>repr</strong> 메서드도 추가했습니다. 다음 섹션에서는 이러한 데이터 유형에 더 많은 제한을 설정하는 방법에 대해 더 자세히 설명하겠습니다.</p>\n<p>필드 유효성 검사를 위해 @validates 사용</p>\n<p>유효성 검사는 데이터베이스에 추가되는 데이터의 무결성을 보장하기 위해 중요합니다. Flask-SQLAlchemy는 데이터가 데이터베이스에 쓰여지기 전에 데이터 필드를 유효성 검사할 수 있도록 하는 @validates 데코레이터를 제공합니다. 사용자 모델에 유효성 검사를 추가해봅시다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sqlalchemy.orm <span class=\"hljs-keyword\">import</span> validates\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>(db.Model):\n\n    __tablename__=<span class=\"hljs-string\">'users'</span>\n\n    <span class=\"hljs-built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"hljs-literal\">True</span>)\n    username = db.Column(db.String(<span class=\"hljs-number\">80</span>), unique=<span class=\"hljs-literal\">True</span>, nullable=<span class=\"hljs-literal\">False</span>)\n    email = db.Column(db.String(<span class=\"hljs-number\">120</span>), unique=<span class=\"hljs-literal\">True</span>, nullable=<span class=\"hljs-literal\">False</span>)\n\n<span class=\"hljs-meta\">    @validates(<span class=\"hljs-params\"><span class=\"hljs-string\">'username'</span></span>)</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">validate_username</span>(<span class=\"hljs-params\">self, key, username</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> username:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">\"Username cannot be empty\"</span>)\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(username) &#x3C; <span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">\"Username must be at least 3 characters long\"</span>)\n        <span class=\"hljs-keyword\">return</span> username\n\n<span class=\"hljs-meta\">    @validates(<span class=\"hljs-params\"><span class=\"hljs-string\">'email'</span></span>)</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">validate_email</span>(<span class=\"hljs-params\">self, key, email</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'@'</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> email:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">\"Invalid email address\"</span>)\n        <span class=\"hljs-keyword\">return</span> email\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f'&#x3C;User <span class=\"hljs-subst\">{self.username}</span>>'</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 예시에서는 username과 email 필드에 대한 유효성 검사 방법을 추가하는 @validates 데코레이터를 사용합니다. validate_user 함수에서 \"if not username:\"를 사용하여 User 테이블에 새 인스턴스 데이터가 추가될 때 username이 있는지 확인합니다. 만약 없다면 ValueError를 발생시킵니다. 이 함수에서 \"if len(username) <code>3\"을 사용하여 username이 적어도 3자 이상이어야 하며 그렇지 않으면 다른 ValueError를 발생시킵니다. 두 번째 유효성 검사인 validate_email에서는 주어진 이메일이 적어도</code>@` 기호를 포함해야 유효하다고 확인하고 있습니다.</p>\n<p>레코드 생성 및 유효성 검사</p>\n<p>이제 모델과 유효성 검사가 준비되었으므로 테스트해 보겠습니다. 새 레코드를 만들고 사용자를 데이터베이스에 추가할 때 발생하는 유효성 오류를 처리하는 방법을 보여드리겠습니다.</p>\n<pre><code class=\"hljs language-js\">#server/app.<span class=\"hljs-property\">py</span>\n@app.<span class=\"hljs-title function_\">route</span>(<span class=\"hljs-string\">'/add_user'</span>)\ndef <span class=\"hljs-title function_\">add_user</span>():\n    <span class=\"hljs-attr\">try</span>:\n        new_user = <span class=\"hljs-title class_\">User</span>(username=<span class=\"hljs-string\">'js'</span>, email=<span class=\"hljs-string\">'jsmith@example.com'</span>)\n        db.<span class=\"hljs-property\">session</span>.<span class=\"hljs-title function_\">add</span>(new_user)\n        db.<span class=\"hljs-property\">session</span>.<span class=\"hljs-title function_\">commit</span>()\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"사용자가 성공적으로 추가되었습니다!\"</span>\n    except <span class=\"hljs-title class_\">ValueError</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">e</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">str</span>(e)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    db.<span class=\"hljs-title function_\">create_all</span>()\n    app.<span class=\"hljs-title function_\">run</span>(debug=<span class=\"hljs-title class_\">True</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 예시에서는 유효하지 않은 사용자 이름(<code>js</code>)으로 새 사용자를 추가하려고 시도합니다. 유효성 검사 로직에서 문제를 감지하면 ValueError가 발생합니다. 이 예외를 처리하고 적절한 오류 메시지를 반환하여 데이터베이스에 유효한 데이터만 추가되도록 합니다. 이 방법을 통해 데이터 무결성을 유지하고 잘못된 항목을 방지할 수 있습니다.</p>\n<p>결론</p>\n<p>총론적으로, 이 블로그가 Python Flask 코드에서 @validates 데코레이터가 어떻게 작동하는지 더 잘 알 수 있도록 도움이 되었으면 좋겠습니다. 모델 설정, 유효성 검사 구현, 오류 처리, 고급 유효성 검사 기법 탐색을 통해 Flask 애플리케이션이 데이터 무결성을 유지하고 비즈니스 규칙을 준수하도록 할 수 있습니다. 이러한 도구를 활용하면 견고하고 신뢰할 수 있는 웹 애플리케이션을 만들 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}