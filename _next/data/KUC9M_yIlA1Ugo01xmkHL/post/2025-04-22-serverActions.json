{"pageProps":{"post":{"title":"2025년 Next.js 15 서버 액션(Server Actions) 사용 방법","description":"","date":"2025-04-22 13:25","slug":"2025-04-22-serverActions","content":"\n\n# serverActions\n\nNext.js에서 Server Actions(서버 액션)의 동작 방식을 설정할 수 있는 옵션들에 대해 이야기해볼게요.\n\n## allowedOrigins\n\n서버 액션이 호출될 수 있는 안전한 출처(origin) 도메인을 추가로 설정할 수 있는 옵션입니다. 이게 왜 필요하냐면, 서버 액션 요청이 들어올 때 그 요청의 출처(origin)를 호스트 도메인과 비교해서 일치하는지 확인해요. 이렇게 해서 CSRF(사이트 간 요청 위조) 공격을 막을 수 있죠.\n\n만약 이 옵션을 설정하지 않으면 기본적으로 ‘같은 출처’(same-origin)에서만 서버 액션이 허용됩니다. 즉, 내 도메인에서만 서버 액션을 호출할 수 있어요.\n\n**추가로 알아두면 좋은 점!**  \n- allowedOrigins를 적절히 설정하지 않으면, 의도한 외부 도메인에서 서버 액션을 호출하지 못할 수 있어요.  \n- 하지만 너무 많은 도메인을 허용하면 보안상 위험이 커질 수 있으니 꼭 필요한 도메인만 추가하는 게 좋아요.\n\n아래는 allowedOrigins 옵션을 설정하는 예시입니다.\n\n```js\nexport const serverActions = {\n  allowedOrigins: ['https://mytrusted.com', 'https://another-trusted-site.com'],\n};\n```\n\n이렇게 하면 `mytrusted.com`, `another-trusted-site.com`에서 오는 요청도 서버 액션을 실행할 수 있게 되겠죠!\n\n---\n\nNext.js의 Server Actions는 점점 더 중요해지고 있으니, 이런 보안 설정 하나하나 신경 써서 안전한 서비스를 만들어 봅시다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n/** @type {import('next').NextConfig} */\n \nmodule.exports = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],\n      bodySizeLimit: '3mb', // 예시로 3MB로 제한 설정\n    },\n  },\n}\n```\n\n---\n\n## bodySizeLimit 옵션 알아보기\n\nNext.js에서 Server Actions(서버 액션)을 사용할 때, 기본적으로 한 번에 보낼 수 있는 요청 바디(request body)의 최대 크기가 1MB로 제한되어 있어요. 이 제한은 서버 리소스가 과도하게 사용되는 걸 막고, 때로는 DDoS 공격 같은 악의적인 대량 요청으로부터 보호하기 위한 거랍니다.\n\n근데 가끔 데이터 양이 많아 1MB 제한을 넘겨야 할 때가 있잖아요? 예를 들어 이미지 같이 비교적 큰 파일을 보내거나, 여러 데이터를 한 번에 전송해야 할 때 말이죠. 이럴 때는 `serverActions.bodySizeLimit` 옵션을 통해 이 제한을 조정할 수 있어요.\n\n### 설정 방법\n\n- 바이트 단위 숫자 (예: 1000)\n- 문자열로 크기 표현 (예: `500kb`, `3mb` 등) — `bytes`라는 패키지가 지원하는 형식이에요.\n\n```js\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      bodySizeLimit: '5mb', // 최대 5MB까지 허용\n    },\n  },\n}\n```\n\n이렇게 설정하면, 5MB까지 데이터 전송이 가능해져서 보다 큰 요청도 서버 액션에서 처리할 수 있어요.\n\n### 주의할 점\n\n무턱대고 크기 제한을 늘리는 건 피하는 게 좋아요. 너무 크게 하면 서버가 무거워지고, 악성 의도한 대용량 요청에 취약해 질 수 있거든요. 꼭 필요한 경우에만 적절히 조절하고, 필요한 경우 요청을 여러 번에 나눠서 보내는 방법도 고려해 보세요.\n\n---\n\n서버 요청 크기 제한에 관해 종종 헷갈릴 수 있는데, 이렇게 설정해 두면 서버 액션이 좀 더 유연하게 데이터를 처리할 수 있어서 편리하답니다! 다음에는 이런 experimental 옵션 외에, 프로덕션 환경에서 안전성과 성능을 지키는 팁도 알려드릴게요~\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNext.js에서 Server Actions 설정하는 방법을 알려드릴게요!\n\n---\n\n### Server Actions 설정 (Next.js 13 버전 기준)\n\n최근 Next.js 14부터 Server Actions가 정식 기능으로 기본 활성화 되어 있는데요, 아직 13 버전을 사용 중이라면 직접 설정을 해줘야 합니다.\n\n예를 들어, `next.config.js` 파일에 아래처럼 `experimental.serverActions` 옵션을 `true`로 설정해주시면 돼요.\n\n```js\n/** @type {import('next').NextConfig} */\nconst config = {\n  experimental: {\n    serverActions: true,\n  },\n}\n\nmodule.exports = config\n```\n\n이 설정을 한 후에는 Server Actions를 사용할 수 있습니다.\n\n---\n\n### 참고: Next.js 14 이상에서는?\n\nNext.js 14부터는 Server Actions가 기본적으로 활성화 되어 별도의 설정이 필요 없답니다. 만약 기본 바디 사이즈 제한을 변경하고 싶다면 아래처럼 설정할 수 있어요.\n\n```js\n/** @type {import('next').NextConfig} */\n\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      bodySizeLimit: '2mb',\n    },\n  },\n}\n```\n\n이렇게 하면 서버 액션의 요청 바디 크기 제한을 조절할 수 있습니다.\n\n---\n\n### 제가 추가로 알려드릴 팁!\n\n- **Server Actions 란?**\n\n  서버 액션은 클라이언트에서 서버 함수 호출을 훨씬 쉽게 만들어주는 Next.js의 강력한 기능입니다.\n\n- **bodySizeLimit 설정이 중요한 이유**\n\n  서버에 보내는 데이터 양이 많아지면 기본 제한 때문에 오류가 발생할 수 있어요. 따라서 요청 크기에 따라 적절히 조절해 주는 게 좋아요.\n\n- **Next.js 버전 꼭 확인하기**\n\n  프로젝트 버전에 따라 설정 방법이 다르니, `package.json`에서 Next.js 버전을 꼭 확인하시고 알맞게 설정하세요.\n\n---\n\n필요한 설정을 빠르게 찾는 데 도움이 되었으면 좋겠습니다! Next.js Server Actions, 꼭 직접 사용해보시고 개발 효율을 올려보세요 :)","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>serverActions</h1>\n<p>Next.js에서 Server Actions(서버 액션)의 동작 방식을 설정할 수 있는 옵션들에 대해 이야기해볼게요.</p>\n<h2>allowedOrigins</h2>\n<p>서버 액션이 호출될 수 있는 안전한 출처(origin) 도메인을 추가로 설정할 수 있는 옵션입니다. 이게 왜 필요하냐면, 서버 액션 요청이 들어올 때 그 요청의 출처(origin)를 호스트 도메인과 비교해서 일치하는지 확인해요. 이렇게 해서 CSRF(사이트 간 요청 위조) 공격을 막을 수 있죠.</p>\n<p>만약 이 옵션을 설정하지 않으면 기본적으로 ‘같은 출처’(same-origin)에서만 서버 액션이 허용됩니다. 즉, 내 도메인에서만 서버 액션을 호출할 수 있어요.</p>\n<p><strong>추가로 알아두면 좋은 점!</strong></p>\n<ul>\n<li>allowedOrigins를 적절히 설정하지 않으면, 의도한 외부 도메인에서 서버 액션을 호출하지 못할 수 있어요.</li>\n<li>하지만 너무 많은 도메인을 허용하면 보안상 위험이 커질 수 있으니 꼭 필요한 도메인만 추가하는 게 좋아요.</li>\n</ul>\n<p>아래는 allowedOrigins 옵션을 설정하는 예시입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> serverActions = {\n  <span class=\"hljs-attr\">allowedOrigins</span>: [<span class=\"hljs-string\">'https://mytrusted.com'</span>, <span class=\"hljs-string\">'https://another-trusted-site.com'</span>],\n};\n</code></pre>\n<p>이렇게 하면 <code>mytrusted.com</code>, <code>another-trusted-site.com</code>에서 오는 요청도 서버 액션을 실행할 수 있게 되겠죠!</p>\n<hr>\n<p>Next.js의 Server Actions는 점점 더 중요해지고 있으니, 이런 보안 설정 하나하나 신경 써서 안전한 서비스를 만들어 봅시다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@type</span> {<span class=\"hljs-type\">import('next').NextConfig</span>} */</span>\n \n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">experimental</span>: {\n    <span class=\"hljs-attr\">serverActions</span>: {\n      <span class=\"hljs-attr\">allowedOrigins</span>: [<span class=\"hljs-string\">'my-proxy.com'</span>, <span class=\"hljs-string\">'*.my-proxy.com'</span>],\n      <span class=\"hljs-attr\">bodySizeLimit</span>: <span class=\"hljs-string\">'3mb'</span>, <span class=\"hljs-comment\">// 예시로 3MB로 제한 설정</span>\n    },\n  },\n}\n</code></pre>\n<hr>\n<h2>bodySizeLimit 옵션 알아보기</h2>\n<p>Next.js에서 Server Actions(서버 액션)을 사용할 때, 기본적으로 한 번에 보낼 수 있는 요청 바디(request body)의 최대 크기가 1MB로 제한되어 있어요. 이 제한은 서버 리소스가 과도하게 사용되는 걸 막고, 때로는 DDoS 공격 같은 악의적인 대량 요청으로부터 보호하기 위한 거랍니다.</p>\n<p>근데 가끔 데이터 양이 많아 1MB 제한을 넘겨야 할 때가 있잖아요? 예를 들어 이미지 같이 비교적 큰 파일을 보내거나, 여러 데이터를 한 번에 전송해야 할 때 말이죠. 이럴 때는 <code>serverActions.bodySizeLimit</code> 옵션을 통해 이 제한을 조정할 수 있어요.</p>\n<h3>설정 방법</h3>\n<ul>\n<li>바이트 단위 숫자 (예: 1000)</li>\n<li>문자열로 크기 표현 (예: <code>500kb</code>, <code>3mb</code> 등) — <code>bytes</code>라는 패키지가 지원하는 형식이에요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">experimental</span>: {\n    <span class=\"hljs-attr\">serverActions</span>: {\n      <span class=\"hljs-attr\">bodySizeLimit</span>: <span class=\"hljs-string\">'5mb'</span>, <span class=\"hljs-comment\">// 최대 5MB까지 허용</span>\n    },\n  },\n}\n</code></pre>\n<p>이렇게 설정하면, 5MB까지 데이터 전송이 가능해져서 보다 큰 요청도 서버 액션에서 처리할 수 있어요.</p>\n<h3>주의할 점</h3>\n<p>무턱대고 크기 제한을 늘리는 건 피하는 게 좋아요. 너무 크게 하면 서버가 무거워지고, 악성 의도한 대용량 요청에 취약해 질 수 있거든요. 꼭 필요한 경우에만 적절히 조절하고, 필요한 경우 요청을 여러 번에 나눠서 보내는 방법도 고려해 보세요.</p>\n<hr>\n<p>서버 요청 크기 제한에 관해 종종 헷갈릴 수 있는데, 이렇게 설정해 두면 서버 액션이 좀 더 유연하게 데이터를 처리할 수 있어서 편리하답니다! 다음에는 이런 experimental 옵션 외에, 프로덕션 환경에서 안전성과 성능을 지키는 팁도 알려드릴게요~</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Next.js에서 Server Actions 설정하는 방법을 알려드릴게요!</p>\n<hr>\n<h3>Server Actions 설정 (Next.js 13 버전 기준)</h3>\n<p>최근 Next.js 14부터 Server Actions가 정식 기능으로 기본 활성화 되어 있는데요, 아직 13 버전을 사용 중이라면 직접 설정을 해줘야 합니다.</p>\n<p>예를 들어, <code>next.config.js</code> 파일에 아래처럼 <code>experimental.serverActions</code> 옵션을 <code>true</code>로 설정해주시면 돼요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@type</span> {<span class=\"hljs-type\">import('next').NextConfig</span>} */</span>\n<span class=\"hljs-keyword\">const</span> config = {\n  <span class=\"hljs-attr\">experimental</span>: {\n    <span class=\"hljs-attr\">serverActions</span>: <span class=\"hljs-literal\">true</span>,\n  },\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = config\n</code></pre>\n<p>이 설정을 한 후에는 Server Actions를 사용할 수 있습니다.</p>\n<hr>\n<h3>참고: Next.js 14 이상에서는?</h3>\n<p>Next.js 14부터는 Server Actions가 기본적으로 활성화 되어 별도의 설정이 필요 없답니다. 만약 기본 바디 사이즈 제한을 변경하고 싶다면 아래처럼 설정할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@type</span> {<span class=\"hljs-type\">import('next').NextConfig</span>} */</span>\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">experimental</span>: {\n    <span class=\"hljs-attr\">serverActions</span>: {\n      <span class=\"hljs-attr\">bodySizeLimit</span>: <span class=\"hljs-string\">'2mb'</span>,\n    },\n  },\n}\n</code></pre>\n<p>이렇게 하면 서버 액션의 요청 바디 크기 제한을 조절할 수 있습니다.</p>\n<hr>\n<h3>제가 추가로 알려드릴 팁!</h3>\n<ul>\n<li>\n<p><strong>Server Actions 란?</strong></p>\n<p>서버 액션은 클라이언트에서 서버 함수 호출을 훨씬 쉽게 만들어주는 Next.js의 강력한 기능입니다.</p>\n</li>\n<li>\n<p><strong>bodySizeLimit 설정이 중요한 이유</strong></p>\n<p>서버에 보내는 데이터 양이 많아지면 기본 제한 때문에 오류가 발생할 수 있어요. 따라서 요청 크기에 따라 적절히 조절해 주는 게 좋아요.</p>\n</li>\n<li>\n<p><strong>Next.js 버전 꼭 확인하기</strong></p>\n<p>프로젝트 버전에 따라 설정 방법이 다르니, <code>package.json</code>에서 Next.js 버전을 꼭 확인하시고 알맞게 설정하세요.</p>\n</li>\n</ul>\n<hr>\n<p>필요한 설정을 빠르게 찾는 데 도움이 되었으면 좋겠습니다! Next.js Server Actions, 꼭 직접 사용해보시고 개발 효율을 올려보세요 :)</p>\n</body>\n</html>\n"},"__N_SSG":true}