{"pageProps":{"post":{"title":"Next.js 14 2025년 최신 프로젝트 세팅 방법 완벽 가이드","description":"","date":"2025-04-22 00:32","slug":"2025-04-22-HowtosetupanewNextjsproject","content":"\n# 새로운 Next.js 프로젝트 설정 방법\n\n## 시스템 요구 사항\n\n시작하기 전에, 시스템이 다음 요구 사항을 충족하는지 확인하세요:\n\n| 요구 사항 | 설명                                 |\n| --------- | ------------------------------------ |\n| Node.js   | 18.18 버전 이상                      |\n| 운영 체제 | macOS, Windows(WSL 포함), 또는 Linux |\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 자동 설치\n\n새로운 Next.js 앱을 가장 빠르게 만드는 방법은 create-next-app을 사용하는 것입니다. 이 도구가 모든 설정을 자동으로 해줍니다. 프로젝트를 생성하려면 다음 명령어를 실행하세요:\n\n```js\nnpx create-next-app@latest\n```\n\n설치 중에 다음과 같은 프롬프트가 나타납니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n| 질문                                                             | 선택지   |\n| ---------------------------------------------------------------- | -------- |\n| What is your project named?                                      | my-app   |\n| Would you like to use TypeScript?                                | No / Yes |\n| Would you like to use ESLint?                                    | No / Yes |\n| Would you like to use Tailwind CSS?                              | No / Yes |\n| Would you like your code inside a `src/` directory?              | No / Yes |\n| Would you like to use App Router? (recommended)                  | No / Yes |\n| Would you like to use Turbopack for `next dev`?                  | No / Yes |\n| Would you like to customize the import alias (`@/*` by default)? | No / Yes |\n| What import alias would you like configured?                     | @/\\*     |\n\n프로젝트 생성 후, create-next-app이 프로젝트 이름으로 된 폴더를 만들고 필요한 의존성들을 설치해 줍니다.\n\n## 수동 설치\n\nNext.js 앱을 수동으로 새로 만들고 싶다면, 필요한 패키지를 설치하세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n| 스크립트명 | 설명                                      |\n| ---------- | ----------------------------------------- |\n| dev        | 개발 서버를 실행합니다.                   |\n| build      | 프로덕션용으로 애플리케이션을 빌드합니다. |\n| start      | 빌드된 애플리케이션을 실행합니다.         |\n| lint       | 코드 린팅을 실행합니다.                   |\n\n위 명령어들은 애플리케이션 개발의 각 단계를 위한 스크립트들이에요. `npm install`로 최신 버전의 Next.js와 React를 설치한 뒤, `package.json`에 이 스크립트들을 추가하면 다양한 개발 작업을 쉽게 실행할 수 있답니다!\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- next dev: 개발 서버를 시작합니다.\n- next build: 애플리케이션을 프로덕션용으로 빌드합니다.\n- next start: 프로덕션 서버를 시작합니다.\n- next lint: ESLint를 실행합니다.\n\n### 앱 디렉토리 만들기\n\nNext.js는 파일 시스템 라우팅을 사용해, 애플리케이션의 라우트가 파일 구조에 따라 결정됩니다.\n\n`app` 폴더를 만드세요. 그리고 `app` 폴더 안에 `layout.tsx` 파일을 만드세요. 이 파일이 루트 레이아웃이고 꼭 필요하며, `html`과 `body` 태그를 포함해야 합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n홈 페이지 app/page.tsx를 다음과 같이 초기 콘텐츠와 함께 만들어 주세요:\n\n```js\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>;\n}\n```\n\n사용자가 애플리케이션의 루트 경로 (/)를 방문하면 layout.tsx와 page.tsx 두 파일이 모두 렌더링됩니다.\n\n| 파일명     | 역할                                       |\n| ---------- | ------------------------------------------ |\n| layout.tsx | HTML 구조와 공통 레이아웃 정의             |\n| page.tsx   | 루트 경로에 표시할 초기 페이지 콘텐츠 제공 |\n\n친절하게 궁금한 점 있으면 언제든지 물어보세요!\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/TIL/assets/img/2025-04-22-HowtosetupanewNextjsproject_0.png\" />\n\n> 알아두면 좋은 점:\n> 루트 레이아웃(root layout) 파일을 만들지 않아도, next dev 명령어로 개발 서버를 실행할 때 Next.js가 자동으로 이 파일을 생성해 줍니다.  \n> 프로젝트 루트에 src 디렉터리를 만들어 애플리케이션 코드를 구성 파일과 분리해서 관리할 수도 있습니다.\n\n### public 폴더 생성하기 (선택 사항)\n\n프로젝트 루트에 public 폴더를 만들어 이미지, 폰트 등 정적 자산을 저장해 보세요.  \npublic 폴더 안에 있는 파일들은 기본 URL(/)부터 참조할 수 있습니다.\n\n| 폴더명 | 설명                                       |\n| ------ | ------------------------------------------ |\n| public | 정적 자산(이미지, 폰트 등)을 저장하는 폴더 |\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자산은 루트 경로(/)를 사용해 참조할 수 있습니다. 예를 들어, public/profile.png 파일은 /profile.png로 참조할 수 있습니다:\n\n```js\nimport Image from \"next/image\";\n\nexport default function Page() {\n  // 여기에 컴포넌트 내용을 작성하세요\n}\n```\n\n## 개발 서버 실행하기\n\n- npm run dev 명령어로 개발 서버를 시작하세요.\n- http://localhost:3000 에 접속해 애플리케이션을 확인하세요.\n- app/page.tsx 파일을 수정하고 저장하면 브라우저에서 변경된 결과를 즉시 볼 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## TypeScript 설정하기\n\n> 최소 TypeScript 버전: v4.5.2\n\nNext.js는 TypeScript를 기본적으로 지원합니다. 프로젝트에 TypeScript를 추가하려면 파일 이름을 `.ts` 또는 `.tsx`로 변경하고 `next dev`를 실행하세요. 그러면 Next.js가 필요한 종속성을 자동으로 설치하고, 권장 설정이 포함된 `tsconfig.json` 파일을 추가합니다.\n\n### IDE 플러그인\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNext.js는 VSCode와 다른 코드 편집기에서 고급 타입 검사와 자동 완성을 사용할 수 있도록 맞춤형 TypeScript 플러그인과 타입 체크 기능을 포함하고 있어요.\n\nVS Code에서 플러그인을 활성화하려면 다음 단계를 따라 주세요:\n\n- 명령 팔레트 열기 (Ctrl/⌘ + Shift + P)\n- \"TypeScript: Select TypeScript Version\" 검색하기\n- \"Use Workspace Version\" 선택하기\n\n| 단계 | 설명                                         |\n| ---- | -------------------------------------------- |\n| 1    | 명령 팔레트 열기 (Ctrl/⌘ + Shift + P)        |\n| 2    | \"TypeScript: Select TypeScript Version\" 검색 |\n| 3    | \"Use Workspace Version\" 선택                 |\n\n<img src=\"/TIL/assets/img/2025-04-22-HowtosetupanewNextjsproject_1.png\" />\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nTypeScript 참고 페이지에서 더 많은 정보를 확인할 수 있어요.\n\n## ESLint 설정하기\n\nNext.js는 내장 ESLint를 제공합니다. create-next-app으로 새 프로젝트를 만들면 필요한 패키지를 자동으로 설치하고 적절한 설정을 구성해 줘요.\n\n기존 프로젝트에 ESLint를 수동으로 추가하려면 package.json에 다음과 같이 next lint 스크립트를 추가하면 됩니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}\n```\n\n그런 다음, `npm run lint` 명령어를 실행하면 설치 및 설정 과정을 안내받을 수 있습니다.\n\n```js\nnpm run lint\n```\n\n다음과 같은 프롬프트가 나타날 거예요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n> ? ESLint를 어떻게 설정하시겠어요?\n> ❯ 엄격 모드 (권장)\n> 기본 모드\n> 취소\n\n| 옵션      | 설명                                                                                                                                  |\n| --------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| 엄격 모드 | Next.js의 기본 ESLint 설정에 더 엄격한 Core Web Vitals 규칙 세트가 포함됩니다. ESLint를 처음 설정하는 개발자에게 권장되는 설정입니다. |\n| 기본 모드 | Next.js의 기본 ESLint 설정이 포함됩니다.                                                                                              |\n| 취소      | 설정을 건너뜁니다. 직접 커스텀 ESLint 설정을 할 계획이라면 이 옵션을 선택하세요.                                                      |\n\n엄격 모드나 기본 모드를 선택하면, Next.js가 자동으로 eslint와 eslint-config-next를 애플리케이션의 종속성으로 설치하고, 프로젝트 루트에 선택한 설정이 포함된 `.eslintrc.json` 파일을 생성합니다.\n\n이제 `next lint` 명령어를 실행하여 ESLint로 오류를 점검할 수 있습니다. ESLint 설정이 완료되면, 빌드할 때마다 (`next build`) 자동으로 ESLint가 실행됩니다. 오류가 있을 경우 빌드가 실패하며, 경고는 빌드에 영향을 주지 않습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nESLint 플러그인 페이지에서 더 많은 정보를 확인할 수 있어요.\n\n## 절대 경로 및 모듈 경로 별칭 설정하기\n\nNext.js는 tsconfig.json과 jsconfig.json 파일의 \"paths\"와 \"baseUrl\" 옵션을 기본적으로 지원해요.\n\n이 옵션들을 통해 프로젝트 디렉터리를 절대 경로로 별칭(alias) 설정할 수 있어서, 모듈을 더 쉽고 깔끔하게 임포트할 수 있답니다. 예를 들어:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n| Before                                                    | After                                              |\n| --------------------------------------------------------- | -------------------------------------------------- |\n| js<br>import { Button } from '../../../components/button' | js<br>import { Button } from '@/components/button' |\n\n절대 경로(import)를 설정하려면 tsconfig.json 또는 jsconfig.json 파일에 baseUrl 설정 옵션을 추가하세요. 예를 들어:\n\n```js\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\"\n  }\n}\n```\n\nbaseUrl 경로를 설정하는 것 외에도 \"paths\" 옵션을 사용해 모듈 경로에 별칭(alias)을 지정할 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n예를 들어, 다음 설정은 @/components/*를 components/*에 매핑합니다:\n\n```js\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\",\n    \"paths\": {\n      \"@/styles/*\": [\"styles/*\"],\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\n```\n\n\"paths\"에 있는 경로들은 모두 baseUrl 위치를 기준으로 한 상대 경로입니다.\n","ogImage":{"url":"/assets/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>새로운 Next.js 프로젝트 설정 방법</h1>\n<h2>시스템 요구 사항</h2>\n<p>시작하기 전에, 시스템이 다음 요구 사항을 충족하는지 확인하세요:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>요구 사항</th><th>설명</th></tr></thead><tbody><tr><td>Node.js</td><td>18.18 버전 이상</td></tr><tr><td>운영 체제</td><td>macOS, Windows(WSL 포함), 또는 Linux</td></tr></tbody></table>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>자동 설치</h2>\n<p>새로운 Next.js 앱을 가장 빠르게 만드는 방법은 create-next-app을 사용하는 것입니다. 이 도구가 모든 설정을 자동으로 해줍니다. 프로젝트를 생성하려면 다음 명령어를 실행하세요:</p>\n<pre><code class=\"hljs language-js\">npx create-next-app@latest\n</code></pre>\n<p>설치 중에 다음과 같은 프롬프트가 나타납니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>질문</th><th>선택지</th></tr></thead><tbody><tr><td>What is your project named?</td><td>my-app</td></tr><tr><td>Would you like to use TypeScript?</td><td>No / Yes</td></tr><tr><td>Would you like to use ESLint?</td><td>No / Yes</td></tr><tr><td>Would you like to use Tailwind CSS?</td><td>No / Yes</td></tr><tr><td>Would you like your code inside a <code>src/</code> directory?</td><td>No / Yes</td></tr><tr><td>Would you like to use App Router? (recommended)</td><td>No / Yes</td></tr><tr><td>Would you like to use Turbopack for <code>next dev</code>?</td><td>No / Yes</td></tr><tr><td>Would you like to customize the import alias (<code>@/*</code> by default)?</td><td>No / Yes</td></tr><tr><td>What import alias would you like configured?</td><td>@/*</td></tr></tbody></table>\n<p>프로젝트 생성 후, create-next-app이 프로젝트 이름으로 된 폴더를 만들고 필요한 의존성들을 설치해 줍니다.</p>\n<h2>수동 설치</h2>\n<p>Next.js 앱을 수동으로 새로 만들고 싶다면, 필요한 패키지를 설치하세요:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>스크립트명</th><th>설명</th></tr></thead><tbody><tr><td>dev</td><td>개발 서버를 실행합니다.</td></tr><tr><td>build</td><td>프로덕션용으로 애플리케이션을 빌드합니다.</td></tr><tr><td>start</td><td>빌드된 애플리케이션을 실행합니다.</td></tr><tr><td>lint</td><td>코드 린팅을 실행합니다.</td></tr></tbody></table>\n<p>위 명령어들은 애플리케이션 개발의 각 단계를 위한 스크립트들이에요. <code>npm install</code>로 최신 버전의 Next.js와 React를 설치한 뒤, <code>package.json</code>에 이 스크립트들을 추가하면 다양한 개발 작업을 쉽게 실행할 수 있답니다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>next dev: 개발 서버를 시작합니다.</li>\n<li>next build: 애플리케이션을 프로덕션용으로 빌드합니다.</li>\n<li>next start: 프로덕션 서버를 시작합니다.</li>\n<li>next lint: ESLint를 실행합니다.</li>\n</ul>\n<h3>앱 디렉토리 만들기</h3>\n<p>Next.js는 파일 시스템 라우팅을 사용해, 애플리케이션의 라우트가 파일 구조에 따라 결정됩니다.</p>\n<p><code>app</code> 폴더를 만드세요. 그리고 <code>app</code> 폴더 안에 <code>layout.tsx</code> 파일을 만드세요. 이 파일이 루트 레이아웃이고 꼭 필요하며, <code>html</code>과 <code>body</code> 태그를 포함해야 합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RootLayout</span>(<span class=\"hljs-params\">{ children }: { children: React.ReactNode }</span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>{children}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></span>\n  );\n}\n</code></pre>\n<p>홈 페이지 app/page.tsx를 다음과 같이 초기 콘텐츠와 함께 만들어 주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, Next.js!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}\n</code></pre>\n<p>사용자가 애플리케이션의 루트 경로 (/)를 방문하면 layout.tsx와 page.tsx 두 파일이 모두 렌더링됩니다.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>파일명</th><th>역할</th></tr></thead><tbody><tr><td>layout.tsx</td><td>HTML 구조와 공통 레이아웃 정의</td></tr><tr><td>page.tsx</td><td>루트 경로에 표시할 초기 페이지 콘텐츠 제공</td></tr></tbody></table>\n<p>친절하게 궁금한 점 있으면 언제든지 물어보세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/TIL/assets/img/2025-04-22-HowtosetupanewNextjsproject_0.png\">\n<blockquote>\n<p>알아두면 좋은 점:\n루트 레이아웃(root layout) 파일을 만들지 않아도, next dev 명령어로 개발 서버를 실행할 때 Next.js가 자동으로 이 파일을 생성해 줍니다.<br>\n프로젝트 루트에 src 디렉터리를 만들어 애플리케이션 코드를 구성 파일과 분리해서 관리할 수도 있습니다.</p>\n</blockquote>\n<h3>public 폴더 생성하기 (선택 사항)</h3>\n<p>프로젝트 루트에 public 폴더를 만들어 이미지, 폰트 등 정적 자산을 저장해 보세요.<br>\npublic 폴더 안에 있는 파일들은 기본 URL(/)부터 참조할 수 있습니다.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>폴더명</th><th>설명</th></tr></thead><tbody><tr><td>public</td><td>정적 자산(이미지, 폰트 등)을 저장하는 폴더</td></tr></tbody></table>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>자산은 루트 경로(/)를 사용해 참조할 수 있습니다. 예를 들어, public/profile.png 파일은 /profile.png로 참조할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Image</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/image\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 여기에 컴포넌트 내용을 작성하세요</span>\n}\n</code></pre>\n<h2>개발 서버 실행하기</h2>\n<ul>\n<li>npm run dev 명령어로 개발 서버를 시작하세요.</li>\n<li><a href=\"http://localhost:3000\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000</a> 에 접속해 애플리케이션을 확인하세요.</li>\n<li>app/page.tsx 파일을 수정하고 저장하면 브라우저에서 변경된 결과를 즉시 볼 수 있습니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>TypeScript 설정하기</h2>\n<blockquote>\n<p>최소 TypeScript 버전: v4.5.2</p>\n</blockquote>\n<p>Next.js는 TypeScript를 기본적으로 지원합니다. 프로젝트에 TypeScript를 추가하려면 파일 이름을 <code>.ts</code> 또는 <code>.tsx</code>로 변경하고 <code>next dev</code>를 실행하세요. 그러면 Next.js가 필요한 종속성을 자동으로 설치하고, 권장 설정이 포함된 <code>tsconfig.json</code> 파일을 추가합니다.</p>\n<h3>IDE 플러그인</h3>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Next.js는 VSCode와 다른 코드 편집기에서 고급 타입 검사와 자동 완성을 사용할 수 있도록 맞춤형 TypeScript 플러그인과 타입 체크 기능을 포함하고 있어요.</p>\n<p>VS Code에서 플러그인을 활성화하려면 다음 단계를 따라 주세요:</p>\n<ul>\n<li>명령 팔레트 열기 (Ctrl/⌘ + Shift + P)</li>\n<li>\"TypeScript: Select TypeScript Version\" 검색하기</li>\n<li>\"Use Workspace Version\" 선택하기</li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>단계</th><th>설명</th></tr></thead><tbody><tr><td>1</td><td>명령 팔레트 열기 (Ctrl/⌘ + Shift + P)</td></tr><tr><td>2</td><td>\"TypeScript: Select TypeScript Version\" 검색</td></tr><tr><td>3</td><td>\"Use Workspace Version\" 선택</td></tr></tbody></table>\n<img src=\"/TIL/assets/img/2025-04-22-HowtosetupanewNextjsproject_1.png\">\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>TypeScript 참고 페이지에서 더 많은 정보를 확인할 수 있어요.</p>\n<h2>ESLint 설정하기</h2>\n<p>Next.js는 내장 ESLint를 제공합니다. create-next-app으로 새 프로젝트를 만들면 필요한 패키지를 자동으로 설치하고 적절한 설정을 구성해 줘요.</p>\n<p>기존 프로젝트에 ESLint를 수동으로 추가하려면 package.json에 다음과 같이 next lint 스크립트를 추가하면 됩니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"lint\"</span>: <span class=\"hljs-string\">\"next lint\"</span>\n  }\n}\n</code></pre>\n<p>그런 다음, <code>npm run lint</code> 명령어를 실행하면 설치 및 설정 과정을 안내받을 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">npm run lint\n</code></pre>\n<p>다음과 같은 프롬프트가 나타날 거예요:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<blockquote>\n<p>? ESLint를 어떻게 설정하시겠어요?\n❯ 엄격 모드 (권장)\n기본 모드\n취소</p>\n</blockquote>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>엄격 모드</td><td>Next.js의 기본 ESLint 설정에 더 엄격한 Core Web Vitals 규칙 세트가 포함됩니다. ESLint를 처음 설정하는 개발자에게 권장되는 설정입니다.</td></tr><tr><td>기본 모드</td><td>Next.js의 기본 ESLint 설정이 포함됩니다.</td></tr><tr><td>취소</td><td>설정을 건너뜁니다. 직접 커스텀 ESLint 설정을 할 계획이라면 이 옵션을 선택하세요.</td></tr></tbody></table>\n<p>엄격 모드나 기본 모드를 선택하면, Next.js가 자동으로 eslint와 eslint-config-next를 애플리케이션의 종속성으로 설치하고, 프로젝트 루트에 선택한 설정이 포함된 <code>.eslintrc.json</code> 파일을 생성합니다.</p>\n<p>이제 <code>next lint</code> 명령어를 실행하여 ESLint로 오류를 점검할 수 있습니다. ESLint 설정이 완료되면, 빌드할 때마다 (<code>next build</code>) 자동으로 ESLint가 실행됩니다. 오류가 있을 경우 빌드가 실패하며, 경고는 빌드에 영향을 주지 않습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>ESLint 플러그인 페이지에서 더 많은 정보를 확인할 수 있어요.</p>\n<h2>절대 경로 및 모듈 경로 별칭 설정하기</h2>\n<p>Next.js는 tsconfig.json과 jsconfig.json 파일의 \"paths\"와 \"baseUrl\" 옵션을 기본적으로 지원해요.</p>\n<p>이 옵션들을 통해 프로젝트 디렉터리를 절대 경로로 별칭(alias) 설정할 수 있어서, 모듈을 더 쉽고 깔끔하게 임포트할 수 있답니다. 예를 들어:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Before</th><th>After</th></tr></thead><tbody><tr><td>js<br>import { Button } from '../../../components/button'</td><td>js<br>import { Button } from '@/components/button'</td></tr></tbody></table>\n<p>절대 경로(import)를 설정하려면 tsconfig.json 또는 jsconfig.json 파일에 baseUrl 설정 옵션을 추가하세요. 예를 들어:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"compilerOptions\"</span>: {\n    <span class=\"hljs-string\">\"baseUrl\"</span>: <span class=\"hljs-string\">\"src/\"</span>\n  }\n}\n</code></pre>\n<p>baseUrl 경로를 설정하는 것 외에도 \"paths\" 옵션을 사용해 모듈 경로에 별칭(alias)을 지정할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>예를 들어, 다음 설정은 @/components/*를 components/*에 매핑합니다:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"compilerOptions\"</span>: {\n    <span class=\"hljs-string\">\"baseUrl\"</span>: <span class=\"hljs-string\">\"src/\"</span>,\n    <span class=\"hljs-string\">\"paths\"</span>: {\n      <span class=\"hljs-string\">\"@/styles/*\"</span>: [<span class=\"hljs-string\">\"styles/*\"</span>],\n      <span class=\"hljs-string\">\"@/components/*\"</span>: [<span class=\"hljs-string\">\"components/*\"</span>]\n    }\n  }\n}\n</code></pre>\n<p>\"paths\"에 있는 경로들은 모두 baseUrl 위치를 기준으로 한 상대 경로입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}