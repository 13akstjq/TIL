{"pageProps":{"post":{"title":"Python에서 Factory Method 패턴 사용하는 방법","description":"","date":"2024-07-14 23:43","slug":"2024-07-14-FactoryMethodpatterninPython","content":"\n\n디자인 패턴은 미래에 이를 유지하는 것이 더 쉬운 방식으로 반복되는 여러 가지 문제를 해결할 수 있게 해줍니다.\n\n이를 감안할 때 각 디자인 패턴을 알아야 특정 문제를 해결할 때 더 큰 유연성을 가질 수 있습니다.\n\n내가 보는 문제는 보통 이 디자인 패턴 중 하나를 배우려고 할 때 실제로 직면한 문제를 알지 못한 채로 아주 긴 설명들을 마주하게 된다는 것입니다.\n\n이 이야기에서는 공장 메서드 패턴을 가능한 간단히 설명해 보겠습니다. 이렇게 함으로써 해당 패턴이 해결하고 있는 문제와 어떻게 구현되는지 이해할 수 있을 것입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<img src=\"/TIL/assets/img/2024-07-14-FactoryMethodpatterninPython_0.png\" />\n\n# Factory Method 패턴을 사용하지 않은 예제\n\n다른 종류의 문서인 이력서와 보고서를 가진 예제를 만들어 봅시다.\n\n이러한 문서 유형은 고유한 생성자를 가질 것입니다:\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom abc import ABC, abstractmethod\n\n# 제품 인터페이스 정의\nclass Document(ABC):\n    @abstractmethod\n    def create(self):\n        pass\n\n# 구체적인 제품 생성\nclass Resume(Document):\n    def create(self):\n        return \"이력서 생성됨\"\n\nclass Report(Document):\n    def create(self):\n        return \"보고서 생성됨\"\n```\n\n이후에는 이 유형의 문서를 선택하는 함수가 있을 것입니다:\n\n```js\ndef create_document(document_type: str) -> Document:\n    if document_type == \"resume\":\n        return Resume()\n    elif document_type == \"report\":\n        return Report()\n    else:\n        raise ValueError(f\"알 수 없는 문서 유형: {document_type}\")\n```\n\n이후 팩토리 메서드 패턴을 통해 이 함수의 구현을 개선할 수 있음을 나중에 확인하게 될 것입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n나머지 코드는 문서 유형을 사용하는 방법을 보여줍니다:\n\n```js\ndef client_code(document_type: str):\n    document = create_document(document_type)\n    print(document.create())\n\nif __name__ == \"__main__\":\n    print(\"이력서 생성:\")\n    client_code(\"resume\")\n    \n    print(\"\\n보고서 생성:\")\n    client_code(\"report\")\n```\n\n# 팩토리 메서드 사용\n\n리팩토링에서는 여전히 각 객체의 생성자가 있습니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom abc import ABC, abstractmethod\n\n# 제품 인터페이스 정의\nclass Document(ABC):\n    @abstractmethod\n    def create(self):\n        pass\n\n# 구체적인 제품 생성\nclass Resume(Document):\n    def create(self):\n        return \"이력서 생성됨\"\n\nclass Report(Document):\n    def create(self):\n        return \"보고서 생성됨\"\n```\n\n그러나 이제 각 유형의 문서 생성을 탈 중앙화했습니다:\n\n```python\n# 팩토리 메서드를 사용하여 생성자 클래스 정의\nclass DocumentCreator(ABC):\n    @abstractmethod\n    def factory_method(self):\n        pass\n\n    def create_document(self):\n        # 제품을 얻기 위해 팩토리 메서드 호출\n        document = self.factory_method()\n        return document.create()\n\n# 구체적인 생성자 구현\nclass ResumeCreator(DocumentCreator):\n    def factory_method(self):\n        return Resume()\n\nclass ReportCreator(DocumentCreator):\n    def factory_method(self):\n        return Report()\n```\n\n새로운 문서 유형을 추가하는 것은 새로운 구체적인 생성자 클래스를 만드는 것만큼 간단합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n나머지 코드는 문서 유형을 사용하는 방법을 보여줍니다:\n\n```js\ndef client_code(creator: DocumentCreator):\n    print(creator.create_document())\n\nif __name__ == \"__main__\":\n    print(\"이력서 생성 중:\")\n    resume_creator = ResumeCreator()\n    client_code(resume_creator)\n    \n    print(\"\\n보고서 생성 중:\")\n    report_creator = ReportCreator()\n    client_code(report_creator)\n```\n\n# 차이점 설명\n\n주요 차이점은 팩토리 메서드 패턴을 사용하지 않을 때, 객체를 프로그램 로직을 정의하는 곳과 동일한 위치에서 생성한다는 것입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\ndef create_document(document_type: str) -> Document:\n    if document_type == \"resume\":\n        return Resume()\n    elif document_type == \"report\":\n        return Report()\n    else:\n        raise ValueError(f\"Unknown document type: {document_type}\")\n```\n\n위의 예제는 매우 간단합니다. 새로운 문서 유형을 추가하거나 삭제할 때 이 논리를 변경하는 것은 비교적 쉬우지만, 더 복잡한 경우에는 더 비용이 많이 들 수 있습니다.\n\n게다가, 이것에는 훌륭한 논리가 없습니다. 각 if/else 이후에 일련의 동작이 수행된다고 상상해보세요.\n\n## 비교\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 팩토리 메소드 없이: 문서 생성 로직은 create_document 함수에 중앙 집중화되어 있습니다. 이는 더 간단하지만 코드를 유연하게 만들고 유지하기 어렵게 만듭니다. 새로운 유형의 문서를 추가하려면 create_document 함수를 수정해야 하며, 이로 인해 버그가 발생할 수 있고 전체 함수의 로직을 이해해야 합니다.\n- 팩토리 메소드 사용: 생성 로직이 분산됩니다. 각 구체적인 생성자는 자체 유형의 문서를 생성하는 방법을 알고 있습니다. 새로운 유형의 문서를 추가하는 것은 새로운 구체적인 생성자 클래스를 만드는 것만큼 간답습니다. 이 접근 방식은 개방/폐쇄 원칙을 준수하며 코드를 보다 모듈식으로 만들고 확장하기 쉽게 만듭니다.\n\n![Factory Method Pattern](/TIL/assets/img/2024-07-14-FactoryMethodpatterninPython_1.png)\n\n# 어떻게 인식할까요?\n\n이 패턴을 사용해야 하는 시점은 로직 일부가 서로 다른 객체 유형을 생성하는 if/else if/else를 사용하고 있을 때 가장 쉽게 인식할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n# 예시\ndef mainfuntion():\n    if option==1:\n        Object1=Object_constructor()\n        action1()\n        action2()\n    elif option==2:\n        Object2=Object_constructor2()\n        action3()\n        action4()\n    else:\n        Object3=Object_constructor3()\n        action5()\n        action6()\n\n\n우리는 보듯이, 이 논리는 사용된 객체의 유형에 매우 의존합니다. 다른 유형의 객체를 사용해야 한다면 프로그램의 논리를 바꿀 필요가 있습니다.\n\n이러한 패턴을 보게 되면, 팩토리 메서드를 사용하여 개선을 고려할 수 있습니다.\n\n# 결론\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n인터넷에서 찾을 수 있는 것들과는 조금 다른 방식으로 이 디자인 패턴을 설명해 보았어요. 가능한 가장 간단한 방법으로 설명해 보았답니다.\n\n저는 이러한 패턴에 대해 다양한 정보원에서 배우는 것이 이상적이라고 생각해요. 각각의 예시를 보면서 개념을 더 깊이 이해할 수 있을 거예요.\n\n이야기가 마음에 들기를 바랍니다.\n\n관심 가져 주셔서 정말 감사합니다!","ogImage":{"url":"/TIL/assets/img/2024-07-14-FactoryMethodpatterninPython_0.png"},"coverImage":"/TIL/assets/img/2024-07-14-FactoryMethodpatterninPython_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>디자인 패턴은 미래에 이를 유지하는 것이 더 쉬운 방식으로 반복되는 여러 가지 문제를 해결할 수 있게 해줍니다.</p>\n<p>이를 감안할 때 각 디자인 패턴을 알아야 특정 문제를 해결할 때 더 큰 유연성을 가질 수 있습니다.</p>\n<p>내가 보는 문제는 보통 이 디자인 패턴 중 하나를 배우려고 할 때 실제로 직면한 문제를 알지 못한 채로 아주 긴 설명들을 마주하게 된다는 것입니다.</p>\n<p>이 이야기에서는 공장 메서드 패턴을 가능한 간단히 설명해 보겠습니다. 이렇게 함으로써 해당 패턴이 해결하고 있는 문제와 어떻게 구현되는지 이해할 수 있을 것입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/TIL/assets/img/2024-07-14-FactoryMethodpatterninPython_0.png\">\n<h1>Factory Method 패턴을 사용하지 않은 예제</h1>\n<p>다른 종류의 문서인 이력서와 보고서를 가진 예제를 만들어 봅시다.</p>\n<p>이러한 문서 유형은 고유한 생성자를 가질 것입니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> abc <span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">ABC</span>, abstractmethod\n\n# 제품 인터페이스 정의\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Document</span>(<span class=\"hljs-variable constant_\">ABC</span>):\n    @abstractmethod\n    def <span class=\"hljs-title function_\">create</span>(self):\n        pass\n\n# 구체적인 제품 생성\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Resume</span>(<span class=\"hljs-title class_\">Document</span>):\n    def <span class=\"hljs-title function_\">create</span>(self):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"이력서 생성됨\"</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Report</span>(<span class=\"hljs-title class_\">Document</span>):\n    def <span class=\"hljs-title function_\">create</span>(self):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"보고서 생성됨\"</span>\n</code></pre>\n<p>이후에는 이 유형의 문서를 선택하는 함수가 있을 것입니다:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">create_document</span>(<span class=\"hljs-attr\">document_type</span>: str) -> <span class=\"hljs-title class_\">Document</span>:\n    <span class=\"hljs-keyword\">if</span> document_type == <span class=\"hljs-string\">\"resume\"</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Resume</span>()\n    elif document_type == <span class=\"hljs-string\">\"report\"</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Report</span>()\n    <span class=\"hljs-attr\">else</span>:\n        raise <span class=\"hljs-title class_\">ValueError</span>(f<span class=\"hljs-string\">\"알 수 없는 문서 유형: {document_type}\"</span>)\n</code></pre>\n<p>이후 팩토리 메서드 패턴을 통해 이 함수의 구현을 개선할 수 있음을 나중에 확인하게 될 것입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>나머지 코드는 문서 유형을 사용하는 방법을 보여줍니다:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">client_code</span>(<span class=\"hljs-attr\">document_type</span>: str):\n    <span class=\"hljs-variable language_\">document</span> = <span class=\"hljs-title function_\">create_document</span>(document_type)\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">create</span>())\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"이력서 생성:\"</span>)\n    <span class=\"hljs-title function_\">client_code</span>(<span class=\"hljs-string\">\"resume\"</span>)\n    \n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"\\n보고서 생성:\"</span>)\n    <span class=\"hljs-title function_\">client_code</span>(<span class=\"hljs-string\">\"report\"</span>)\n</code></pre>\n<h1>팩토리 메서드 사용</h1>\n<p>리팩토링에서는 여전히 각 객체의 생성자가 있습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> abc <span class=\"hljs-keyword\">import</span> ABC, abstractmethod\n\n<span class=\"hljs-comment\"># 제품 인터페이스 정의</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Document</span>(<span class=\"hljs-title class_ inherited__\">ABC</span>):\n<span class=\"hljs-meta\">    @abstractmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-comment\"># 구체적인 제품 생성</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Resume</span>(<span class=\"hljs-title class_ inherited__\">Document</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"이력서 생성됨\"</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Report</span>(<span class=\"hljs-title class_ inherited__\">Document</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"보고서 생성됨\"</span>\n</code></pre>\n<p>그러나 이제 각 유형의 문서 생성을 탈 중앙화했습니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># 팩토리 메서드를 사용하여 생성자 클래스 정의</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DocumentCreator</span>(<span class=\"hljs-title class_ inherited__\">ABC</span>):\n<span class=\"hljs-meta\">    @abstractmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">factory_method</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">pass</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_document</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-comment\"># 제품을 얻기 위해 팩토리 메서드 호출</span>\n        document = self.factory_method()\n        <span class=\"hljs-keyword\">return</span> document.create()\n\n<span class=\"hljs-comment\"># 구체적인 생성자 구현</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ResumeCreator</span>(<span class=\"hljs-title class_ inherited__\">DocumentCreator</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">factory_method</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> Resume()\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReportCreator</span>(<span class=\"hljs-title class_ inherited__\">DocumentCreator</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">factory_method</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> Report()\n</code></pre>\n<p>새로운 문서 유형을 추가하는 것은 새로운 구체적인 생성자 클래스를 만드는 것만큼 간단합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>나머지 코드는 문서 유형을 사용하는 방법을 보여줍니다:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">client_code</span>(<span class=\"hljs-attr\">creator</span>: <span class=\"hljs-title class_\">DocumentCreator</span>):\n    <span class=\"hljs-title function_\">print</span>(creator.<span class=\"hljs-title function_\">create_document</span>())\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"이력서 생성 중:\"</span>)\n    resume_creator = <span class=\"hljs-title class_\">ResumeCreator</span>()\n    <span class=\"hljs-title function_\">client_code</span>(resume_creator)\n    \n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"\\n보고서 생성 중:\"</span>)\n    report_creator = <span class=\"hljs-title class_\">ReportCreator</span>()\n    <span class=\"hljs-title function_\">client_code</span>(report_creator)\n</code></pre>\n<h1>차이점 설명</h1>\n<p>주요 차이점은 팩토리 메서드 패턴을 사용하지 않을 때, 객체를 프로그램 로직을 정의하는 곳과 동일한 위치에서 생성한다는 것입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_document</span>(<span class=\"hljs-params\">document_type: <span class=\"hljs-built_in\">str</span></span>) -> Document:\n    <span class=\"hljs-keyword\">if</span> document_type == <span class=\"hljs-string\">\"resume\"</span>:\n        <span class=\"hljs-keyword\">return</span> Resume()\n    <span class=\"hljs-keyword\">elif</span> document_type == <span class=\"hljs-string\">\"report\"</span>:\n        <span class=\"hljs-keyword\">return</span> Report()\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f\"Unknown document type: <span class=\"hljs-subst\">{document_type}</span>\"</span>)\n</code></pre>\n<p>위의 예제는 매우 간단합니다. 새로운 문서 유형을 추가하거나 삭제할 때 이 논리를 변경하는 것은 비교적 쉬우지만, 더 복잡한 경우에는 더 비용이 많이 들 수 있습니다.</p>\n<p>게다가, 이것에는 훌륭한 논리가 없습니다. 각 if/else 이후에 일련의 동작이 수행된다고 상상해보세요.</p>\n<h2>비교</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>팩토리 메소드 없이: 문서 생성 로직은 create_document 함수에 중앙 집중화되어 있습니다. 이는 더 간단하지만 코드를 유연하게 만들고 유지하기 어렵게 만듭니다. 새로운 유형의 문서를 추가하려면 create_document 함수를 수정해야 하며, 이로 인해 버그가 발생할 수 있고 전체 함수의 로직을 이해해야 합니다.</li>\n<li>팩토리 메소드 사용: 생성 로직이 분산됩니다. 각 구체적인 생성자는 자체 유형의 문서를 생성하는 방법을 알고 있습니다. 새로운 유형의 문서를 추가하는 것은 새로운 구체적인 생성자 클래스를 만드는 것만큼 간답습니다. 이 접근 방식은 개방/폐쇄 원칙을 준수하며 코드를 보다 모듈식으로 만들고 확장하기 쉽게 만듭니다.</li>\n</ul>\n<p><img src=\"/TIL/assets/img/2024-07-14-FactoryMethodpatterninPython_1.png\" alt=\"Factory Method Pattern\"></p>\n<h1>어떻게 인식할까요?</h1>\n<p>이 패턴을 사용해야 하는 시점은 로직 일부가 서로 다른 객체 유형을 생성하는 if/else if/else를 사용하고 있을 때 가장 쉽게 인식할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>예시</h1>\n<p>def mainfuntion():\nif option==1:\nObject1=Object_constructor()\naction1()\naction2()\nelif option==2:\nObject2=Object_constructor2()\naction3()\naction4()\nelse:\nObject3=Object_constructor3()\naction5()\naction6()</p>\n<p>우리는 보듯이, 이 논리는 사용된 객체의 유형에 매우 의존합니다. 다른 유형의 객체를 사용해야 한다면 프로그램의 논리를 바꿀 필요가 있습니다.</p>\n<p>이러한 패턴을 보게 되면, 팩토리 메서드를 사용하여 개선을 고려할 수 있습니다.</p>\n<h1>결론</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>인터넷에서 찾을 수 있는 것들과는 조금 다른 방식으로 이 디자인 패턴을 설명해 보았어요. 가능한 가장 간단한 방법으로 설명해 보았답니다.</p>\n<p>저는 이러한 패턴에 대해 다양한 정보원에서 배우는 것이 이상적이라고 생각해요. 각각의 예시를 보면서 개념을 더 깊이 이해할 수 있을 거예요.</p>\n<p>이야기가 마음에 들기를 바랍니다.</p>\n<p>관심 가져 주셔서 정말 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}