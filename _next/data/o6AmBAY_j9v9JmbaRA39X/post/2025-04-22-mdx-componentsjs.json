{"pageProps":{"post":{"title":"Next.js 15에서 mdx-components.js로 커스텀 MDX 컴포넌트 만드는 방법","description":"","date":"2025-04-22 02:41","slug":"2025-04-22-mdx-componentsjs","content":"\n\n# mdx-components.js (또는 .tsx) 파일 소개\n\nNext.js에서 `@next/mdx`와 App Router를 함께 사용할 때, `mdx-components.js` (또는 `mdx-components.tsx`) 파일은 꼭 필요한 친구예요. 이 파일이 없으면 MDX를 제대로 쓸 수 없거든요. 게다가 이 파일을 활용하면 MDX 내에서 사용하는 컴포넌트들의 스타일이나 동작을 커스터마이징할 수도 있답니다!\n\n---\n\n## 위치는 어디에?\n\n- 프로젝트 루트 바로 아래에 둬요.  \n- 예를 들어, `pages` 또는 `app` 폴더와 같은 레벨에 (또는 `src` 폴더 안에) 두면 좋아요.\n\n---\n\n## 기본적인 작성법\n\n```tsx\nimport type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\n이 코드는 기본 설정으로 컴포넌트들을 그대로 반환하는 역할을 해요. 여기서 `components`에 우리가 직접 만든 커스텀 컴포넌트들을 덮어씌워서 스타일이나 기능을 내가 원하는 대로 바꿀 수 있죠.\n\n---\n\n## 실제로 커스텀 해보기\n\n예를 들어, MDX 안에서 `<h1>` 태그의 스타일을 바꾸고 싶다면 이렇게 작성할 수 있어요:\n\n```tsx\nimport type { MDXComponents } from 'mdx/types'\n\nconst MyH1 = (props) => <h1 style={{ color: 'tomato', fontSize: '2.5rem' }} {...props} />\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    h1: MyH1,\n    ...components,\n  }\n}\n```\n\n이렇게 하면 MDX 파일 내 `<h1>` 태그가 모두 토마토색 큰 글씨로 바뀌죠.\n\n---\n\n## 참고! 왜 이걸 쓰는 걸까?\n\nMDX 안에는 기본 HTML 태그뿐만 아니라, React 컴포넌트도 자유롭게 넣을 수 있어요. 예를 들어 버튼, 카드, 또는 특별한 레이아웃 컴포넌트 등이죠. 이걸 한 번에 관리하고 싶다면 이 `mdx-components` 파일을 활용해서 확장하거나 수정하는 게 가장 깔끔하답니다.\n\n---\n\n**정리하자면**, `mdx-components.js`(또는 `.tsx`)는 Next.js + MDX 환경에서 커스텀 컴포넌트를 선언하고 스타일을 조절하는 중요한 허브 역할을 하니 꼭 기억하세요! 프로젝트에서 MDX를 쓴다면 이 친구는 필수랍니다 :)\n\n---\n\n필요하면 나중에 커스텀 컴포넌트를 더 만드는 법도 알려드릴게요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## Exports\n\n### useMDXComponents 함수\n\n이 파일은 하나의 함수만 내보내야 해요. 기본 내보내기(default export)로 하거나 `useMDXComponents`라는 이름으로 내보낼 수 있죠.\n\n```js\nimport type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\n> 여기서 `useMDXComponents` 함수는 MDX 컴포넌트를 커스터마이징할 때 유용해요. 예를 들어, 기본 제공되는 MDX 컴포넌트를 당신만의 스타일이나 새로운 컴포넌트로 대체하고 싶을 때 이 함수를 사용하죠.  \n> 그리고 `components` 객체를 받아 그대로 돌려주고 있는데, 필요하면 여기에 새로운 컴포넌트를 추가하거나 기존 컴포넌트를 덮어씌우는 작업도 할 수 있어요.  \n>\n> 간단한 예를 들어볼게요:  \n> js\n> export function useMDXComponents(components) {\n>   return {\n>     h1: (props) => <h1 style={{ color: 'tomato' }} {...props} />,\n>     ...components,\n>   }\n> }\n> \n> 이렇게 하면 MDX 내의 모든 `h1` 태그는 토마토색 글씨로 표시되겠죠!   \n>  \n> MDX로 콘텐츠 작업할 때 아주 많이 쓰이는 패턴입니다.  \n> 필요에 따라 잘 커스터마이징해보세요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## Params\n\n### components\n\nMDX 컴포넌트를 정의할 때, export 함수는 단일 파라미터인 `components`를 받습니다. 이 `components`는 `MDXComponents` 타입의 인스턴스인데요.\n\n- **키(key)**는 대체하고자 하는 HTML 태그 이름을 의미합니다.  \n- **값(value)**은 해당 HTML 태그 대신 렌더링할 컴포넌트를 지정하는 거죠.\n\n즉, 기본 HTML 요소를 내 마음대로 바꾸고 싶을 때 유용하게 쓸 수 있습니다. 예를 들어, `<h1>` 태그를 나만의 스타일이 입혀진 헤딩 컴포넌트로 교체할 수도 있고, `<a>` 태그를 커스텀 링크 컴포넌트로 바꿔서 새 창 열기 같은 기능을 쉽게 추가할 수도 있답니다.\n\n이걸 활용하면 MDX 문서 내에서 일관된 UI를 손쉽게 유지할 수 있고, 스타일이나 동작도 프로젝트에 맞게 맞춤 설정할 수 있어요! 많이 써먹어보세요~\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n> 참고할 점: 오버라이드가 없는 다른 컴포넌트들도 모두 전달해주는 것(즉, ...components)을 잊지 마세요.\n\n## 버전 히스토리\n\n| Version     | Changes           |\n|-------------|-------------------|\n| `v13.1.2`   | MDX 컴포넌트 추가 | \n\n여기서 MDX 컴포넌트란, Markdown과 React 컴포넌트를 함께 쓸 수 있게 해주는 기능이에요. 프로젝트에서 문서나 블로그 작성할 때 훨씬 유용하게 쓰이니까 꼭 한 번 써보시길 추천합니다!","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>mdx-components.js (또는 .tsx) 파일 소개</h1>\n<p>Next.js에서 <code>@next/mdx</code>와 App Router를 함께 사용할 때, <code>mdx-components.js</code> (또는 <code>mdx-components.tsx</code>) 파일은 꼭 필요한 친구예요. 이 파일이 없으면 MDX를 제대로 쓸 수 없거든요. 게다가 이 파일을 활용하면 MDX 내에서 사용하는 컴포넌트들의 스타일이나 동작을 커스터마이징할 수도 있답니다!</p>\n<hr>\n<h2>위치는 어디에?</h2>\n<ul>\n<li>프로젝트 루트 바로 아래에 둬요.</li>\n<li>예를 들어, <code>pages</code> 또는 <code>app</code> 폴더와 같은 레벨에 (또는 <code>src</code> 폴더 안에) 두면 좋아요.</li>\n</ul>\n<hr>\n<h2>기본적인 작성법</h2>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">type</span> { <span class=\"hljs-title class_\">MDXComponents</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'mdx/types'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useMDXComponents</span>(<span class=\"hljs-params\">components: MDXComponents</span>): <span class=\"hljs-title class_\">MDXComponents</span> {\n  <span class=\"hljs-keyword\">return</span> {\n    ...components,\n  }\n}\n</code></pre>\n<p>이 코드는 기본 설정으로 컴포넌트들을 그대로 반환하는 역할을 해요. 여기서 <code>components</code>에 우리가 직접 만든 커스텀 컴포넌트들을 덮어씌워서 스타일이나 기능을 내가 원하는 대로 바꿀 수 있죠.</p>\n<hr>\n<h2>실제로 커스텀 해보기</h2>\n<p>예를 들어, MDX 안에서 <code>&#x3C;h1></code> 태그의 스타일을 바꾸고 싶다면 이렇게 작성할 수 있어요:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">type</span> { <span class=\"hljs-title class_\">MDXComponents</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'mdx/types'</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">MyH1</span> = (<span class=\"hljs-params\">props</span>) => <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> '<span class=\"hljs-attr\">tomato</span>', <span class=\"hljs-attr\">fontSize:</span> '<span class=\"hljs-attr\">2.5rem</span>' }} {<span class=\"hljs-attr\">...props</span>} /></span></span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useMDXComponents</span>(<span class=\"hljs-params\">components: MDXComponents</span>): <span class=\"hljs-title class_\">MDXComponents</span> {\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">h1</span>: <span class=\"hljs-title class_\">MyH1</span>,\n    ...components,\n  }\n}\n</code></pre>\n<p>이렇게 하면 MDX 파일 내 <code>&#x3C;h1></code> 태그가 모두 토마토색 큰 글씨로 바뀌죠.</p>\n<hr>\n<h2>참고! 왜 이걸 쓰는 걸까?</h2>\n<p>MDX 안에는 기본 HTML 태그뿐만 아니라, React 컴포넌트도 자유롭게 넣을 수 있어요. 예를 들어 버튼, 카드, 또는 특별한 레이아웃 컴포넌트 등이죠. 이걸 한 번에 관리하고 싶다면 이 <code>mdx-components</code> 파일을 활용해서 확장하거나 수정하는 게 가장 깔끔하답니다.</p>\n<hr>\n<p><strong>정리하자면</strong>, <code>mdx-components.js</code>(또는 <code>.tsx</code>)는 Next.js + MDX 환경에서 커스텀 컴포넌트를 선언하고 스타일을 조절하는 중요한 허브 역할을 하니 꼭 기억하세요! 프로젝트에서 MDX를 쓴다면 이 친구는 필수랍니다 :)</p>\n<hr>\n<p>필요하면 나중에 커스텀 컴포넌트를 더 만드는 법도 알려드릴게요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>Exports</h2>\n<h3>useMDXComponents 함수</h3>\n<p>이 파일은 하나의 함수만 내보내야 해요. 기본 내보내기(default export)로 하거나 <code>useMDXComponents</code>라는 이름으로 내보낼 수 있죠.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> type { <span class=\"hljs-title class_\">MDXComponents</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'mdx/types'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useMDXComponents</span>(<span class=\"hljs-params\">components: MDXComponents</span>): <span class=\"hljs-title class_\">MDXComponents</span> {\n  <span class=\"hljs-keyword\">return</span> {\n    ...components,\n  }\n}\n</code></pre>\n<blockquote>\n<p>여기서 <code>useMDXComponents</code> 함수는 MDX 컴포넌트를 커스터마이징할 때 유용해요. 예를 들어, 기본 제공되는 MDX 컴포넌트를 당신만의 스타일이나 새로운 컴포넌트로 대체하고 싶을 때 이 함수를 사용하죠.<br>\n그리고 <code>components</code> 객체를 받아 그대로 돌려주고 있는데, 필요하면 여기에 새로운 컴포넌트를 추가하거나 기존 컴포넌트를 덮어씌우는 작업도 할 수 있어요.</p>\n<p>간단한 예를 들어볼게요:<br>\njs\nexport function useMDXComponents(components) {\nreturn {\nh1: (props) => &#x3C;h1 style={{ color: 'tomato' }} {...props} />,\n...components,\n}\n}</p>\n<p>이렇게 하면 MDX 내의 모든 <code>h1</code> 태그는 토마토색 글씨로 표시되겠죠!</p>\n<p>MDX로 콘텐츠 작업할 때 아주 많이 쓰이는 패턴입니다.<br>\n필요에 따라 잘 커스터마이징해보세요!</p>\n</blockquote>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>Params</h2>\n<h3>components</h3>\n<p>MDX 컴포넌트를 정의할 때, export 함수는 단일 파라미터인 <code>components</code>를 받습니다. 이 <code>components</code>는 <code>MDXComponents</code> 타입의 인스턴스인데요.</p>\n<ul>\n<li>**키(key)**는 대체하고자 하는 HTML 태그 이름을 의미합니다.</li>\n<li>**값(value)**은 해당 HTML 태그 대신 렌더링할 컴포넌트를 지정하는 거죠.</li>\n</ul>\n<p>즉, 기본 HTML 요소를 내 마음대로 바꾸고 싶을 때 유용하게 쓸 수 있습니다. 예를 들어, <code>&#x3C;h1></code> 태그를 나만의 스타일이 입혀진 헤딩 컴포넌트로 교체할 수도 있고, <code>&#x3C;a></code> 태그를 커스텀 링크 컴포넌트로 바꿔서 새 창 열기 같은 기능을 쉽게 추가할 수도 있답니다.</p>\n<p>이걸 활용하면 MDX 문서 내에서 일관된 UI를 손쉽게 유지할 수 있고, 스타일이나 동작도 프로젝트에 맞게 맞춤 설정할 수 있어요! 많이 써먹어보세요~</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<blockquote>\n<p>참고할 점: 오버라이드가 없는 다른 컴포넌트들도 모두 전달해주는 것(즉, ...components)을 잊지 마세요.</p>\n</blockquote>\n<h2>버전 히스토리</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td><code>v13.1.2</code></td><td>MDX 컴포넌트 추가</td></tr></tbody></table>\n<p>여기서 MDX 컴포넌트란, Markdown과 React 컴포넌트를 함께 쓸 수 있게 해주는 기능이에요. 프로젝트에서 문서나 블로그 작성할 때 훨씬 유용하게 쓰이니까 꼭 한 번 써보시길 추천합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}