{"pageProps":{"post":{"title":"코드를 깔끔하게 만드는 TypeScript 절대 경로 설정 방법","description":"","date":"2024-07-07 19:25","slug":"2024-07-07-ConfiguringAbsolutePathstoyourTSforCleanerCode","content":"\n\n안녕하세요, 이 DIY 프로젝트에 오신 것을 환영합니다,\n\n시작하기 전에, 제 소개를 드리겠습니다. 전 저는 풀 스택 개발자입니다.\n\n그럼, 이 작업에 필요한 사전 준비물을 살펴봅시다.\n\n- 노드가 설치되어 있어야 합니다. (설치되어 있지 않다면 여기를 클릭해주세요)\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위에서 언급한 요구 사항을 확인해주세요.\n\nHapi와 함께 TypeScript 프로젝트에서 절대 경로를 설정하려면 TypeScript 및 모듈 해결 설정을 구성해야 합니다. 다음은 단계별 안내서입니다:\n\n- TypeScript 경로 구성:\n\ntsconfig.json을 수정하여 baseUrl 및 paths 속성을 포함시킵니다. 이는 TypeScript에게 지정된 기본 URL을 기준으로 모듈을 해결하도록 지시합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@controllers/*\": [\"src/controllers/*\"],\n      \"@models/*\": [\"src/models/*\"],\n      \"@utils/*\": [\"src/utils/*\"]\n    }\n  }\n}\n```\n\n2. Import 문 업데이트:\n\n이제 정의된 별칭을 import 문에서 사용할 수 있습니다. 예를 들어:\n\n```js\nimport { SomeController } from '@controllers/SomeController';\nimport { SomeModel } from '@models/SomeModel';\nimport { SomeUtil } from '@utils/SomeUtil';\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n3. Node.js를 위한 모듈 해석 설정:\n\nNode.js는 기본적으로 TypeScript 경로 별칭을 이해하지 못합니다. 이를 처리하기 위해 `tsconfig-paths`와 같은 패키지를 사용할 수 있습니다. 다음 명령어를 사용하여 설치하세요:\n\n```js\nnpm install tsconfig-paths - save-dev\n```\n\n4. Node.js 진입점 업데이트:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ntsconfig-paths를 사용하여 tsconfig.json에 정의된 모듈 경로를 로드한 후 애플리케이션을 시작하십시오. package.json의 `start` 스크립트를 업데이트하거나 새로운 진입점 파일을 만들어주세요:\n\n```js\n{\n  \"scripts\": {\n    \"start\": \"ts-node -r tsconfig-paths/register src/server.ts\"\n  }\n}\n```\n\n또는 새로운 진입점 파일 start.ts를 만들어주세요:\n\n```js\nimport 'tsconfig-paths/register';\nimport './src/server';\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n패키지 파일(package.json)을 아래와 같이 엔트리 포인트를 변경해주세요:\n\n```js\n{\n  \"scripts\": {\n    \"start\": \"ts-node start.ts\"\n  }\n}\n```\n\n5. 선택 사항: Babel 사용하기 (고급 설정을 위해):\n\n프로젝트에서 Babel을 사용 중이라면, 경로 별칭을 인식하도록 Babel을 구성해야 할 수 있습니다. babel-plugin-module-resolver 플러그인을 사용할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n플러그인을 설치해 보세요:\n\n```js\nnpm install babel-plugin-module-resolver --save-dev\n```\n\n귀하의 .babelrc 또는 babel.config.js를 업데이트하세요:\n\n```js\n{\n  \"plugins\": [\n    [\"module-resolver\", {\n      \"root\": [\"./src\"],\n      \"alias\": {\n        \"@/*\": \"./src/*\"\n      }\n    }]\n  ]\n}\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 단계를 완료하면 프로젝트가 tsconfig.json에서 정의한 별칭을 기반으로 한 절대 경로를 사용하도록 설정됩니다. 이는 import를 더 효율적으로 관리하고 상대 경로 문제를 줄이는 데 도움이 될 것입니다.\n\n만약 이 블로그를 읽어오면 새로운 것을 성공적으로 배웠을 것입니다. \n\n모두 좋은 결과를 얻길 바라며 코딩을 하시고, 이 블로그에 박수를 보내거나 팔로우 버튼을 눌러주시면 더 많은 블로그를 작성하게 도와주세요.\n\n만약 이 블로그를 좋아하셨다면 커피 한 잔 사주실 수도 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n노드 체크 업데이트: 버전 악몽을 해결하는 완벽한 방법 | Akhshy Ganesh 저 | 2024년 7월 | Medium\n\n주니어 개발자가 하는 React useEffect 실수 | Akhshy Ganesh 저 | 2024년 6월 | Medium\n\nReact, MFE 웹팩 모듈 연합 생성하기 | Akhshy Ganesh 저 | 2024년 6월 | Medium","ogImage":{"url":"/TIL/assets/no-image.jpg"},"coverImage":"/TIL/assets/no-image.jpg","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요, 이 DIY 프로젝트에 오신 것을 환영합니다,</p>\n<p>시작하기 전에, 제 소개를 드리겠습니다. 전 저는 풀 스택 개발자입니다.</p>\n<p>그럼, 이 작업에 필요한 사전 준비물을 살펴봅시다.</p>\n<ul>\n<li>노드가 설치되어 있어야 합니다. (설치되어 있지 않다면 여기를 클릭해주세요)</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위에서 언급한 요구 사항을 확인해주세요.</p>\n<p>Hapi와 함께 TypeScript 프로젝트에서 절대 경로를 설정하려면 TypeScript 및 모듈 해결 설정을 구성해야 합니다. 다음은 단계별 안내서입니다:</p>\n<ul>\n<li>TypeScript 경로 구성:</li>\n</ul>\n<p>tsconfig.json을 수정하여 baseUrl 및 paths 속성을 포함시킵니다. 이는 TypeScript에게 지정된 기본 URL을 기준으로 모듈을 해결하도록 지시합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"compilerOptions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"baseUrl\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\".\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"paths\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"@controllers/*\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"src/controllers/*\"</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"@models/*\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"src/models/*\"</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"@utils/*\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"src/utils/*\"</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ol start=\"2\">\n<li>Import 문 업데이트:</li>\n</ol>\n<p>이제 정의된 별칭을 import 문에서 사용할 수 있습니다. 예를 들어:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SomeController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@controllers/SomeController'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SomeModel</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@models/SomeModel'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">SomeUtil</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@utils/SomeUtil'</span>;\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ol start=\"3\">\n<li>Node.js를 위한 모듈 해석 설정:</li>\n</ol>\n<p>Node.js는 기본적으로 TypeScript 경로 별칭을 이해하지 못합니다. 이를 처리하기 위해 <code>tsconfig-paths</code>와 같은 패키지를 사용할 수 있습니다. 다음 명령어를 사용하여 설치하세요:</p>\n<pre><code class=\"hljs language-js\">npm install tsconfig-paths - save-dev\n</code></pre>\n<ol start=\"4\">\n<li>Node.js 진입점 업데이트:</li>\n</ol>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>tsconfig-paths를 사용하여 tsconfig.json에 정의된 모듈 경로를 로드한 후 애플리케이션을 시작하십시오. package.json의 <code>start</code> 스크립트를 업데이트하거나 새로운 진입점 파일을 만들어주세요:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"ts-node -r tsconfig-paths/register src/server.ts\"</span>\n  }\n}\n</code></pre>\n<p>또는 새로운 진입점 파일 start.ts를 만들어주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'tsconfig-paths/register'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./src/server'</span>;\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>패키지 파일(package.json)을 아래와 같이 엔트리 포인트를 변경해주세요:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"ts-node start.ts\"</span>\n  }\n}\n</code></pre>\n<ol start=\"5\">\n<li>선택 사항: Babel 사용하기 (고급 설정을 위해):</li>\n</ol>\n<p>프로젝트에서 Babel을 사용 중이라면, 경로 별칭을 인식하도록 Babel을 구성해야 할 수 있습니다. babel-plugin-module-resolver 플러그인을 사용할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>플러그인을 설치해 보세요:</p>\n<pre><code class=\"hljs language-js\">npm install babel-plugin-<span class=\"hljs-variable language_\">module</span>-resolver --save-dev\n</code></pre>\n<p>귀하의 .babelrc 또는 babel.config.js를 업데이트하세요:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"plugins\"</span>: [\n    [<span class=\"hljs-string\">\"module-resolver\"</span>, {\n      <span class=\"hljs-string\">\"root\"</span>: [<span class=\"hljs-string\">\"./src\"</span>],\n      <span class=\"hljs-string\">\"alias\"</span>: {\n        <span class=\"hljs-string\">\"@/*\"</span>: <span class=\"hljs-string\">\"./src/*\"</span>\n      }\n    }]\n  ]\n}\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위 단계를 완료하면 프로젝트가 tsconfig.json에서 정의한 별칭을 기반으로 한 절대 경로를 사용하도록 설정됩니다. 이는 import를 더 효율적으로 관리하고 상대 경로 문제를 줄이는 데 도움이 될 것입니다.</p>\n<p>만약 이 블로그를 읽어오면 새로운 것을 성공적으로 배웠을 것입니다.</p>\n<p>모두 좋은 결과를 얻길 바라며 코딩을 하시고, 이 블로그에 박수를 보내거나 팔로우 버튼을 눌러주시면 더 많은 블로그를 작성하게 도와주세요.</p>\n<p>만약 이 블로그를 좋아하셨다면 커피 한 잔 사주실 수도 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>노드 체크 업데이트: 버전 악몽을 해결하는 완벽한 방법 | Akhshy Ganesh 저 | 2024년 7월 | Medium</p>\n<p>주니어 개발자가 하는 React useEffect 실수 | Akhshy Ganesh 저 | 2024년 6월 | Medium</p>\n<p>React, MFE 웹팩 모듈 연합 생성하기 | Akhshy Ganesh 저 | 2024년 6월 | Medium</p>\n</body>\n</html>\n"},"__N_SSG":true}