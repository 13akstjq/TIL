{"pageProps":{"post":{"title":"1만 5천 달러로 트레이딩 봇 운영하기 단계별 가이드","description":"","date":"2024-07-14 20:24","slug":"2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt","content":"\n\n![Binance Testnet](/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_0.png)\n\n얼마 전부터 거래 봇을 만들고 작업하는 것을 즐기고 있어요. 거의 1.5년 정도예요. 그 과정에서 저는 계정을 활용하면서 Python과 거래 지식을 비동기적으로 향상시켰어요.\n\n오늘의 블로그 포스트에서는 여러분도 자신만의 거래 봇을 개발하고 테스트하는 여정을 시작할 수 있는 방법에 대해 알아볼 거에요! 🤩\n\n자, 시작해봅시다... 🥁... 바이낸스 테스트넷!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 트레이딩 봇을 사용하는 이유\n\n주식 거래란 회사의 주식을 사고 팔아서 가격 변동에 기반해 돈을 벌려고 하는 것을 의미합니다.\n\n![Trading Bot](/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_1.png)\n\n주식을 암호화폐로 바꾸면 동일한 정의가 됩니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n거래 전략은 분당 또는 심지어 초당으로 여러 거래를 배치하고 구성할 수 있기 때문에 거래 봇을 활용하여이 프로세스를 자동화하는 것은 많은 사람들에게 매우 유용합니다!\n\n어느 정도까지는 거래의 감정적인 부분을 제거하기도하며, 이것이 많은 경우에 훌륭한 거래자와 나쁜 거래자를 구분하는 중요한 부분입니다!\n\n# 테스트넷이 무엇인가요?\n\n이것은 여러분의 테스트 환경입니다. 바이낸스와 같은 대형 암호 화폐 거래소들은 이를 우리에게 우리의 전략을 테스트하고 수익을 잃지 않도록 도와주는 도구로 제공합니다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그 목표는 실제 거래 환경을 모방하지만 `푸가지`(가짜) 돈을 사용하는 것입니다. 💸\n\n![이미지](https://miro.medium.com/v2/resize:fit:490/1*WNIJgycm4pTBkdcFU5Pb5w.gif)\n\n# 환경 설정하기\n\n이제 첫 번째 거래 봇을 개발하고, 바이낸스 테스트넷에서 실행하여 15,000달러의 암호화폐 지갑으로 무엇을 할 수 있는지 살펴봅시다! 🤑\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## IDE 설정\n\n이 프로젝트에서는 VisualStudio Code를 IDE로 사용할 것입니다.\n\nPyCharm이나 다른 개발 플랫폼을 자유롭게 사용해주세요!\n\n## 바이낸스 테스트넷 계정\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음으로, Binance 테스트넷 계정을 설정하세요. 아래는 그 방법을 단계별로 안내해드립니다!👇\n\n마지막에는 테스트넷 계정용 API_KEY 및 API_SECRET이 있어야 합니다.\n\n위 과정을 진행하는 데 어려움을 겪는다면 메시지나 댓글을 남겨주세요. 도와드릴 시간을 내어 도와드리겠습니다! 💪\n\n# 우리의 트레이딩 봇 만들기\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리는 미래에 이동 평균을 사용하여 추세를 식별하는데 트레이더 사이에서 인기 있는 도구 중 하나인 바이낸스 선물 거래 봇을 만들 것입니다.\n\n우리는 단순 이동 평균(SMA) 교차 전략을 사용할 것인데, 이는 단기 이동 평균이 장기 이동 평균을 꺾을 때 매수(하이 포지션)하고, 그 반대의 경우에 매도(숏 포지션)하는 전략입니다.\n\n![image](/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_2.png)\n\n## 1. 이 봇에 사용할 라이브러리를 정의합시다\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom binance.client import Client # pip install python-binance\nfrom binance.enums import *\nimport pandas as pd # pip install pandas\nimport numpy as np # pip install numpy\n```\n\n모두 `라이브러리 이름`을 이용해서 pip install 명령어로 설치할 수 있어요.\n\n## 2. 이제, 우리의 바이낸스 클라이언트를 정의해봅시다.\n\n여기서 매우 중요한 부분인데, `메인 계정이 아닌 Testnet API_KEY 및 API_SECRET을 사용하세요. 메인 계정과는 호환되지 않습니다!\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\r\nAPI_KEY = '<상기 테스트넷 설정 과정에서 생성한 키>'\r\nAPI_SECRET = '<상기 테스트넷 설정 과정에서 생성한 시크릿>'\r\n\r\nclient = Client(api_key=API_KEY, api_secret=API_SECRET, testnet=True)\r\n```\r\n\r\n‼️ API 키와 시크릿을 저장하는 위치와 방법에 주의하세요. 심지어 테스트넷 계정의 경우에도 dotenv와 같은 도구를 사용하여 로컬에 안전하게 저장하고 GitHub에 공개하지 말아주세요! 😅\r\n\r\n## 3. 전략 및 함수 정의\r\n\r\n```js\r\n# 캔들스틱 데이터를 가져오는 함수:\r\ndef fetch_data(symbol, interval, lookback):\r\n    bars = client.futures_historical_klines(symbol, interval, lookback)\r\n    df = pd.DataFrame(bars, columns=['timestamp', 'open', 'high', 'low', 'close'])\r\n    df['close'] = pd.to_numeric(df['close'])\r\n    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')\r\n    return df[['timestamp', 'close']] # 데이터 중 필요한 부분만 반환\r\n\r\n# 주요 전략 로직 및 실행부 👇\r\ndef sma_strategy(symbol='BTCUSDT', interval='1h', short_window=50, long_window=200, lookback='30 days ago UTC'):\r\n    data = fetch_data(symbol, interval, lookback)\r\n    \r\n    data['short_sma'] = data['close'].rolling(window=short_window).mean()\r\n    data['long_sma'] = data['close'].rolling(window=long_window).mean()\r\n    \r\n    # 포지션 없이 시작한다고 가정\r\n    in_position = False\r\n\r\n    # SMA 교차 확인\r\n    # SMA가 LMA를 아래로 교차할 때 (암호화폐 매수)👇\r\n    if data['short_sma'].iloc[-2] < data['long_sma'].iloc[-2] and data['short_sma'].iloc[-1] > data['long_sma'].iloc[-1]:\r\n\r\n        if not in_position:\r\n            print(\"매수 신호!\")\r\n            order = client.futures_create_order(symbol=symbol, side='BUY', type='MARKET', quantity=0.01)\r\n            in_position = True\r\n            print(order)\r\n\r\n    # LMA가 SMA를 아래로 교차할 때 (암호화폐 매도) 👇  \r\n    elif data['short_sma'].iloc[-2] > data['long_sma'].iloc[-2] and data['short_sma'].iloc[-1] < data['long_sma'].iloc[-1]:\r\n\r\n        if in_position:\r\n            print(\"매도 신호!\")\r\n            order = client.futures_create_order(symbol=symbol, side='SELL', type='MARKET', quantity=0.01)\r\n            in_position = False\r\n            \r\n\r\nif __name__ == '__main__':\r\n    sma_strategy()\r\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n너무 세부적으로 언급하지 않겠습니다. 이것은 기본 전략이고 코드는 복잡해 보일지 몰라도 이해하기 어렵지 않습니다!\n\n가장 중요한 점은 이동평균간의 교차점이 발생할 때, 우리는 바이낸스 테스트넷에서 숏 또는 롱 선물 주문을 실행합니다!\n\n## 4. 거래 모니터링\n\n![거래 모니터링](/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_3.png)\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래에서 아직 실행되지 않은 오픈 주문들을 볼 수 있습니다. 이것은 내가 설정한 가격에 충족되지 않았기 때문에 실행되지 않았습니다.\n\n오른쪽에는 제 계정 잔액을 보실 수 있어요. 현재 약 13k 정도입니다. 좀 더 복잡한 봇을 작업한 결과로, 기능들을 테스트하기 위해 여러 거래를 실행했죠. 😅\n\n설정에 문제가 있거나 도움이 필요하면 언제든지 연락해주세요! 언제든 도움이나 조언을 드릴 수 있어요! 🤲\n\nLinkedIn: https://www.linkedin.com/in/kbor/\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 Markdown 형식으로 변경된 내용입니다.\n\nDiscord: @ konstantinmb\n\nTwitter/X: [https://twitter.com/konstantinmbv](https://twitter.com/konstantinmbv)\n\n# Experiment\n\n![Experiment](/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_4.png)\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n💪 소프트웨어 엔지니어링 및 다른 분야에서 가장 중요한 모토 중 하나일 거예요. 실제로 실습하는 것을 이길 게 없죠. 스스로 시도해보는 것만큼 가르쳐줄 수 있는 자습서는 없어요!\n\n🆓 바이낸스 테스트넷을 통해 가상 화폐를 사용하고 실제 플랫폼에서 원하는 대로 실험할 수 있어요! 이 프로그래밍 거래 기술을 개발할 수 있는 놀라운 기회라구요!\n\n저도 현재 그렇게 하고 있어요! 함께 해요! 🍻\n\n즐거웠길 바랄게요! 저는 거래 봇을 만드는 것을 좋아하며 여기와 Substack에서 나의 경험을 더 많이 공유할 거에요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기서 다른 블로그도 확인해보세요 👇\n\n이와 함께 👏을 클릭하고 제 프로필 @ Konstantin Borimechkov을 구독해 주세요. 이와 같은 콘텐츠를 더 보고 싶다면!\n\n글쓰기와 지식 공유를 사랑하고 있어요. 여러분의 지원은 저에게 큰 힘이 됩니다! 💚","ogImage":{"url":"/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_0.png"},"coverImage":"/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_0.png\" alt=\"Binance Testnet\"></p>\n<p>얼마 전부터 거래 봇을 만들고 작업하는 것을 즐기고 있어요. 거의 1.5년 정도예요. 그 과정에서 저는 계정을 활용하면서 Python과 거래 지식을 비동기적으로 향상시켰어요.</p>\n<p>오늘의 블로그 포스트에서는 여러분도 자신만의 거래 봇을 개발하고 테스트하는 여정을 시작할 수 있는 방법에 대해 알아볼 거에요! 🤩</p>\n<p>자, 시작해봅시다... 🥁... 바이낸스 테스트넷!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>트레이딩 봇을 사용하는 이유</h1>\n<p>주식 거래란 회사의 주식을 사고 팔아서 가격 변동에 기반해 돈을 벌려고 하는 것을 의미합니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_1.png\" alt=\"Trading Bot\"></p>\n<p>주식을 암호화폐로 바꾸면 동일한 정의가 됩니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>거래 전략은 분당 또는 심지어 초당으로 여러 거래를 배치하고 구성할 수 있기 때문에 거래 봇을 활용하여이 프로세스를 자동화하는 것은 많은 사람들에게 매우 유용합니다!</p>\n<p>어느 정도까지는 거래의 감정적인 부분을 제거하기도하며, 이것이 많은 경우에 훌륭한 거래자와 나쁜 거래자를 구분하는 중요한 부분입니다!</p>\n<h1>테스트넷이 무엇인가요?</h1>\n<p>이것은 여러분의 테스트 환경입니다. 바이낸스와 같은 대형 암호 화폐 거래소들은 이를 우리에게 우리의 전략을 테스트하고 수익을 잃지 않도록 도와주는 도구로 제공합니다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그 목표는 실제 거래 환경을 모방하지만 <code>푸가지</code>(가짜) 돈을 사용하는 것입니다. 💸</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:490/1*WNIJgycm4pTBkdcFU5Pb5w.gif\" alt=\"이미지\"></p>\n<h1>환경 설정하기</h1>\n<p>이제 첫 번째 거래 봇을 개발하고, 바이낸스 테스트넷에서 실행하여 15,000달러의 암호화폐 지갑으로 무엇을 할 수 있는지 살펴봅시다! 🤑</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>IDE 설정</h2>\n<p>이 프로젝트에서는 VisualStudio Code를 IDE로 사용할 것입니다.</p>\n<p>PyCharm이나 다른 개발 플랫폼을 자유롭게 사용해주세요!</p>\n<h2>바이낸스 테스트넷 계정</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다음으로, Binance 테스트넷 계정을 설정하세요. 아래는 그 방법을 단계별로 안내해드립니다!👇</p>\n<p>마지막에는 테스트넷 계정용 API_KEY 및 API_SECRET이 있어야 합니다.</p>\n<p>위 과정을 진행하는 데 어려움을 겪는다면 메시지나 댓글을 남겨주세요. 도와드릴 시간을 내어 도와드리겠습니다! 💪</p>\n<h1>우리의 트레이딩 봇 만들기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>우리는 미래에 이동 평균을 사용하여 추세를 식별하는데 트레이더 사이에서 인기 있는 도구 중 하나인 바이낸스 선물 거래 봇을 만들 것입니다.</p>\n<p>우리는 단순 이동 평균(SMA) 교차 전략을 사용할 것인데, 이는 단기 이동 평균이 장기 이동 평균을 꺾을 때 매수(하이 포지션)하고, 그 반대의 경우에 매도(숏 포지션)하는 전략입니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_2.png\" alt=\"image\"></p>\n<h2>1. 이 봇에 사용할 라이브러리를 정의합시다</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> binance.client <span class=\"hljs-keyword\">import</span> Client <span class=\"hljs-comment\"># pip install python-binance</span>\n<span class=\"hljs-keyword\">from</span> binance.enums <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd <span class=\"hljs-comment\"># pip install pandas</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np <span class=\"hljs-comment\"># pip install numpy</span>\n</code></pre>\n<p>모두 <code>라이브러리 이름</code>을 이용해서 pip install 명령어로 설치할 수 있어요.</p>\n<h2>2. 이제, 우리의 바이낸스 클라이언트를 정의해봅시다.</h2>\n<p>여기서 매우 중요한 부분인데, `메인 계정이 아닌 Testnet API_KEY 및 API_SECRET을 사용하세요. 메인 계정과는 호환되지 않습니다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">API_KEY</span> = <span class=\"hljs-string\">'&#x3C;상기 테스트넷 설정 과정에서 생성한 키>'</span>\r\n<span class=\"hljs-variable constant_\">API_SECRET</span> = <span class=\"hljs-string\">'&#x3C;상기 테스트넷 설정 과정에서 생성한 시크릿>'</span>\r\n\r\nclient = <span class=\"hljs-title class_\">Client</span>(api_key=<span class=\"hljs-variable constant_\">API_KEY</span>, api_secret=<span class=\"hljs-variable constant_\">API_SECRET</span>, testnet=<span class=\"hljs-title class_\">True</span>)\n</code></pre>\n<p>‼️ API 키와 시크릿을 저장하는 위치와 방법에 주의하세요. 심지어 테스트넷 계정의 경우에도 dotenv와 같은 도구를 사용하여 로컬에 안전하게 저장하고 GitHub에 공개하지 말아주세요! 😅</p>\n<h2>3. 전략 및 함수 정의</h2>\n<pre><code class=\"hljs language-js\"># 캔들스틱 데이터를 가져오는 함수:\r\ndef <span class=\"hljs-title function_\">fetch_data</span>(symbol, interval, lookback):\r\n    bars = client.<span class=\"hljs-title function_\">futures_historical_klines</span>(symbol, interval, lookback)\r\n    df = pd.<span class=\"hljs-title class_\">DataFrame</span>(bars, columns=[<span class=\"hljs-string\">'timestamp'</span>, <span class=\"hljs-string\">'open'</span>, <span class=\"hljs-string\">'high'</span>, <span class=\"hljs-string\">'low'</span>, <span class=\"hljs-string\">'close'</span>])\r\n    df[<span class=\"hljs-string\">'close'</span>] = pd.<span class=\"hljs-title function_\">to_numeric</span>(df[<span class=\"hljs-string\">'close'</span>])\r\n    df[<span class=\"hljs-string\">'timestamp'</span>] = pd.<span class=\"hljs-title function_\">to_datetime</span>(df[<span class=\"hljs-string\">'timestamp'</span>], unit=<span class=\"hljs-string\">'ms'</span>)\r\n    <span class=\"hljs-keyword\">return</span> df[[<span class=\"hljs-string\">'timestamp'</span>, <span class=\"hljs-string\">'close'</span>]] # 데이터 중 필요한 부분만 반환\r\n\r\n# 주요 전략 로직 및 실행부 👇\r\ndef <span class=\"hljs-title function_\">sma_strategy</span>(symbol=<span class=\"hljs-string\">'BTCUSDT'</span>, interval=<span class=\"hljs-string\">'1h'</span>, short_window=<span class=\"hljs-number\">50</span>, long_window=<span class=\"hljs-number\">200</span>, lookback=<span class=\"hljs-string\">'30 days ago UTC'</span>):\r\n    data = <span class=\"hljs-title function_\">fetch_data</span>(symbol, interval, lookback)\r\n    \r\n    data[<span class=\"hljs-string\">'short_sma'</span>] = data[<span class=\"hljs-string\">'close'</span>].<span class=\"hljs-title function_\">rolling</span>(<span class=\"hljs-variable language_\">window</span>=short_window).<span class=\"hljs-title function_\">mean</span>()\r\n    data[<span class=\"hljs-string\">'long_sma'</span>] = data[<span class=\"hljs-string\">'close'</span>].<span class=\"hljs-title function_\">rolling</span>(<span class=\"hljs-variable language_\">window</span>=long_window).<span class=\"hljs-title function_\">mean</span>()\r\n    \r\n    # 포지션 없이 시작한다고 가정\r\n    in_position = <span class=\"hljs-title class_\">False</span>\r\n\r\n    # <span class=\"hljs-variable constant_\">SMA</span> 교차 확인\r\n    # <span class=\"hljs-variable constant_\">SMA</span>가 <span class=\"hljs-variable constant_\">LMA</span>를 아래로 교차할 때 (암호화폐 매수)👇\r\n    <span class=\"hljs-keyword\">if</span> data[<span class=\"hljs-string\">'short_sma'</span>].<span class=\"hljs-property\">iloc</span>[-<span class=\"hljs-number\">2</span>] &#x3C; data[<span class=\"hljs-string\">'long_sma'</span>].<span class=\"hljs-property\">iloc</span>[-<span class=\"hljs-number\">2</span>] and data[<span class=\"hljs-string\">'short_sma'</span>].<span class=\"hljs-property\">iloc</span>[-<span class=\"hljs-number\">1</span>] > data[<span class=\"hljs-string\">'long_sma'</span>].<span class=\"hljs-property\">iloc</span>[-<span class=\"hljs-number\">1</span>]:\r\n\r\n        <span class=\"hljs-keyword\">if</span> not <span class=\"hljs-attr\">in_position</span>:\r\n            <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"매수 신호!\"</span>)\r\n            order = client.<span class=\"hljs-title function_\">futures_create_order</span>(symbol=symbol, side=<span class=\"hljs-string\">'BUY'</span>, type=<span class=\"hljs-string\">'MARKET'</span>, quantity=<span class=\"hljs-number\">0.01</span>)\r\n            in_position = <span class=\"hljs-title class_\">True</span>\r\n            <span class=\"hljs-title function_\">print</span>(order)\r\n\r\n    # <span class=\"hljs-variable constant_\">LMA</span>가 <span class=\"hljs-variable constant_\">SMA</span>를 아래로 교차할 때 (암호화폐 매도) 👇  \r\n    elif data[<span class=\"hljs-string\">'short_sma'</span>].<span class=\"hljs-property\">iloc</span>[-<span class=\"hljs-number\">2</span>] > data[<span class=\"hljs-string\">'long_sma'</span>].<span class=\"hljs-property\">iloc</span>[-<span class=\"hljs-number\">2</span>] and data[<span class=\"hljs-string\">'short_sma'</span>].<span class=\"hljs-property\">iloc</span>[-<span class=\"hljs-number\">1</span>] &#x3C; data[<span class=\"hljs-string\">'long_sma'</span>].<span class=\"hljs-property\">iloc</span>[-<span class=\"hljs-number\">1</span>]:\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">in_position</span>:\r\n            <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"매도 신호!\"</span>)\r\n            order = client.<span class=\"hljs-title function_\">futures_create_order</span>(symbol=symbol, side=<span class=\"hljs-string\">'SELL'</span>, type=<span class=\"hljs-string\">'MARKET'</span>, quantity=<span class=\"hljs-number\">0.01</span>)\r\n            in_position = <span class=\"hljs-title class_\">False</span>\r\n            \r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\r\n    <span class=\"hljs-title function_\">sma_strategy</span>()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>너무 세부적으로 언급하지 않겠습니다. 이것은 기본 전략이고 코드는 복잡해 보일지 몰라도 이해하기 어렵지 않습니다!</p>\n<p>가장 중요한 점은 이동평균간의 교차점이 발생할 때, 우리는 바이낸스 테스트넷에서 숏 또는 롱 선물 주문을 실행합니다!</p>\n<h2>4. 거래 모니터링</h2>\n<p><img src=\"/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_3.png\" alt=\"거래 모니터링\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래에서 아직 실행되지 않은 오픈 주문들을 볼 수 있습니다. 이것은 내가 설정한 가격에 충족되지 않았기 때문에 실행되지 않았습니다.</p>\n<p>오른쪽에는 제 계정 잔액을 보실 수 있어요. 현재 약 13k 정도입니다. 좀 더 복잡한 봇을 작업한 결과로, 기능들을 테스트하기 위해 여러 거래를 실행했죠. 😅</p>\n<p>설정에 문제가 있거나 도움이 필요하면 언제든지 연락해주세요! 언제든 도움이나 조언을 드릴 수 있어요! 🤲</p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/kbor/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/kbor/</a></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래는 Markdown 형식으로 변경된 내용입니다.</p>\n<p>Discord: @ konstantinmb</p>\n<p>Twitter/X: <a href=\"https://twitter.com/konstantinmbv\" rel=\"nofollow\" target=\"_blank\">https://twitter.com/konstantinmbv</a></p>\n<h1>Experiment</h1>\n<p><img src=\"/TIL/assets/img/2024-07-14-RunningATradingBotWith15000Step-By-StepGuideOnHowToDoIt_4.png\" alt=\"Experiment\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>💪 소프트웨어 엔지니어링 및 다른 분야에서 가장 중요한 모토 중 하나일 거예요. 실제로 실습하는 것을 이길 게 없죠. 스스로 시도해보는 것만큼 가르쳐줄 수 있는 자습서는 없어요!</p>\n<p>🆓 바이낸스 테스트넷을 통해 가상 화폐를 사용하고 실제 플랫폼에서 원하는 대로 실험할 수 있어요! 이 프로그래밍 거래 기술을 개발할 수 있는 놀라운 기회라구요!</p>\n<p>저도 현재 그렇게 하고 있어요! 함께 해요! 🍻</p>\n<p>즐거웠길 바랄게요! 저는 거래 봇을 만드는 것을 좋아하며 여기와 Substack에서 나의 경험을 더 많이 공유할 거에요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여기서 다른 블로그도 확인해보세요 👇</p>\n<p>이와 함께 👏을 클릭하고 제 프로필 @ Konstantin Borimechkov을 구독해 주세요. 이와 같은 콘텐츠를 더 보고 싶다면!</p>\n<p>글쓰기와 지식 공유를 사랑하고 있어요. 여러분의 지원은 저에게 큰 힘이 됩니다! 💚</p>\n</body>\n</html>\n"},"__N_SSG":true}