{"pageProps":{"post":{"title":"데이터 사이언스 마스터를 위한 11가지 필수 Python Matplotlib 시각화","description":"","date":"2024-07-14 19:59","slug":"2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery","content":"\n\n## 파이썬 맷플롯립 시각화\n\n맷플롯립을 사용하면 파이썬으로 멋진 그림을 그릴 수 있어요. 데이터를 다양한 방식으로 표시할 수 있습니다. 많은 양의 코드가 필요하지 않아요. 선 그래프, 막대 차트 및 여러 종류의 차트를 만들 수 있어요.\n\n# 간단한 선 그래프\n\n- figures 와 axes: 맷플롯립에서 figure 는 상자 같아요. 플롯의 모든 부분을 보유해요. axes 는 figure 내부의 더 작은 상자처럼 생겼어요. 주변에 선들과 플롯의 의미를 알려주는 단어들이 있어요.\n- 변수 명명: Figure 객체는 일반적으로 `fig`로 이름을 짓고, axes 객체는 `ax`로 이름을 지어요.\n- 데이터 플로팅: `ax.plot` 메서드를 사용하여 axes에 데이터를 플로팅하세요.\n- Pylab 인터페이스: MATLAB과 유사한 인터페이스를 제공하여 자동으로 figure와 axes를 만들어줘요.\n- 여러 선: 동일한 figure에 여러 선을 그리려면 `plot` 함수를 여러 번 호출하세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\nfig = plt.figure()\nax = plt.axes()\nx = np.linspace(0, 10, 1000)\nplt.plot(x, np.sin(x))\nplt.plot(x, np.cos(x))\nplt.show()\n```\n\n![image](/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_0.png)\n\n# 간단한 산점도\n\n- 무엇인가: 산점도는 순서가 없는 점들을 가지고 있습니다. 선 그래프는 점들이 연결되어 있습니다.\n- 만드는 방법: 산점도를 그리려면 `plt.plot` 또는 `ax.plot`을 사용할 수 있습니다.\n- 점 스타일: 특별한 코드로 점의 모양을 변경할 수 있습니다. 문서에 어떤 코드를 사용해야 하는지 설명되어 있습니다.\n- `plt.scatter`의 재미있는 점: 각 점을 특별하게 만들 수 있습니다. 크기와 색상이 다를 수 있습니다. 이를 위해 데이터 세트를 사용합니다.\n- 투명한 점: 점을 서로 겹치게 만들 때 `alpha` 설정으로 점을 투명하게 만들 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\nrng = np.random.RandomState(0)\nx = rng.randn(100)\ny = rng.randn(100)\ncolors = rng.rand(100)\nsizes = 1000 * rng.rand(100)\nplt.scatter(x, y, c=colors, s=sizes, alpha=0.3,\n            cmap='viridis')\nplt.colorbar();\nplt.show()\n```\n\n<img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_1.png\" />\n\n# 오류 시각화\n\n- 왜 중요한가: 과학에서는 오류를 올바르게 이해하는 것이 측정 자체보다 중요하다.\n- 예를 들어: 허블 상수를 추측할 때 오류에 대해 고려해야 합니다. 이를 통해 서로 다른 측정 결과가 일치하는지 알 수 있습니다.\n- 불확실함 표현: 측정 값을 보고할 때 얼마나 확신이 없는지도 함께 말해야 합니다 (예: 71±2.5 (km/s)/Mpc). 이렇게 하면 데이터를 더 잘 비교할 수 있습니다.\n- 오류 표시: 차트에 오류를 넣으면 더 다양하고 정확한 정보를 얻을 수 있습니다.\n- `fmt` 설정: 차트에서 선과 점이 어떻게 보이는지를 제어합니다. `plt.plot` 코드와 비슷한 역할을 합니다.\n- `errorbar` 함수: 오차 막대 기호의 모양을 변경할 수 있게 해줍니다. 예를 들어, 가로로 만들어 진해지게 만들 수 있습니다.\n- 자신만의 스타일: 측면 오차 막대, 단측 오차 막대 등에 대한 더 많은 `errorbar` 설정을 활용하여 차트를 원하는 대로 꾸밉니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\nx = np.linspace(0, 10, 50)\ndy = 0.8\ny = np.sin(x) + dy * np.random.randn(50)\nplt.errorbar(x, y, yerr=dy, fmt='o', color='black',\n             ecolor='lightgray', elinewidth=3, capsize=0)\nplt.show()\n```\n\n<img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_2.png\" />\n\n# 밀도 및 등고도 플롯\n\n- 3D 데이터 시각화: 3D 데이터를 2D 차트로 표현하는 등고선 플롯이나 히트맵과 같은 차트 사용.\n- 함수 사용: 등고선 플로팅에는 `plt.contour`, 채워진 등고선 플로팅에는 `plt.contourf`, 이미지 형태로 플로팅에는 `plt.imshow` 사용.\n- 데이터 전처리: 1차원 배열로부터 2차원 그리드 생성하는 데 `np.meshgrid` 활용.\n- 등고선 플로팅하기: `plt.contour`는 그리드와 높이 값을 나타내는 `x`, `y`, `z`가 필요.\n- 선 스타일: 흑백 등고선 플롯에서 점선은 음수를, 실선은 양수를 의미.\n- 컬러 맵: `cmap`을 활용하여 등고선 색상 지정. 예를 들어, `RdGy`는 군집 데이터에 적합.\n- 컬러 바: 색상표를 만들기 위해 `plt.colorbar` 사용. 컬러 값의 범위를 보여줌.\n- 채워진 등고선 플로팅: `plt.contourf`를 사용하여 등고선 플로팅을 채움. 간격이 적고 보기 좋음.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n```js\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\ndef f(x, y):\n    return np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)\nx = np.linspace(0, 5, 50)\ny = np.linspace(0, 5, 40)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\nplt.contourf(X, Y, Z, 20, cmap='RdGy')\nplt.colorbar();\nplt.show()\n```\n\n![Image](/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_3.png)\n\n# 히스토그램, Binning 및 Density\n\n- 기본 히스토그램: Matplotlib의 `hist()` 함수를 사용하여 빠르게 기본 히스토그램을 생성합니다.\n- 매개변수 조정: `hist()`는 히스토그램 계산 및 표시를 조정하기 위한 매개변수를 제공합니다.\n- 설정 변경: 더 이상 `normed`를 사용하지 마세요. 대신 정규화하기 위해 `density`를 사용하세요.\n- 자신만의 스타일: `histtype='stepfilled'` 및 `alpha`를 사용하여 투명한 막대를 만들어서 서로 다른 데이터를 일치시키는 데 유용합니다.\n- 자세히 알아보기: `plt.hist` 문서를 확인하여 변경할 수 있는 방법에 대해 더 배우세요.\n- 숫자만 필요한 경우: 플롯 없이 히스토그램 숫자만 얻으려면 `np.histogram()`을 사용하세요.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\nx1 = np.random.normal(0, 0.8, 1000)\nx2 = np.random.normal(-2, 1, 1000)\nx3 = np.random.normal(3, 2, 1000)\nkwargs = dict(histtype='stepfilled', alpha=0.3, density=True, bins=40)\nplt.hist(x1, **kwargs)\nplt.hist(x2, **kwargs)\nplt.hist(x3, **kwargs);\nplt.show()\n```\n\n<img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_4.png\" />\n\n# 사용자 정의 범례\n\n- 중요성: 범례는 시각화에 의미를 부여하여 다양한 차트 요소를 명확하게 해줍니다.\n- 키 만들기: 이름으로 차트 부분에 키를 만들려면 `plt.legend()`를 사용합니다.\n- 다양한 설정: 키가 위치하게 할 곳을 선택하세요. 상자를 제거하세요. 여러 행을 사용하세요. 둥근 모서리 또는 그림자를 사용하세요. 투명도와 단어 간 간격을 조절하세요.\n- 표시할 항목 선택: 키에 들어갈 부분과 이름을 지정하세요. 이를 수행하려면 'plot'이 제공하는 것을 설정하세요.\n- 다수의 선: `plt.plot`은 여러 개의 선을 제공할 수 있습니다. 원하는대로 키를 만들려면 `plt.legend()`에 제공할 선을 선택하세요.\n- 부분에 이름 지정: 차트 부분에 직접 이름을 지정하세요. 그런 다음 키에 그 이름을 넣어서 쉽게 식별할 수 있도록 하세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\nx = np.linspace(0, 10, 1000)\ny = np.sin(x[:, np.newaxis] + np.pi * np.arange(0, 2, 0.5))\n\nplt.plot(x, y[:, 0], label='first')\nplt.plot(x, y[:, 1], label='second')\nplt.plot(x, y[:, 2:])\nplt.legend(framealpha=1, frameon=True)\nplt.show()\n```\n\n![Custom Colorbars](/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_5.png)\n\n# 사용자 정의 컬러바\n\n범례 vs. 컬러바: 범례는 이산적인 레이블을 나타내는 반면, 컬러바는 연속값-색상 관계를 나타냅니다.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n색상 막대 만들기: `plt.colorbar()`을 사용하여 색상 막대를 만듭니다.\n\n칼라맵: `cmap` 매개변수를 사용하여 칼라맵을 지정합니다.\n\n칼라맵 자원: 모든 사용 가능한 칼라맵은 `plt.cm` 모듈에서 찾을 수 있습니다. 칼라맵을 나열하려면 IPython의 탭 자동완성을 사용하세요.\n\n칼라맵 유형:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- a. 연속 색상지도: `binary` 또는 `viridis`와 같은 단일 연속 색상 시리즈입니다.\n- b. 발산 색상지도: `RdBu` 또는 `PuOr`와 같은 두 가지 대조되는 색상 시리즈입니다.\n- c. 질적 색상지도: `rainbow` 또는 `jet`과 같이 연속적이지 않은 색상 조합입니다.\n\n```js\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('classic')\nx = np.linspace(0, 10, 1000)\nI = np.sin(x) * np.cos(x[:, np.newaxis])\nplt.imshow(I, aspect='auto', cmap='viridis')\nplt.colorbar()\nplt.show()\n```\n\n![Visualization](/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_6.png)\n\n# 다중 서브플롯\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 컨셉: Matplotlib은 데이터를 옆으로 나란히 표시하기 위해 단일 그림에서 여러 서브플롯을 허용합니다.\n- 서브플롯 생성: `plt.axes()`를 사용하여 서브플롯을 생성하고, 위치와 크기를 `[왼쪽, 아래, 너비, 높이]`의 리스트 매개변수로 지정합니다.\n- 기본 동작: `plt.axes()`는 보통 전체 그림 영역을 채우는 축 객체를 만듭니다.\n- 정렬: `plt.subplot()`을 사용하여 그리드 안에 서브플롯을 생성하고, 행, 열 및 서브플롯 인덱스에 대한 매개변수를 사용합니다.\n- 다중 행/열: `plt.GridSpec()`를 사용하여 여러 행 또는 열에 걸쳐있는 서브플롯을 만들고, 그리드 레이아웃을 정의합니다.\n- GridSpec 사용법: `plt.GridSpec()`은 그리드 레이아웃을 정의하고, 서브플롯 생성 시 `plt.subplot()`에 전달할 수 있습니다.\n- GridSpec 특징: 직접 차트를 만들지는 않지만 서브플롯 그리드 레이아웃을 정의합니다.\n\n```js\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\nmean = [0, 0]\ncov = [[1, 1], [1, 2]]\nx, y = np.random.multivariate_normal(mean, cov, 3000).T\n# GridSpec를 사용하여 그리드를 생성하고 서브플롯을 추가합니다\nfig = plt.figure(figsize=(6, 6))\ngrid = plt.GridSpec(4, 4, hspace=0.2, wspace=0.2)\nmain_ax = fig.add_subplot(grid[:-1, 1:])\ny_hist = fig.add_subplot(grid[:-1, 0], xticklabels=[], sharey=main_ax)\nx_hist = fig.add_subplot(grid[-1, 1:], yticklabels=[], sharex=main_ax)\n# 주요 서브플롯에 산점도를 플롯합니다\nmain_ax.plot(x, y, 'ok', markersize=3, alpha=0.2)\n# x와 y 방향으로 히스토그램을 플롯합니다\nx_hist.hist(x, 40, histtype='stepfilled',\n            orientation='vertical', color='gray')\nx_hist.invert_yaxis() # x축 히스토그램의 y축 방향을 반전합니다 (우측 하단에 위치)\ny_hist.hist(y, 40, histtype='stepfilled',\n            orientation='horizontal', color='gray')\ny_hist.invert_xaxis() # y축 히스토그램의 x축 방향을 반전합니다 (상단 좌측에 위치)\nplt.show()\n```\n\n<img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_7.png\" />\n\n# 텍스트 및 주석\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 목적: 시각화는 데이터 뒤에 숨겨진 이야기를 독자에게 전달하기 위해 노력합니다.\n- 표현: 일부 차트는 그 자체로 이야기를 전달하지만, 다른 차트는 텍스트 지원이 필요합니다.\n- 주석: 차트에 텍스트 주석을 추가하여 독자의 주의를 끌고 이해를 돕습니다.\n- 텍스트 배치: 차트의 특정 위치(`x`, `y`)에 텍스트를 추가하려면 `plt.text` 또는 `ax.text`를 사용하세요.\n- 가이드: 정보 전달을 향상시키기 위해 텍스트 주석을 통해 독자를 주요 차트 기능으로 안내하세요.\n\n```js\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.dates as mdates\nplt.style.use('seaborn-v0_8-whitegrid')\n# 샘플 데이터셋 생성\ndates = pd.date_range(start='1969-01-01', end='1988-12-31', freq='D')\ndata = np.random.randint(3000, 5000, size=len(dates))\nbirths = pd.DataFrame(data, columns=['births'], index=dates)\nfig, ax = plt.subplots(figsize=(12, 4))\nbirths_by_date = births.pivot_table('births', [births.index.month, births.index.day])\nbirths_by_date.index = [pd.Timestamp(year=2012, month=month, day=day) for month, day in births_by_date.index]\nbirths_by_date.plot(ax=ax)\n# 선 플롯의 특정 위치에 주석 추가\nstyle = dict(size=10, color='gray')\nax.text(pd.Timestamp('2012-1-1'), 3950, \"New Year's Day\", **style)\nax.text(pd.Timestamp('2012-7-4'), 4250, \"Independence Day\", ha='center', **style)\nax.text(pd.Timestamp('2012-9-4'), 4850, \"Labor Day\", ha='center', **style)\nax.text(pd.Timestamp('2012-10-31'), 4600, \"Halloween\", ha='right', **style)\nax.text(pd.Timestamp('2012-11-25'), 4450, \"Thanksgiving\", ha='center', **style)\nax.text(pd.Timestamp('2012-12-25'), 3850, \"Christmas\", ha='right', **style)\n# 제목과 y축 레이블 설정\nax.set(title='USA births by day of year (1969-1988)',\n       ylabel='average daily births')\n# x축에 월 레이블을 중앙에 정렬\nax.xaxis.set_major_locator(mdates.MonthLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator(bymonthday=15))\nax.xaxis.set_major_formatter(plt.NullFormatter())\nax.xaxis.set_minor_formatter(mdates.DateFormatter('%b'))\nplt.show()\n```\n\n# 커스텀 눈금\n\n- 눈금 변경: Matplotlib의 보통 눈금은 대부분의 차트에 적합합니다. 그러나 일부를 위해 변경해야 할 수도 있습니다.\n- 물건 속의 물건: Matplotlib의 모든 차트 부분은 물건입니다. 도표에는 축이 있습니다. 축에는 차트 요소가 있습니다.\n- 축 요소: 축에는 `xaxis`와 `yaxis`가 있습니다. 이들은 선, 눈금, 이름 등을 가지고 있습니다.\n- 새 버전: Matplotlib 2.0 이후로 긴 축에 작은 눈금이 숨겨지게 되었습니다. 이것은 `xlim`과 `ylim`으로 변경할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.style.use('seaborn-v0_8-whitegrid')\r\nfig, ax = plt.subplots()\r\nx = np.linspace(0, 3 * np.pi, 1000)\r\nax.plot(x, np.sin(x), lw=3, label='Sine')\r\nax.plot(x, np.cos(x), lw=3, label='Cosine')\r\nax.grid(True)\r\nax.legend(frameon=False)\r\nax.axis('equal')\r\nax.set_xlim(0, 3 * np.pi)\r\nplt.show()\r\n```\r\n\r\n<img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_8.png\" />\r\n\r\n# Matplotlib에서 3D 플롯 만들기\r\n\r\n- 2D에서 3D로: Matplotlib은 처음에는 2D 플롯만 지원했지만, 3D 플롯 도구는 버전 1.0에서 소개되었습니다.\r\n- 3D 도구 모음: 3D 플로팅은 Matplotlib과 함께 제공되는 `mplot3d` 도구 모음을 로드하여 수행됩니다.\r\n- 3D 플롯 유형: 3D 축을 활성화한 후 3D 라인 및 산점도와 같은 다양한 3D 플롯을 그릴 수 있습니다.\r\n- 3D 플로팅 함수: 3D 라인 플롯 및 산점도 플롯에는 각각 `ax.plot3D` 및 `ax.scatter3D`를 사용합니다.\r\n- 투명도와 깊이: 깊이를 나타내기 위해 산점도 플롯에는 다양한 투명도가 적용됩니다.\r\n- 대화식 뷰: 대화식 뷰를 통해 더 나은 3D 시각 경험을 제공합니다.\r\n- 3D 버프 맵: `mplot3d` 도구 모음에는 3D 버프 맵을 만드는 도구가 있습니다. 이것들은 2D `ax.contour`와 유사합니다.\r\n- 3D 표면 차트: 표면 차트는 색의 변화로 3D 표면을 보여줍니다. 와이어 차트보다 더 나은 시각적 효과를 제공합니다.\r\n- 그리드 데이터 이미지: 그리드 데이터에서 생성된 3D 이미지에는 와이어 차트와 표면 차트가 있습니다. 데이터를 3D 모양에 표시하여 더 명확하고 설득력있게 만듭니다.\r\n- 틱 스타일 변경: 일반 틱 스타일은 대부분의 작업에 적합하지만, 사인 및 코사인 차트와 같은 특정 차트에 대해 변경해야 할 수 있습니다.\r\n- 사용자 정의 예제: 틱이 위치하고 어떻게 보이는지 변경하면 차트가 무엇을 의미하는지 더 잘 보여줄 수 있습니다. 데이터에 딱 맞게 맞출 수 있습니다.\r\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfig = plt.figure()\nax = plt.axes(projection='3d')\ndef f(x, y):\n    return np.sin(np.sqrt(x ** 2 + y ** 2))\nx = np.linspace(-6, 6, 30)\ny = np.linspace(-6, 6, 30)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\n# Flatten the X, Y, Z arrays for plot_trisurf\nax.plot_trisurf(X.flatten(), Y.flatten(), Z.flatten(),\n                cmap='viridis', edgecolor='none')\nplt.show()\n\n\n![Image](/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_9.png)\n\n저는 \"Medium에서 팔로워를 빠르게 얻는 법\"에 대한 전자책을 쓰고 있어요. 왜냐하면 제가 최고의 증거이기 때문이죠 – 딱 한 달 만에 5,000명 이상의 팔로워를 얻었어요. 기대해 주세요!\n\nSubstack에서 \"GPT 소개\" 시리즈를 쓰고 있어요. 관심 있으시면 팔로우 해주세요!\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n총 10개의 글 중 일곱 번째가 이미 완료되었어요!\n\n독서📖, 형광펜 강조🖍️, 박수👏, 댓글💬, 공유🗣️해 주셔서 감사합니다. \"Medium 친구\"로서, 매일 작가 친구들에게 호의를 돌려드릴 수 있도록 최선을 다하고 있어요.\n\n또한, 뉴스레터📰를 구독하여 이와 같은 멋진 콘텐츠가 올라올 때마다 알림을 받을 수 있어요. 고맙구나, 친애하는 챔프!🤓\n\n최신 파이썬 이야기를 계속해서 받아보려면 Substack에서 저희와 연결해주세요. 함께 파이썬의 미래를 함께 만들어요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 즐겨보세요","ogImage":{"url":"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_0.png"},"coverImage":"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_0.png","tag":["Tech"],"readingTime":16},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>파이썬 맷플롯립 시각화</h2>\n<p>맷플롯립을 사용하면 파이썬으로 멋진 그림을 그릴 수 있어요. 데이터를 다양한 방식으로 표시할 수 있습니다. 많은 양의 코드가 필요하지 않아요. 선 그래프, 막대 차트 및 여러 종류의 차트를 만들 수 있어요.</p>\n<h1>간단한 선 그래프</h1>\n<ul>\n<li>figures 와 axes: 맷플롯립에서 figure 는 상자 같아요. 플롯의 모든 부분을 보유해요. axes 는 figure 내부의 더 작은 상자처럼 생겼어요. 주변에 선들과 플롯의 의미를 알려주는 단어들이 있어요.</li>\n<li>변수 명명: Figure 객체는 일반적으로 <code>fig</code>로 이름을 짓고, axes 객체는 <code>ax</code>로 이름을 지어요.</li>\n<li>데이터 플로팅: <code>ax.plot</code> 메서드를 사용하여 axes에 데이터를 플로팅하세요.</li>\n<li>Pylab 인터페이스: MATLAB과 유사한 인터페이스를 제공하여 자동으로 figure와 axes를 만들어줘요.</li>\n<li>여러 선: 동일한 figure에 여러 선을 그리려면 <code>plot</code> 함수를 여러 번 호출하세요.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\nplt.<span class=\"hljs-property\">style</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'seaborn-v0_8-whitegrid'</span>)\nfig = plt.<span class=\"hljs-title function_\">figure</span>()\nax = plt.<span class=\"hljs-title function_\">axes</span>()\nx = np.<span class=\"hljs-title function_\">linspace</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1000</span>)\nplt.<span class=\"hljs-title function_\">plot</span>(x, np.<span class=\"hljs-title function_\">sin</span>(x))\nplt.<span class=\"hljs-title function_\">plot</span>(x, np.<span class=\"hljs-title function_\">cos</span>(x))\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<p><img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_0.png\" alt=\"image\"></p>\n<h1>간단한 산점도</h1>\n<ul>\n<li>무엇인가: 산점도는 순서가 없는 점들을 가지고 있습니다. 선 그래프는 점들이 연결되어 있습니다.</li>\n<li>만드는 방법: 산점도를 그리려면 <code>plt.plot</code> 또는 <code>ax.plot</code>을 사용할 수 있습니다.</li>\n<li>점 스타일: 특별한 코드로 점의 모양을 변경할 수 있습니다. 문서에 어떤 코드를 사용해야 하는지 설명되어 있습니다.</li>\n<li><code>plt.scatter</code>의 재미있는 점: 각 점을 특별하게 만들 수 있습니다. 크기와 색상이 다를 수 있습니다. 이를 위해 데이터 세트를 사용합니다.</li>\n<li>투명한 점: 점을 서로 겹치게 만들 때 <code>alpha</code> 설정으로 점을 투명하게 만들 수 있습니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\nplt.<span class=\"hljs-property\">style</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'seaborn-v0_8-whitegrid'</span>)\nrng = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title class_\">RandomState</span>(<span class=\"hljs-number\">0</span>)\nx = rng.<span class=\"hljs-title function_\">randn</span>(<span class=\"hljs-number\">100</span>)\ny = rng.<span class=\"hljs-title function_\">randn</span>(<span class=\"hljs-number\">100</span>)\ncolors = rng.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">100</span>)\nsizes = <span class=\"hljs-number\">1000</span> * rng.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">100</span>)\nplt.<span class=\"hljs-title function_\">scatter</span>(x, y, c=colors, s=sizes, alpha=<span class=\"hljs-number\">0.3</span>,\n            cmap=<span class=\"hljs-string\">'viridis'</span>)\nplt.<span class=\"hljs-title function_\">colorbar</span>();\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_1.png\">\n<h1>오류 시각화</h1>\n<ul>\n<li>왜 중요한가: 과학에서는 오류를 올바르게 이해하는 것이 측정 자체보다 중요하다.</li>\n<li>예를 들어: 허블 상수를 추측할 때 오류에 대해 고려해야 합니다. 이를 통해 서로 다른 측정 결과가 일치하는지 알 수 있습니다.</li>\n<li>불확실함 표현: 측정 값을 보고할 때 얼마나 확신이 없는지도 함께 말해야 합니다 (예: 71±2.5 (km/s)/Mpc). 이렇게 하면 데이터를 더 잘 비교할 수 있습니다.</li>\n<li>오류 표시: 차트에 오류를 넣으면 더 다양하고 정확한 정보를 얻을 수 있습니다.</li>\n<li><code>fmt</code> 설정: 차트에서 선과 점이 어떻게 보이는지를 제어합니다. <code>plt.plot</code> 코드와 비슷한 역할을 합니다.</li>\n<li><code>errorbar</code> 함수: 오차 막대 기호의 모양을 변경할 수 있게 해줍니다. 예를 들어, 가로로 만들어 진해지게 만들 수 있습니다.</li>\n<li>자신만의 스타일: 측면 오차 막대, 단측 오차 막대 등에 대한 더 많은 <code>errorbar</code> 설정을 활용하여 차트를 원하는 대로 꾸밉니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\nplt.style.use(<span class=\"hljs-string\">'seaborn-v0_8-whitegrid'</span>)\nx = np.linspace(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">50</span>)\ndy = <span class=\"hljs-number\">0.8</span>\ny = np.sin(x) + dy * np.random.randn(<span class=\"hljs-number\">50</span>)\nplt.errorbar(x, y, yerr=dy, fmt=<span class=\"hljs-string\">'o'</span>, color=<span class=\"hljs-string\">'black'</span>,\n             ecolor=<span class=\"hljs-string\">'lightgray'</span>, elinewidth=<span class=\"hljs-number\">3</span>, capsize=<span class=\"hljs-number\">0</span>)\nplt.show()\n</code></pre>\n<img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_2.png\">\n<h1>밀도 및 등고도 플롯</h1>\n<ul>\n<li>3D 데이터 시각화: 3D 데이터를 2D 차트로 표현하는 등고선 플롯이나 히트맵과 같은 차트 사용.</li>\n<li>함수 사용: 등고선 플로팅에는 <code>plt.contour</code>, 채워진 등고선 플로팅에는 <code>plt.contourf</code>, 이미지 형태로 플로팅에는 <code>plt.imshow</code> 사용.</li>\n<li>데이터 전처리: 1차원 배열로부터 2차원 그리드 생성하는 데 <code>np.meshgrid</code> 활용.</li>\n<li>등고선 플로팅하기: <code>plt.contour</code>는 그리드와 높이 값을 나타내는 <code>x</code>, <code>y</code>, <code>z</code>가 필요.</li>\n<li>선 스타일: 흑백 등고선 플롯에서 점선은 음수를, 실선은 양수를 의미.</li>\n<li>컬러 맵: <code>cmap</code>을 활용하여 등고선 색상 지정. 예를 들어, <code>RdGy</code>는 군집 데이터에 적합.</li>\n<li>컬러 바: 색상표를 만들기 위해 <code>plt.colorbar</code> 사용. 컬러 값의 범위를 보여줌.</li>\n<li>채워진 등고선 플로팅: <code>plt.contourf</code>를 사용하여 등고선 플로팅을 채움. 간격이 적고 보기 좋음.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\nplt.<span class=\"hljs-property\">style</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'seaborn-v0_8-whitegrid'</span>)\ndef <span class=\"hljs-title function_\">f</span>(x, y):\n    <span class=\"hljs-keyword\">return</span> np.<span class=\"hljs-title function_\">sin</span>(x) ** <span class=\"hljs-number\">10</span> + np.<span class=\"hljs-title function_\">cos</span>(<span class=\"hljs-number\">10</span> + y * x) * np.<span class=\"hljs-title function_\">cos</span>(x)\nx = np.<span class=\"hljs-title function_\">linspace</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">50</span>)\ny = np.<span class=\"hljs-title function_\">linspace</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">40</span>)\nX, Y = np.<span class=\"hljs-title function_\">meshgrid</span>(x, y)\nZ = <span class=\"hljs-title function_\">f</span>(X, Y)\nplt.<span class=\"hljs-title function_\">contourf</span>(X, Y, Z, <span class=\"hljs-number\">20</span>, cmap=<span class=\"hljs-string\">'RdGy'</span>)\nplt.<span class=\"hljs-title function_\">colorbar</span>();\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<p><img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_3.png\" alt=\"Image\"></p>\n<h1>히스토그램, Binning 및 Density</h1>\n<ul>\n<li>기본 히스토그램: Matplotlib의 <code>hist()</code> 함수를 사용하여 빠르게 기본 히스토그램을 생성합니다.</li>\n<li>매개변수 조정: <code>hist()</code>는 히스토그램 계산 및 표시를 조정하기 위한 매개변수를 제공합니다.</li>\n<li>설정 변경: 더 이상 <code>normed</code>를 사용하지 마세요. 대신 정규화하기 위해 <code>density</code>를 사용하세요.</li>\n<li>자신만의 스타일: <code>histtype='stepfilled'</code> 및 <code>alpha</code>를 사용하여 투명한 막대를 만들어서 서로 다른 데이터를 일치시키는 데 유용합니다.</li>\n<li>자세히 알아보기: <code>plt.hist</code> 문서를 확인하여 변경할 수 있는 방법에 대해 더 배우세요.</li>\n<li>숫자만 필요한 경우: 플롯 없이 히스토그램 숫자만 얻으려면 <code>np.histogram()</code>을 사용하세요.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\nplt.<span class=\"hljs-property\">style</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'seaborn-v0_8-whitegrid'</span>)\nx1 = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">normal</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.8</span>, <span class=\"hljs-number\">1000</span>)\nx2 = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">normal</span>(-<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1000</span>)\nx3 = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">normal</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1000</span>)\nkwargs = <span class=\"hljs-title function_\">dict</span>(histtype=<span class=\"hljs-string\">'stepfilled'</span>, alpha=<span class=\"hljs-number\">0.3</span>, density=<span class=\"hljs-title class_\">True</span>, bins=<span class=\"hljs-number\">40</span>)\nplt.<span class=\"hljs-title function_\">hist</span>(x1, **kwargs)\nplt.<span class=\"hljs-title function_\">hist</span>(x2, **kwargs)\nplt.<span class=\"hljs-title function_\">hist</span>(x3, **kwargs);\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_4.png\">\n<h1>사용자 정의 범례</h1>\n<ul>\n<li>중요성: 범례는 시각화에 의미를 부여하여 다양한 차트 요소를 명확하게 해줍니다.</li>\n<li>키 만들기: 이름으로 차트 부분에 키를 만들려면 <code>plt.legend()</code>를 사용합니다.</li>\n<li>다양한 설정: 키가 위치하게 할 곳을 선택하세요. 상자를 제거하세요. 여러 행을 사용하세요. 둥근 모서리 또는 그림자를 사용하세요. 투명도와 단어 간 간격을 조절하세요.</li>\n<li>표시할 항목 선택: 키에 들어갈 부분과 이름을 지정하세요. 이를 수행하려면 'plot'이 제공하는 것을 설정하세요.</li>\n<li>다수의 선: <code>plt.plot</code>은 여러 개의 선을 제공할 수 있습니다. 원하는대로 키를 만들려면 <code>plt.legend()</code>에 제공할 선을 선택하세요.</li>\n<li>부분에 이름 지정: 차트 부분에 직접 이름을 지정하세요. 그런 다음 키에 그 이름을 넣어서 쉽게 식별할 수 있도록 하세요.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\nplt.style.use(<span class=\"hljs-string\">'seaborn-v0_8-whitegrid'</span>)\nx = np.linspace(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1000</span>)\ny = np.sin(x[:, np.newaxis] + np.pi * np.arange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0.5</span>))\n\nplt.plot(x, y[:, <span class=\"hljs-number\">0</span>], label=<span class=\"hljs-string\">'first'</span>)\nplt.plot(x, y[:, <span class=\"hljs-number\">1</span>], label=<span class=\"hljs-string\">'second'</span>)\nplt.plot(x, y[:, <span class=\"hljs-number\">2</span>:])\nplt.legend(framealpha=<span class=\"hljs-number\">1</span>, frameon=<span class=\"hljs-literal\">True</span>)\nplt.show()\n</code></pre>\n<p><img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_5.png\" alt=\"Custom Colorbars\"></p>\n<h1>사용자 정의 컬러바</h1>\n<p>범례 vs. 컬러바: 범례는 이산적인 레이블을 나타내는 반면, 컬러바는 연속값-색상 관계를 나타냅니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>색상 막대 만들기: <code>plt.colorbar()</code>을 사용하여 색상 막대를 만듭니다.</p>\n<p>칼라맵: <code>cmap</code> 매개변수를 사용하여 칼라맵을 지정합니다.</p>\n<p>칼라맵 자원: 모든 사용 가능한 칼라맵은 <code>plt.cm</code> 모듈에서 찾을 수 있습니다. 칼라맵을 나열하려면 IPython의 탭 자동완성을 사용하세요.</p>\n<p>칼라맵 유형:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>a. 연속 색상지도: <code>binary</code> 또는 <code>viridis</code>와 같은 단일 연속 색상 시리즈입니다.</li>\n<li>b. 발산 색상지도: <code>RdBu</code> 또는 <code>PuOr</code>와 같은 두 가지 대조되는 색상 시리즈입니다.</li>\n<li>c. 질적 색상지도: <code>rainbow</code> 또는 <code>jet</code>과 같이 연속적이지 않은 색상 조합입니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\nplt.<span class=\"hljs-property\">style</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'classic'</span>)\nx = np.<span class=\"hljs-title function_\">linspace</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1000</span>)\nI = np.<span class=\"hljs-title function_\">sin</span>(x) * np.<span class=\"hljs-title function_\">cos</span>(x[:, np.<span class=\"hljs-property\">newaxis</span>])\nplt.<span class=\"hljs-title function_\">imshow</span>(I, aspect=<span class=\"hljs-string\">'auto'</span>, cmap=<span class=\"hljs-string\">'viridis'</span>)\nplt.<span class=\"hljs-title function_\">colorbar</span>()\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<p><img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_6.png\" alt=\"Visualization\"></p>\n<h1>다중 서브플롯</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>컨셉: Matplotlib은 데이터를 옆으로 나란히 표시하기 위해 단일 그림에서 여러 서브플롯을 허용합니다.</li>\n<li>서브플롯 생성: <code>plt.axes()</code>를 사용하여 서브플롯을 생성하고, 위치와 크기를 <code>[왼쪽, 아래, 너비, 높이]</code>의 리스트 매개변수로 지정합니다.</li>\n<li>기본 동작: <code>plt.axes()</code>는 보통 전체 그림 영역을 채우는 축 객체를 만듭니다.</li>\n<li>정렬: <code>plt.subplot()</code>을 사용하여 그리드 안에 서브플롯을 생성하고, 행, 열 및 서브플롯 인덱스에 대한 매개변수를 사용합니다.</li>\n<li>다중 행/열: <code>plt.GridSpec()</code>를 사용하여 여러 행 또는 열에 걸쳐있는 서브플롯을 만들고, 그리드 레이아웃을 정의합니다.</li>\n<li>GridSpec 사용법: <code>plt.GridSpec()</code>은 그리드 레이아웃을 정의하고, 서브플롯 생성 시 <code>plt.subplot()</code>에 전달할 수 있습니다.</li>\n<li>GridSpec 특징: 직접 차트를 만들지는 않지만 서브플롯 그리드 레이아웃을 정의합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\nplt.<span class=\"hljs-property\">style</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'seaborn-v0_8-whitegrid'</span>)\nmean = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\ncov = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]]\nx, y = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">multivariate_normal</span>(mean, cov, <span class=\"hljs-number\">3000</span>).<span class=\"hljs-property\">T</span>\n# <span class=\"hljs-title class_\">GridSpec</span>를 사용하여 그리드를 생성하고 서브플롯을 추가합니다\nfig = plt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>))\ngrid = plt.<span class=\"hljs-title class_\">GridSpec</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, hspace=<span class=\"hljs-number\">0.2</span>, wspace=<span class=\"hljs-number\">0.2</span>)\nmain_ax = fig.<span class=\"hljs-title function_\">add_subplot</span>(grid[:-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>:])\ny_hist = fig.<span class=\"hljs-title function_\">add_subplot</span>(grid[:-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], xticklabels=[], sharey=main_ax)\nx_hist = fig.<span class=\"hljs-title function_\">add_subplot</span>(grid[-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>:], yticklabels=[], sharex=main_ax)\n# 주요 서브플롯에 산점도를 플롯합니다\nmain_ax.<span class=\"hljs-title function_\">plot</span>(x, y, <span class=\"hljs-string\">'ok'</span>, markersize=<span class=\"hljs-number\">3</span>, alpha=<span class=\"hljs-number\">0.2</span>)\n# x와 y 방향으로 히스토그램을 플롯합니다\nx_hist.<span class=\"hljs-title function_\">hist</span>(x, <span class=\"hljs-number\">40</span>, histtype=<span class=\"hljs-string\">'stepfilled'</span>,\n            orientation=<span class=\"hljs-string\">'vertical'</span>, color=<span class=\"hljs-string\">'gray'</span>)\nx_hist.<span class=\"hljs-title function_\">invert_yaxis</span>() # x축 히스토그램의 y축 방향을 반전합니다 (우측 하단에 위치)\ny_hist.<span class=\"hljs-title function_\">hist</span>(y, <span class=\"hljs-number\">40</span>, histtype=<span class=\"hljs-string\">'stepfilled'</span>,\n            orientation=<span class=\"hljs-string\">'horizontal'</span>, color=<span class=\"hljs-string\">'gray'</span>)\ny_hist.<span class=\"hljs-title function_\">invert_xaxis</span>() # y축 히스토그램의 x축 방향을 반전합니다 (상단 좌측에 위치)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_7.png\">\n<h1>텍스트 및 주석</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>목적: 시각화는 데이터 뒤에 숨겨진 이야기를 독자에게 전달하기 위해 노력합니다.</li>\n<li>표현: 일부 차트는 그 자체로 이야기를 전달하지만, 다른 차트는 텍스트 지원이 필요합니다.</li>\n<li>주석: 차트에 텍스트 주석을 추가하여 독자의 주의를 끌고 이해를 돕습니다.</li>\n<li>텍스트 배치: 차트의 특정 위치(<code>x</code>, <code>y</code>)에 텍스트를 추가하려면 <code>plt.text</code> 또는 <code>ax.text</code>를 사용하세요.</li>\n<li>가이드: 정보 전달을 향상시키기 위해 텍스트 주석을 통해 독자를 주요 차트 기능으로 안내하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">dates</span> <span class=\"hljs-keyword\">as</span> mdates\nplt.<span class=\"hljs-property\">style</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'seaborn-v0_8-whitegrid'</span>)\n# 샘플 데이터셋 생성\ndates = pd.<span class=\"hljs-title function_\">date_range</span>(start=<span class=\"hljs-string\">'1969-01-01'</span>, end=<span class=\"hljs-string\">'1988-12-31'</span>, freq=<span class=\"hljs-string\">'D'</span>)\ndata = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">randint</span>(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-number\">5000</span>, size=<span class=\"hljs-title function_\">len</span>(dates))\nbirths = pd.<span class=\"hljs-title class_\">DataFrame</span>(data, columns=[<span class=\"hljs-string\">'births'</span>], index=dates)\nfig, ax = plt.<span class=\"hljs-title function_\">subplots</span>(figsize=(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>))\nbirths_by_date = births.<span class=\"hljs-title function_\">pivot_table</span>(<span class=\"hljs-string\">'births'</span>, [births.<span class=\"hljs-property\">index</span>.<span class=\"hljs-property\">month</span>, births.<span class=\"hljs-property\">index</span>.<span class=\"hljs-property\">day</span>])\nbirths_by_date.<span class=\"hljs-property\">index</span> = [pd.<span class=\"hljs-title class_\">Timestamp</span>(year=<span class=\"hljs-number\">2012</span>, month=month, day=day) <span class=\"hljs-keyword\">for</span> month, day <span class=\"hljs-keyword\">in</span> births_by_date.<span class=\"hljs-property\">index</span>]\nbirths_by_date.<span class=\"hljs-title function_\">plot</span>(ax=ax)\n# 선 플롯의 특정 위치에 주석 추가\nstyle = <span class=\"hljs-title function_\">dict</span>(size=<span class=\"hljs-number\">10</span>, color=<span class=\"hljs-string\">'gray'</span>)\nax.<span class=\"hljs-title function_\">text</span>(pd.<span class=\"hljs-title class_\">Timestamp</span>(<span class=\"hljs-string\">'2012-1-1'</span>), <span class=\"hljs-number\">3950</span>, <span class=\"hljs-string\">\"New Year's Day\"</span>, **style)\nax.<span class=\"hljs-title function_\">text</span>(pd.<span class=\"hljs-title class_\">Timestamp</span>(<span class=\"hljs-string\">'2012-7-4'</span>), <span class=\"hljs-number\">4250</span>, <span class=\"hljs-string\">\"Independence Day\"</span>, ha=<span class=\"hljs-string\">'center'</span>, **style)\nax.<span class=\"hljs-title function_\">text</span>(pd.<span class=\"hljs-title class_\">Timestamp</span>(<span class=\"hljs-string\">'2012-9-4'</span>), <span class=\"hljs-number\">4850</span>, <span class=\"hljs-string\">\"Labor Day\"</span>, ha=<span class=\"hljs-string\">'center'</span>, **style)\nax.<span class=\"hljs-title function_\">text</span>(pd.<span class=\"hljs-title class_\">Timestamp</span>(<span class=\"hljs-string\">'2012-10-31'</span>), <span class=\"hljs-number\">4600</span>, <span class=\"hljs-string\">\"Halloween\"</span>, ha=<span class=\"hljs-string\">'right'</span>, **style)\nax.<span class=\"hljs-title function_\">text</span>(pd.<span class=\"hljs-title class_\">Timestamp</span>(<span class=\"hljs-string\">'2012-11-25'</span>), <span class=\"hljs-number\">4450</span>, <span class=\"hljs-string\">\"Thanksgiving\"</span>, ha=<span class=\"hljs-string\">'center'</span>, **style)\nax.<span class=\"hljs-title function_\">text</span>(pd.<span class=\"hljs-title class_\">Timestamp</span>(<span class=\"hljs-string\">'2012-12-25'</span>), <span class=\"hljs-number\">3850</span>, <span class=\"hljs-string\">\"Christmas\"</span>, ha=<span class=\"hljs-string\">'right'</span>, **style)\n# 제목과 y축 레이블 설정\nax.<span class=\"hljs-title function_\">set</span>(title=<span class=\"hljs-string\">'USA births by day of year (1969-1988)'</span>,\n       ylabel=<span class=\"hljs-string\">'average daily births'</span>)\n# x축에 월 레이블을 중앙에 정렬\nax.<span class=\"hljs-property\">xaxis</span>.<span class=\"hljs-title function_\">set_major_locator</span>(mdates.<span class=\"hljs-title class_\">MonthLocator</span>())\nax.<span class=\"hljs-property\">xaxis</span>.<span class=\"hljs-title function_\">set_minor_locator</span>(mdates.<span class=\"hljs-title class_\">MonthLocator</span>(bymonthday=<span class=\"hljs-number\">15</span>))\nax.<span class=\"hljs-property\">xaxis</span>.<span class=\"hljs-title function_\">set_major_formatter</span>(plt.<span class=\"hljs-title class_\">NullFormatter</span>())\nax.<span class=\"hljs-property\">xaxis</span>.<span class=\"hljs-title function_\">set_minor_formatter</span>(mdates.<span class=\"hljs-title class_\">DateFormatter</span>(<span class=\"hljs-string\">'%b'</span>))\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<h1>커스텀 눈금</h1>\n<ul>\n<li>눈금 변경: Matplotlib의 보통 눈금은 대부분의 차트에 적합합니다. 그러나 일부를 위해 변경해야 할 수도 있습니다.</li>\n<li>물건 속의 물건: Matplotlib의 모든 차트 부분은 물건입니다. 도표에는 축이 있습니다. 축에는 차트 요소가 있습니다.</li>\n<li>축 요소: 축에는 <code>xaxis</code>와 <code>yaxis</code>가 있습니다. 이들은 선, 눈금, 이름 등을 가지고 있습니다.</li>\n<li>새 버전: Matplotlib 2.0 이후로 긴 축에 작은 눈금이 숨겨지게 되었습니다. 이것은 <code>xlim</code>과 <code>ylim</code>으로 변경할 수 있습니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\r\n\r\nplt.<span class=\"hljs-property\">style</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">'seaborn-v0_8-whitegrid'</span>)\r\nfig, ax = plt.<span class=\"hljs-title function_\">subplots</span>()\r\nx = np.<span class=\"hljs-title function_\">linspace</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> * np.<span class=\"hljs-property\">pi</span>, <span class=\"hljs-number\">1000</span>)\r\nax.<span class=\"hljs-title function_\">plot</span>(x, np.<span class=\"hljs-title function_\">sin</span>(x), lw=<span class=\"hljs-number\">3</span>, label=<span class=\"hljs-string\">'Sine'</span>)\r\nax.<span class=\"hljs-title function_\">plot</span>(x, np.<span class=\"hljs-title function_\">cos</span>(x), lw=<span class=\"hljs-number\">3</span>, label=<span class=\"hljs-string\">'Cosine'</span>)\r\nax.<span class=\"hljs-title function_\">grid</span>(<span class=\"hljs-title class_\">True</span>)\r\nax.<span class=\"hljs-title function_\">legend</span>(frameon=<span class=\"hljs-title class_\">False</span>)\r\nax.<span class=\"hljs-title function_\">axis</span>(<span class=\"hljs-string\">'equal'</span>)\r\nax.<span class=\"hljs-title function_\">set_xlim</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> * np.<span class=\"hljs-property\">pi</span>)\r\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_8.png\">\n<h1>Matplotlib에서 3D 플롯 만들기</h1>\n<ul>\n<li>2D에서 3D로: Matplotlib은 처음에는 2D 플롯만 지원했지만, 3D 플롯 도구는 버전 1.0에서 소개되었습니다.</li>\n<li>3D 도구 모음: 3D 플로팅은 Matplotlib과 함께 제공되는 <code>mplot3d</code> 도구 모음을 로드하여 수행됩니다.</li>\n<li>3D 플롯 유형: 3D 축을 활성화한 후 3D 라인 및 산점도와 같은 다양한 3D 플롯을 그릴 수 있습니다.</li>\n<li>3D 플로팅 함수: 3D 라인 플롯 및 산점도 플롯에는 각각 <code>ax.plot3D</code> 및 <code>ax.scatter3D</code>를 사용합니다.</li>\n<li>투명도와 깊이: 깊이를 나타내기 위해 산점도 플롯에는 다양한 투명도가 적용됩니다.</li>\n<li>대화식 뷰: 대화식 뷰를 통해 더 나은 3D 시각 경험을 제공합니다.</li>\n<li>3D 버프 맵: <code>mplot3d</code> 도구 모음에는 3D 버프 맵을 만드는 도구가 있습니다. 이것들은 2D <code>ax.contour</code>와 유사합니다.</li>\n<li>3D 표면 차트: 표면 차트는 색의 변화로 3D 표면을 보여줍니다. 와이어 차트보다 더 나은 시각적 효과를 제공합니다.</li>\n<li>그리드 데이터 이미지: 그리드 데이터에서 생성된 3D 이미지에는 와이어 차트와 표면 차트가 있습니다. 데이터를 3D 모양에 표시하여 더 명확하고 설득력있게 만듭니다.</li>\n<li>틱 스타일 변경: 일반 틱 스타일은 대부분의 작업에 적합하지만, 사인 및 코사인 차트와 같은 특정 차트에 대해 변경해야 할 수 있습니다.</li>\n<li>사용자 정의 예제: 틱이 위치하고 어떻게 보이는지 변경하면 차트가 무엇을 의미하는지 더 잘 보여줄 수 있습니다. 데이터에 딱 맞게 맞출 수 있습니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>import numpy as np\nimport matplotlib.pyplot as plt\nfig = plt.figure()\nax = plt.axes(projection='3d')\ndef f(x, y):\nreturn np.sin(np.sqrt(x ** 2 + y ** 2))\nx = np.linspace(-6, 6, 30)\ny = np.linspace(-6, 6, 30)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')</p>\n<h1>Flatten the X, Y, Z arrays for plot_trisurf</h1>\n<p>ax.plot_trisurf(X.flatten(), Y.flatten(), Z.flatten(),\ncmap='viridis', edgecolor='none')\nplt.show()</p>\n<p><img src=\"/TIL/assets/img/2024-07-14-11EssentialPythonMatplotlibVisualizationsforDataScienceMastery_9.png\" alt=\"Image\"></p>\n<p>저는 \"Medium에서 팔로워를 빠르게 얻는 법\"에 대한 전자책을 쓰고 있어요. 왜냐하면 제가 최고의 증거이기 때문이죠 – 딱 한 달 만에 5,000명 이상의 팔로워를 얻었어요. 기대해 주세요!</p>\n<p>Substack에서 \"GPT 소개\" 시리즈를 쓰고 있어요. 관심 있으시면 팔로우 해주세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>총 10개의 글 중 일곱 번째가 이미 완료되었어요!</p>\n<p>독서📖, 형광펜 강조🖍️, 박수👏, 댓글💬, 공유🗣️해 주셔서 감사합니다. \"Medium 친구\"로서, 매일 작가 친구들에게 호의를 돌려드릴 수 있도록 최선을 다하고 있어요.</p>\n<p>또한, 뉴스레터📰를 구독하여 이와 같은 멋진 콘텐츠가 올라올 때마다 알림을 받을 수 있어요. 고맙구나, 친애하는 챔프!🤓</p>\n<p>최신 파이썬 이야기를 계속해서 받아보려면 Substack에서 저희와 연결해주세요. 함께 파이썬의 미래를 함께 만들어요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>즐겨보세요</h1>\n</body>\n</html>\n"},"__N_SSG":true}