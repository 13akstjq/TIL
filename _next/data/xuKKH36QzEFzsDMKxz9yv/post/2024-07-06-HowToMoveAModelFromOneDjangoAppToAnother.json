{"pageProps":{"post":{"title":"Django 앱 사이에서 모델을 이동하는 방법","description":"","date":"2024-07-06 10:26","slug":"2024-07-06-HowToMoveAModelFromOneDjangoAppToAnother","content":"\n\n/assets/img/2024-07-06-HowToMoveAModelFromOneDjangoAppToAnother_0.png\n\n소프트웨어 개발자로서, 때로는 Django 모델을 한 앱에서 다른 앱으로 옮기는 도전에 직면할 수 있습니다. 이 작업을 수행하는 여러 가지 방법이 있지만, 여기서는 가장 쉬운 방법에 대해 이야기하겠습니다. 이 방법은 다운타임 없이 데이터 손실 없이 진행됩니다.\n\n여기서는 Django 수준의 변경만을 다루며, 데이터베이스 상태는 전혀 변경되지 않습니다.\n\n공용 앱에서 사용자 앱으로 고객 모델을 이전하는 예시가 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 초기 모델 구조를 고려하십시오\n\ncommon/models.py 파일에는 Customer 모델이 포함되어 있습니다.\n\n```python\nfrom django.db import models\n\nclass Customer(models.Model):\n  class Meta:\n    app_label = \"common\"\n    db_table = \"common_customer\"\n\n  first_name = CleanCharField(max_length=30, null=False)\n  last_name = CleanCharField(max_length=150, null=False)\n  email = models.EmailField(null=False)\n  address = models.ForeignKey('common.Address', on_delete=models.SET_NULL, null=True, blank=True, default=None)\n  \n  def __str__(self) -> str:\n    return f\"{self.first_name} {self.last_name}\"\n```\n\n## 이제 모델을 새 앱으로 이동하세요\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ncommon/models.py 파일에서 Customer 모델을 잘라내어 users/models.py 파일에 붙여넣으세요.\n\n```js\nfrom django.db import models\n\nclass Customer(models.Model):\n  class Meta:\n    app_label = \"users\"\n    db_table = \"common_customer\"\n\n  first_name = CleanCharField(max_length=30, null=False)\n  last_name = CleanCharField(max_length=150, null=False)\n  email = models.EmailField(null=False)\n  address = models.ForeignKey('common.Address', on_delete=models.SET_NULL, null=True, blank=True, default=None)\n  \n  def __str__(self) -> str:\n    return f\"{self.first_name} {self.last_name}\"\n```\n\n- app_label 매개변수를 users로 변경하세요.\n- 데이터베이스 테이블 이름을 변경하지 않으므로 db_table 매개변수를 common_customer로 유지하세요.\n\n## 데이터베이스 마이그레이션 생성\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 이 명령어를 실행하여 마이그레이션 파일을 생성하세요.\n\n```js\npython manage.py makemigrations\n```\n\n이 명령어를 실행하면 2개의 마이그레이션 파일이 생성됩니다. \n\n- 하나는 공통 앱에서 모델을 삭제하는 것입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        # Dependencies\n    ]\n\n    operations = [\n        migrations.DeleteModel(\n            name='Customer',\n        ),\n    ]\n``` \n\n- 사용자 앱에서 모델을 생성하세요.\n\n```js\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport django_utils.models.base\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        # Dependencies\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Customer',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('first_name', django_utils.models.base.CleanCharField(max_length=30)),\n                ('last_name', django_utils.models.base.CleanCharField(max_length=150)),\n                ('email', models.EmailField(max_length=254)),\n                ('address', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.address')),\n            ],\n            options={\n                'db_table': 'common_customer',\n            },\n        ),\n    ]\n``` \n\n## 데이터 손실을 방지하세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 데이터베이스 테이블 이름을 변경하지 않았기 때문에 여전히 common_customer 테이블입니다.\n- 데이터베이스에 DeleteModel 작업이 적용되지 않도록 해야 합니다.\n- DeleteModel 작업을 SeparateDatabaseAndState으로 감싸주세요. 이렇게 수정된 최종 마이그레이션 파일은 common 앱에서 다음과 같이 보여야 합니다:\n\n```js\nfrom django.db import migrations\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        # 의존성\n    ]\n\n    operations = [\n        migrations.SeparateDatabaseAndState(\n            state_operations=[\n                migrations.DeleteModel(\n                    name='Customer',\n                ),\n            ]\n        )\n    ]\n```\n\n- 이미 데이터베이스에 테이블이 존재하기 때문에 다시 만들 필요가 없습니다.\n- 데이터베이스에 CreateModel 작업이 적용되지 않도록 해야 하며, 그렇지 않으면 오류가 발생합니다.\n- CreateModel 작업을 SeparateDatabaseAndState으로 감싸주세요. 이렇게 수정된 최종 마이그레이션 파일은 usersapp에서 다음과 같이 보여야 합니다:\n\n```js\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport django_utils.models.base\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        # 의존성\n    ]\n\n    operations = [\n        migrations.SeparateDatabaseAndState(\n            state_operations=[\n                migrations.CreateModel(\n                    name='Customer',\n                    fields=[\n                        ('id',\n                         models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                        ('first_name', django_utils.models.base.CleanCharField(max_length=30)),\n                        ('last_name', django_utils.models.base.CleanCharField(max_length=150)),\n                        ('email', models.EmailField(max_length=254)),\n                        ('address', models.ForeignKey(blank=True, default=None, null=True,\n                                                      on_delete=django.db.models.deletion.SET_NULL,\n                                                      to='common.address')),\n                    ],\n                    options={\n                        'db_table': 'common_customer',\n                    },\n                ),\n            ]\n        )\n    ]\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 마이그레이션 적용\n\n변경 사항을 적용하기 위해 마이그레이션을 실행하세요\n\n```js\npython manage.py migrate\n```\n\n성공적으로 공통 앱에서 사용자 앱으로 Customer 모델을 이동했고, 데이터베이스 변경이나 데이터 손실 없이 처리되었습니다. 완료되었습니다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n알림: 이 방법은 매우 안전하지만 데이터베이스 작업을 수행하기 전에 데이터베이스를 백업하는 것이 좋습니다 (이 문서에서는 데이터베이스 변경을 수행하지 않지만 마이그레이션 작업을 수행하고 있습니다). 특히 프로덕션 환경에서는 항상 백업을 권장합니다.\n\n## 연락처를 유지합시다:\n\n질문, 제안 또는 개선 사항이 있으시면 연락해 주세요.\n\n- Github → https://github.com/shwetasinghh\n- LinkedIn → https://www.linkedin.com/in/shweta-singh-200280117/","ogImage":{"url":"/assets/img/2024-07-06-HowToMoveAModelFromOneDjangoAppToAnother_0.png"},"coverImage":"/assets/img/2024-07-06-HowToMoveAModelFromOneDjangoAppToAnother_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>/assets/img/2024-07-06-HowToMoveAModelFromOneDjangoAppToAnother_0.png</p>\n<p>소프트웨어 개발자로서, 때로는 Django 모델을 한 앱에서 다른 앱으로 옮기는 도전에 직면할 수 있습니다. 이 작업을 수행하는 여러 가지 방법이 있지만, 여기서는 가장 쉬운 방법에 대해 이야기하겠습니다. 이 방법은 다운타임 없이 데이터 손실 없이 진행됩니다.</p>\n<p>여기서는 Django 수준의 변경만을 다루며, 데이터베이스 상태는 전혀 변경되지 않습니다.</p>\n<p>공용 앱에서 사용자 앱으로 고객 모델을 이전하는 예시가 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>초기 모델 구조를 고려하십시오</h2>\n<p>common/models.py 파일에는 Customer 모델이 포함되어 있습니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Customer</span>(models.Model):\n  <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n    app_label = <span class=\"hljs-string\">\"common\"</span>\n    db_table = <span class=\"hljs-string\">\"common_customer\"</span>\n\n  first_name = CleanCharField(max_length=<span class=\"hljs-number\">30</span>, null=<span class=\"hljs-literal\">False</span>)\n  last_name = CleanCharField(max_length=<span class=\"hljs-number\">150</span>, null=<span class=\"hljs-literal\">False</span>)\n  email = models.EmailField(null=<span class=\"hljs-literal\">False</span>)\n  address = models.ForeignKey(<span class=\"hljs-string\">'common.Address'</span>, on_delete=models.SET_NULL, null=<span class=\"hljs-literal\">True</span>, blank=<span class=\"hljs-literal\">True</span>, default=<span class=\"hljs-literal\">None</span>)\n  \n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -> <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{self.first_name}</span> <span class=\"hljs-subst\">{self.last_name}</span>\"</span>\n</code></pre>\n<h2>이제 모델을 새 앱으로 이동하세요</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>common/models.py 파일에서 Customer 모델을 잘라내어 users/models.py 파일에 붙여넣으세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">db</span> <span class=\"hljs-keyword\">import</span> models\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Customer</span>(models.<span class=\"hljs-property\">Model</span>):\n  <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n    app_label = <span class=\"hljs-string\">\"users\"</span>\n    db_table = <span class=\"hljs-string\">\"common_customer\"</span>\n\n  first_name = <span class=\"hljs-title class_\">CleanCharField</span>(max_length=<span class=\"hljs-number\">30</span>, <span class=\"hljs-literal\">null</span>=<span class=\"hljs-title class_\">False</span>)\n  last_name = <span class=\"hljs-title class_\">CleanCharField</span>(max_length=<span class=\"hljs-number\">150</span>, <span class=\"hljs-literal\">null</span>=<span class=\"hljs-title class_\">False</span>)\n  email = models.<span class=\"hljs-title class_\">EmailField</span>(<span class=\"hljs-literal\">null</span>=<span class=\"hljs-title class_\">False</span>)\n  address = models.<span class=\"hljs-title class_\">ForeignKey</span>(<span class=\"hljs-string\">'common.Address'</span>, on_delete=models.<span class=\"hljs-property\">SET_NULL</span>, <span class=\"hljs-literal\">null</span>=<span class=\"hljs-title class_\">True</span>, blank=<span class=\"hljs-title class_\">True</span>, <span class=\"hljs-keyword\">default</span>=<span class=\"hljs-title class_\">None</span>)\n  \n  def <span class=\"hljs-title function_\">__str__</span>(self) -> <span class=\"hljs-attr\">str</span>:\n    <span class=\"hljs-keyword\">return</span> f<span class=\"hljs-string\">\"{self.first_name} {self.last_name}\"</span>\n</code></pre>\n<ul>\n<li>app_label 매개변수를 users로 변경하세요.</li>\n<li>데이터베이스 테이블 이름을 변경하지 않으므로 db_table 매개변수를 common_customer로 유지하세요.</li>\n</ul>\n<h2>데이터베이스 마이그레이션 생성</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 이 명령어를 실행하여 마이그레이션 파일을 생성하세요.</p>\n<pre><code class=\"hljs language-js\">python manage.<span class=\"hljs-property\">py</span> makemigrations\n</code></pre>\n<p>이 명령어를 실행하면 2개의 마이그레이션 파일이 생성됩니다.</p>\n<ul>\n<li>하나는 공통 앱에서 모델을 삭제하는 것입니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">db</span> <span class=\"hljs-keyword\">import</span> migrations\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Migration</span>(migrations.<span class=\"hljs-property\">Migration</span>):\n\n    dependencies = [\n        # <span class=\"hljs-title class_\">Dependencies</span>\n    ]\n\n    operations = [\n        migrations.<span class=\"hljs-title class_\">DeleteModel</span>(\n            name=<span class=\"hljs-string\">'Customer'</span>,\n        ),\n    ]\n</code></pre>\n<ul>\n<li>사용자 앱에서 모델을 생성하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">db</span> <span class=\"hljs-keyword\">import</span> migrations, models\n<span class=\"hljs-keyword\">import</span> django.<span class=\"hljs-property\">db</span>.<span class=\"hljs-property\">models</span>.<span class=\"hljs-property\">deletion</span>\n<span class=\"hljs-keyword\">import</span> django_utils.<span class=\"hljs-property\">models</span>.<span class=\"hljs-property\">base</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Migration</span>(migrations.<span class=\"hljs-property\">Migration</span>):\n\n    dependencies = [\n        # <span class=\"hljs-title class_\">Dependencies</span>\n    ]\n\n    operations = [\n        migrations.<span class=\"hljs-title class_\">CreateModel</span>(\n            name=<span class=\"hljs-string\">'Customer'</span>,\n            fields=[\n                (<span class=\"hljs-string\">'id'</span>, models.<span class=\"hljs-title class_\">AutoField</span>(auto_created=<span class=\"hljs-title class_\">True</span>, primary_key=<span class=\"hljs-title class_\">True</span>, serialize=<span class=\"hljs-title class_\">False</span>, verbose_name=<span class=\"hljs-string\">'ID'</span>)),\n                (<span class=\"hljs-string\">'first_name'</span>, django_utils.<span class=\"hljs-property\">models</span>.<span class=\"hljs-property\">base</span>.<span class=\"hljs-title class_\">CleanCharField</span>(max_length=<span class=\"hljs-number\">30</span>)),\n                (<span class=\"hljs-string\">'last_name'</span>, django_utils.<span class=\"hljs-property\">models</span>.<span class=\"hljs-property\">base</span>.<span class=\"hljs-title class_\">CleanCharField</span>(max_length=<span class=\"hljs-number\">150</span>)),\n                (<span class=\"hljs-string\">'email'</span>, models.<span class=\"hljs-title class_\">EmailField</span>(max_length=<span class=\"hljs-number\">254</span>)),\n                (<span class=\"hljs-string\">'address'</span>, models.<span class=\"hljs-title class_\">ForeignKey</span>(blank=<span class=\"hljs-title class_\">True</span>, <span class=\"hljs-keyword\">default</span>=<span class=\"hljs-title class_\">None</span>, <span class=\"hljs-literal\">null</span>=<span class=\"hljs-title class_\">True</span>, on_delete=django.<span class=\"hljs-property\">db</span>.<span class=\"hljs-property\">models</span>.<span class=\"hljs-property\">deletion</span>.<span class=\"hljs-property\">SET_NULL</span>, to=<span class=\"hljs-string\">'common.address'</span>)),\n            ],\n            options={\n                <span class=\"hljs-string\">'db_table'</span>: <span class=\"hljs-string\">'common_customer'</span>,\n            },\n        ),\n    ]\n</code></pre>\n<h2>데이터 손실을 방지하세요.</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>데이터베이스 테이블 이름을 변경하지 않았기 때문에 여전히 common_customer 테이블입니다.</li>\n<li>데이터베이스에 DeleteModel 작업이 적용되지 않도록 해야 합니다.</li>\n<li>DeleteModel 작업을 SeparateDatabaseAndState으로 감싸주세요. 이렇게 수정된 최종 마이그레이션 파일은 common 앱에서 다음과 같이 보여야 합니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">db</span> <span class=\"hljs-keyword\">import</span> migrations\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Migration</span>(migrations.<span class=\"hljs-property\">Migration</span>):\n\n    dependencies = [\n        # 의존성\n    ]\n\n    operations = [\n        migrations.<span class=\"hljs-title class_\">SeparateDatabaseAndState</span>(\n            state_operations=[\n                migrations.<span class=\"hljs-title class_\">DeleteModel</span>(\n                    name=<span class=\"hljs-string\">'Customer'</span>,\n                ),\n            ]\n        )\n    ]\n</code></pre>\n<ul>\n<li>이미 데이터베이스에 테이블이 존재하기 때문에 다시 만들 필요가 없습니다.</li>\n<li>데이터베이스에 CreateModel 작업이 적용되지 않도록 해야 하며, 그렇지 않으면 오류가 발생합니다.</li>\n<li>CreateModel 작업을 SeparateDatabaseAndState으로 감싸주세요. 이렇게 수정된 최종 마이그레이션 파일은 usersapp에서 다음과 같이 보여야 합니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">db</span> <span class=\"hljs-keyword\">import</span> migrations, models\n<span class=\"hljs-keyword\">import</span> django.<span class=\"hljs-property\">db</span>.<span class=\"hljs-property\">models</span>.<span class=\"hljs-property\">deletion</span>\n<span class=\"hljs-keyword\">import</span> django_utils.<span class=\"hljs-property\">models</span>.<span class=\"hljs-property\">base</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Migration</span>(migrations.<span class=\"hljs-property\">Migration</span>):\n\n    dependencies = [\n        # 의존성\n    ]\n\n    operations = [\n        migrations.<span class=\"hljs-title class_\">SeparateDatabaseAndState</span>(\n            state_operations=[\n                migrations.<span class=\"hljs-title class_\">CreateModel</span>(\n                    name=<span class=\"hljs-string\">'Customer'</span>,\n                    fields=[\n                        (<span class=\"hljs-string\">'id'</span>,\n                         models.<span class=\"hljs-title class_\">AutoField</span>(auto_created=<span class=\"hljs-title class_\">True</span>, primary_key=<span class=\"hljs-title class_\">True</span>, serialize=<span class=\"hljs-title class_\">False</span>, verbose_name=<span class=\"hljs-string\">'ID'</span>)),\n                        (<span class=\"hljs-string\">'first_name'</span>, django_utils.<span class=\"hljs-property\">models</span>.<span class=\"hljs-property\">base</span>.<span class=\"hljs-title class_\">CleanCharField</span>(max_length=<span class=\"hljs-number\">30</span>)),\n                        (<span class=\"hljs-string\">'last_name'</span>, django_utils.<span class=\"hljs-property\">models</span>.<span class=\"hljs-property\">base</span>.<span class=\"hljs-title class_\">CleanCharField</span>(max_length=<span class=\"hljs-number\">150</span>)),\n                        (<span class=\"hljs-string\">'email'</span>, models.<span class=\"hljs-title class_\">EmailField</span>(max_length=<span class=\"hljs-number\">254</span>)),\n                        (<span class=\"hljs-string\">'address'</span>, models.<span class=\"hljs-title class_\">ForeignKey</span>(blank=<span class=\"hljs-title class_\">True</span>, <span class=\"hljs-keyword\">default</span>=<span class=\"hljs-title class_\">None</span>, <span class=\"hljs-literal\">null</span>=<span class=\"hljs-title class_\">True</span>,\n                                                      on_delete=django.<span class=\"hljs-property\">db</span>.<span class=\"hljs-property\">models</span>.<span class=\"hljs-property\">deletion</span>.<span class=\"hljs-property\">SET_NULL</span>,\n                                                      to=<span class=\"hljs-string\">'common.address'</span>)),\n                    ],\n                    options={\n                        <span class=\"hljs-string\">'db_table'</span>: <span class=\"hljs-string\">'common_customer'</span>,\n                    },\n                ),\n            ]\n        )\n    ]\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>마이그레이션 적용</h2>\n<p>변경 사항을 적용하기 위해 마이그레이션을 실행하세요</p>\n<pre><code class=\"hljs language-js\">python manage.<span class=\"hljs-property\">py</span> migrate\n</code></pre>\n<p>성공적으로 공통 앱에서 사용자 앱으로 Customer 모델을 이동했고, 데이터베이스 변경이나 데이터 손실 없이 처리되었습니다. 완료되었습니다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>알림: 이 방법은 매우 안전하지만 데이터베이스 작업을 수행하기 전에 데이터베이스를 백업하는 것이 좋습니다 (이 문서에서는 데이터베이스 변경을 수행하지 않지만 마이그레이션 작업을 수행하고 있습니다). 특히 프로덕션 환경에서는 항상 백업을 권장합니다.</p>\n<h2>연락처를 유지합시다:</h2>\n<p>질문, 제안 또는 개선 사항이 있으시면 연락해 주세요.</p>\n<ul>\n<li>Github → <a href=\"https://github.com/shwetasinghh\" rel=\"nofollow\" target=\"_blank\">https://github.com/shwetasinghh</a></li>\n<li>LinkedIn → <a href=\"https://www.linkedin.com/in/shweta-singh-200280117/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/shweta-singh-200280117/</a></li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}