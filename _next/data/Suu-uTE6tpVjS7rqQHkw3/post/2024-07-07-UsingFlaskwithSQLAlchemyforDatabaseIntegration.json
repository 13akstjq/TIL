{"pageProps":{"post":{"title":"Flask와 SQLAlchemy를 사용한 데이터베이스 통합 방법","description":"","date":"2024-07-07 02:30","slug":"2024-07-07-UsingFlaskwithSQLAlchemyforDatabaseIntegration","content":"\n이 기사에서는 SQLAlchemy를 사용하여 Flask 애플리케이션에 데이터베이스를 통합하는 방법에 대해 살펴볼 것입니다. SQLAlchemy는 데이터베이스 상호 작용을 훨씬 쉽게 만드는 파이썬용 강력한 SQL 툴킷 및 객체 관계 매핑(ORM) 라이브러리입니다.\n\n![이미지](/TIL/assets/img/2024-07-07-UsingFlaskwithSQLAlchemyforDatabaseIntegration_0.png)\n\nSQLAlchemy란 무엇인가요?\nSQLAlchemy는 개발자들이 파이썬 객체를 사용하여 데이터베이스 작업을 수행할 수 있는 인기 있는 ORM 라이브러리로, 원시 SQL 쿼리를 작성하지 않고도 데이터베이스 작업을 더 쉽게 관리할 수 있게 해줍니다.\n\n## Flask 및 SQLAlchemy 설정하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우선, 컴퓨터에 Python이 설치되어 있는지 확인하세요. 그런 다음 pip를 사용하여 Flask와 SQLAlchemy를 설치하세요:\n\n```js\npip install Flask SQLAlchemy\n```\n\nSQLAlchemy를 사용한 기본 Flask 애플리케이션 만들기\n\n- 프로젝트 구조: 프로젝트 구조를 다음과 같이 설정하세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nflask_sqlalchemy_example/\n├── app.py\n├── config.py\n├── models.py\n└── requirements.txt\n```\n\n2. Configuration: 데이터베이스 구성을 저장하는 config.py 파일을 만들어보세요:\n\n```python\nimport os\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nclass Config:\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n```\n\n3. 모델 정의: 데이터베이스 모델을 정의하는 models.py 파일을 생성하세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\n아래는 Flask 애플리케이션을 개발하기 위한 코드 예제입니다.\n\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\n    def __repr__(self):\n        return f'<User {self.username}>'\n\n4. Flask 애플리케이션 생성: 메인 애플리케이션 파일인 app.py를 생성하세요.\n\nfrom flask import Flask\nfrom config import Config\nfrom models import db, User\n\napp = Flask(__name__)\napp.config.from_object(Config)\ndb.init_app(app)\n\n@app.before_first_request\ndef create_tables():\n    db.create_all()\n\n@app.route('/')\ndef home():\n    return \"Flask with SQLAlchemy 예제에 오신 것을 환영합니다!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n5. 애플리케이션 실행: 애플리케이션을 실행하고 데이터베이스를 생성하세요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\npython app.py\n\n## CRUD 작업 추가하기\n\n이제 사용자 모델을 관리하기 위해 CRUD(Create, Read, Update, Delete) 작업을 추가해 봅시다.\n\n- 사용자 생성: 새 사용자를 생성하는 라우트를 추가하세요:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nfrom flask import request, jsonify\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n    data = request.get_json()\n    new_user = User(username=data['username'], email=data['email'])\n    db.session.add(new_user)\n    db.session.commit()\n    return jsonify({'message': '사용자가 성공적으로 생성되었습니다!'}), 201\n\n2. 모든 사용자 가져오기: 모든 사용자를 가져오는 라우트를 추가합니다:\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n    users = User.query.all()\n    return jsonify([{'id': user.id, 'username': user.username, 'email': user.email} for user in users])\n\n3. 단일 사용자 가져오기: ID로 사용자를 가져오는 라우트를 추가합니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n@app.route('/users/<int:id>', methods=['GET'])\ndef get_user(id):\n    user = User.query.get_or_404(id)\n    return jsonify({'id': user.id, 'username': user.username, 'email': user.email})\n\n4. 사용자 업데이트: ID로 사용자를 업데이트하는 라우트를 추가하세요:\n\n@app.route('/users/<int:id>', methods=['PUT'])\ndef update_user(id):\n    data = request.get_json()\n    user = User.query.get_or_404(id)\n    user.username = data['username']\n    user.email = data['email']\n    db.session.commit()\n    return jsonify({'message': '사용자가 성공적으로 업데이트되었습니다!'})\n\n5. 사용자 삭제: ID로 사용자를 삭제하는 라우트를 추가하세요:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n@app.route('/users/<int:id>', methods=['DELETE'])\ndef delete_user(id):\n    user = User.query.get_or_404(id)\n    db.session.delete(user)\n    db.session.commit()\n    return jsonify({'message': '사용자가 성공적으로 삭제되었습니다!'})\n\n최종 app.py 코드\n\nCRUD 작업이 모두 포함된 완성된 app.py는 아래와 같습니다:\nfrom flask import Flask, request, jsonify\nfrom config import Config\nfrom models import db, User\n\napp = Flask(__name__)\napp.config.from_object(Config)\ndb.init_app(app)\n\n@app.before_first_request\ndef create_tables():\n    db.create_all()\n\n@app.route('/')\ndef home():\n    return \"Flask with SQLAlchemy 예제에 오신 것을 환영합니다!\"\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n    data = request.get_json()\n    new_user = User(username=data['username'], email=data['email'])\n    db.session.add(new_user)\n    db.session.commit()\n    return jsonify({'message': '사용자가 성공적으로 생성되었습니다!'}), 201\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n    users = User.query.all()\n    return jsonify([{'id': user.id, 'username': user.username, 'email': user.email} for user in users])\n\n@app.route('/users/<int:id>', methods=['GET'])\ndef get_user(id):\n    user = User.query.get_or_404(id)\n    return jsonify({'id': user.id, 'username': user.username, 'email': user.email})\n\n@app.route('/users/<int:id>', methods=['PUT'])\ndef update_user(id):\n    data = request.get_json()\n    user = User.query.get_or_404(id)\n    user.username = data['username']\n    user.email = data['email']\n    db.session.commit()\n    return jsonify({'message': '사용자가 성공적으로 업데이트되었습니다!'})\n\n@app.route('/users/<int:id>', methods=['DELETE'])\ndef delete_user(id):\n    user = User.query.get_or_404(id)\n    db.session.delete(user)\n    db.session.commit()\n    return jsonify({'message': '사용자가 성공적으로 삭제되었습니다!'})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 글에서는 SQLAlchemy를 Flask와 통합하여 데이터베이스 작업을 관리하는 방법을 다루었습니다. 우리는 간단한 사용자 모델을 생성하고 데이터베이스와 상호 작용하기 위한 CRUD 작업을 구현했습니다. SQLAlchemy의 ORM 기능은 Flask 애플리케이션에서 데이터베이스 관리를 위한 강력한 도구로 만들어 줍니다.\n```\n","ogImage":{"url":"/assets/img/2024-07-07-UsingFlaskwithSQLAlchemyforDatabaseIntegration_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-UsingFlaskwithSQLAlchemyforDatabaseIntegration_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 기사에서는 SQLAlchemy를 사용하여 Flask 애플리케이션에 데이터베이스를 통합하는 방법에 대해 살펴볼 것입니다. SQLAlchemy는 데이터베이스 상호 작용을 훨씬 쉽게 만드는 파이썬용 강력한 SQL 툴킷 및 객체 관계 매핑(ORM) 라이브러리입니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-07-UsingFlaskwithSQLAlchemyforDatabaseIntegration_0.png\" alt=\"이미지\"></p>\n<p>SQLAlchemy란 무엇인가요?\nSQLAlchemy는 개발자들이 파이썬 객체를 사용하여 데이터베이스 작업을 수행할 수 있는 인기 있는 ORM 라이브러리로, 원시 SQL 쿼리를 작성하지 않고도 데이터베이스 작업을 더 쉽게 관리할 수 있게 해줍니다.</p>\n<h2>Flask 및 SQLAlchemy 설정하기</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>우선, 컴퓨터에 Python이 설치되어 있는지 확인하세요. 그런 다음 pip를 사용하여 Flask와 SQLAlchemy를 설치하세요:</p>\n<pre><code class=\"hljs language-js\">pip install <span class=\"hljs-title class_\">Flask</span> <span class=\"hljs-title class_\">SQLAlchemy</span>\n</code></pre>\n<p>SQLAlchemy를 사용한 기본 Flask 애플리케이션 만들기</p>\n<ul>\n<li>프로젝트 구조: 프로젝트 구조를 다음과 같이 설정하세요:</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">flask_sqlalchemy_example/\n├── app.<span class=\"hljs-property\">py</span>\n├── config.<span class=\"hljs-property\">py</span>\n├── models.<span class=\"hljs-property\">py</span>\n└── requirements.<span class=\"hljs-property\">txt</span>\n</code></pre>\n<ol start=\"2\">\n<li>Configuration: 데이터베이스 구성을 저장하는 config.py 파일을 만들어보세요:</li>\n</ol>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Config</span>:\n    SQLALCHEMY_DATABASE_URI = <span class=\"hljs-string\">'sqlite:///'</span> + os.path.join(basedir, <span class=\"hljs-string\">'app.db'</span>)\n    SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"hljs-literal\">False</span>\n</code></pre>\n<ol start=\"3\">\n<li>모델 정의: 데이터베이스 모델을 정의하는 models.py 파일을 생성하세요:</li>\n</ol>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\">아래는 Flask 애플리케이션을 개발하기 위한 코드 예제입니다.\n\n<span class=\"hljs-keyword\">from</span> flask_sqlalchemy <span class=\"hljs-keyword\">import</span> SQLAlchemy\n\ndb = SQLAlchemy()\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>(db.Model):\n    <span class=\"hljs-built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"hljs-literal\">True</span>)\n    username = db.Column(db.String(<span class=\"hljs-number\">80</span>), unique=<span class=\"hljs-literal\">True</span>, nullable=<span class=\"hljs-literal\">False</span>)\n    email = db.Column(db.String(<span class=\"hljs-number\">120</span>), unique=<span class=\"hljs-literal\">True</span>, nullable=<span class=\"hljs-literal\">False</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f'&#x3C;User <span class=\"hljs-subst\">{self.username}</span>>'</span>\n\n<span class=\"hljs-number\">4.</span> Flask 애플리케이션 생성: 메인 애플리케이션 파일인 app.py를 생성하세요.\n\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask\n<span class=\"hljs-keyword\">from</span> config <span class=\"hljs-keyword\">import</span> Config\n<span class=\"hljs-keyword\">from</span> models <span class=\"hljs-keyword\">import</span> db, User\n\napp = Flask(__name__)\napp.config.from_object(Config)\ndb.init_app(app)\n\n<span class=\"hljs-meta\">@app.before_first_request</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_tables</span>():\n    db.create_all()\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/'</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">home</span>():\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Flask with SQLAlchemy 예제에 오신 것을 환영합니다!\"</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-literal\">True</span>)\n\n<span class=\"hljs-number\">5.</span> 애플리케이션 실행: 애플리케이션을 실행하고 데이터베이스를 생성하세요.\n\n&#x3C;!-- TIL 수평 -->\n&#x3C;ins <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     style=<span class=\"hljs-string\">\"display:block\"</span>\n     data-ad-client=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     data-ad-slot=<span class=\"hljs-string\">\"1549334788\"</span>\n     data-ad-<span class=\"hljs-built_in\">format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     data-full-width-responsive=<span class=\"hljs-string\">\"true\"</span>>&#x3C;/ins>\n&#x3C;script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n&#x3C;/script>\n\npython app.py\n\n<span class=\"hljs-comment\">## CRUD 작업 추가하기</span>\n\n이제 사용자 모델을 관리하기 위해 CRUD(Create, Read, Update, Delete) 작업을 추가해 봅시다.\n\n- 사용자 생성: 새 사용자를 생성하는 라우트를 추가하세요:\n\n&#x3C;!-- TIL 수평 -->\n&#x3C;ins <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     style=<span class=\"hljs-string\">\"display:block\"</span>\n     data-ad-client=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     data-ad-slot=<span class=\"hljs-string\">\"1549334788\"</span>\n     data-ad-<span class=\"hljs-built_in\">format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     data-full-width-responsive=<span class=\"hljs-string\">\"true\"</span>>&#x3C;/ins>\n&#x3C;script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n&#x3C;/script>\n\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> request, jsonify\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/users'</span>, methods=[<span class=\"hljs-string\">'POST'</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_user</span>():\n    data = request.get_json()\n    new_user = User(username=data[<span class=\"hljs-string\">'username'</span>], email=data[<span class=\"hljs-string\">'email'</span>])\n    db.session.add(new_user)\n    db.session.commit()\n    <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'사용자가 성공적으로 생성되었습니다!'</span>}), <span class=\"hljs-number\">201</span>\n\n<span class=\"hljs-number\">2.</span> 모든 사용자 가져오기: 모든 사용자를 가져오는 라우트를 추가합니다:\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/users'</span>, methods=[<span class=\"hljs-string\">'GET'</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_users</span>():\n    users = User.query.<span class=\"hljs-built_in\">all</span>()\n    <span class=\"hljs-keyword\">return</span> jsonify([{<span class=\"hljs-string\">'id'</span>: user.<span class=\"hljs-built_in\">id</span>, <span class=\"hljs-string\">'username'</span>: user.username, <span class=\"hljs-string\">'email'</span>: user.email} <span class=\"hljs-keyword\">for</span> user <span class=\"hljs-keyword\">in</span> users])\n\n<span class=\"hljs-number\">3.</span> 단일 사용자 가져오기: ID로 사용자를 가져오는 라우트를 추가합니다:\n\n&#x3C;!-- TIL 수평 -->\n&#x3C;ins <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     style=<span class=\"hljs-string\">\"display:block\"</span>\n     data-ad-client=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     data-ad-slot=<span class=\"hljs-string\">\"1549334788\"</span>\n     data-ad-<span class=\"hljs-built_in\">format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     data-full-width-responsive=<span class=\"hljs-string\">\"true\"</span>>&#x3C;/ins>\n&#x3C;script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n&#x3C;/script>\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/users/&#x3C;int:id>'</span>, methods=[<span class=\"hljs-string\">'GET'</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_user</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):\n    user = User.query.get_or_404(<span class=\"hljs-built_in\">id</span>)\n    <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">'id'</span>: user.<span class=\"hljs-built_in\">id</span>, <span class=\"hljs-string\">'username'</span>: user.username, <span class=\"hljs-string\">'email'</span>: user.email})\n\n<span class=\"hljs-number\">4.</span> 사용자 업데이트: ID로 사용자를 업데이트하는 라우트를 추가하세요:\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/users/&#x3C;int:id>'</span>, methods=[<span class=\"hljs-string\">'PUT'</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_user</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):\n    data = request.get_json()\n    user = User.query.get_or_404(<span class=\"hljs-built_in\">id</span>)\n    user.username = data[<span class=\"hljs-string\">'username'</span>]\n    user.email = data[<span class=\"hljs-string\">'email'</span>]\n    db.session.commit()\n    <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'사용자가 성공적으로 업데이트되었습니다!'</span>})\n\n<span class=\"hljs-number\">5.</span> 사용자 삭제: ID로 사용자를 삭제하는 라우트를 추가하세요:\n\n&#x3C;!-- TIL 수평 -->\n&#x3C;ins <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     style=<span class=\"hljs-string\">\"display:block\"</span>\n     data-ad-client=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     data-ad-slot=<span class=\"hljs-string\">\"1549334788\"</span>\n     data-ad-<span class=\"hljs-built_in\">format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     data-full-width-responsive=<span class=\"hljs-string\">\"true\"</span>>&#x3C;/ins>\n&#x3C;script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n&#x3C;/script>\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/users/&#x3C;int:id>'</span>, methods=[<span class=\"hljs-string\">'DELETE'</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_user</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):\n    user = User.query.get_or_404(<span class=\"hljs-built_in\">id</span>)\n    db.session.delete(user)\n    db.session.commit()\n    <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'사용자가 성공적으로 삭제되었습니다!'</span>})\n\n최종 app.py 코드\n\nCRUD 작업이 모두 포함된 완성된 app.py는 아래와 같습니다:\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, request, jsonify\n<span class=\"hljs-keyword\">from</span> config <span class=\"hljs-keyword\">import</span> Config\n<span class=\"hljs-keyword\">from</span> models <span class=\"hljs-keyword\">import</span> db, User\n\napp = Flask(__name__)\napp.config.from_object(Config)\ndb.init_app(app)\n\n<span class=\"hljs-meta\">@app.before_first_request</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_tables</span>():\n    db.create_all()\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/'</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">home</span>():\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Flask with SQLAlchemy 예제에 오신 것을 환영합니다!\"</span>\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/users'</span>, methods=[<span class=\"hljs-string\">'POST'</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_user</span>():\n    data = request.get_json()\n    new_user = User(username=data[<span class=\"hljs-string\">'username'</span>], email=data[<span class=\"hljs-string\">'email'</span>])\n    db.session.add(new_user)\n    db.session.commit()\n    <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'사용자가 성공적으로 생성되었습니다!'</span>}), <span class=\"hljs-number\">201</span>\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/users'</span>, methods=[<span class=\"hljs-string\">'GET'</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_users</span>():\n    users = User.query.<span class=\"hljs-built_in\">all</span>()\n    <span class=\"hljs-keyword\">return</span> jsonify([{<span class=\"hljs-string\">'id'</span>: user.<span class=\"hljs-built_in\">id</span>, <span class=\"hljs-string\">'username'</span>: user.username, <span class=\"hljs-string\">'email'</span>: user.email} <span class=\"hljs-keyword\">for</span> user <span class=\"hljs-keyword\">in</span> users])\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/users/&#x3C;int:id>'</span>, methods=[<span class=\"hljs-string\">'GET'</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_user</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):\n    user = User.query.get_or_404(<span class=\"hljs-built_in\">id</span>)\n    <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">'id'</span>: user.<span class=\"hljs-built_in\">id</span>, <span class=\"hljs-string\">'username'</span>: user.username, <span class=\"hljs-string\">'email'</span>: user.email})\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/users/&#x3C;int:id>'</span>, methods=[<span class=\"hljs-string\">'PUT'</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_user</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):\n    data = request.get_json()\n    user = User.query.get_or_404(<span class=\"hljs-built_in\">id</span>)\n    user.username = data[<span class=\"hljs-string\">'username'</span>]\n    user.email = data[<span class=\"hljs-string\">'email'</span>]\n    db.session.commit()\n    <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'사용자가 성공적으로 업데이트되었습니다!'</span>})\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/users/&#x3C;int:id>'</span>, methods=[<span class=\"hljs-string\">'DELETE'</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_user</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">id</span></span>):\n    user = User.query.get_or_404(<span class=\"hljs-built_in\">id</span>)\n    db.session.delete(user)\n    db.session.commit()\n    <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">'message'</span>: <span class=\"hljs-string\">'사용자가 성공적으로 삭제되었습니다!'</span>})\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-literal\">True</span>)\n\n&#x3C;!-- TIL 수평 -->\n&#x3C;ins <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"adsbygoogle\"</span>\n     style=<span class=\"hljs-string\">\"display:block\"</span>\n     data-ad-client=<span class=\"hljs-string\">\"ca-pub-4877378276818686\"</span>\n     data-ad-slot=<span class=\"hljs-string\">\"1549334788\"</span>\n     data-ad-<span class=\"hljs-built_in\">format</span>=<span class=\"hljs-string\">\"auto\"</span>\n     data-full-width-responsive=<span class=\"hljs-string\">\"true\"</span>>&#x3C;/ins>\n&#x3C;script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n&#x3C;/script>\n\n이 글에서는 SQLAlchemy를 Flask와 통합하여 데이터베이스 작업을 관리하는 방법을 다루었습니다. 우리는 간단한 사용자 모델을 생성하고 데이터베이스와 상호 작용하기 위한 CRUD 작업을 구현했습니다. SQLAlchemy의 ORM 기능은 Flask 애플리케이션에서 데이터베이스 관리를 위한 강력한 도구로 만들어 줍니다.\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}