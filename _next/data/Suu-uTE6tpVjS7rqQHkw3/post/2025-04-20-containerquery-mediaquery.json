{"pageProps":{"post":{"title":"미디어 쿼리 vs. 컨테이너 쿼리 차이점 비교","description":"","date":"2025-04-20 00:06","slug":"2025-04-20-containerquery-mediaquery","content":"\n안녕하세요! 오늘은 **컨테이너 쿼리(Container Query)** 를 본격적으로 사용하기 전에 꼭 알고 있어야 할 개념인, **미디어 쿼리(Media Query)** 와의 차이점에 대해 이야기해볼게요. 🤔\n\n둘 다 반응형 디자인에 사용하는 CSS 문법이지만, **어디에 적용되는지, 언제 쓰는 게 더 좋은지**에 따라 차이가 꽤 있습니다!\n\n---\n\n## ✅ 미디어 쿼리란?\n\n미디어 쿼리는 우리가 이미 많이 써온 방식이에요.  \n**브라우저 뷰포트(viewport)의 크기**에 따라 스타일을 다르게 적용하죠.\n\n```css\n@media (min-width: 768px) {\n  .box {\n    background-color: lightblue;\n  }\n}\n```\n\n- 위 예제는 화면의 너비가 **768px 이상**일 때 `.box`의 배경색을 파란색으로 바꿉니다.\n- 주로 전체적인 **페이지 레이아웃**을 바꿀 때 많이 써요.\n\n---\n\n## ✅ 컨테이너 쿼리란?\n\n컨테이너 쿼리는 조금 달라요!  \n**뷰포트가 아니라, 특정 요소(부모 컨테이너)의 크기**를 기준으로 스타일을 바꿔줍니다. 🎯\n\n```css\n.container {\n  container-type: inline-size;\n}\n\n@container (min-width: 400px) {\n  .box {\n    background-color: lightgreen;\n  }\n}\n```\n\n- `.container` 요소의 **가로 너비가 400px 이상**일 때, 내부 `.box` 요소에 스타일을 적용합니다.\n- 그래서 페이지 크기와 상관없이, **컴포넌트의 위치나 구조에 따라 자동 반응**하게 만들 수 있어요!\n\n---\n\n## 📊 둘의 차이를 표로 한눈에 정리\n\n| 비교 항목     | 미디어 쿼리 (Media Query)   | 컨테이너 쿼리 (Container Query)                                     |\n| ------------- | --------------------------- | ------------------------------------------------------------------- |\n| 기준          | **브라우저 뷰포트 크기**    | **부모 컨테이너 크기**                                              |\n| 주 사용처     | 전체 페이지 레이아웃        | 개별 컴포넌트/요소 스타일링                                         |\n| 유연성        | 한정적 (전체 페이지 기준)   | 매우 유연함 (컴포넌트 기반)                                         |\n| 예시          | `@media (min-width: 768px)` | `@container (min-width: 400px)`                                     |\n| 브라우저 지원 | 널리 지원                   | [최신 브라우저부터 지원](https://caniuse.com/css-container-queries) |\n\n---\n\n## 💡 간단한 비교 예제\n\n### 💻 HTML\n\n```html\n<div class=\"container\">\n  <div class=\"box\">나는 박스야</div>\n</div>\n```\n\n### 🎨 CSS – 미디어 쿼리 버전\n\n```css\n.box {\n  background-color: pink;\n}\n\n@media (min-width: 600px) {\n  .box {\n    background-color: skyblue;\n  }\n}\n```\n\n📸 **결과:** 화면 너비가 600px 이상이 되면 박스가 파란색으로 바뀜\n\n---\n\n### 🎨 CSS – 컨테이너 쿼리 버전\n\n```css\n.container {\n  container-type: inline-size;\n}\n\n.box {\n  background-color: pink;\n}\n\n@container (min-width: 400px) {\n  .box {\n    background-color: lightgreen;\n  }\n}\n```\n\n📸 **결과:** `.container`의 너비가 400px 이상일 때 박스가 연두색으로 바뀜  \n👉 화면 크기가 아닌, **부모 요소 너비에 따라** 바뀌기 때문에 **레이아웃 내부에서 반응형 처리가 가능**해요!\n\n---\n\n## 🧠 언제 뭘 써야 할까?\n\n- **미디어 쿼리**는 페이지 전체 레이아웃 변경에 여전히 좋습니다.\n- **컨테이너 쿼리**는 컴포넌트 단위로 스타일을 바꿔야 할 때 아주 강력합니다!\n\n🎯 특히 **디자인 시스템, 컴포넌트 기반 UI (예: React, Vue 등)** 을 쓸 때는 컨테이너 쿼리가 훨씬 유리해요.\n\n---\n\n## ⚠️ 사용 전 주의할 점\n\n- **브라우저 지원**: 최신 버전의 크롬, 엣지, 파이어폭스에서는 지원하지만 Safari는 16.0 이상에서만 지원돼요.\n- **`container-type` 설정 필수**: 부모 요소에 `container-type` 속성을 주지 않으면 동작하지 않아요!\n- **성능 고려**: 너무 많은 요소에 컨테이너 쿼리를 쓰면 렌더링 비용이 올라갈 수 있어요.\n\n---\n\n## 📌 마무리\n\n미디어 쿼리와 컨테이너 쿼리는 서로 경쟁하는 게 아니라 **상호 보완적**이에요.  \n페이지 전체는 미디어 쿼리로, 세부 컴포넌트는 컨테이너 쿼리로 나눠서 쓰면 **더 유연하고 깔끔한 반응형 UI**를 만들 수 있어요. 🎉\n\n---\n\n> 다음 글에서는 컨테이너 쿼리 문법을 좀 더 자세히 다루고, 다양한 실전 예제도 소개할게요! 🙌\n","ogImage":{"url":"/TIL/assets/img/2024-07-15-TechStackForProduction-ReadyLLMApplicationsIn2024_0.png"},"coverImage":"/TIL/assets/img/2025-04-20-containerquery-mediaquery.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요! 오늘은 <strong>컨테이너 쿼리(Container Query)</strong> 를 본격적으로 사용하기 전에 꼭 알고 있어야 할 개념인, <strong>미디어 쿼리(Media Query)</strong> 와의 차이점에 대해 이야기해볼게요. 🤔</p>\n<p>둘 다 반응형 디자인에 사용하는 CSS 문법이지만, <strong>어디에 적용되는지, 언제 쓰는 게 더 좋은지</strong>에 따라 차이가 꽤 있습니다!</p>\n<hr>\n<h2>✅ 미디어 쿼리란?</h2>\n<p>미디어 쿼리는 우리가 이미 많이 써온 방식이에요.<br>\n<strong>브라우저 뷰포트(viewport)의 크기</strong>에 따라 스타일을 다르게 적용하죠.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">768px</span>) {\n  <span class=\"hljs-selector-class\">.box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: lightblue;\n  }\n}\n</code></pre>\n<ul>\n<li>위 예제는 화면의 너비가 <strong>768px 이상</strong>일 때 <code>.box</code>의 배경색을 파란색으로 바꿉니다.</li>\n<li>주로 전체적인 <strong>페이지 레이아웃</strong>을 바꿀 때 많이 써요.</li>\n</ul>\n<hr>\n<h2>✅ 컨테이너 쿼리란?</h2>\n<p>컨테이너 쿼리는 조금 달라요!<br>\n<strong>뷰포트가 아니라, 특정 요소(부모 컨테이너)의 크기</strong>를 기준으로 스타일을 바꿔줍니다. 🎯</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.container</span> {\n  container-type: inline-size;\n}\n\n<span class=\"hljs-keyword\">@container</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">400px</span>) {\n  <span class=\"hljs-selector-class\">.box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: lightgreen;\n  }\n}\n</code></pre>\n<ul>\n<li><code>.container</code> 요소의 <strong>가로 너비가 400px 이상</strong>일 때, 내부 <code>.box</code> 요소에 스타일을 적용합니다.</li>\n<li>그래서 페이지 크기와 상관없이, <strong>컴포넌트의 위치나 구조에 따라 자동 반응</strong>하게 만들 수 있어요!</li>\n</ul>\n<hr>\n<h2>📊 둘의 차이를 표로 한눈에 정리</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>비교 항목</th><th>미디어 쿼리 (Media Query)</th><th>컨테이너 쿼리 (Container Query)</th></tr></thead><tbody><tr><td>기준</td><td><strong>브라우저 뷰포트 크기</strong></td><td><strong>부모 컨테이너 크기</strong></td></tr><tr><td>주 사용처</td><td>전체 페이지 레이아웃</td><td>개별 컴포넌트/요소 스타일링</td></tr><tr><td>유연성</td><td>한정적 (전체 페이지 기준)</td><td>매우 유연함 (컴포넌트 기반)</td></tr><tr><td>예시</td><td><code>@media (min-width: 768px)</code></td><td><code>@container (min-width: 400px)</code></td></tr><tr><td>브라우저 지원</td><td>널리 지원</td><td><a href=\"https://caniuse.com/css-container-queries\" rel=\"nofollow\" target=\"_blank\">최신 브라우저부터 지원</a></td></tr></tbody></table>\n<hr>\n<h2>💡 간단한 비교 예제</h2>\n<h3>💻 HTML</h3>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box\"</span>></span>나는 박스야<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<h3>🎨 CSS – 미디어 쿼리 버전</h3>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.box</span> {\n  <span class=\"hljs-attribute\">background-color</span>: pink;\n}\n\n<span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">600px</span>) {\n  <span class=\"hljs-selector-class\">.box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: skyblue;\n  }\n}\n</code></pre>\n<p>📸 <strong>결과:</strong> 화면 너비가 600px 이상이 되면 박스가 파란색으로 바뀜</p>\n<hr>\n<h3>🎨 CSS – 컨테이너 쿼리 버전</h3>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.container</span> {\n  container-type: inline-size;\n}\n\n<span class=\"hljs-selector-class\">.box</span> {\n  <span class=\"hljs-attribute\">background-color</span>: pink;\n}\n\n<span class=\"hljs-keyword\">@container</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">400px</span>) {\n  <span class=\"hljs-selector-class\">.box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: lightgreen;\n  }\n}\n</code></pre>\n<p>📸 <strong>결과:</strong> <code>.container</code>의 너비가 400px 이상일 때 박스가 연두색으로 바뀜<br>\n👉 화면 크기가 아닌, <strong>부모 요소 너비에 따라</strong> 바뀌기 때문에 <strong>레이아웃 내부에서 반응형 처리가 가능</strong>해요!</p>\n<hr>\n<h2>🧠 언제 뭘 써야 할까?</h2>\n<ul>\n<li><strong>미디어 쿼리</strong>는 페이지 전체 레이아웃 변경에 여전히 좋습니다.</li>\n<li><strong>컨테이너 쿼리</strong>는 컴포넌트 단위로 스타일을 바꿔야 할 때 아주 강력합니다!</li>\n</ul>\n<p>🎯 특히 <strong>디자인 시스템, 컴포넌트 기반 UI (예: React, Vue 등)</strong> 을 쓸 때는 컨테이너 쿼리가 훨씬 유리해요.</p>\n<hr>\n<h2>⚠️ 사용 전 주의할 점</h2>\n<ul>\n<li><strong>브라우저 지원</strong>: 최신 버전의 크롬, 엣지, 파이어폭스에서는 지원하지만 Safari는 16.0 이상에서만 지원돼요.</li>\n<li><strong><code>container-type</code> 설정 필수</strong>: 부모 요소에 <code>container-type</code> 속성을 주지 않으면 동작하지 않아요!</li>\n<li><strong>성능 고려</strong>: 너무 많은 요소에 컨테이너 쿼리를 쓰면 렌더링 비용이 올라갈 수 있어요.</li>\n</ul>\n<hr>\n<h2>📌 마무리</h2>\n<p>미디어 쿼리와 컨테이너 쿼리는 서로 경쟁하는 게 아니라 <strong>상호 보완적</strong>이에요.<br>\n페이지 전체는 미디어 쿼리로, 세부 컴포넌트는 컨테이너 쿼리로 나눠서 쓰면 <strong>더 유연하고 깔끔한 반응형 UI</strong>를 만들 수 있어요. 🎉</p>\n<hr>\n<blockquote>\n<p>다음 글에서는 컨테이너 쿼리 문법을 좀 더 자세히 다루고, 다양한 실전 예제도 소개할게요! 🙌</p>\n</blockquote>\n</body>\n</html>\n"},"__N_SSG":true}