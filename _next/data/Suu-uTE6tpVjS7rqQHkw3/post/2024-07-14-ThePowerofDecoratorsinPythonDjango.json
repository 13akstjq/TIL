{"pageProps":{"post":{"title":"장고에서 파이썬 데코레이터의 강력한 기능 알아보기","description":"","date":"2024-07-14 20:39","slug":"2024-07-14-ThePowerofDecoratorsinPythonDjango","content":"\n\n# TL;TR\n\n데코레이터는 파이썬에서 강력한 기능으로, 실제 코드를 변경하지 않고 함수 또는 메서드의 동작을 수정할 수 있게 해줍니다. Django에서는 인증, 권한 부여 및 요청 처리와 같은 반복적인 작업을 간소화하고 관리하기 위해 데코레이터가 널리 사용됩니다. 이 기사에서는 파이썬과 Django에서 데코레이터의 중요성을 탐색하고, 그들의 강력함을 강조하며 효과적인 사용을 위한 모베스트 프랙티스를 제공합니다.\n\n# 데코레이터의 기본\n\n파이썬에서 데코레이터는 다른 함수나 메서드를 감싸서 동작을 수정하는 함수입니다. @decorator_name 구문을 사용하여 함수 정의 위에 적용됩니다. 다음은 간단한 예시입니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\ndef my_decorator(func):\n    def wrapper():\n        print(\"함수 호출 전\")\n        func()\n        print(\"함수 호출 후\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"안녕!\")\n\nsay_hello()\r\n```\n\nsay_hello가 호출되면 다음과 같이 출력됩니다:\n\n```python\n함수 호출 전\n안녕!\n함수 호출 후\n```\n\n# 장고에서의 데코레이터들\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n장고에서는 데코레이터가 뷰를 관리하고 공통 웹 개발 작업을 처리하는 데 중요한 역할을 합니다:\n\n## 인증 데코레이터\n\n- @login_required: 뷰에 접근하기 전에 사용자가 인증되었는지 확인합니다.\n\n```python\nfrom django.contrib.auth.decorators import login_required\n\n@login_required\ndef dashboard(request):\n    return HttpResponse(\"대시보드에 오신 것을 환영합니다!\")\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 허가 데코레이터\n\n- @permission_required: 사용자가 특정 권한을 갖고 있는지 확인합니다.\n\n```python\nfrom django.contrib.auth.decorators import permission_required\n\n@permission_required('app.view_dashboard')\ndef dashboard(request):\n    return HttpResponse(\"대시보드를 볼 수 있는 권한이 있습니다!\")\n```\n\n## 메서드 데코레이터\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- @require_http_methods: 뷰에 허용된 HTTP 메소드를 제한합니다.\n\n```js\nfrom django.views.decorators.http import require_http_methods\n\n@require_http_methods([\"GET\", \"POST\"])\ndef submit_form(request):\n    if request.method == 'POST':\n        return HttpResponse(\"Form submitted!\")\n    return HttpResponse(\"Submit the form.\")\n```\n\n# Django에서 사용자 정의 데코레이터\n\nDjango에서 사용자 정의 데코레이터를 생성하면 재사용 가능한 기능을 캡슐화할 수 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n예시: 뷰로의 접근 로깅\n\n```python\nimport logging\nfrom django.http import HttpResponse\n\nlogger = logging.getLogger(__name__)\n\ndef log_access(func):\n    def wrapper(request, *args, **kwargs):\n        logger.info(f\"뷰에 접근 중: {func.__name__}\")\n        return func(request, *args, **kwargs)\n    return wrapper\n\n@log_access\ndef dashboard(request):\n    return HttpResponse(\"대시보드입니다\")\n```\n\n# 데코레이터 사용시 권장 사항\n\n파이썬과 장고에서 데코레이터를 사용할 때, 유지보수 가능하고 효율적인 코드를 보장하기 위해 다음과 같은 권장 사항을 고려해보세요:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 1. 데코레이터를 간단하고 명확하게 유지해주세요\n\n데코레이터는 한 가지 일을 잘 하는 것이 중요합니다. 복잡한 로직을 피하고 데코레이터를 이해하기 쉽고 유지보수가능하도록 유지해주세요.\n\n## 2. 데코레이터를 명확하게 문서화해주세요\n\n사용자 정의 데코레이터에 대해 명확한 설명서를 제공하여 그 목적과 사용법을 설명해주세요. 이는 가독성과 유용성을 유지하는 데 중요합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 3. 가능한 경우 내장 데코레이터 사용하기\n\n인증 및 메소드 제한과 같은 일반 작업에 대해 Django의 내장 데코레이터를 활용하세요. 이들은 제대로 시험된 상태이며 유지관리가 잘 되어 있습니다.\n\n## 4. 적절하게 데코레이터를 스택해야 합니다\n\n여러 데코레이터를 사용할 때 의도하지 않은 동작을 피하기 위해 논리적인 순서로 스택하십시오. 예를 들어:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\n@login_required\n@require_http_methods([\"POST\"])\ndef secure_submit(request):\n    return HttpResponse(\"안전하게 제출된 양식!\")\n```\n\n## 5. Gracefully 처리되는 예외 핸들링\n\n데코레이터가 예외를 정상적으로 처리하고 의미 있는 오류 메시지 또는 대체 매커니즘을 제공하도록 확실히 합니다.\n\n## 6. 데코레이터 철저히 테스트하기\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n커스텀 데코레이터에 대한 유닛 테스트를 작성하여 다양한 시나리오에서 예상대로 작동하는지 확인하세요.\n\n# 결론\n\n데코레이터는 Python 및 Django에서 강력한 도구로, 개발자들이 반복적인 작업을 추상화하여 더 깔끔하고 유지보수가 쉬운 코드를 작성할 수 있게 해줍니다. 이러한 데코레이터의 전체 잠재력을 활용하기 위해 개발자들은 그것을 간단하게 유지하고 철저히 문서화하며 내장 솔루션을 활용하는 등의 최상의 방법을 따라야 합니다.\n\n# 저를 따라오세요\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 내 랜딩 페이지\n- 내 Youtube 채널\n- 내 SaaS 서비스\n- 내 GitHub\n\n# 간단히 말해서 🚀\n\nIn Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 글쓴이를 클랩하고 팔로우 해 주세요 ️👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter\n- 다른 플랫폼 방문: CoFeed | Differ\n- PlainEnglish.io에서 더 많은 콘텐츠 확인하기","ogImage":{"url":"/TIL/assets/no-image.jpg"},"coverImage":"/TIL/assets/no-image.jpg","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>TL;TR</h1>\n<p>데코레이터는 파이썬에서 강력한 기능으로, 실제 코드를 변경하지 않고 함수 또는 메서드의 동작을 수정할 수 있게 해줍니다. Django에서는 인증, 권한 부여 및 요청 처리와 같은 반복적인 작업을 간소화하고 관리하기 위해 데코레이터가 널리 사용됩니다. 이 기사에서는 파이썬과 Django에서 데코레이터의 중요성을 탐색하고, 그들의 강력함을 강조하며 효과적인 사용을 위한 모베스트 프랙티스를 제공합니다.</p>\n<h1>데코레이터의 기본</h1>\n<p>파이썬에서 데코레이터는 다른 함수나 메서드를 감싸서 동작을 수정하는 함수입니다. @decorator_name 구문을 사용하여 함수 정의 위에 적용됩니다. 다음은 간단한 예시입니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_decorator</span>(<span class=\"hljs-params\">func</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">wrapper</span>():\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"함수 호출 전\"</span>)\n        func()\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"함수 호출 후\"</span>)\n    <span class=\"hljs-keyword\">return</span> wrapper\n\n<span class=\"hljs-meta\">@my_decorator</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">say_hello</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"안녕!\"</span>)\n\nsay_hello()\n</code></pre>\n<p>say_hello가 호출되면 다음과 같이 출력됩니다:</p>\n<pre><code class=\"hljs language-python\">함수 호출 전\n안녕!\n함수 호출 후\n</code></pre>\n<h1>장고에서의 데코레이터들</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>장고에서는 데코레이터가 뷰를 관리하고 공통 웹 개발 작업을 처리하는 데 중요한 역할을 합니다:</p>\n<h2>인증 데코레이터</h2>\n<ul>\n<li>@login_required: 뷰에 접근하기 전에 사용자가 인증되었는지 확인합니다.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> django.contrib.auth.decorators <span class=\"hljs-keyword\">import</span> login_required\n\n<span class=\"hljs-meta\">@login_required</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dashboard</span>(<span class=\"hljs-params\">request</span>):\n    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">\"대시보드에 오신 것을 환영합니다!\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>허가 데코레이터</h2>\n<ul>\n<li>@permission_required: 사용자가 특정 권한을 갖고 있는지 확인합니다.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> django.contrib.auth.decorators <span class=\"hljs-keyword\">import</span> permission_required\n\n<span class=\"hljs-meta\">@permission_required(<span class=\"hljs-params\"><span class=\"hljs-string\">'app.view_dashboard'</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dashboard</span>(<span class=\"hljs-params\">request</span>):\n    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">\"대시보드를 볼 수 있는 권한이 있습니다!\"</span>)\n</code></pre>\n<h2>메서드 데코레이터</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>@require_http_methods: 뷰에 허용된 HTTP 메소드를 제한합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">views</span>.<span class=\"hljs-property\">decorators</span>.<span class=\"hljs-property\">http</span> <span class=\"hljs-keyword\">import</span> require_http_methods\n\n@require_http_methods([<span class=\"hljs-string\">\"GET\"</span>, <span class=\"hljs-string\">\"POST\"</span>])\ndef <span class=\"hljs-title function_\">submit_form</span>(request):\n    <span class=\"hljs-keyword\">if</span> request.<span class=\"hljs-property\">method</span> == <span class=\"hljs-string\">'POST'</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">HttpResponse</span>(<span class=\"hljs-string\">\"Form submitted!\"</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">HttpResponse</span>(<span class=\"hljs-string\">\"Submit the form.\"</span>)\n</code></pre>\n<h1>Django에서 사용자 정의 데코레이터</h1>\n<p>Django에서 사용자 정의 데코레이터를 생성하면 재사용 가능한 기능을 캡슐화할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>예시: 뷰로의 접근 로깅</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> logging\n<span class=\"hljs-keyword\">from</span> django.http <span class=\"hljs-keyword\">import</span> HttpResponse\n\nlogger = logging.getLogger(__name__)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">log_access</span>(<span class=\"hljs-params\">func</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">wrapper</span>(<span class=\"hljs-params\">request, *args, **kwargs</span>):\n        logger.info(<span class=\"hljs-string\">f\"뷰에 접근 중: <span class=\"hljs-subst\">{func.__name__}</span>\"</span>)\n        <span class=\"hljs-keyword\">return</span> func(request, *args, **kwargs)\n    <span class=\"hljs-keyword\">return</span> wrapper\n\n<span class=\"hljs-meta\">@log_access</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dashboard</span>(<span class=\"hljs-params\">request</span>):\n    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">\"대시보드입니다\"</span>)\n</code></pre>\n<h1>데코레이터 사용시 권장 사항</h1>\n<p>파이썬과 장고에서 데코레이터를 사용할 때, 유지보수 가능하고 효율적인 코드를 보장하기 위해 다음과 같은 권장 사항을 고려해보세요:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>1. 데코레이터를 간단하고 명확하게 유지해주세요</h2>\n<p>데코레이터는 한 가지 일을 잘 하는 것이 중요합니다. 복잡한 로직을 피하고 데코레이터를 이해하기 쉽고 유지보수가능하도록 유지해주세요.</p>\n<h2>2. 데코레이터를 명확하게 문서화해주세요</h2>\n<p>사용자 정의 데코레이터에 대해 명확한 설명서를 제공하여 그 목적과 사용법을 설명해주세요. 이는 가독성과 유용성을 유지하는 데 중요합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>3. 가능한 경우 내장 데코레이터 사용하기</h2>\n<p>인증 및 메소드 제한과 같은 일반 작업에 대해 Django의 내장 데코레이터를 활용하세요. 이들은 제대로 시험된 상태이며 유지관리가 잘 되어 있습니다.</p>\n<h2>4. 적절하게 데코레이터를 스택해야 합니다</h2>\n<p>여러 데코레이터를 사용할 때 의도하지 않은 동작을 피하기 위해 논리적인 순서로 스택하십시오. 예를 들어:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">@login_required</span>\n<span class=\"hljs-meta\">@require_http_methods(<span class=\"hljs-params\">[<span class=\"hljs-string\">\"POST\"</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">secure_submit</span>(<span class=\"hljs-params\">request</span>):\n    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">\"안전하게 제출된 양식!\"</span>)\n</code></pre>\n<h2>5. Gracefully 처리되는 예외 핸들링</h2>\n<p>데코레이터가 예외를 정상적으로 처리하고 의미 있는 오류 메시지 또는 대체 매커니즘을 제공하도록 확실히 합니다.</p>\n<h2>6. 데코레이터 철저히 테스트하기</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>커스텀 데코레이터에 대한 유닛 테스트를 작성하여 다양한 시나리오에서 예상대로 작동하는지 확인하세요.</p>\n<h1>결론</h1>\n<p>데코레이터는 Python 및 Django에서 강력한 도구로, 개발자들이 반복적인 작업을 추상화하여 더 깔끔하고 유지보수가 쉬운 코드를 작성할 수 있게 해줍니다. 이러한 데코레이터의 전체 잠재력을 활용하기 위해 개발자들은 그것을 간단하게 유지하고 철저히 문서화하며 내장 솔루션을 활용하는 등의 최상의 방법을 따라야 합니다.</p>\n<h1>저를 따라오세요</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>내 랜딩 페이지</li>\n<li>내 Youtube 채널</li>\n<li>내 SaaS 서비스</li>\n<li>내 GitHub</li>\n</ul>\n<h1>간단히 말해서 🚀</h1>\n<p>In Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:</p>\n<ul>\n<li>글쓴이를 클랩하고 팔로우 해 주세요 ️👏️️</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord | Newsletter</li>\n<li>다른 플랫폼 방문: CoFeed | Differ</li>\n<li>PlainEnglish.io에서 더 많은 콘텐츠 확인하기</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}