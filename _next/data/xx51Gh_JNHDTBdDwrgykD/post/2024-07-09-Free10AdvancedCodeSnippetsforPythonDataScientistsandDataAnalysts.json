{"pageProps":{"post":{"title":"데이터 과학자와 데이터 분석가를 위한 10개의 고급 파이썬 코드 조각 모음","description":"","date":"2024-07-09 09:15","slug":"2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts","content":"\n매수 분석가 또는 분석가로 활동할 때 효과적인 데이터 분석과 통찰을 얻기 위해서는 고급 코딩 기술을 배우는 것이 중요합니다. 이 게시물에서는 타이타닉 데이터셋을 중심으로 15가지 고급 Python 코드 조각을 살펴보겠습니다. 데이터 조작, 시각화, 머신러닝과 같은 분석 능력을 향상시키는데 도움이 될 것입니다.\n\n![Image](/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_0.png)\n\n## 1. 타이타닉 데이터셋 불러오기\n\n먼저, Seaborn 라이브러리를 사용하여 타이타닉 데이터셋을 불러오고 데이터셋의 처음 몇 줄을 보여줍시다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport seaborn as sns\n\n# 타이타닉 데이터셋을 불러옵니다\ntitanic = sns.load_dataset('titanic')\n\n# 데이터셋의 처음 몇 행을 출력합니다\nprint(titanic.head())\n```\n\n이 코드 조각은 타이타닉 데이터셋을 판다스 DataFrame으로 불러와서 처음 몇 행을 출력하여 데이터의 구조를 살펴볼 수 있게 해줍니다.\n\n# 2. 누락된 값 처리\n\n누락된 값을 처리하는 것은 데이터 분석에서 흔한 작업입니다. 'age' 열의 누락된 값을 중앙값으로 채워봅시다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 'age' 열의 누락된 값을 중위 연령으로 채우기\ntitanic['age'].fillna(titanic['age'].median(), inplace=True)\n```\n\n이 코드 스니펫은 'age' 열의 누락된 값을 탑승객들의 중위 연령으로 대체하여 데이터를 완전하게 유지하여 추가 분석을 수행합니다.\n\n# 3. Feature Engineering\n\n피처 엔지니어링은 모델 성능을 향상시키기 위해 새로운 피처를 생성하거나 기존 피처를 변환하는 작업을 포함합니다. 승객이 어린이인지 성인인지를 나타내는 새로운 피처를 만들어 보겠습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 새로운 기능 'is_child'를 생성합니다\ntitanic['is_child'] = titanic['age'] < 18\n```\n\n이 스니펫은 데이터셋에 새로운 이진 기능 'is_child'를 추가합니다. 이 기능은 승객이 어린이인지(나이 < 18) 성인인지를 나타냅니다.\n\n# 4. Seaborn을 활용한 데이터 시각화\n\nSeaborn은 Python에서 데이터 시각화를 위한 강력한 라이브러리입니다. 승객 클래스의 분포를 시각화하기 위해 카운트 플롯을 생성해봅시다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport matplotlib.pyplot as plt\n\n# 승객 클래스에 대한 카운트 플롯\nplt.figure(figsize=(8, 5))\nsns.countplot(x='pclass', data=titanic, color='skyblue')\nplt.title('승객 클래스 분포')\nplt.xlabel('클래스')\nplt.ylabel('카운트')\nplt.show()\n```\n\n이 코드 스니펫은 승객 클래스의 분포를 보여주는 카운트 플롯을 생성하며, 아름다움을 위해 하늘색을 사용했습니다.\n\n<img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_1.png\" />\n\n# 5. 상관 분석\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n변수 간의 관계를 이해하는 것은 데이터 분석에서 중요합니다. 수치형 특성에 대한 상관 행렬을 계산하고 시각화해 보겠습니다:\n\n```js\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 범주형 열을 원-핫 인코딩을 사용하여 수치형으로 변환합니다\ntitanic_numeric = pd.get_dummies(titanic, drop_first=True)\n\n# 상관 행렬을 계산합니다\ncorrelation_matrix = titanic_numeric.corr()\n\n# Matplotlib 피겨 설정\nplt.figure(figsize=(12, 10))\n\n# 적절한 가시성과 비율로 heatmap을 그립니다\nsns.heatmap(correlation_matrix, annot=True, fmt=\".2f\", cmap=\"coolwarm\", vmin=-1, vmax=1, linewidths=.5, annot_kws={\"size\": 7})\n\n# 플롯 스타일을 조정합니다\nplt.xticks(rotation=45, ha='right', fontsize=8)\nplt.yticks(fontsize=8)\nplt.title('상관 행렬', fontsize=15)\nplt.tight_layout()\n\n# 플롯을 보여줍니다\nplt.show()\n```\n\n이 코드 스니펫은 상관 행렬을 계산하고, 수치형 특성 간의 상관 관계를 시각화하는 heatmap을 생성합니다. 쿨 웜 컬러를 사용하며, 빨간색은 양의 상관 관계를 나타냅니다.\n\n<img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_2.png\" />\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 각 클래스별 운임 분포를 시각화하는 상자 그림\n\n여기 각 승객 클래스별 운임 분포를 시각화하기 위한 상자 그림을 만들어봅시다:\n\n```js\n# 클래스별 운임 분포를 위한 상자 그림\nplt.figure(figsize=(8, 6))\nsns.boxplot(x='pclass', y='fare', data=titanic, color='green')\nplt.title('클래스별 운임 분포')\nplt.xlabel('클래스')\nplt.ylabel('운임')\nplt.show()\n```\n\n이 코드 스니펫은 서로 다른 승객 클래스 간의 운임 분포를 보여주는 상자 그림을 생성합니다. 여기서는 미적 요소로 녹색 색상을 사용했습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_3.png)\n\n# 7. Distribution of Age by Survival Status\n\n생존자와 비생존자의 연령 분포를 시각화하면 연령이 생존에 미치는 영향에 대한 통찰력을 얻을 수 있습니다:\n\n```js\n# 생존 상태별 연령 분포\nplt.figure(figsize=(8, 6))\nsns.histplot(x='age', hue='survived', data=titanic, multiple='stack', palette='Set2')\nplt.title('Distribution of Age by Survival Status')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 코드 스니펫은 생존자와 비생존자의 연령 분포를 보여주는 히스토그램을 생성하며, 서바이벌 상태를 나타내는 다른 색상을 사용합니다.\n\n| Age | Survived |\n| --- | -------- |\n| 22  | 1        |\n| 30  | 0        |\n| 25  | 1        |\n| 40  | 0        |\n| 35  | 1        |\n\n# 8. Fare vs. Age에 대한 산점도 그래프\n\n요금과 연령 간의 관계를 시각화하기 위해 산점도 그래프를 생성해 봅시다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\n# 요금 대 나이 산점도\nplt.figure(figsize=(8, 6))\nsns.scatterplot(x='나이', y='요금', data=타이타닉, color='green')\nplt.title('요금 대 나이')\nplt.xlabel('나이')\nplt.ylabel('요금')\nplt.show()\n```\n\n이 코드 조각은 나이와 요금 사이의 관계를 보여주는 산점도를 생성하며, 시각적으로 녹색을 사용합니다.\n\n<img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_5.png\" />\n\n# 9. 클래스별 생존율 막대 그래프\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n생존율을 각 클래스별로 시각화하면 클래스에 따른 생존 가능성에 대한 통찰을 제공할 수 있습니다.\n\n```js\n# 클래스별 생존율 막대 그래프\nplt.figure(figsize=(8, 6))\nsns.barplot(x='pclass', y='survived', data=titanic, ci=None, color='하늘색')\nplt.title('클래스별 생존율')\nplt.xlabel('클래스')\nplt.ylabel('생존율')\nplt.show()\n```\n\n이 코드 조각은 각 승객 클래스의 생존율을 보여주는 막대 그래프를 생성하며, 아름다운 하늘색을 사용했습니다.\n\n![생존율](/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_6.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 숫자 변수에 대한 쌍 플롯\n\n쌍 플롯을 사용하면 데이터셋의 숫자 변수 쌍 간의 관계를 시각화할 수 있습니다:\n\n```js\n# 숫자 변수에 대한 쌍 플롯\nsns.pairplot(titanic[['age', 'fare', 'pclass']], diag_kind='kde', palette='Set3')\nplt.title('숫자 변수에 대한 쌍 플롯')\nplt.show()\n```\n\n이 코드 조각은 'age', 'fare', 'pclass' 변수에 대한 쌍 플롯을 생성하며, 대각선에 커널 밀도 추정(KDE) 플롯이 포함되어 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_7.png)\n\n# 11. 승선 도시 분포를 위한 막대 그래프\n\n승선 도시에 따른 승객 분포를 시각화해보겠습니다. 다음은 막대 그래프를 사용한 코드입니다:\n\n```python\n# 승선 도시 분포를 위한 막대 그래프\nplt.figure(figsize=(8, 6))\nsns.countplot(x='embark_town', data=titanic, color='skyblue')\nplt.title('승선 도시별 승객 분포')\nplt.xlabel('승선 도시')\nplt.ylabel('인원 수')\nplt.show()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 코드 스니펫은 승선한 마을별 승객 분포를 보여주는 막대 플롯을 만듭니다. 시각적인 아름다움을 위해 하늘색이 사용되었습니다.\n\n![Distribution of passengers by embarked town](/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_8.png)\n\n# 12. 함께 탑승한 형제/배우자의 분포\n\n함께 탑승한 형제/배우자의 분포를 시각화하면 승객들 사이의 가족 구성원 크기에 대한 통찰을 얻을 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 함께 탑승한 형제자매/배우자 분포\n\nplt.figure(figsize=(8, 6))\nsns.histplot(x='sibsp', data=titanic, bins=range(0, 9), color='skyblue', discrete=True)\nplt.title('함께 탑승한 형제자매/배우자 분포')\nplt.xlabel('형제자매/배우자 수')\nplt.ylabel('수량')\nplt.show()\n\n이 코드 스니펫은 함께 탑승한 형제자매/배우자 수에 대한 분포를 보여주는 히스토그램을 생성합니다. 아름다운 목적으로 하늘색을 사용했어요.\n\n<img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_9.png\" />\n\n# 13. 성별 분포를 보여주는 파이 차트\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여행객의 성별 분포를 파이 차트로 시각화해보세요:\n\n```js\n# 성별 분포 파이 차트\ngender_counts = titanic['sex'].value_counts()\nplt.figure(figsize=(6, 6))\nplt.pie(gender_counts, labels=gender_counts.index, colors=['#66c2a5', '#fc8d62'], autopct='%1.1f%%', startangle=140)\nplt.title('Gender Distribution')\nplt.show()\n```\n\n이 코드 스니펫은 성별에 따른 탑승객 분포를 보여주는 파이 차트를 생성하며, 남성과 여성을 나타내기 위해 서로 다른 색상을 사용합니다.\n\n<img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_10.png\" />\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 14. 성별에 따른 연령 분포를 시각화하는 스왐 플롯\n\n스왐 플롯은 성별에 따른 연령 분포를 시각화하는 데 사용될 수 있습니다:\n\n```js\n# 성별에 따른 연령 분포를 나타내는 스왐 플롯\nplt.figure(figsize=(10, 6))\nsns.swarmplot(x='sex', y='age', data=titanic, color='skyblue')\nplt.title('성별에 따른 연령 분포')\nplt.xlabel('성별')\nplt.ylabel('연령')\nplt.show()\n```\n\n이 코드 조각은 남성과 여성 승객의 연령 분포를 보여주는 스왐 플롯을 생성하며, 시각적으로 아름다운 하늘색을 사용합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_11.png)\n\n# 15. 클래스 및 성별별 요금 분포에 대한 바이올린 플롯\n\n승객 클래스 및 성별에 따른 요금 분포를 시각화하기 위해 바이올린 플롯을 만들어봅시다:\n\n```python\n# 클래스 및 성별에 따른 요금 분포에 대한 바이올린 플롯\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='pclass', y='fare', hue='sex', data=titanic, split=True, palette='Greens')\nplt.title('클래스 및 성별별 요금 분포')\nplt.xlabel('클래스')\nplt.ylabel('요금')\nplt.show()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 코드 스니펫은 각 승객 클래스별로 성별로 나누어 지불요금의 분포를 보여주는 바이올린 플롯을 생성합니다. 이 때, 시각적으로 녹색 색상을 사용합니다.\n\n![Violin Plot](/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_12.png)\n\n이러한 고급 코드 스니펫은 파이썬을 사용한 데이터 조작, 시각화 및 분석의 다양한 측면을 다룹니다. 이 기술들을 숙달함으로써 우리는 복잡한 데이터셋을 처리하고 데이터에서 의미 있는 통찰을 얻는 데 더 잘 대비할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_0.png"},"coverImage":"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_0.png","tag":["Tech"],"readingTime":13},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>매수 분석가 또는 분석가로 활동할 때 효과적인 데이터 분석과 통찰을 얻기 위해서는 고급 코딩 기술을 배우는 것이 중요합니다. 이 게시물에서는 타이타닉 데이터셋을 중심으로 15가지 고급 Python 코드 조각을 살펴보겠습니다. 데이터 조작, 시각화, 머신러닝과 같은 분석 능력을 향상시키는데 도움이 될 것입니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_0.png\" alt=\"Image\"></p>\n<h2>1. 타이타닉 데이터셋 불러오기</h2>\n<p>먼저, Seaborn 라이브러리를 사용하여 타이타닉 데이터셋을 불러오고 데이터셋의 처음 몇 줄을 보여줍시다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sns\n\n# 타이타닉 데이터셋을 불러옵니다\ntitanic = sns.<span class=\"hljs-title function_\">load_dataset</span>(<span class=\"hljs-string\">'titanic'</span>)\n\n# 데이터셋의 처음 몇 행을 출력합니다\n<span class=\"hljs-title function_\">print</span>(titanic.<span class=\"hljs-title function_\">head</span>())\n</code></pre>\n<p>이 코드 조각은 타이타닉 데이터셋을 판다스 DataFrame으로 불러와서 처음 몇 행을 출력하여 데이터의 구조를 살펴볼 수 있게 해줍니다.</p>\n<h1>2. 누락된 값 처리</h1>\n<p>누락된 값을 처리하는 것은 데이터 분석에서 흔한 작업입니다. 'age' 열의 누락된 값을 중앙값으로 채워봅시다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-string\">'age'</span> 열의 누락된 값을 중위 연령으로 채우기\ntitanic[<span class=\"hljs-string\">'age'</span>].<span class=\"hljs-title function_\">fillna</span>(titanic[<span class=\"hljs-string\">'age'</span>].<span class=\"hljs-title function_\">median</span>(), inplace=<span class=\"hljs-title class_\">True</span>)\n</code></pre>\n<p>이 코드 스니펫은 'age' 열의 누락된 값을 탑승객들의 중위 연령으로 대체하여 데이터를 완전하게 유지하여 추가 분석을 수행합니다.</p>\n<h1>3. Feature Engineering</h1>\n<p>피처 엔지니어링은 모델 성능을 향상시키기 위해 새로운 피처를 생성하거나 기존 피처를 변환하는 작업을 포함합니다. 승객이 어린이인지 성인인지를 나타내는 새로운 피처를 만들어 보겠습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># 새로운 기능 <span class=\"hljs-string\">'is_child'</span>를 생성합니다\ntitanic[<span class=\"hljs-string\">'is_child'</span>] = titanic[<span class=\"hljs-string\">'age'</span>] &#x3C; <span class=\"hljs-number\">18</span>\n</code></pre>\n<p>이 스니펫은 데이터셋에 새로운 이진 기능 'is_child'를 추가합니다. 이 기능은 승객이 어린이인지(나이 &#x3C; 18) 성인인지를 나타냅니다.</p>\n<h1>4. Seaborn을 활용한 데이터 시각화</h1>\n<p>Seaborn은 Python에서 데이터 시각화를 위한 강력한 라이브러리입니다. 승객 클래스의 분포를 시각화하기 위해 카운트 플롯을 생성해봅시다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\n\n# 승객 클래스에 대한 카운트 플롯\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">5</span>))\nsns.<span class=\"hljs-title function_\">countplot</span>(x=<span class=\"hljs-string\">'pclass'</span>, data=titanic, color=<span class=\"hljs-string\">'skyblue'</span>)\nplt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">'승객 클래스 분포'</span>)\nplt.<span class=\"hljs-title function_\">xlabel</span>(<span class=\"hljs-string\">'클래스'</span>)\nplt.<span class=\"hljs-title function_\">ylabel</span>(<span class=\"hljs-string\">'카운트'</span>)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<p>이 코드 스니펫은 승객 클래스의 분포를 보여주는 카운트 플롯을 생성하며, 아름다움을 위해 하늘색을 사용했습니다.</p>\n<img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_1.png\">\n<h1>5. 상관 분석</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>변수 간의 관계를 이해하는 것은 데이터 분석에서 중요합니다. 수치형 특성에 대한 상관 행렬을 계산하고 시각화해 보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sns\n\n# 범주형 열을 원-핫 인코딩을 사용하여 수치형으로 변환합니다\ntitanic_numeric = pd.<span class=\"hljs-title function_\">get_dummies</span>(titanic, drop_first=<span class=\"hljs-title class_\">True</span>)\n\n# 상관 행렬을 계산합니다\ncorrelation_matrix = titanic_numeric.<span class=\"hljs-title function_\">corr</span>()\n\n# <span class=\"hljs-title class_\">Matplotlib</span> 피겨 설정\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">10</span>))\n\n# 적절한 가시성과 비율로 heatmap을 그립니다\nsns.<span class=\"hljs-title function_\">heatmap</span>(correlation_matrix, annot=<span class=\"hljs-title class_\">True</span>, fmt=<span class=\"hljs-string\">\".2f\"</span>, cmap=<span class=\"hljs-string\">\"coolwarm\"</span>, vmin=-<span class=\"hljs-number\">1</span>, vmax=<span class=\"hljs-number\">1</span>, linewidths=<span class=\"hljs-number\">.5</span>, annot_kws={<span class=\"hljs-string\">\"size\"</span>: <span class=\"hljs-number\">7</span>})\n\n# 플롯 스타일을 조정합니다\nplt.<span class=\"hljs-title function_\">xticks</span>(rotation=<span class=\"hljs-number\">45</span>, ha=<span class=\"hljs-string\">'right'</span>, fontsize=<span class=\"hljs-number\">8</span>)\nplt.<span class=\"hljs-title function_\">yticks</span>(fontsize=<span class=\"hljs-number\">8</span>)\nplt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">'상관 행렬'</span>, fontsize=<span class=\"hljs-number\">15</span>)\nplt.<span class=\"hljs-title function_\">tight_layout</span>()\n\n# 플롯을 보여줍니다\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<p>이 코드 스니펫은 상관 행렬을 계산하고, 수치형 특성 간의 상관 관계를 시각화하는 heatmap을 생성합니다. 쿨 웜 컬러를 사용하며, 빨간색은 양의 상관 관계를 나타냅니다.</p>\n<img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_2.png\">\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>6. 각 클래스별 운임 분포를 시각화하는 상자 그림</h1>\n<p>여기 각 승객 클래스별 운임 분포를 시각화하기 위한 상자 그림을 만들어봅시다:</p>\n<pre><code class=\"hljs language-js\"># 클래스별 운임 분포를 위한 상자 그림\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>))\nsns.<span class=\"hljs-title function_\">boxplot</span>(x=<span class=\"hljs-string\">'pclass'</span>, y=<span class=\"hljs-string\">'fare'</span>, data=titanic, color=<span class=\"hljs-string\">'green'</span>)\nplt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">'클래스별 운임 분포'</span>)\nplt.<span class=\"hljs-title function_\">xlabel</span>(<span class=\"hljs-string\">'클래스'</span>)\nplt.<span class=\"hljs-title function_\">ylabel</span>(<span class=\"hljs-string\">'운임'</span>)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<p>이 코드 스니펫은 서로 다른 승객 클래스 간의 운임 분포를 보여주는 상자 그림을 생성합니다. 여기서는 미적 요소로 녹색 색상을 사용했습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_3.png\" alt=\"image\"></p>\n<h1>7. Distribution of Age by Survival Status</h1>\n<p>생존자와 비생존자의 연령 분포를 시각화하면 연령이 생존에 미치는 영향에 대한 통찰력을 얻을 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"># 생존 상태별 연령 분포\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>))\nsns.<span class=\"hljs-title function_\">histplot</span>(x=<span class=\"hljs-string\">'age'</span>, hue=<span class=\"hljs-string\">'survived'</span>, data=titanic, multiple=<span class=\"hljs-string\">'stack'</span>, palette=<span class=\"hljs-string\">'Set2'</span>)\nplt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">'Distribution of Age by Survival Status'</span>)\nplt.<span class=\"hljs-title function_\">xlabel</span>(<span class=\"hljs-string\">'Age'</span>)\nplt.<span class=\"hljs-title function_\">ylabel</span>(<span class=\"hljs-string\">'Count'</span>)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 코드 스니펫은 생존자와 비생존자의 연령 분포를 보여주는 히스토그램을 생성하며, 서바이벌 상태를 나타내는 다른 색상을 사용합니다.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Age</th><th>Survived</th></tr></thead><tbody><tr><td>22</td><td>1</td></tr><tr><td>30</td><td>0</td></tr><tr><td>25</td><td>1</td></tr><tr><td>40</td><td>0</td></tr><tr><td>35</td><td>1</td></tr></tbody></table>\n<h1>8. Fare vs. Age에 대한 산점도 그래프</h1>\n<p>요금과 연령 간의 관계를 시각화하기 위해 산점도 그래프를 생성해 봅시다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># 요금 대 나이 산점도</span>\nplt.figure(figsize=(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>))\nsns.scatterplot(x=<span class=\"hljs-string\">'나이'</span>, y=<span class=\"hljs-string\">'요금'</span>, data=타이타닉, color=<span class=\"hljs-string\">'green'</span>)\nplt.title(<span class=\"hljs-string\">'요금 대 나이'</span>)\nplt.xlabel(<span class=\"hljs-string\">'나이'</span>)\nplt.ylabel(<span class=\"hljs-string\">'요금'</span>)\nplt.show()\n</code></pre>\n<p>이 코드 조각은 나이와 요금 사이의 관계를 보여주는 산점도를 생성하며, 시각적으로 녹색을 사용합니다.</p>\n<img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_5.png\">\n<h1>9. 클래스별 생존율 막대 그래프</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>생존율을 각 클래스별로 시각화하면 클래스에 따른 생존 가능성에 대한 통찰을 제공할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"># 클래스별 생존율 막대 그래프\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>))\nsns.<span class=\"hljs-title function_\">barplot</span>(x=<span class=\"hljs-string\">'pclass'</span>, y=<span class=\"hljs-string\">'survived'</span>, data=titanic, ci=<span class=\"hljs-title class_\">None</span>, color=<span class=\"hljs-string\">'하늘색'</span>)\nplt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">'클래스별 생존율'</span>)\nplt.<span class=\"hljs-title function_\">xlabel</span>(<span class=\"hljs-string\">'클래스'</span>)\nplt.<span class=\"hljs-title function_\">ylabel</span>(<span class=\"hljs-string\">'생존율'</span>)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<p>이 코드 조각은 각 승객 클래스의 생존율을 보여주는 막대 그래프를 생성하며, 아름다운 하늘색을 사용했습니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_6.png\" alt=\"생존율\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>10. 숫자 변수에 대한 쌍 플롯</h1>\n<p>쌍 플롯을 사용하면 데이터셋의 숫자 변수 쌍 간의 관계를 시각화할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"># 숫자 변수에 대한 쌍 플롯\nsns.<span class=\"hljs-title function_\">pairplot</span>(titanic[[<span class=\"hljs-string\">'age'</span>, <span class=\"hljs-string\">'fare'</span>, <span class=\"hljs-string\">'pclass'</span>]], diag_kind=<span class=\"hljs-string\">'kde'</span>, palette=<span class=\"hljs-string\">'Set3'</span>)\nplt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">'숫자 변수에 대한 쌍 플롯'</span>)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<p>이 코드 조각은 'age', 'fare', 'pclass' 변수에 대한 쌍 플롯을 생성하며, 대각선에 커널 밀도 추정(KDE) 플롯이 포함되어 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_7.png\" alt=\"image\"></p>\n<h1>11. 승선 도시 분포를 위한 막대 그래프</h1>\n<p>승선 도시에 따른 승객 분포를 시각화해보겠습니다. 다음은 막대 그래프를 사용한 코드입니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># 승선 도시 분포를 위한 막대 그래프</span>\nplt.figure(figsize=(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>))\nsns.countplot(x=<span class=\"hljs-string\">'embark_town'</span>, data=titanic, color=<span class=\"hljs-string\">'skyblue'</span>)\nplt.title(<span class=\"hljs-string\">'승선 도시별 승객 분포'</span>)\nplt.xlabel(<span class=\"hljs-string\">'승선 도시'</span>)\nplt.ylabel(<span class=\"hljs-string\">'인원 수'</span>)\nplt.show()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 코드 스니펫은 승선한 마을별 승객 분포를 보여주는 막대 플롯을 만듭니다. 시각적인 아름다움을 위해 하늘색이 사용되었습니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_8.png\" alt=\"Distribution of passengers by embarked town\"></p>\n<h1>12. 함께 탑승한 형제/배우자의 분포</h1>\n<p>함께 탑승한 형제/배우자의 분포를 시각화하면 승객들 사이의 가족 구성원 크기에 대한 통찰을 얻을 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>함께 탑승한 형제자매/배우자 분포</h1>\n<p>plt.figure(figsize=(8, 6))\nsns.histplot(x='sibsp', data=titanic, bins=range(0, 9), color='skyblue', discrete=True)\nplt.title('함께 탑승한 형제자매/배우자 분포')\nplt.xlabel('형제자매/배우자 수')\nplt.ylabel('수량')\nplt.show()</p>\n<p>이 코드 스니펫은 함께 탑승한 형제자매/배우자 수에 대한 분포를 보여주는 히스토그램을 생성합니다. 아름다운 목적으로 하늘색을 사용했어요.</p>\n<img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_9.png\">\n<h1>13. 성별 분포를 보여주는 파이 차트</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여행객의 성별 분포를 파이 차트로 시각화해보세요:</p>\n<pre><code class=\"hljs language-js\"># 성별 분포 파이 차트\ngender_counts = titanic[<span class=\"hljs-string\">'sex'</span>].<span class=\"hljs-title function_\">value_counts</span>()\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>))\nplt.<span class=\"hljs-title function_\">pie</span>(gender_counts, labels=gender_counts.<span class=\"hljs-property\">index</span>, colors=[<span class=\"hljs-string\">'#66c2a5'</span>, <span class=\"hljs-string\">'#fc8d62'</span>], autopct=<span class=\"hljs-string\">'%1.1f%%'</span>, startangle=<span class=\"hljs-number\">140</span>)\nplt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">'Gender Distribution'</span>)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<p>이 코드 스니펫은 성별에 따른 탑승객 분포를 보여주는 파이 차트를 생성하며, 남성과 여성을 나타내기 위해 서로 다른 색상을 사용합니다.</p>\n<img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_10.png\">\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>14. 성별에 따른 연령 분포를 시각화하는 스왐 플롯</h1>\n<p>스왐 플롯은 성별에 따른 연령 분포를 시각화하는 데 사용될 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"># 성별에 따른 연령 분포를 나타내는 스왐 플롯\nplt.<span class=\"hljs-title function_\">figure</span>(figsize=(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">6</span>))\nsns.<span class=\"hljs-title function_\">swarmplot</span>(x=<span class=\"hljs-string\">'sex'</span>, y=<span class=\"hljs-string\">'age'</span>, data=titanic, color=<span class=\"hljs-string\">'skyblue'</span>)\nplt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">'성별에 따른 연령 분포'</span>)\nplt.<span class=\"hljs-title function_\">xlabel</span>(<span class=\"hljs-string\">'성별'</span>)\nplt.<span class=\"hljs-title function_\">ylabel</span>(<span class=\"hljs-string\">'연령'</span>)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<p>이 코드 조각은 남성과 여성 승객의 연령 분포를 보여주는 스왐 플롯을 생성하며, 시각적으로 아름다운 하늘색을 사용합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_11.png\" alt=\"이미지\"></p>\n<h1>15. 클래스 및 성별별 요금 분포에 대한 바이올린 플롯</h1>\n<p>승객 클래스 및 성별에 따른 요금 분포를 시각화하기 위해 바이올린 플롯을 만들어봅시다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># 클래스 및 성별에 따른 요금 분포에 대한 바이올린 플롯</span>\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">6</span>))\nsns.violinplot(x=<span class=\"hljs-string\">'pclass'</span>, y=<span class=\"hljs-string\">'fare'</span>, hue=<span class=\"hljs-string\">'sex'</span>, data=titanic, split=<span class=\"hljs-literal\">True</span>, palette=<span class=\"hljs-string\">'Greens'</span>)\nplt.title(<span class=\"hljs-string\">'클래스 및 성별별 요금 분포'</span>)\nplt.xlabel(<span class=\"hljs-string\">'클래스'</span>)\nplt.ylabel(<span class=\"hljs-string\">'요금'</span>)\nplt.show()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 코드 스니펫은 각 승객 클래스별로 성별로 나누어 지불요금의 분포를 보여주는 바이올린 플롯을 생성합니다. 이 때, 시각적으로 녹색 색상을 사용합니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-09-Free10AdvancedCodeSnippetsforPythonDataScientistsandDataAnalysts_12.png\" alt=\"Violin Plot\"></p>\n<p>이러한 고급 코드 스니펫은 파이썬을 사용한 데이터 조작, 시각화 및 분석의 다양한 측면을 다룹니다. 이 기술들을 숙달함으로써 우리는 복잡한 데이터셋을 처리하고 데이터에서 의미 있는 통찰을 얻는 데 더 잘 대비할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}