{"pageProps":{"post":{"title":"궁극의 파이썬 치트 시트 일상적인 작업을 위한 실용적인 파이썬 사용법","description":"","date":"2024-07-07 21:34","slug":"2024-07-07-UltimatePythonCheatSheetPracticalPythonForEverydayTasks","content":"\n<img src=\"/TIL/assets/img/2024-07-07-UltimatePythonCheatSheetPracticalPythonForEverydayTasks_0.png\" />\n\n(다른 내 궁극적인 안내서)\n\n이 치트 시트는 필요에 의해 탄생했습니다. 최근에 언어를 약간 떨어뜨린 후 새로운 Python 프로젝트에 뛰어 들어가야 했기 때문입니다.\n\nPython의 실용적인 구문과 형식을 항상 감사히 여겼습니다. 하지만 Node/Typescript 영역에서 시간을 보내다보니, Python의 최신 기능, 최고의 실천 방법 및 가장 영향적인 도구에 대한 빠른 복습이 필요했습니다. 나는 세부 사항에 얽매이지 않고 빠르게 속도를 내야 했고, 자주 사용해야 하는 작업 및 기능을 참조할 수 있도록 이 목록을 작성했습니다. 본질적으로, 프로그래밍 요구 사항의 80%를 다루는 Python의 중요한 20%를 이해하는 것이 필요했습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 가이드는 그 여정의 결말입니다. 그동안 만난 가장 실용적인 Python 지식, 통찰력 및 유용한 라이브러리의 모음을 제공합니다. 이것은 가장 가치 있게 여겼던 학습을 공유하기 위해 디자인되었습니다. 여러분의 프로젝트와 과제에 즉시 적용할 수 있는 방식으로 제시됩니다.\n\n저는 일반적으로 함께 작동하는 논리적인 영역으로 섹션을 나누어놨습니다. 관심 있는 영역으로 이동하여 특정 작업이나 주제와 관련된 가장 관련된 항목을 찾을 수 있습니다. 파일 작업, API 상호 작용, 스프레드시트 조작, 수학적 계산 및 목록 및 사전과 같은 데이터 구조 작업을 포함할 것입니다. 추가로, Python이 일반적으로 사용되는 도메인에서 흔히 사용되는 Python 도구상자를 향상시킬 수 있는 몇 가지 유용한 라이브러리를 강조할 것입니다.\n\n만약 치트 시트에 포함되어야 할 내용을 빠뜨렸다고 생각한다면, 댓글에서 알려주시면 목록을 업데이트하겠습니다!\n\n# 파일 작업하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 파일 읽기\n\n파일의 전체 내용을 읽으려면:\n\n```python\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)\n```\n\n# 2. 파일 쓰기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기존 내용을 덮어쓰기 위한 파일에 텍스트를 작성하는 방법:\n\n```js\nwith open('example.txt', 'w') as file:\n    file.write('Hello, Python!')\n```\n\n# 3. 파일에 추가\n\n기존 파일 끝에 텍스트를 추가하는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nwith open('example.txt', 'a') as file:\n    file.write('\\n이 줄을 추가합니다.')\n```\n\n# 4. 리스트로 라인 읽기\n\n파일을 라인별로 리스트에 읽어오려면:\n\n```js\nwith open('example.txt', 'r') as file:\n    lines = file.readlines()\n    print(lines)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 파일의 각 라인을 반복하는 방법\n\n파일의 각 라인을 처리하려면:\n\n```python\nwith open('example.txt', 'r') as file:\n    for line in file:\n        print(line.strip())\n```\n\n# 6. 파일의 존재 여부 확인\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파일 작업을 수행하기 전에 파일이 존재하는지 확인하려면:\n\n```js\nimport os\nif os.path.exists('example.txt'):\n    print('파일이 존재합니다.')\nelse:\n    print('파일이 존재하지 않습니다.')\n```\n\n# 7. 파일에 목록 쓰기\n\n목록의 각 요소를 파일의 새 줄에 작성하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nlines = ['첫 번째 줄', '두 번째 줄', '세 번째 줄']\nwith open('example.txt', 'w') as file:\nfor line in lines:\nfile.write(f'{line}\\n')\n\n# 8. 여러 파일에 대해 With 블록 사용하기\n\n여러 파일을 동시에 처리하려면 다음과 같이 with 블록을 사용할 수 있습니다:\n\nwith open('source.txt', 'r') as source, open('destination.txt', 'w') as destination:\ncontent = source.read()\ndestination.write(content)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 9. 파일 삭제하기\n\n해당 파일이 존재할 경우 안전하게 파일을 삭제하는 방법:\n\n```js\nimport os\nif os.path.exists('example.txt'):\n    os.remove('example.txt')\n    print('파일이 삭제되었습니다.')\nelse:\n    print('해당 파일이 존재하지 않습니다.')\n```\n\n# 10. 이진 파일 읽기 및 쓰기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n바이너리 모드로 파일을 읽거나 쓰려면(이미지, 비디오 등에 유용함):\n\n```js\n# 바이너리 파일 읽기\nwith open('image.jpg', 'rb') as file:\n    content = file.read()\n# 바이너리 파일 쓰기\nwith open('copy.jpg', 'wb') as file:\n    file.write(content)\n```\n\n# 간단한 HTTP API 작업\n\n# 1. 기본 GET 요청\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAPI 엔드포인트에서 GET 요청을 사용하여 데이터를 가져오는 방법:\n\n```js\nimport requests\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()  # 응답이 JSON 형식일 경우\nprint(data)\n```\n\n## 2. 쿼리 매개변수를 포함한 GET 요청\n\n쿼리 매개변수를 포함한 GET 요청을 보내려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport requests\nparams = {'key1': 'value1', 'key2': 'value2'}\nresponse = requests.get('https://api.example.com/search', params=params)\ndata = response.json()\nprint(data)\n```\n\n# 3. HTTP 오류 처리하기\n\n가능한 HTTP 오류를 공손하게 처리하기 위해:\n\n```js\nimport requests\nresponse = requests.get('https://api.example.com/data')\ntry:\n    response.raise_for_status()  # 상태가 4xx, 5xx인 경우 HTTPError를 발생시킵니다\n    data = response.json()\n    print(data)\nexcept requests.exceptions.HTTPError as err:\n    print(f'HTTP 오류 발생: {err}')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. API 요청에 대한 Timeout 설정\n\nAPI 요청이 무한 대기되지 않도록 Timeout을 설정하는 방법:\n\n```js\nimport requests\ntry:\n    response = requests.get('https://api.example.com/data', timeout=5)  # Timeout은 초 단위로 설정\n    data = response.json()\n    print(data)\nexcept requests.exceptions.Timeout:\n    print('요청 시간이 초과되었습니다')\n```\n\n# 5. 요청에서 헤더 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n요청에 헤더를 포함하려면 (예: 권한을 위해):\n\n```python\nimport requests\nheaders = {'Authorization': 'Bearer YOUR_ACCESS_TOKEN'}\nresponse = requests.get('https://api.example.com/protected', headers=headers)\ndata = response.json()\nprint(data)\n```\n\n# 6. JSON Payload을 사용한 POST 요청\n\nJSON 페이로드를 사용하여 POST 요청을 통해 API 엔드포인트로 데이터를 전송하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport requests\npayload = {'key1': 'value1', 'key2': 'value2'}\nheaders = {'Content-Type': 'application/json'}\nresponse = requests.post('https://api.example.com/submit', json=payload, headers=headers)\nprint(response.json())\n```\n\n# 7. 응답 인코딩 처리\n\n올바르게 응답 인코딩을 처리하려면:\n\n```js\nimport requests\nresponse = requests.get('https://api.example.com/data')\nresponse.encoding = 'utf-8'  # 응답 형식과 일치하도록 인코딩 설정\ndata = response.text\nprint(data)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 세션과 함께 Requests 사용하기\n\n같은 호스트로 여러 요청을 보내기 위해 세션 객체를 사용하면 성능을 향상시킬 수 있어요:\n\n```js\nimport requests\nwith requests.Session() as session:\n    session.headers.update({'Authorization': 'Bearer 여러분의_액세스_토큰'})\n    response = session.get('https://api.example.com/data')\n    print(response.json())\n```\n\n# 9. 리디렉션 처리\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n리퀘스트에서 리디렉션을 처리하거나 비활성화하려면:\n\n```js\nimport requests\nresponse = requests.get('https://api.example.com/data', allow_redirects=False)\nprint(response.status_code)\n```\n\n### 10. 대용량 응답 스트리밍\n\n대용량 응답을 처리하기 위해 모두 메모리에 로드하는 대신 청크 단위로 처리하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```json\nimport requests\nresponse = requests.get('https://api.example.com/large-data', stream=True)\nfor chunk in response.iter_content(chunk_size=1024):\n    process(chunk)  # 실제 처리 함수로 'process'를 교체하세요\n```\n\n# 리스트 작업\n\n# 1. 리스트 만들기\n\n리스트를 만들려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 신비한 요소 목록\nelements = ['Earth', 'Air', 'Fire', 'Water']\n```\n\n## 2. 리스트에 추가하기\n\n리스트 끝에 새 요소를 추가하려면:\n\n```js\nelements.append(\"Aether\");\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. 리스트에 삽입하기\n\n특정 위치에 요소를 삽입하려면:\n\n```js\n# 인덱스 1에 'Spirit' 삽입\nelements.insert(1, 'Spirit')\n```\n\n# 4. 리스트에서 제거하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n리스트에서 값을 기준으로 요소를 제거하는 방법은 다음과 같아요:\n\n```js\nelements.remove('Earth')  # 'Earth'의 첫 번째 발생을 제거합니다\n```\n\n# 5. 리스트에서 요소를 뽑아내기\n\n주어진 인덱스에서 요소를 제거하고 반환하는 방법은 다음과 같아요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nlast_element = elements.pop()  # 마지막 요소를 제거하고 반환합니다\n```\n\n# 6. 요소의 인덱스 찾기\n\n첫 번째 발생 요소의 인덱스를 찾으려면:\n\n```js\nindex_of_air = elements.index(\"Air\");\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 리스트 슬라이싱\n\n리스트를 슬라이스하여 하위 리스트를 얻으려면:\n\n```js\n# 인덱스 1부터 3까지 요소 가져오기\nsub_elements = elements[1:4]\n```\n\n# 8. 리스트 컴프리헨션\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기존 목록의 각 요소에 식을 적용하여 새 목록을 만들려면:\n\n```js\n# 각 요소의 길이로 새 목록 생성\nlengths = [len(element) for element in elements]\n```\n\n9. 목록 정렬\n\n목록을 오름차순으로 정렬하려면 (위치 기준으로):\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nelements.sort();\n```\n\n# 10. 리스트 뒤집기\n\n리스트의 요소를 제자리에서 뒤집으려면:\n\n```js\nelements.reverse();\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 딕셔너리 사용하기\n\n# 1. 딕셔너리 생성하기\n\n새로운 딕셔너리를 만들려면:\n\n```js\n# 요소와 그들의 기호에 관한 책\nelements = {'Hydrogen': 'H', 'Helium': 'He', 'Lithium': 'Li'}\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 항목 추가 또는 업데이트\n\n새로운 항목을 추가하거나 기존 항목을 업데이트하려면:\n\n```js\nelements['Carbon'] = 'C'  # 'Carbon'을 추가하거나 그 값이 'C'로 업데이트됩니다\n```\n\n# 3. 항목 삭제\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사전에서 항목을 삭제하려면:\n\n```js\ndel elements['Lithium']  # 'Lithium' 키와 값을 삭제합니다\n```\n\n# 4. 키 존재 여부 확인\n\n키가 사전 안에 있는지 확인하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nif 'Helium' in elements:\n    print('Helium is present')\n```\n\n# 5. 키를 반복하는 법\n\n딕셔너리의 키를 반복하려면:\n\n```js\nfor element in elements:\n    print(element)  # 각 키를 출력합니다\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 6. 값 순회하기\n\n딕셔너리에서 값들을 순회하려면:\n\n```python\nfor symbol in elements.values():\n    print(symbol)  # 각 값 출력하기\n```\n\n## 7. 항목 순회하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n두 가지를 통합하여 여행하기:\n\n```js\nelements.items()안에서 element, symbol에 대해:\n    print(f'{element}: {symbol}')\n```\n\n# 8. 사전 컴프리헨션\n\n반복 가능한 항목 위에 주문을 통해 새로운 사전을 창조하다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 0부터 4까지의 숫자의 제곱\n\nsquares = {x: x\\*\\*2 for x in range(5)}\n\n# 9. 딕셔너리 병합\n\n두 개 이상의 딕셔너리를 병합하여 그 항목들의 새로운 동맹을 형성합니다:\n\nalchemists = {'Paracelsus': 'Mercury'}\nphilosophers = {'Plato': 'Aether'}\nmerged = {**alchemists, **philosophers} # Python 3.5+\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 기본값과 함께 값 가져오기\n\n값을 안전하게 가져오려면, 없는 키에 대한 기본값을 제공합니다:\n\n```js\nelement = elements.get('Neon', 'Unknown')  # 'Neon'이 발견되지 않을 경우 'Unknown'을 반환합니다\n```\n\n# 운영 체제와 작업하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 파일 경로 탐색\n\n파일 경로를 만들고 분해하여 다양한 환경(운영 체제)에서 호환성을 보장합니다:\n\n```js\nimport os\n# 운영 체제와 호환되는 경로 만들기\npath = os.path.join('mystic', 'forest', 'artifact.txt')\n# 고서가 있는 디렉토리 검색\ndirectory = os.path.dirname(path)\n# 유물의 이름 공개\nartifact_name = os.path.basename(path)\n```\n\n# 2. 디렉터리 내용 나열\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n신비로운 디렉토리 안의 모든 엔티티를 공개하기 위해:\n\n```js\nimport os\ncontents = os.listdir('enchanted_grove')\nprint(contents)\n```\n\n## 3. 디렉토리 생성하기\n\n파일 시스템의 직물 속에 새로운 디렉토리를 창조하기 위해:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport os\n# 단일 디렉토리 생성\nos.mkdir('alchemy_lab')\n# 디렉토리 계층 생성\nos.makedirs('alchemy_lab/potions/elixirs')\n```\n\n# 4. 파일 및 디렉토리 삭제\n\n파일이나 디렉토리를 지우고, 그 본질을 추방하려면:\n\n```python\nimport os\n# 파일 삭제\nos.remove('unnecessary_scroll.txt')\n# 빈 디렉토리 삭제\nos.rmdir('abandoned_hut')\n# 디렉토리와 그 내용물 삭제\nimport shutil\nshutil.rmtree('cursed_cavern')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 셸 명령 실행하기\n\n파이썬에서 쉘의 고대적인 힘을 직접 호출하려면:\n\n```python\nimport subprocess\n# 'echo' 주문 호출\nresult = subprocess.run(['echo', 'Revealing the arcane'], capture_output=True, text=True)\nprint(result.stdout)\n```\n\n# 6. 환경 변수 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n에테리얼 환경 변수를 읽고 기록하려면:\n\n```python\nimport os\n# 'PATH' 변수 읽기\npath = os.environ.get('PATH')\n# 새 환경 변수 생성\nos.environ['MAGIC'] = 'Arcane'\n```\n\n# 7. 현재 작업 디렉토리 변경\n\n파일 시스템 내에서 다른 디렉토리로 이동하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport os\n# 'arcane_library' 디렉토리로 이동\nos.chdir('arcane_library')\n```\n\n# 8. 경로의 존재 및 유형\n\n경로의 존재 및 유형을 구분하는 방법 — 파일인지 디렉토리인지 확인하기:\n\n```js\nimport os\n# 경로가 존재하는지 확인\nexists = os.path.exists('mysterious_ruins')\n# 경로가 디렉토리인지 확인\nis_directory = os.path.isdir('mysterious_ruins')\n# 경로가 파일인지 확인\nis_file = os.path.isfile('ancient_manuscript.txt')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 9. 임시 파일 작업\n\n임시 파일과 디렉토리를 소환하려면, 일시적이며 덧없습니다:\n\n```js\nimport tempfile\n# 임시 파일 생성\ntemp_file = tempfile.NamedTemporaryFile(delete=False)\nprint(temp_file.name)\n# 임시 디렉토리 생성\ntemp_dir = tempfile.TemporaryDirectory()\nprint(temp_dir.name)\n```\n\n# 10. 시스템 정보 가져오기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n호스트 시스템에 대한 정보, 시스템 이름 및 해당 지원하는 마법을 알아보려면:\n\n```js\nimport os\nimport platform\n# 운영 체제 확인\nos_name = os.name  # 'posix', 'nt', 'java'\n# 자세한 시스템 정보 확인\nsystem_info = platform.system()  # 'Linux', 'Windows', 'Darwin'\n```\n\n# CLI 작업 — 표준 입력, 표준 출력, 표준 에러\n\n# 1. 사용자 입력 읽기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSTDIN에서 입력 받기:\n\n```js\nuser_input = input(\"지혜를 나누어주세요: \")\nprint(f\"당신이 공유한 내용: {user_input}\")\n```\n\n# 2. STDOUT로 출력하기\n\n콘솔에 메시지 출력하기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nprint(\"Behold, the message of the ancients!\");\n```\n\n# 3. 포맷팅된 출력\n\n우아하고 정확하게 변수를 메시지에 작살낼 때:\n\n```js\nname = \"Merlin\"\nage = 300\nprint(f\"{name}, of {age} years, speaks of forgotten lore.\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 표준 입력에서 행 읽기\n\n표준 입력에서 행마다 공백을 제거하세요:\n\n```js\nimport sys\nfor line in sys.stdin:\n    print(f\"Echo from the void: {line.strip()}\")\n```\n\n# 5. 표준 에러로 쓰기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSTDERR로 메시지를 보내려면:\n\n```js\nimport sys\nsys.stderr.write(\"조심하세요! 그 길에는 위험이 가득합니다.\\n\")\n```\n\n# 6. STDOUT 리다이렉션\n\nSTDOUT을 리다이렉션하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport sys\noriginal_stdout = sys.stdout  # 원래 STDOUT을 보존합니다\nwith open('mystic_log.txt', 'w') as f:\n    sys.stdout = f  # STDOUT을 파일로 리디렉션합니다\n    print(\"이 메시지는 mystic_log.txt 파일 안에 새겨졌습니다.\")\nsys.stdout = original_stdout  # STDOUT을 본래의 상태로 복원합니다\n```\n\n# 7. STDERR 리디렉션\n\nSTDERR 리디렉션:\n\n```js\nimport sys\nwith open('warnings.txt', 'w') as f:\n    sys.stderr = f  # STDERR를 리디렉션합니다\n    print(\"이 경고는 warnings.txt 파일 안에 봉인되었습니다.\", file=sys.stderr)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 비밀번호 요청하기\n\n비밀번호를 요청하려면:\n\n```python\nimport getpass\nsecret_spell = getpass.getpass(\"비밀 주문을 속삭여주세요: \")\n```\n\n# 9. 명령줄 인수\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n커맨드 라인 인수를 처리하고 작업하는 중:\n\n```python\nimport sys\n# 스크립트의 이름은 첫 번째 인수이며, 호출자가 전달한 것이 이어집니다\nscript, first_arg, second_arg = sys.argv\nprint(f\"신성한 토큰과 함께 호출됨: {first_arg} 및 {second_arg}\")\n```\n\n## 10. 복잡한 CLI 상호작용을 위한 Argparse 사용\n\n설명과 옵션/인수 추가하기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport argparse\nparser = argparse.ArgumentParser(description=\"Summon the power of the ancient scripts.\")\nparser.add_argument('spell', help=\"Specify the spell to cast\")\nparser.add_argument('--power', type=int, help=\"Indicate the power level of the spell\")\nargs = parser.parse_args()\nprint(f\"Invoking {args.spell} with a power level of {args.power}\")\n```\n\n# Working with Mathematical Operations and Permutations\n\n# 1. Basic Arithmetic Operations\n\nFor basic arithmetic operations:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nsum = 7 + 3  # 더하기\ndifference = 7 - 3  # 빼기\nproduct = 7 * 3  # 곱하기\nquotient = 7 / 3  # 나누기\nremainder = 7 % 3  # 나머지\npower = 7 ** 3  # 지수\n```\n\n# 2. 복소수 다루기\n\n복소수를 다루기 위해:\n\n```js\nz = complex(2, 3)  # 복소수 2 + 3j 생성\nreal_part = z.real  # 실수부 추출\nimaginary_part = z.imag  # 허수부 추출\nconjugate = z.conjugate()  # 켤레복소수 구하기\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. 수학 함수\n\n일반적인 수학 함수:\n\n```js\nimport math\nroot = math.sqrt(16)  # 제곱근\nlogarithm = math.log(100, 10)  # 밑이 10인 100의 로그값\nsine = math.sin(math.pi / 2)  # 90도의 사인 (라디안 단위)\n```\n\n# 4. 순열 생성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 주어진 집합에서 순열을 생성하는 간단한 방법입니다:\n\n```python\nfrom itertools import permutations\npaths = permutations([1, 2, 3])  # 리스트 [1, 2, 3]의 모든 순열을 생성합니다.\nfor path in paths:\n    print(path)\n```\n\n# 5. 조합 생성하기\n\n조합을 생성하는 간단한 방법입니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom itertools import combinations\ncombos = combinations([1, 2, 3, 4], 2)  # 모든 2개 요소 조합 생성\nfor combo in combos:\n    print(combo)\n```\n\n# 6. 랜덤 숫자 생성\n\n랜덤 숫자를 얻으려면:\n\n```js\nimport random\nnum = random.randint(1, 100)  # 1부터 100 사이의 랜덤 정수 생성\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 분수 작업하기\n\n분수를 다룰 때는:\n\n```python\nfrom fractions import Fraction\nf = Fraction(3, 4)  # 3/4 분수를 생성합니다\nprint(f + 1)  # 분수와 정수를 더합니다\n```\n\n# 8. 통계 함수\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n평균, 중앙값 및 표준 편차를 얻으려면:\n\n```js\nimport statistics\ndata = [1, 2, 3, 4, 5]\nmean = statistics.mean(data)  # 평균\nmedian = statistics.median(data)  # 중앙값\nstdev = statistics.stdev(data)  # 표준 편차\n```\n\n# 9. 삼각 함수\n\n삼각함수 작업하기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport math\nangle_rad = math.radians(60)  # 60도를 라디안으로 변환\ncosine = math.cos(angle_rad)  # 해당 각도의 코사인\n```\n\n# 10. 무한대 및 NaN 다루기\n\n무한대 및 NaN을 다루는 방법:\n\n```js\nimport math\ninfinity = math.inf  # 무한대 표현\nnot_a_number = math.nan  # 숫자가 아닌 값을 나타내는 NaN\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 데이터베이스 작업\n\n# 1. 연결 설정\n\n포스트그레스 데이터베이스에 연결을 생성하려면:\n\n```js\nimport psycopg2\nconnection = psycopg2.connect(\n    dbname='your_database',\n    user='your_username',\n    password='your_password',\n    host='your_host'\n)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 커서 만들기\n\n데이터베이스 커서를 생성하여 레코드를 이동하고 조작할 수 있습니다:\n\n```js\ncursor = connection.cursor();\n```\n\n# 3. 쿼리 실행\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터베이스에서 데이터 선택하기:\n\n```js\ncursor.execute(\"SELECT * FROM your_table\");\n```\n\n## 4. 쿼리 결과 가져오기\n\n커서를 사용하여 데이터 가져오기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nrecords = cursor.fetchall()\nfor record in records:\n    print(record)\n```\n\n# 5. 레코드 삽입\n\n데이터를 데이터베이스 테이블에 삽입하는 방법:\n\n```js\ncursor.execute(\"INSERT INTO your_table (column1, column2) VALUES (%s, %s)\", ('value1', 'value2'))\nconnection.commit()  # 트랜잭션을 완료합니다\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 레코드 업데이트\n\n레코드를 변경하려면:\n\n```js\ncursor.execute(\"UPDATE your_table SET column1 = %s WHERE column2 = %s\", (\"new_value\", \"condition_value\"));\nconnection.commit();\n```\n\n# 7. 레코드 삭제\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블에서 레코드를 삭제하려면:\n\n```js\ncursor.execute(\"DELETE FROM your_table WHERE condition_column = %s\", ('condition_value',))\nconnection.commit()\n```\n\n# 8. 테이블 생성\n\n새로운 테이블을 생성하려면, 구조를 정의하세요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ncursor.execute(\"\"\"\n    CREATE TABLE your_new_table (\n        id SERIAL PRIMARY KEY,\n        column1 VARCHAR(255),\n        column2 INTEGER\n    )\n\"\"\")\nconnection.commit()\n```\n\n# 9. 테이블 삭제하기\n\n테이블을 삭제하려면:\n\n```js\ncursor.execute(\"DROP TABLE if exists your_table\");\nconnection.commit();\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 트랜잭션 사용하기\n\n원자성을 위해 트랜잭션을 사용하는 방법입니다:\n\n```js\ntry:\n    cursor.execute(\"첫 번째 트랜잭션 쿼리\")\n    cursor.execute(\"두 번째 트랜잭션 쿼리\")\n    connection.commit()  # 모든 것이 잘되면 커밋\nexcept Exception as e:\n    connection.rollback()  # 문제 발생 시 롤백\n    print(f\"오류 발생: {e}\")\n```\n\n# 비동기 IO 작업하기 (비동기 프로그래밍)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 비동기 함수 정의하기\n\nasync 함수를 선언하려면 다음과 같이 작성할 수 있습니다:\n\n```js\nimport asyncio\nasync def fetch_data():\n    print(\"데이터 가져오는 중...\")\n    await asyncio.sleep(2)  # I/O 작업 시뮬레이션\n    print(\"데이터를 가져왔습니다.\")\n```\n\n# 2. 비동기 함수 실행하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n비동기 함수를 호출하고 기다리려면:\n\n```js\nasync def main():\n    await fetch_data()\nasyncio.run(main())\n```\n\n# 3. 여러 코루틴 기다리기\n\n여러 비동기 함수를 호출하고 모두 기다리려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\n비동기로 주요 함수():\n    작업1 = 데이터_가져오기()\n    작업2 = 데이터_가져오기()\n    await asyncio.gather(작업1, 작업2)\nasyncio.run(주요 함수())\n```\n\n## 4. 작업 생성하기\n\n작업을 보내려면:\n\n```python\n비동기로 주요 함수():\n    작업1 = asyncio.create_task(데이터_가져오기())\n    작업2 = asyncio.create_task(데이터_가져오기())\n    await 작업1\n    await 작업2\nasyncio.run(주요 함수())\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 비동기 반복\n\n비동기적으로 횡행하면서 다른 함수에 시간을 주는 방법:\n\n```js\nasync def fetch_item(item):\n    await asyncio.sleep(1)  # I/O 작업을 시뮬레이션합니다\n    print(f\"{item}을 가져왔습니다\")\nasync def main():\n    items = ['물약', '스크롤', '마법봉']\n    for item in items:\n        await fetch_item(item)\nasyncio.run(main())\n```\n\n# 6. 비동기적인 컨텍스트 매니저 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n비동기 함수 내에서 리소스가 적절하게 관리되도록 하려면:\n\n```js\nasync def async_context_manager():\n    print(\"컨텍스트 진입 중\")\n    await asyncio.sleep(1)\n    print(\"컨텍스트 종료 중\")\nasync def main():\n    async with async_context_manager():\n        print(\"컨텍스트 내부에 있음\")\nasyncio.run(main())\n```\n\n# 7. 비동기 코드에서 예외 처리\n\n비동기 함수에서 에러를 우아하게 처리하고 관리하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nasync def risky_spell():\n    await asyncio.sleep(1)\n    raise ValueError(\"주문이 실패했습니다!\")\nasync def main():\n    try:\n        await risky_spell()\n    except ValueError as e:\n        print(f\"에러가 발생했습니다: {e}\")\nasyncio.run(main())\n```\n\n# 8. 비동기 생성기\n\n개별 시간에 도착하는 각각의 비동기 생성기를 생성하려면:\n\n```python\nasync def fetch_items():\n    items = ['크리스탈', '부적', '단검']\n    for item in items:\n        await asyncio.sleep(1)\n        yield item\nasync def main():\n    async for item in fetch_items():\n        print(f\"{item}을(를) 찾았습니다\")\nasyncio.run(main())\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 9. 세마포어 사용하기\n\n동시 작업의 수를 제한하려면:\n\n```js\nasync def guarded_spell(semaphore, item):\n    async with semaphore:\n        print(f\"{item} 처리 중\")\n        await asyncio.sleep(1)\nasync def main():\n    semaphore = asyncio.Semaphore(2)  # 동시 작업 2개 허용\n    await asyncio.gather(*(guarded_spell(semaphore, i) for i in range(5)))\nasyncio.run(main())\n```\n\n# 10. 이벤트 루프\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n비동기 루프와 직접 상호 작용하여 실행 흐름을 사용자 정의할 수 있습니다:\n\n```js\nasync def perform_spell():\n    print(\"주문 시전 중...\")\n    await asyncio.sleep(1)\n    print(\"주문 완료.\")\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(perform_spell())\nfinally:\n    loop.close()\n```\n\n# 네트워크, 소켓 및 네트워크 인터페이스 작업\n\n# 1. 소켓 생성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n네트워크 통신용 소켓을 만들려면:\n\n```js\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n```\n\n# 2. 원격 서버에 연결하기\n\n소켓을 통해 원격 서버와 연결을 설정합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ns.connect(('example.com', 80))  # Connect to example.com on port 80\n```\n\n# 3. Sending Data\n\nTo dispatch data through the network to a connected entity:\n\n```js\ns.sendall(b'Hello, server')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 데이터 수신\n\n네트워크로부터 데이터를 수신하려면:\n\n```js\ndata = s.recv(1024)  # 최대 1024바이트까지 수신\nprint('수신 완료', repr(data))\n```\n\n# 5. 소켓 닫기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기분 좋은 마음으로 다음과 같이 번역합니다.\n\n네트워크 링크를 끊고 소켓을 차분히 종료하려면:\n\n```js\ns.close();\n```\n\n# 6. 수신 소켓 생성\n\n들어오는 연결을 수신하기 위해 소켓을 열려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nserversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserversocket.bind(('localhost', 8080))  # localhost와 포트 8080에 바인딩합니다.\nserversocket.listen()  # 들어오는 연결을 대기합니다.\n```\n\n# 7. 연결 수락하기\n\n네트워크 링크를 수락하고 설정하기 위해서:\n\n```js\nclientsocket, address = serversocket.accept()\nprint(f\"Connection from {address} has been established.\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 블로킹되지 않는 소켓 작업\n\n소켓의 모드를 블로킹되지 않도록 설정하려면:\n\n```js\ns.setblocking(False);\n```\n\n# 9. UDP 소켓 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nUDP 소켓을 생성하여 더 빠르지만 덜 신뢰성있는 통신을 위한 프로토콜이 필요합니다:\n\n```js\nudp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp_socket.bind(('localhost', 8081))  # UDP 소켓을 로컬호스트의 8081 포트에 바인딩합니다\n```\n\n# 10. 네트워크 인터페이스 나열하기\n\n기계의 네트워크 인터페이스의 이름과 주소를 확인하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport socket\nimport netifaces\nfor interface in netifaces.interfaces():\n    addr = netifaces.ifaddresses(interface).get(netifaces.AF_INET)\n    if addr:\n        print(f\"Interface: {interface}, Address: {addr[0]['addr']}\")\n```\n\n#\n\n# 판다 라이브러리 (데이터프레임) 사용하기\n\n# 1. 데이터프레임 생성하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자신만의 열과 데이터로 DataFrame을 만들려면:\n\n```js\nimport pandas as pd\ndata = {\n    'Element': ['Earth', 'Water', 'Fire', 'Air'],\n    'Symbol': ['🜃', '🜄', '🜂', '🜁']\n}\ndf = pd.DataFrame(data)\n```\n\n# 2. CSV 파일에서 데이터 읽기\n\nCSV 파일에서 데이터를 읽어와 DataFrame으로 변환하기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndf = pd.read_csv(\"elements.csv\");\n```\n\n# 3. 처음 몇 개 행 확인하기\n\n데이터프레임에서 처음 행들을 얻으려면:\n\n```js\nprint(df.head());\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 열 선택하기\n\n데이터프레임에서 특정 열을 선택하려면:\n\n```js\nsymbols = df[\"Symbol\"];\n```\n\n# 5. 행 필터링하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nDataFrame을 살펴보고, 기준을 충족하는 행을 선택하려면:\n\n```js\nfire_elements = df[df[\"Element\"] == \"Fire\"];\n```\n\n# 6. 새 열 만들기\n\n데이터 내에서 파생된 DataFrame에 새 열을 만들려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndf[\"Length\"] = df[\"Element\"].apply(len);\n```\n\n# 7. 데이터 그룹화 및 집계\n\n데이터를 그룹으로 모으고 집계를 통해 새로운 데이터를 추출하려면:\n\n```js\nelement_groups = df.groupby(\"Element\").agg({ Length: \"mean\" });\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 데이터프레임 병합\n\n두 데이터프레임을 공통 키를 기준으로 결합하려면:\n\n```js\ndf2 = pd.DataFrame({ Element: [\"Earth\", \"Fire\"], Quality: [\"Solid\", \"Plasma\"] });\nmerged_df = pd.merge(df, df2, (on = \"Element\"));\n```\n\n# 9. 누락된 데이터 처리\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nDataFrame을 정리하여 데이터가 없는 곳에 값이 존재하는 빈 칸을 채우는 방법입니다:\n\n```js\ndf.fillna((value = \"Unknown\"), (inplace = True));\n```\n\n# 10. 데이터 변환 및 형태 재구성\n\nDataFrame의 형태를 변환하여 pivot 작업을 통해 숨겨진 패턴과 구조를 드러내는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\npivoted_df = df.pivot(index='Element', columns='Symbol', values='Length')\n```\n\n## 넘파이 라이브러리 (배열) 작업\n\n## 1. 넘파이 배열 생성하기\n\n배열을 생성하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport numpy as np\narray = np.array([1, 2, 3, 4, 5])\n```\n\n# 2. 영이나 일의 배열\n\n영으로 채워진 배열을 생성하려면:\n\n```python\nzeros = np.zeros((3, 3))  # 3x3 크기의 영으로 채워진 배열\nones = np.ones((2, 4))  # 2x4 크기의 일로 채워진 배열\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. 숫자 범위 생성하기\n\n일련의 숫자를 만들려면:\n\n```js\nrange_array = np.arange(10, 50, 5)  # 10부터 50까지, 간격은 5\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래와 같이 두 경계 사이에 균일하게 분포된 값들의 시리즈를 만들 수 있습니다:\n\n```js\nlinear_spaced = np.linspace(0, 1, 5)  # 0부터 1까지 5개의 값\n```\n\n# 5. 배열 형태 재구성\n\n배열의 모양을 변경하여 차원을 수정할 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nreshaped = np.arange(9).reshape(3, 3)  # 1차원 배열을 3x3 2차원 배열로 재구성합니다\n```\n\n# 6. 기본 배열 작업\n\n배열에 원소별 조작을 수행하려면:\n\n```js\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nsum = a + b  # 원소별 덧셈\ndifference = b - a  # 원소별 뺄셈\nproduct = a * b  # 원소별 곱셈\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 7. 행렬 곱셈\n\n기본 점곱 연산:\n\n```js\nresult = np.dot(a.reshape(1, 3), b.reshape(3, 1))  # a와 b의 점곱\n```\n\n## 8. 배열 요소에 액세스하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n유용한 구문을 사용하여 배열 요소에 액세스하기:\n\n```js\nelement = a[2]  # 배열 'a'의 세 번째 요소를 가져옵니다\nrow = reshaped[1, :]  # 'reshaped'의 두 번째 행을 가져옵니다\n```\n\n# 9. 부울 인덱싱\n\n배열 요소를 조건문의 체로 필터링합니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n필터링된 = a[a > 2]  # 'a'의 원소 중 2보다 큰 것들\n\n```\n\n# 10. 집계 및 통계\n\nnp 배열에 대한 통계 연산:\n\n```js\n평균 = np.mean(a);\n최대값 = np.max(a);\n합 = np.sum(a);\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Matplotlib 라이브러리 사용하기 (데이터 시각화)\n\n# 1. 기본 플롯 만들기\n\n시각화 플롯을 만들려면:\n\n```js\nimport matplotlib.pyplot as plt\nx = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\nplt.plot(x, y)\nplt.show()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 제목과 라벨 추가하기\n\n축에 이름을 지어 그래프에 더 나은 맥락을 부여하고 제목을 달기 위해서:\n\n```js\nplt.plot(x, y);\nplt.title(\"시간 경과에 따른 성장\");\nplt.xlabel(\"시간\");\nplt.ylabel(\"성장\");\nplt.show();\n```\n\n# 3. 산점도 그래프 생성하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n산점도를 만들어 봅시다:\n\n```js\nplt.scatter(x, y);\nplt.show();\n```\n\n### 4. 선 스타일 및 마커 사용자 정의\n\n플롯에 기호를 추가하여 유용성을 높일 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nplt.plot(x, y, (linestyle = \"--\"), (marker = \"o\"), (color = \"b\"));\nplt.show();\n```\n\n# 5. Creating Multiple Plots on the Same Axes\n\nCreating Multiple Plots on the Same Axes:\n\n```js\nz = [2, 3, 4, 5, 6];\nplt.plot(x, y);\nplt.plot(x, z);\nplt.show();\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 서브플롯 만들기\n\n서브플롯을 만들려면:\n\n```js\nfig, ax = plt.subplots(2, 1)  # 2개의 행, 1개의 열\nax[0].plot(x, y)\nax[1].plot(x, z)\nplt.show()\n```\n\n# 7. 히스토그램 만들기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n히스토그램을 생성하려면:\n\n```js\ndata = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4];\nplt.hist(data, (bins = 4));\nplt.show();\n```\n\n# 8. 범례 추가\n\n플롯에 범례를 만드는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nplt.plot(x, y, (label = \"성장\"));\nplt.plot(x, z, (label = \"감소\"));\nplt.legend();\nplt.show();\n```\n\n# 9. 눈금 맞춤\n\n축에 직접 마킹을 추가하여 값의 스케일을 정의할 수 있습니다:\n\n```js\nplt.plot(x, y);\nplt.xticks([1, 2, 3, 4, 5], [\"일\", \"이\", \"삼\", \"사\", \"오\"]);\nplt.yticks([0, 5, 10, 15, 20, 25], [\"0\", \"5\", \"10\", \"15\", \"20\", \"25+\"]);\nplt.show();\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 그림 저장하기\n\n그림을 .png 파일로 저장하려면:\n\n```js\nplt.plot(x, y);\nplt.savefig(\"growth_over_time.png\");\n```\n\n# Scikit-Learn 라이브러리 활용하기 (머신러닝)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 데이터셋 불러오기\n\nML 실험을 위해 데이터셋을 사용하려면\n\n```js\nfrom sklearn import datasets\niris = datasets.load_iris()\nX, y = iris.data, iris.target\n```\n\n# 2. 데이터를 훈련 세트와 테스트 세트로 나누기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터를 나눠서 학습 및 평가할 때 사용하세요:\n\n```js\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n```\n\n# 3. 모델 학습\n\nRandomForestClassifier를 사용하여 ML 모델을 학습합니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n```\n\n# 4. 예측하기\n\n모델 예측 결과를 확인하려면:\n\n```python\npredictions = model.predict(X_test)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 모델 성능 평가\n\n모델을 평가하려면 예측 정확성을 측정해야 합니다:\n\n```js\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, predictions)\nprint(f\"모델 정확도: {accuracy}\")\n```\n\n# 6. 교차 검증 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n교차 검증을 사용하려면:\n\n```js\nfrom sklearn.model_selection import cross_val_score\nscores = cross_val_score(model, X, y, cv=5)\nprint(f\"교차 검증 점수: {scores}\")\n```\n\n# 7. 피처 스케일링\n\n당신의 피처들에 적절한 스케일을 만들어 모델이 더 효율적으로 학습할 수 있도록하세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n```\n\n# 8. 그리드 서치를 사용한 매개변수 튜닝\n\n모델의 매개변수를 미세 조정하여 최적의 조합을 찾아냅니다:\n\n```python\nfrom sklearn.model_selection import GridSearchCV\nparam_grid = {'n_estimators': [10, 50, 100], 'max_depth': [None, 10, 20]}\ngrid_search = GridSearchCV(model, param_grid, cv=5)\ngrid_search.fit(X_train, y_train)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 9. 파이프라인 생성\n\n데이터 처리 및 모델링 단계를 간편하게 만들기 위해 원활한 흐름을 만들어주세요:\n\n```js\nfrom sklearn.pipeline import Pipeline\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classifier', RandomForestClassifier())\n])\npipeline.fit(X_train, y_train)\n```\n\n# 10. 모델 저장 및 불러오기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모델을 보존하기 위해서:\n\n```js\nimport joblib\n# 모델 저장하기\njoblib.dump(model, 'model.joblib')\n# 모델 불러오기\nloaded_model = joblib.load('model.joblib')\n```\n\n## Plotly 라이브러리 활용 (상호작용적 데이터 시각화)\n\n## 1. 기본 선 그래프 만들기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n라인 차트를 만드는 방법:\n\n```js\nimport plotly.graph_objs as go\nimport plotly.io as pio\nx = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\nfig = go.Figure(data=go.Scatter(x=x, y=y, mode='lines'))\npio.show(fig)\n```\n\n# 2. 산점도 그래프 만들기\n\n산점도 그래프를 만드는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfig = go.Figure((data = go.Scatter((x = x), (y = y), (mode = \"markers\"))));\npio.show(fig);\n```\n\n# 3. Creating a Bar Chart\n\nTo Create a Bar Chart:\n\n```js\ncategories = [\"A\", \"B\", \"C\", \"D\", \"E\"];\nvalues = [10, 20, 15, 30, 25];\nfig = go.Figure((data = go.Bar((x = categories), (y = values))));\npio.show(fig);\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 원형 차트 만들기\n\n원형 차트를 만들려면:\n\n```js\nlabels = [\"지구\", \"물\", \"불\", \"바람\"];\nsizes = [25, 35, 20, 20];\nfig = go.Figure((data = go.Pie((labels = labels), (values = sizes))));\npio.show(fig);\n```\n\n# 5. 히스토그램 만들기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n히스토그램을 만들려면:\n\n```js\ndata = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4];\nfig = go.Figure((data = go.Histogram((x = data))));\npio.show(fig);\n```\n\n# 6. 상자 그림 만들기\n\n상자 그림을 만들려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n데이터 = [1, 2, 2, 3, 4, 4, 4, 5, 5, 6];\n피그 = go.Figure((data = go.Box((y = 데이터))));\npio.show(피그);\n```\n\n# 7. 히트맵 생성하기\n\n히트맵을 생성하려면:\n\n```js\nimport numpy as np\nz = np.random.rand(10, 10)  # 임의의 데이터 생성\n피그 = go.Figure(data=go.Heatmap(z=z))\npio.show(피그)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 3D 표면 플롯 만들기\n\n3D 표면 플롯을 만들려면:\n\n```js\nz = np.random.rand(20, 20)  # 랜덤 데이터 생성\nfig = go.Figure(data=go.Surface(z=z))\npio.show(fig)\n```\n\n# 9. 서브플롯 만들기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n서브플롯을 만들려면:\n\n```js\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=2)\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines'), row=1, col=1)\nfig.add_trace(go.Bar(x=categories, y=values), row=1, col=2)\npio.show(fig)\n```\n\n# 10. 대화형 시계열 생성\n\n시계열 작업을 위해서:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport pandas as pd\ndates = pd.date_range('20230101', periods=5)\nvalues = [10, 11, 12, 13, 14]\nfig = go.Figure(data=go.Scatter(x=dates, y=values, mode='lines+markers'))\npio.show(fig)\n```\n\n## 날짜와 시간 다루기\n\n## 1. 현재 날짜와 시간 얻기\n\n현재 날짜와 시간을 얻으려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom datetime import datetime\nnow = datetime.now()\nprint(f\"Current date and time: {now}\")\n```\n\n# 2. Creating Specific Date and Time\n\nTo conjure a moment from the past or future, crafting it with precision:\n\n```python\nspecific_time = datetime(2023, 1, 1, 12, 30)\nprint(f\"Specific date and time: {specific_time}\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. 날짜와 시간 형식 지정하기\n\n날짜와 시간 형식 지정하기:\n\n```js\nformatted = now.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(f\"형식화된 날짜와 시간: {formatted}\")\n```\n\n# 4. 문자열에서 날짜와 시간 구문 분석하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문자열에서 날짜와 시간을 파싱하려면:\n\n```js\ndate_string = \"2023-01-01 15:00:00\"\nparsed_date = datetime.strptime(date_string, \"%Y-%m-%d %H:%M:%S\")\nprint(f\"Parsed date and time: {parsed_date}\")\n```\n\n# 5. 시간 간격 다루기\n\n시간을 통해 앞뒤로 시간을 건너뛰며 순간 간의 거리를 이동하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom datetime import timedelta\ndelta = timedelta(days=7)\nfuture_date = now + delta\nprint(f\"7일 후의 날짜: {future_date}\")\n```\n\n## 6. 날짜와 시간 비교\n\n날짜 및 시간 비교:\n\n```python\nif specific_time > now:\n    print(\"특정 시간은 미래에 있습니다.\")\nelse:\n    print(\"특정 시간은 지났습니다.\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 날짜/시간에서 구성 요소 추출하기\n\n년, 월, 일 및 더 많은 것들을 추출하려면:\n\n```js\nyear = now.year\nmonth = now.month\nday = now.day\nhour = now.hour\nminute = now.minute\nsecond = now.second\nprint(f\"Year: {year}, Month: {month}, Day: {day}, Hour: {hour}, Minute: {minute}, Second: {second}\")\n```\n\n# 8. 시간대 처리하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현지 시간을 준수하는 시간대에서 작업하기:\n\n```python\nfrom datetime import timezone, timedelta\nutc_time = datetime.now(timezone.utc)\nprint(f\"현재 UTC 시간: {utc_time}\")\n# 특정 시간대에 맞게 조정하기 (예: EST)\nest_time = utc_time - timedelta(hours=5)\nprint(f\"현재 EST 시간: {est_time}\")\n```\n\n## 9. 요일 가져오기\n\n한 주의 요일을 식별하기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nweekday = now.strftime(\"%A\")\nprint(f\"오늘은: {weekday}\")\n```\n\n# 10. 유닉스 타임스탬프 작업\n\n고대 시대와 대화하며, 유닉스 탄생의 숫자를 번역합니다:\n\n```python\ntimestamp = datetime.timestamp(now)\nprint(f\"현재 타임스탬프: {timestamp}\")\n# 타임스탬프를 날짜로 다시 변환\ndate_from_timestamp = datetime.fromtimestamp(timestamp)\nprint(f\"타임스탬프에서 날짜로: {date_from_timestamp}\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 더 고급 리스트 컴프리헨션과 람다 함수 사용하기\n\n# 1. 중첩된 리스트 컴프리헨션\n\n중첩된 리스트 컴프리헨션을 사용하려면:\n\n```js\nmatrix = [[j for j in range(5)] for i in range(3)]\nprint(matrix)  # 3x5 행렬을 생성합니다\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 조건부 리스트 컴프리헨션\n\n원하는 조건을 충족하는 요소를 필터링하려면:\n\n```js\nfiltered = [x for x in range(10) if x % 2 == 0]\nprint(filtered)  # 0부터 9까지의 짝수\n```\n\n# 3. 다중 이터러블을 사용한 리스트 컴프리헨션\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여러 원본에서 요소를 병합하고 변환하여 하나의 춤으로 표현하기:\n\n```js\npairs = [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]\nprint(pairs)  # 서로 다른 요소의 쌍을 출력\n```\n\n# 4. Lambda 함수 사용\n\n익명 함수를 소환하여 일회성이자 간결하게 마술의 행위를 하나 생성합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nsquare = lambda x: x**2\nprint(square(5))  # Returns 25\n```\n\n# 5. Lambda Functions in List Comprehensions\n\nTo employ lambda functions within your list comprehensions:\n\n```js\nsquared = [(lambda x: x**2)(x) for x in range(5)]\nprint(squared)  # Squares of numbers from 0 to 4\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 리스트를 평평하게 만드는 리스트 컴프리헨션\n\n중첩된 리스트를 평탄화하면 해당 요소들이 한 차원으로 펼쳐집니다:\n\n```js\nnested = [[1, 2, 3], [4, 5], [6, 7]]\nflattened = [x for sublist in nested for x in sublist]\nprint(flattened)\n```\n\n# 7. 요소에 함수 적용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n각 요소에 변환 함수를 적용하려면:\n\n```js\nimport math\ntransformed = [math.sqrt(x) for x in range(1, 6)]\nprint(transformed)  # 1부터 5까지 숫자의 제곱근\n```\n\n## 8. Map 및 Filter와 함께 람다 사용\n\n리스트를 매핑하고 필터링하는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmapped = list(map(lambda x: x**2, range(5)))\nfiltered = list(filter(lambda x: x > 5, mapped))\nprint(mapped)    # 0부터 4까지 숫자의 제곱\nprint(filtered)  # 5보다 큰 요소들\n```\n\n# 9. 조건 표현식을 사용한 리스트 컴프리헨션\n\n조건 표현식을 사용한 리스트 컴프리헨션:\n\n```js\nconditional = [x if x > 2 else x**2 for x in range(5)]\nprint(conditional)  # 2보다 작거나 같은 숫자의 제곱, 그 외에는 동일하게\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 람다를 사용한 복잡한 변환\n\n복잡한 변환을 수행하기 위해서는 람다 함수를 사용하세요:\n\n```js\ncomplex_transformation = list(map(lambda x: x**2 if x % 2 == 0 else x + 5, range(5)))\nprint(complex_transformation)  # 짝수-홀수 조건에 따라 다른 변환을 적용합니다\n```\n\n# 객체 지향 프로그래밍으로 작업하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 클래스 정의하기\n\n클래스 만들기:\n\n```js\nclass Wizard:\n    def __init__(self, name, power):\n        self.name = name\n        self.power = power\n    def cast_spell(self):\n        print(f\"{self.name}이(가) 힘 {self.power}으로 주문을 사용합니다!\")\n```\n\n# 2. 인스턴스 생성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클래스의 인스턴스를 생성하려면:\n\n```js\nmerlin = Wizard(\"Merlin\", 100);\n```\n\n# 3. 메서드 호출\n\n클래스 인스턴스의 메서드를 호출하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmerlin.cast_spell();\n```\n\n# 4. 상속\n\n서브클래싱:\n\n```js\nclass ArchWizard(Wizard):\n    def __init__(self, name, power, realm):\n        super().__init__(name, power)\n        self.realm = realm\n    def summon_familiar(self):\n        print(f\"{self.name}가 {self.realm} 영역에서 친구를 소환합니다.\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 메서드 오버라이딩\n\n기본 클래스를 오버라이드하려면:\n\n```js\nclass Sorcerer(Wizard):\n    def cast_spell(self):\n        print(f\"{self.name}이(가) 강력한 암흑 주문을 사용합니다!\")\n```\n\n# 6. 다형성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다양한 형태와 상호작용하기 위해 공통 인터페이스를 통해:\n\n```js\ndef unleash_magic(wizard):\n    wizard.cast_spell()\nunleash_magic(merlin)\nunleash_magic(Sorcerer(\"Voldemort\", 90))\n```\n\n# 7. 캡슐화\n\n정보 은닉을 사용하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nclass Alchemist:\n    def __init__(self, secret_ingredient):\n        self.__secret = secret_ingredient\n    def reveal_secret(self):\n        print(f\"The secret ingredient is {self.__secret}\")\n```\n\n# 8. Composition\n\nTo assemble Objects from simpler ones:\n\n```python\nclass Spellbook:\n    def __init__(self, spells):\n        self.spells = spells\nclass Mage:\n    def __init__(self, name, spellbook):\n        self.name = name\n        self.spellbook = spellbook\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 9. 클래스 메소드와 정적 메소드\n\n클래스 메소드와 정적 메소드를 사용하여 클래스에 특정 작업을 묶거나 인스턴스에 제한 없이 사용하여 더 넓은 목적에 부합하도록 합니다:\n\n```js\nclass Enchanter:\n    @staticmethod\n    def enchant(item):\n        print(f\"{item}이(가) 마법으로 걸렸습니다!\")\n    @classmethod\n    def summon(cls):\n        print(\"새로운 마법사가 소환되었습니다.\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n엔티티의 속성에 접근을 우아하게 관리하여 사용 및 보호를 안내하기 위해:\n\n```js\nclass Elementalist:\n    def __init__(self, element):\n        self._element = element\n\n    @property\n    def element(self):\n        return self._element\n\n    @element.setter\n    def element(self, value):\n        if value in [\"Fire\", \"Water\", \"Earth\", \"Air\"]:\n            self._element = value\n        else:\n            print(\"잘못된 속성입니다!\")\n```\n\n# 데코레이터로 작업하기\n\n# 1. 기본 데코레이터\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n간단한 데코레이터를 만들려면:\n\n```js\ndef my_decorator(func):\n    def wrapper():\n        print(\"함수가 호출되기 전에 무언가가 발생합니다.\")\n        func()\n        print(\"함수가 호출된 후에 무언가가 발생합니다.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"안녕!\")\n\nsay_hello()\n```\n\n# 2. 인수를 전달하는 데코레이터\n\n데코레이터 내에서 함수에 인수를 전달하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndef my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"함수 호출 전\")\n        result = func(*args, **kwargs)\n        print(\"함수 호출 후\")\n        return result\n    return wrapper\n\n@my_decorator\ndef greet(name):\n    print(f\"{name}님 안녕하세요\")\n\ngreet(\"Alice\")\n```\n\n# 3. functools.wraps 사용\n\n원본 함수의 메타데이터를 보존하려면 데코레이팅할 때 다음을 사용하세요:\n\n```js\nfrom functools import wraps\n\ndef my_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        \"\"\"래핑 함수\"\"\"\n        return func(*args, **kwargs)\n    return wrapper\n\n@my_decorator\ndef greet(name):\n    \"\"\"누군가에게 인사하기\"\"\"\n    print(f\"{name}님 안녕하세요\")\n\nprint(greet.__name__)  # 출력: 'greet'\nprint(greet.__doc__)   # 출력: '누군가에게 인사하기'\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 클래스 데코레이터\n\n클래스를 사용하여 데코레이터를 만드는 방법은 다음과 같습니다:\n\n```python\nclass MyDecorator:\n    def __init__(self, func):\n        self.func = func\n    def __call__(self, *args, **kwargs):\n        print(\"함수 호출 전\")\n        self.func(*args, **kwargs)\n        print(\"함수 호출 후\")\n\n@MyDecorator\ndef greet(name):\n    print(f\"안녕 {name}\")\n\ngreet(\"Alice\")\n```\n\n# 5. 인수를 받는 데코레이터\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자신의 인수를 받아들이는 데코레이터를 작성하려면:\n\n```js\ndef repeat(times):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for _ in range(times):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef say_hello():\n    print(\"Hello\")\n\nsay_hello()\n```\n\n# 6. 메소드 데코레이터\n\n클래스 내부의 메소드에 데코레이터를 적용하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\ndef method_decorator(func):\n    @wraps(func)\n    def wrapper(self, *args, **kwargs):\n        print(\"메소드 데코레이터\")\n        return func(self, *args, **kwargs)\n    return wrapper\n\nclass MyClass:\n    @method_decorator\n    def greet(self, name):\n        print(f\"안녕 {name}\")\n\nobj = MyClass()\nobj.greet(\"Alice\")\n```\n\n# 7. 데코레이터 중첩\n\n하나의 함수에 여러 데코레이터를 적용하려면:\n\n```python\n@my_decorator\n@repeat(2)\ndef greet(name):\n    print(f\"안녕 {name}\")\n\ngreet(\"Alice\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 선택적 인수를 가진 데코레이터\n\n인수를 사용하여 작동하는 데코레이터를 만들어 보겠습니다:\n\n```js\ndef smart_decorator(arg=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if arg:\n                print(f\"Argument: {arg}\")\n            return func(*args, **kwargs)\n        return wrapper\n    if callable(arg):\n        return decorator(arg)\n    return decorator\n\n@smart_decorator\ndef no_args():\n    print(\"인수 없음\")\n\n@smart_decorator(\"인수 포함\")\ndef with_args():\n    print(\"인수 포함\")\n\nno_args()\nwith_args()\n```\n\n# 9. 클래스 메서드 데코레이터\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클래스 메소드를 꾸미려면:\n\n```js\nclass MyClass:\n    @classmethod\n    @my_decorator\n    def class_method(cls):\n        print(\"Class method called\")\n\nMyClass.class_method()\n```\n\n# 10. 정적 메소드를 위한 데코레이터\n\n정적 메소드를 꾸미려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nclass MyClass:\n    @staticmethod\n    @my_decorator\n    def static_method():\n        print(\"Static method called\")\n\nMyClass.static_method()\n```\n\n# GraphQL 작업\n\n# 1. GraphQL 클라이언트 설정\n\nGraphQL 작업을 위해서는:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom gql import gql, Client\nfrom gql.transport.requests import RequestsHTTPTransport\ntransport = RequestsHTTPTransport(url='https://your-graphql-endpoint.com/graphql')\nclient = Client(transport=transport, fetch_schema_from_transport=True)\n```\n\n## 2. Executing a Simple Query\n\nExecuting a Query:\n\n```python\nquery = gql('''\n{\n  allWizards {\n    id\n    name\n    power\n  }\n}\n''')\n\nresult = client.execute(query)\nprint(result)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. 변수를 사용하여 쿼리 실행하기\n\n변수를 사용한 쿼리:\n\n```js\nquery = gql('''\nquery GetWizards($element: String!) {\n  wizards(element: $element) {\n    id\n    name\n  }\n}\n''')\nparams = {\"element\": \"Fire\"}\nresult = client.execute(query, variable_values=params)\nprint(result)\n```\n\n# 4. 뮤테이션\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n변이를 생성하고 실행하려면:\n\n```js\nmutation = gql('''\nmutation CreateWizard($name: String!, $element: String!) {\n  createWizard(name: $name, element: $element) {\n    wizard {\n      id\n      name\n    }\n  }\n}\n''')\nparams = {\"name\": \"Gandalf\", \"element\": \"Light\"}\nresult = client.execute(mutation, variable_values=params)\nprint(result)\n```\n\n# 5. 에러 처리\n\n에러 처리:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom gql import gql, Client\nfrom gql.transport.exceptions import TransportQueryError\n\ntry:\n    result = client.execute(query)\nexcept TransportQueryError as e:\n    print(f\"GraphQL Query Error: {e}\")\n```\n\n# 6. Subscriptions\n\nWorking with Subscriptions:\n\n```python\nsubscription = gql('''\nsubscription {\n  wizardUpdated {\n    id\n    name\n    power\n  }\n}\n''')\n\nfor result in client.subscribe(subscription):\n    print(result)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 단편\n\n단편 사용 방법:\n\n```js\nquery = gql('''\nfragment WizardDetails on Wizard {\n  name\n  power\n}\nquery {\n  allWizards {\n    ...WizardDetails\n  }\n}\n''')\nresult = client.execute(query)\nprint(result)\n```\n\n# 8. 인라인 단편\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 표를 마크다운 형식으로 변경해주세요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nquery = gql('''\nquery 위자드얻기($withPower: Boolean!) {\n  allWizards {\n    name\n    power @include(if: $withPower)\n  }\n}\n''')\nparams = {\"withPower\": True}\nresult = client.execute(query, variable_values=params)\nprint(result)\n```\n\n# 10. 요청 일괄 처리\n\n여러 작업을 하나의 요청으로 결합하여 네트워크 오버헤드를 줄이는 방법:\n\n```js\nfrom gql import gql, Client\nfrom gql.transport.requests import RequestsHTTPTransport\n\ntransport = RequestsHTTPTransport(url='https://your-graphql-endpoint.com/graphql', use_json=True)\nclient = Client(transport=transport, fetch_schema_from_transport=True)\n\nquery1 = gql('query { wizard(id: \"1\") { name } }')\nquery2 = gql('query { allSpells { name } }')\n\nresults = client.execute([query1, query2])\nprint(results)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 정규 표현식 사용하기\n\n# 1. 기본 패턴 매칭\n\n문자열 내에서 패턴과 일치하는 항목을 찾으려면:\n\n```js\nimport re\ntext = \"Search this string for patterns.\"\nmatch = re.search(r\"patterns\", text)\nif match:\n    print(\"패턴을 찾았습니다!\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 정규 표현식 컴파일하기\n\n정규 표현식을 반복적으로 사용하려면 다음과 같이 컴파일하세요:\n\n```js\npattern = re.compile(r\"patterns\")\nmatch = pattern.search(text)\n```\n\n# 3. 시작 또는 끝에서 매칭하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문자열이 특정 패턴으로 시작하거나 끝나는지 확인하려면:\n\n```js\nif re.match(r\"^Search\", text):\n    print(\"Starts with 'Search'\")\nif re.search(r\"patterns.$\", text):\n    print(\"Ends with 'patterns.'\")\n```\n\n# 4. 모든 일치 항목 찾기\n\n문자열에서 특정 패턴의 모든 발생을 찾으려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nall_matches = re.findall(r\"t\\w+\", text)  # 't'로 시작하는 단어를 찾습니다.\nprint(all_matches)\n```\n\n# 5. 검색 및 대체 (치환)\n\n문자열 내에서 패턴의 발생을 대체하는 방법:\n\n```js\nreplaced_text = re.sub(r\"string\", \"sentence\", text)\nprint(replaced_text)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 문자열 분할하기\n\n패턴의 발생에 따라 문자열을 분할하려면:\n\n```js\nwords = re.split(r\"\\s+\", text)  # 하나 이상의 공백으로 분할\nprint(words)\n```\n\n# 7. 특수 문자 이스케이프하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n특수 문자를 그대로 비교하려면 이스케이프 처리를 해야 합니다:\n\n```js\nescaped = re.search(r\"\\bfor\\b\", text)  # \\b는 단어 경계를 의미합니다\n```\n\n### 8. 그룹 지정 및 캡처\n\n패턴의 부분을 그룹으로 묶어서 값을 추출하기 위해:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmatch = re.search(r\"(\\w+) (\\w+)\", text)\nif match:\n    print(match.group())  # 전체 매치\n    print(match.group(1)) # 첫 번째 그룹\n```\n\n# 9. 캡처하지 않는 그룹\n\n캡처하지 않고 그룹을 정의하는 방법:\n\n```js\nmatch = re.search(r\"(?:\\w+) (\\w+)\", text)\nif match:\n    print(match.group(1))  # 첫 번째 (그리고 유일한) 그룹\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 룩어헤드 및 룩비하인드 어설션\n\n결과에 포함되지 않고 패턴을 일치시키려면 주변에 오는 내용을 기반으로 합니다:\n\n```js\nlookahead = re.search(r\"\\b\\w+(?= string)\", text)  # ' string' 앞에 있는 단어\nlookbehind = re.search(r\"(?<=Search )\\w+\", text)  # 'Search ' 뒤에 있는 단어\nif lookahead:\n    print(lookahead.group())\nif lookbehind:\n    print(lookbehind.group())\n```\n\n# 11. 패턴 일치 동작 수정을 위한 플래그\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래와 같이 플래그를 사용하여 re.IGNORECASE와 같이 패턴이 일치하는 방식을 변경할 수 있어요:\n\n```js\n대소문자_무시 = re.findall(r\"search\", text, re.IGNORECASE)\nprint(대소문자_무시)\n```\n\n# 12. 명명된 그룹 사용하기\n\n그룹에 이름을 할당하고 이름으로 참조할 수 있어요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nmatch = re.search(r\"(?P<first>\\w+) (?P<second>\\w+)\", text)\nif match:\nprint(match.group('first'))\nprint(match.group('second'))\n\n# 13. 여러 줄에 걸쳐 매칭하기\n\nre.MULTILINE 플래그를 사용하여 여러 줄에 걸쳐 패턴을 매칭하려면:\n\n```js\nmulti_line_text = \"Start\\nmiddle end\"\nmatches = re.findall(r\"^m\\w+\", multi_line_text, re.MULTILINE)\nprint(matches)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 14. 게으른 양자\n\n가능한 한 적은 문자와 일치시키려면 게으른 양자 (\\*?, +?, ??)를 사용하세요:\n\n```js\nhtml = \"<body><h1>Title</h1></body>\"\nmatch = re.search(r\"<.*?>\", html)\nif match:\n    print(match.group())  # '<body>'와 일치합니다\n```\n\n# 15. 상세한 정규 표현식\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nre.VERBOSE를 사용하여 더 읽기 쉬운 정규 표현식을 사용할 수 있습니다:\n\n```js\npattern = re.compile(r\"\"\"\n    \\b      # 단어 경계\n    \\w+     # 하나 이상의 단어 문자\n    \\s      # 공백\n    \"\"\", re.VERBOSE)\nmatch = pattern.search(text)\n```\n\n# 문자열 다루기\n\n# 1. 문자열 연결하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문자열을 합치려면:\n\n```js\ngreeting = \"Hello\";\nname = \"Alice\";\nmessage = greeting + \", \" + name + \"!\";\nprint(message);\n```\n\n# 2. str.format을 사용한 문자열 서식 지정\n\n문자열 템플릿에 값을 삽입하는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmessage = \"{}, {}. Welcome!\".format(greeting, name);\nprint(message);\n```\n\n# 3. Formatted String Literals (f-strings)\n\nTo embed expressions inside string literals (Python 3.6+):\n\n```js\nmessage = f\"{greeting}, {name}. Welcome!\"\nprint(message)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 문자열 메소드 — 대소문자 변환\n\n문자열의 대소문자를 변경하려면:\n\n```js\ns = \"Python\"\nprint(s.upper())  # 대문자로 변환\nprint(s.lower())  # 소문자로 변환\nprint(s.title())  # 제목 케이스로 변환\n```\n\n# 5. 문자열 메소드 — strip, rstrip, lstrip\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문자열 끝에서 공백이나 특정 문자를 제거하려면:\n\n```js\ns = \"   trim me   \"\nprint(s.strip())   # 양쪽 끝\nprint(s.rstrip())  # 오른쪽 끝\nprint(s.lstrip())  # 왼쪽 끝\n```\n\n# 6. 문자열 메소드 — startswith, endswith\n\n특정 텍스트를 찾아 문자열의 시작 또는 끝을 확인하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ns = \"filename.txt\"\nprint(s.startswith(\"file\"))  # True\nprint(s.endswith(\".txt\"))    # True\n```\n\n# 7. 문자열 메서드 — split, join\n\n문자열을 리스트로 나누거나 리스트를 문자열로 결합하려면:\n\n```js\ns = \"split,this,string\"\nwords = s.split(\",\")        # 문자열을 리스트로 분할\njoined = \" \".join(words)    # 리스트를 문자열로 결합\nprint(words)\nprint(joined)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 문자열 메소드 — replace\n\n문자열의 일부를 다른 문자열로 바꾸려면:\n\n```js\ns = \"Hello world\";\nnew_s = s.replace(\"world\", \"Python\");\nprint(new_s);\n```\n\n# 9. 문자열 메소드 — find, index\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n서브스트링이 문자열 내에서의 위치를 찾으려면:\n\n```js\ns = \"look for a substring\"\nposition = s.find(\"substring\")  # 찾지 못하면 -1 반환\nindex = s.index(\"substring\")    # 찾지 못하면 ValueError를 일으킴\nprint(position)\nprint(index)\n```\n\n# 10. 문자열 메소드 — 문자와 작업하기\n\n문자열 내 개별 문자를 처리하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\ns = \"characters\"\nfor char in s:\n    print(char)  # Prints each character on a new line\n```\n\n# 11. 문자열 메서드 — isdigit, isalpha, isalnum\n\n문자열이 숫자만, 알파벳 문자만, 또는 알파벳 및 숫자만을 포함하는지 확인하려면:\n\n```python\nprint(\"123\".isdigit())   # True\nprint(\"abc\".isalpha())   # True\nprint(\"abc123\".isalnum())# True\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 12. 문자열 슬라이싱\n\n슬라이싱을 사용하여 부분 문자열을 추출하려면:\n\n```js\ns = \"나를 슬라이스해봐\"\nsub = s[2:7]  # 3번째부터 7번째 문자까지\nprint(sub)\n```\n\n# 13. len으로 문자열 길이 계산\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문자열의 길이를 구하려면:\n\n```js\ns = \"length\"\nprint(len(s))  # 6\n```\n\n## 14. 여러 줄을 포함하는 문자열\n\n여러 줄에 걸쳐 있는 문자열을 다루려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmulti = \"\"\"Line one\nLine two\nLine three\"\"\"\nprint(multi)\n```\n\n# 15. 원시 문자열\n\n백슬래시를 리터럴 문자로 취급하려면 정규식 패턴 및 파일 경로에 유용합니다:\n\n```js\npath = r\"C:\\User\\name\\folder\"\nprint(path)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 웹 스크레이핑 작업 중\n\n# 1. requests를 사용하여 웹 페이지 가져오기\n\n웹 페이지의 내용을 검색하는 방법:\n\n```js\nimport requests\n\nurl = 'https://example.com'\nresponse = requests.get(url)\nhtml = response.text\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. BeautifulSoup을 사용하여 HTML 구문 분석\n\nHTML을 구문 분석하고 데이터를 추출하려면:\n\n```python\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(html, 'html.parser')\nprint(soup.prettify())  # HTML을 예쁘게 출력\n```\n\n# 3. HTML 트리 내비게이션\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n태그를 사용하여 요소를 찾는 방법:\n\n```js\ntitle = soup.title.text  # 페이지 제목 가져오기\nheadings = soup.find_all('h1')  # 모든 <h1> 태그 목록\n```\n\n# 4. CSS 선택자 사용\n\nCSS 선택자를 사용하여 요소를 선택하는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\narticles = soup.select('div.article') # <div> 태그 안에 클래스 'article'을 가진 모든 요소 선택\n\n# 5. 태그로부터 데이터 추출\n\nHTML 요소에서 텍스트와 속성을 추출하려면:\n\n```js\nfor article in articles:\n    title = article.h2.text  # <h2> 태그 안의 텍스트\n    link = article.a['href']  # <a> 태그의 'href' 속성\n    print(title, link)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 상대 URL 다루기\n\n상대 URL을 절대 URL로 변환하려면:\n\n```js\nfrom urllib.parse import urljoin\nabsolute_urls = [urljoin(url, link) for link in relative_urls]\n```\n\n# 7. 페이지네이션 다루기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여러 페이지에서 콘텐츠를 스크래핑하기:\n\n```js\nbase_url = \"https://example.com/page/\"\nfor page in range(1, 6):  # 5페이지에 대해\n    page_url = base_url + str(page)\n    response = requests.get(page_url)\n    # 각 페이지의 콘텐츠 처리\n```\n\n# 8. AJAX 요청 처리\n\nAJAX 요청으로 로드된 데이터를 스크래핑하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# AJAX 요청의 URL을 찾아보세요 (브라우저의 개발자 도구 사용) 그리고 가져와보세요\najax_url = 'https://example.com/ajax_endpoint'\ndata = requests.get(ajax_url).json()  # 응답이 JSON 형식일 것으로 가정합니다\n```\n\n# 9. 정규 표현식을 활용한 웹 스크래핑\n\n정규 표현식을 사용하여 데이터를 추출하려면:\n\n```js\nimport re\nemails = re.findall(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', html)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 로봇 파일 (robots.txt) 존중하기\n\n스크래핑 권한을 확인하려면 다음과 같이 robots.txt를 확인하세요:\n\n```python\nfrom urllib.robotparser import RobotFileParser\n\nrp = RobotFileParser()\nrp.set_url('https://example.com/robots.txt')\nrp.read()\ncan_scrape = rp.can_fetch('*', url)\n```\n\n# 11. 세션 및 쿠키 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n세션 유지 및 쿠키 처리를 위해:\n\n```python\nsession = requests.Session()\nsession.get('https://example.com/login')\nsession.cookies.set('key', 'value')  # 필요한 경우 쿠키 설정\nresponse = session.get('https://example.com/protected_page')\n```\n\n# 12. 브라우저 자동화를 통한 스크래이핑 (selenium 라이브러리)\n\n자바스크립트로 렌더링된 동적 콘텐츠를 스크래이핑하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom selenium import webdriver\nbrowser = webdriver.Chrome()\nbrowser.get('https://example.com')\ncontent = browser.page_source\n# BeautifulSoup 등을 사용하여 데이터를 파싱하고 추출합니다.\nbrowser.quit()\n```\n\n# 13. 웹 스크래핑에서의 오류 처리\n\n오류와 예외를 처리하는 방법:\n\n```python\ntry:\n    response = requests.get(url, timeout=5)\n    response.raise_for_status()  # 나쁜 상태 코드에 대해 오류를 발생시킵니다.\nexcept requests.exceptions.RequestException as e:\n    print(f\"오류 발생: {e}\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 14. 비동기 웹 스크래핑\n\n데이터를 빠르게 검색하기 위해 웹 사이트를 비동기적으로 스크랩하려면:\n\n```js\nimport aiohttp\nimport asyncio\n\nasync def fetch(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as response:\n            return await response.text()\n\nurls = ['https://example.com/page1', 'https://example.com/page2']\nloop = asyncio.get_event_loop()\npages = loop.run_until_complete(asyncio.gather(*(fetch(url) for url in urls)))\n```\n\n# 15. 데이터 저장 (CSV, 데이터베이스)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n크롤링한 데이터를 CSV 파일이나 데이터베이스에 저장하는 방법:\n\n```js\nimport csv\n\nwith open('output.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerow(['Title', 'URL'])\n    for article in articles:\n        writer.writerow([article['title'], article['url']])\n```\n\n# pip로 작업하기 (패키지 관리)\n\n# 1. 패키지 설치\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n거대한 저장소에서 라이브러리를 불러와서 그 힘을 환경에 통합하려면:\n\n```js\npip install numpy\n```\n\n## 2. 설치된 패키지 나열\n\n당신의 영역에 존재하는 라이브러리들을 조사하여 버전과 계열을 확인하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npip list\n```\n\n# 3. 패키지 업그레이드\n\n설치된 라이브러리에 강화된 기능과 능력을 부여하여 최신 버전으로 업그레이드하는 방법:\n\n```js\npip install --upgrade numpy\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 패키지 삭제\n\n패키지를 삭제하려면:\n\n```js\npip uninstall numpy\n```\n\n# 5. 패키지 검색\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n패키지를 검색 중입니다:\n\n```js\npip search \"data visualization\"\n```\n\n## 6. 패키지의 특정 버전 설치하기\n\n특정 버전을 설치하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npip install numpy==1.18.5\n```\n\n# 7. Requirements 파일 생성하기\n\nRequirements 파일:\n\n```js\npip freeze > requirements.txt\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 요구 사항 파일에서 패키지 설치하기\n\n친구야, 너의 요구 사항의 노트에 맞게 조율된 라이브러리의 교향곡을 창작할 때:\n\n```bash\npip install -r requirements.txt\n```\n\n# 9. 가상 환경 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n패키지 충돌을 관리하기 위해 가상 환경을 생성하세요:\n\n```js\n# 'venv'라는 이름의 가상 환경 생성\npython -m venv venv\n\n# 가상 환경 활성화\n# Windows에서는\n.\\venv\\Scripts\\activate\n\n# Unix나 MacOS에서는\nsource venv/bin/activate\n```\n\n# 10. 패키지 의존성 확인\n\n의존성 이해:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npip show numpy\n```\n\n# 일반 내장 함수 및 패키지 사용하기\n\n# 1. os - 운영 체제 인터페이스\n\n운영 체제와 상호 작용하기 위해서:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport os\ncurrent_directory = os.getcwd()  # 현재 작업 디렉토리 가져오기\n```\n\n## 2. sys - 시스템별 매개변수 및 함수\n\n시스템별 매개변수 및 함수에 액세스하려면:\n\n```python\nimport sys\nsys.exit()  # 스크립트 종료\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. datetime - 기본 날짜와 시간 유형\n\n날짜 및 시간을 다루려면:\n\n```python\nfrom datetime import datetime\nnow = datetime.now()  # 현재 날짜와 시간\n```\n\n# 4. math - 수학 함수\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n수학적인 연산을 수행하려면:\n\n```js\nimport math\nresult = math.sqrt(16)  # 제곱근\n```\n\n# 5. random - 유사 난수 생성\n\n유사 난수를 생성하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport random\nnumber = random.randint(1, 10)  # 1부터 10 사이의 난수 생성\n```\n\n# 6. json - JSON 인코더 및 디코더\n\nJSON 데이터를 구문 분석하고 생성하기 위해:\n\n```js\nimport json\njson_string = json.dumps({'name': 'Alice', 'age': 30})  # 딕셔너리를 JSON 문자열로 변환\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 정규 표현식을 사용하기\n\n정규 표현식을 사용하려면:\n\n```js\nimport re\nmatch = re.search('Hello', 'Hello, world!')  # 문자열에서 'Hello'를 검색함\n```\n\n# 8. urllib - URL 처리 모듈\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nURL과 함께 작업하려면:\n\n```python\nfrom urllib.request import urlopen\ncontent = urlopen('http://example.com').read()  # 웹 페이지의 내용을 가져오기\n```\n\n# 9. http - HTTP 모듈\n\nHTTP 서버를 만들고 HTTP 요청을 처리하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n```\n\n```js\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'<html><head><title>Python HTTP Server</title></head>')\n        self.wfile.write(b'<body><h1>Hello from a simple Python HTTP server!</h1></body></html>')\n\ndef run(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler):\n    server_address = ('', 8000)  # Serve on all addresses, port 8000\n    httpd = server_class(server_address, handler_class)\n    print(\"Server starting on port 8000...\")\n    httpd.serve_forever()\n\nif __name__ == '__main__':\n    run()\n```\n\n# 10. subprocess - Subprocess Management\n\n새로운 프로세스를 생성하고 그들의 입력/출력/에러 파이프에 연결하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport subprocess\nsubprocess.run(['ls', '-l'])  # 'ls -l' 명령 실행\n```\n\n# 11. 소켓 - 저수준 네트워킹 인터페이스\n\n네트워크 클라이언트와 서버를 만들려면:\n\n```js\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # TCP/IP 소켓 만들기\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 12. threading - 스레드 기반 병렬 처리\n\n동시에 코드를 실행하는 방법을 알아보세요:\n\n```js\nimport threading\ndef worker():\n    print(\"작업자 스레드 실행 중\")\nthread = threading.Thread(target=worker)\nthread.start()\n```\n\n# 13. multiprocessing - 프로세스 기반 병렬 처리\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n동시에 실행중인 프로세스를 관리하기 위해:\n\n```python\nfrom multiprocessing import Process\ndef worker():\n    print(\"작업자 프로세스\")\np = Process(target=worker)\np.start()\n```\n\n# 14. argparse - 명령행 옵션, 인수 및 하위 명령어를 위한 파서\n\n명령행 인수를 구문 분석하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport argparse\nparser = argparse.ArgumentParser(description=\"일부 정수를 처리합니다.\")\nargs = parser.parse_args()\n```\n\n# 15. logging - 로깅 시스템\n\n메시지를 기록하려면 (debug, info, warning, error 및 critical):\n\n```js\nimport logging\nlogging.warning('이것은 경고 메시지입니다.')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 16. unittest - 단위 테스트 프레임워크\n\n단위 테스트를 작성하고 실행하는 방법은 다음과 같습니다:\n\n```js\nimport unittest\nclass TestStringMethods(unittest.TestCase):\n    def test_upper(self):\n        self.assertEqual('foo'.upper(), 'FOO')\n```\n\n# 17. pathlib - 객체 지향형 파일 시스템 경로\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파일 시스템 경로를 객체 지향적으로 다루려면:\n\n```python\nfrom pathlib import Path\np = Path('.')\n```\n\n# 18. functools - 고계 함수 및 호출 가능 객체에 대한 작업\n\n고계 함수 및 호출 가능 객체에 대해 작업하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom functools import lru_cache\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n```\n\n# 19. collections - Container Data Types\n\n특수화된 컨테이너 데이터 타입 (deque, Counter, OrderedDict 등)을 사용하려면:\n\n```js\nfrom collections import Counter\nc = Counter('hello world')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 20. itertools - 효율적인 루핑을 위한 반복자 생성 함수\n\n효율적인 루핑을 위해 반복자를 생성하고 사용하는 방법은 다음과 같습니다:\n\n```python\nimport itertools\nfor combination in itertools.combinations('ABCD', 2):\n    print(combination)\n```\n\n# 21. hashlib - 안전한 해시 및 메시지 다이제스트 알고리즘\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터를 해싱하기 위해:\n\n```js\nimport hashlib\nhash_object = hashlib.sha256(b'Hello World')\nhex_dig = hash_object.hexdigest()\n```\n\n# 22. csv - CSV 파일 읽기 및 쓰기\n\nCSV 파일에서 읽고 쓰려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport csv\nwith open('file.csv', mode='r') as infile:\n    reader = csv.reader(infile)\n```\n\n# 23. xml.etree.ElementTree - The ElementTree XML API\n\nTo parse and create XML data:\n\n```python\nimport xml.etree.ElementTree as ET\ntree = ET.parse('file.xml')\nroot = tree.getroot()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 24. sqlite3 - SQLite 데이터베이스를 위한 DB-API 2.0 인터페이스\n\nSQLite 데이터베이스와 상호 작용하려면:\n\n```python\nimport sqlite3\nconn = sqlite3.connect('example.db')\n```\n\n# 25. tkinter - GUI 도구 상자\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nGUI 애플리케이션을 만들려면:\n\n```js\nimport tkinter as tk\nroot = tk.Tk()\n```\n\n# 26. pickle - Python 객체 직렬화\n\nPython 객체 구조를 직렬화하고 역직렬화하는 데 사용됩니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport pickle\nserialized_obj = pickle.dumps(obj)\n```\n\n# 27. io - Core Tools for Working with Streams\n\nTo handle streams (file-like objects):\n\n```python\nfrom io import StringIO\nf = StringIO(\"some initial text data\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 28. time - 시간 액세스 및 변환\n\n시간 관련 함수에 접근하기 위해서:\n\n```python\nimport time\ntime.sleep(1)  # 1초 동안 대기\n```\n\n# 29. calendar - 일반 캘린더 관련 함수\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n달력을 활용하려면:\n\n```python\nimport calendar\nprint(calendar.month(2023, 1))  # 2023년 1월 달력 출력\n```\n\n**30. queue - 동기화된 큐 클래스**\n\n멀티스레드 프로그래밍에 유용한 큐를 관리하세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom queue import Queue\nq = Queue()\n```\n\n# 31. shutil - 고수준 파일 작업\n\n고수준 파일 작업을 수행하려면 복사 및 아카이빙과 같은 작업을 사용합니다:\n\n```js\nimport shutil\nshutil.copyfile('source.txt', 'dest.txt')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 32. glob - Unix 스타일의 경로명 패턴 확장\n\n지정된 패턴과 일치하는 파일을 찾기:\n\n```js\nimport glob\nfor file in glob.glob(\"*.txt\"):\n    print(file)\n```\n\n# 33. tempfile - 임시 파일 및 디렉토리 생성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n임시 파일과 디렉토리를 생성하려면:\n\n```js\nimport tempfile\ntemp = tempfile.TemporaryFile()\n```\n\n# 34. bz2 - Bzip2 압축 지원\n\nbzip2 압축을 사용하여 데이터를 압축하고 해제하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport bz2\ncompressed = bz2.compress(b'여기에 데이터를 입력하세요')\n```\n\n# 35. gzip - Gzip 압축 지원\n\ngzip 압축을 사용하여 데이터를 압축 및 해제하는 방법:\n\n```js\nimport gzip\nwith gzip.open('file.txt.gz', 'wt') as f:\n    f.write('여기에 데이터를 입력하세요')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 36. ssl - TLS/SSL Wrapper for Socket Objects\n\n네트워크 소켓에서 TLS/SSL 암호화 및 피어 인증을 처리하기 위해:\n\n```js\nimport ssl\nssl.wrap_socket(sock)\n```\n\n# 37. imaplib - IMAP4 프로토콜 클라이언트\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nIMAP4를 통해 메일에 액세스하고 조작하려면:\n\n```js\nimport imaplib\nmail = imaplib.IMAP4_SSL('imap.example.com')\n```\n\n# 38. smtplib - SMTP 프로토콜 클라이언트\n\nSimple Mail Transfer Protocol (SMTP)를 사용하여 메일을 보내려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport smtplib\nserver = smtplib.SMTP('smtp.example.com', 587)\n```\n\n# 39. email - 이메일 메시지 관리\n\n이메일 메시지를 관리하려면 MIME 및 다른 RFC 2822 기반 메시지 문서를 포함합니다:\n\n```js\nfrom email.message import EmailMessage\nmsg = EmailMessage()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 40. base64 - Base16, Base32, Base64, Base85 Data Encodings\n\n베이스64를 사용하여 데이터를 인코딩 및 디코딩하는 방법:\n\n```python\nimport base64\nencoded_data = base64.b64encode(b'data to encode')\n```\n\n# 41. difflib - Deltas를 계산하는 도우미\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n시퀀스를 비교하고 사람이 읽기 쉬운 차이를 생성하려면:\n\n```python\nimport difflib\ndiff = difflib.ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n                     'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\nprint(''.join(diff))\n```\n\n# 42. gettext - 다국어 지역화 서비스\n\n파이썬 프로그램의 국제화를 위해:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport gettext\ngettext.install('myapp')\n```\n\n# 43. locale - Internationalization Services\n\nTo access a database of culture-specific data formats:\n\n```js\nimport locale\nlocale.setlocale(locale.LC_ALL, '')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 44. secrets - 시크릿 관리를 위한 안전한 무작위 숫자 생성\n\n시크릿 관리를 위해 안전한 무작위 숫자를 생성하려면 토큰이나 비밀번호와 같은 비밀을 생성합니다:\n\n```javascript\nimport secrets\nsecure_token = secrets.token_hex(16)\n```\n\n# 45. uuid - RFC 4122에 따른 UUID 개체\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n유니버설 유니크 식별자(UUID)를 생성하려면:\n\n```js\nimport uuid\nunique_id = uuid.uuid4()\n```\n\n# 46. html - 하이퍼텍스트 마크업 언어 지원\n\nHTML 개체를 처리하고 조작하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport html\nescaped = html.escape('<a href=\"https://example.com\">link</a>')\n```\n\n# 47. ftplib - FTP Protocol Client\n\nFTP 프로토콜을 통해 파일을 교환 및 상호 작용하기 위해:\n\n```js\nfrom ftplib import FTP\nftp = FTP('ftp.example.com')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 48. tarfile - Tar 아카이브 파일 읽고 쓰기\n\ntar 아카이브 파일을 다루는 방법입니다. 아카이빙하고 압축/압축해제할 수 있습니다:\n\n```js\nimport tarfile\nwith tarfile.open('sample.tar.gz', 'w:gz') as tar:\n    tar.add('sample.txt')\n```\n\n요약하자면, 여기까지가 전부에요. 여기서 제공된 목록이 빠르게 숙련되는 데 도움이 되었으면 좋겠어요. 만약 마음에 드셨다면 공유하거나 좋아요를 눌러주세요 (참 많은 도움이 됩니다!).\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 자세하고 포괄적인 Python 개발 가이드가 필요하시다면, 제가 실용적인 Python 개발에 대해 가장 좋은 자료로 발견한 두 권의 책이 있습니다. 이 책들을 강력히 추천합니다:\n\n- 파이썬 졸업반 — 제3판\n- 따분한 일 자동화하기 — 제2판\n\n읽어 주셔서 감사합니다! 댓글에 놓친 부분이 있다면 언제든 댓글로 남겨주세요!\n\n# Stackademic 🎓\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n끝까지 읽어주셔서 감사합니다. 떠나시기 전에:\n\n- 작가를 응원하고 팔로우해주세요! 👏\n- 저희를 팔로우하기: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼 방문하기: In Plain English | CoFeed | Venture | Cubed\n- 더 많은 콘텐츠: Stackademic.com\n","ogImage":{"url":"/assets/img/2024-07-07-UltimatePythonCheatSheetPracticalPythonForEverydayTasks_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-UltimatePythonCheatSheetPracticalPythonForEverydayTasks_0.png","tag":["Tech"],"readingTime":124},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/TIL/assets/img/2024-07-07-UltimatePythonCheatSheetPracticalPythonForEverydayTasks_0.png\">\n<p>(다른 내 궁극적인 안내서)</p>\n<p>이 치트 시트는 필요에 의해 탄생했습니다. 최근에 언어를 약간 떨어뜨린 후 새로운 Python 프로젝트에 뛰어 들어가야 했기 때문입니다.</p>\n<p>Python의 실용적인 구문과 형식을 항상 감사히 여겼습니다. 하지만 Node/Typescript 영역에서 시간을 보내다보니, Python의 최신 기능, 최고의 실천 방법 및 가장 영향적인 도구에 대한 빠른 복습이 필요했습니다. 나는 세부 사항에 얽매이지 않고 빠르게 속도를 내야 했고, 자주 사용해야 하는 작업 및 기능을 참조할 수 있도록 이 목록을 작성했습니다. 본질적으로, 프로그래밍 요구 사항의 80%를 다루는 Python의 중요한 20%를 이해하는 것이 필요했습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 가이드는 그 여정의 결말입니다. 그동안 만난 가장 실용적인 Python 지식, 통찰력 및 유용한 라이브러리의 모음을 제공합니다. 이것은 가장 가치 있게 여겼던 학습을 공유하기 위해 디자인되었습니다. 여러분의 프로젝트와 과제에 즉시 적용할 수 있는 방식으로 제시됩니다.</p>\n<p>저는 일반적으로 함께 작동하는 논리적인 영역으로 섹션을 나누어놨습니다. 관심 있는 영역으로 이동하여 특정 작업이나 주제와 관련된 가장 관련된 항목을 찾을 수 있습니다. 파일 작업, API 상호 작용, 스프레드시트 조작, 수학적 계산 및 목록 및 사전과 같은 데이터 구조 작업을 포함할 것입니다. 추가로, Python이 일반적으로 사용되는 도메인에서 흔히 사용되는 Python 도구상자를 향상시킬 수 있는 몇 가지 유용한 라이브러리를 강조할 것입니다.</p>\n<p>만약 치트 시트에 포함되어야 할 내용을 빠뜨렸다고 생각한다면, 댓글에서 알려주시면 목록을 업데이트하겠습니다!</p>\n<h1>파일 작업하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>1. 파일 읽기</h1>\n<p>파일의 전체 내용을 읽으려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'example.txt'</span>, <span class=\"hljs-string\">'r'</span>) <span class=\"hljs-keyword\">as</span> file:\n    content = file.read()\n    <span class=\"hljs-built_in\">print</span>(content)\n</code></pre>\n<h1>2. 파일 쓰기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>기존 내용을 덮어쓰기 위한 파일에 텍스트를 작성하는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'example.txt'</span>, <span class=\"hljs-string\">'w'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">file</span>:\n    file.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">'Hello, Python!'</span>)\n</code></pre>\n<h1>3. 파일에 추가</h1>\n<p>기존 파일 끝에 텍스트를 추가하는 방법:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'example.txt'</span>, <span class=\"hljs-string\">'a'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">file</span>:\n    file.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">'\\n이 줄을 추가합니다.'</span>)\n</code></pre>\n<h1>4. 리스트로 라인 읽기</h1>\n<p>파일을 라인별로 리스트에 읽어오려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'example.txt'</span>, <span class=\"hljs-string\">'r'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">file</span>:\n    lines = file.<span class=\"hljs-title function_\">readlines</span>()\n    <span class=\"hljs-title function_\">print</span>(lines)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>5. 파일의 각 라인을 반복하는 방법</h1>\n<p>파일의 각 라인을 처리하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'example.txt'</span>, <span class=\"hljs-string\">'r'</span>) <span class=\"hljs-keyword\">as</span> file:\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> file:\n        <span class=\"hljs-built_in\">print</span>(line.strip())\n</code></pre>\n<h1>6. 파일의 존재 여부 확인</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파일 작업을 수행하기 전에 파일이 존재하는지 확인하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">if</span> os.<span class=\"hljs-property\">path</span>.<span class=\"hljs-title function_\">exists</span>(<span class=\"hljs-string\">'example.txt'</span>):\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'파일이 존재합니다.'</span>)\n<span class=\"hljs-attr\">else</span>:\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'파일이 존재하지 않습니다.'</span>)\n</code></pre>\n<h1>7. 파일에 목록 쓰기</h1>\n<p>목록의 각 요소를 파일의 새 줄에 작성하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>lines = ['첫 번째 줄', '두 번째 줄', '세 번째 줄']\nwith open('example.txt', 'w') as file:\nfor line in lines:\nfile.write(f'{line}\\n')</p>\n<h1>8. 여러 파일에 대해 With 블록 사용하기</h1>\n<p>여러 파일을 동시에 처리하려면 다음과 같이 with 블록을 사용할 수 있습니다:</p>\n<p>with open('source.txt', 'r') as source, open('destination.txt', 'w') as destination:\ncontent = source.read()\ndestination.write(content)</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>9. 파일 삭제하기</h1>\n<p>해당 파일이 존재할 경우 안전하게 파일을 삭제하는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">if</span> os.<span class=\"hljs-property\">path</span>.<span class=\"hljs-title function_\">exists</span>(<span class=\"hljs-string\">'example.txt'</span>):\n    os.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">'example.txt'</span>)\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'파일이 삭제되었습니다.'</span>)\n<span class=\"hljs-attr\">else</span>:\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'해당 파일이 존재하지 않습니다.'</span>)\n</code></pre>\n<h1>10. 이진 파일 읽기 및 쓰기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>바이너리 모드로 파일을 읽거나 쓰려면(이미지, 비디오 등에 유용함):</p>\n<pre><code class=\"hljs language-js\"># 바이너리 파일 읽기\n<span class=\"hljs-keyword\">with</span> <span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'image.jpg'</span>, <span class=\"hljs-string\">'rb'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">file</span>:\n    content = file.<span class=\"hljs-title function_\">read</span>()\n# 바이너리 파일 쓰기\n<span class=\"hljs-keyword\">with</span> <span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'copy.jpg'</span>, <span class=\"hljs-string\">'wb'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">file</span>:\n    file.<span class=\"hljs-title function_\">write</span>(content)\n</code></pre>\n<h1>간단한 HTTP API 작업</h1>\n<h1>1. 기본 GET 요청</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>API 엔드포인트에서 GET 요청을 사용하여 데이터를 가져오는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> requests\nresponse = requests.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://api.example.com/data'</span>)\ndata = response.<span class=\"hljs-title function_\">json</span>()  # 응답이 <span class=\"hljs-title class_\">JSON</span> 형식일 경우\n<span class=\"hljs-title function_\">print</span>(data)\n</code></pre>\n<h2>2. 쿼리 매개변수를 포함한 GET 요청</h2>\n<p>쿼리 매개변수를 포함한 GET 요청을 보내려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> requests\nparams = {<span class=\"hljs-string\">'key1'</span>: <span class=\"hljs-string\">'value1'</span>, <span class=\"hljs-string\">'key2'</span>: <span class=\"hljs-string\">'value2'</span>}\nresponse = requests.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://api.example.com/search'</span>, params=params)\ndata = response.<span class=\"hljs-title function_\">json</span>()\n<span class=\"hljs-title function_\">print</span>(data)\n</code></pre>\n<h1>3. HTTP 오류 처리하기</h1>\n<p>가능한 HTTP 오류를 공손하게 처리하기 위해:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> requests\nresponse = requests.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://api.example.com/data'</span>)\n<span class=\"hljs-attr\">try</span>:\n    response.<span class=\"hljs-title function_\">raise_for_status</span>()  # 상태가 4xx, 5xx인 경우 <span class=\"hljs-title class_\">HTTPError</span>를 발생시킵니다\n    data = response.<span class=\"hljs-title function_\">json</span>()\n    <span class=\"hljs-title function_\">print</span>(data)\nexcept requests.<span class=\"hljs-property\">exceptions</span>.<span class=\"hljs-property\">HTTPError</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">err</span>:\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">'HTTP 오류 발생: {err}'</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4. API 요청에 대한 Timeout 설정</h1>\n<p>API 요청이 무한 대기되지 않도록 Timeout을 설정하는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-attr\">try</span>:\n    response = requests.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://api.example.com/data'</span>, timeout=<span class=\"hljs-number\">5</span>)  # <span class=\"hljs-title class_\">Timeout</span>은 초 단위로 설정\n    data = response.<span class=\"hljs-title function_\">json</span>()\n    <span class=\"hljs-title function_\">print</span>(data)\nexcept requests.<span class=\"hljs-property\">exceptions</span>.<span class=\"hljs-property\">Timeout</span>:\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'요청 시간이 초과되었습니다'</span>)\n</code></pre>\n<h1>5. 요청에서 헤더 사용하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>요청에 헤더를 포함하려면 (예: 권한을 위해):</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\nheaders = {<span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">'Bearer YOUR_ACCESS_TOKEN'</span>}\nresponse = requests.get(<span class=\"hljs-string\">'https://api.example.com/protected'</span>, headers=headers)\ndata = response.json()\n<span class=\"hljs-built_in\">print</span>(data)\n</code></pre>\n<h1>6. JSON Payload을 사용한 POST 요청</h1>\n<p>JSON 페이로드를 사용하여 POST 요청을 통해 API 엔드포인트로 데이터를 전송하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> requests\npayload = {<span class=\"hljs-string\">'key1'</span>: <span class=\"hljs-string\">'value1'</span>, <span class=\"hljs-string\">'key2'</span>: <span class=\"hljs-string\">'value2'</span>}\nheaders = {<span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>}\nresponse = requests.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'https://api.example.com/submit'</span>, json=payload, headers=headers)\n<span class=\"hljs-title function_\">print</span>(response.<span class=\"hljs-title function_\">json</span>())\n</code></pre>\n<h1>7. 응답 인코딩 처리</h1>\n<p>올바르게 응답 인코딩을 처리하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> requests\nresponse = requests.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://api.example.com/data'</span>)\nresponse.<span class=\"hljs-property\">encoding</span> = <span class=\"hljs-string\">'utf-8'</span>  # 응답 형식과 일치하도록 인코딩 설정\ndata = response.<span class=\"hljs-property\">text</span>\n<span class=\"hljs-title function_\">print</span>(data)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>8. 세션과 함께 Requests 사용하기</h1>\n<p>같은 호스트로 여러 요청을 보내기 위해 세션 객체를 사용하면 성능을 향상시킬 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">with</span> requests.<span class=\"hljs-title class_\">Session</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">session</span>:\n    session.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">update</span>({<span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">'Bearer 여러분의_액세스_토큰'</span>})\n    response = session.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://api.example.com/data'</span>)\n    <span class=\"hljs-title function_\">print</span>(response.<span class=\"hljs-title function_\">json</span>())\n</code></pre>\n<h1>9. 리디렉션 처리</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>리퀘스트에서 리디렉션을 처리하거나 비활성화하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> requests\nresponse = requests.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://api.example.com/data'</span>, allow_redirects=<span class=\"hljs-title class_\">False</span>)\n<span class=\"hljs-title function_\">print</span>(response.<span class=\"hljs-property\">status_code</span>)\n</code></pre>\n<h3>10. 대용량 응답 스트리밍</h3>\n<p>대용량 응답을 처리하기 위해 모두 메모리에 로드하는 대신 청크 단위로 처리하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-json\">import requests\nresponse = requests.get('https<span class=\"hljs-punctuation\">:</span><span class=\"hljs-comment\">//api.example.com/large-data', stream=True)</span>\nfor chunk in response.iter_content(chunk_size=<span class=\"hljs-number\">1024</span>)<span class=\"hljs-punctuation\">:</span>\n    process(chunk)  # 실제 처리 함수로 'process'를 교체하세요\n</code></pre>\n<h1>리스트 작업</h1>\n<h1>1. 리스트 만들기</h1>\n<p>리스트를 만들려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># 신비한 요소 목록\nelements = [<span class=\"hljs-string\">'Earth'</span>, <span class=\"hljs-string\">'Air'</span>, <span class=\"hljs-string\">'Fire'</span>, <span class=\"hljs-string\">'Water'</span>]\n</code></pre>\n<h2>2. 리스트에 추가하기</h2>\n<p>리스트 끝에 새 요소를 추가하려면:</p>\n<pre><code class=\"hljs language-js\">elements.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">\"Aether\"</span>);\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>3. 리스트에 삽입하기</h1>\n<p>특정 위치에 요소를 삽입하려면:</p>\n<pre><code class=\"hljs language-js\"># 인덱스 <span class=\"hljs-number\">1</span>에 <span class=\"hljs-string\">'Spirit'</span> 삽입\nelements.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Spirit'</span>)\n</code></pre>\n<h1>4. 리스트에서 제거하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>리스트에서 값을 기준으로 요소를 제거하는 방법은 다음과 같아요:</p>\n<pre><code class=\"hljs language-js\">elements.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">'Earth'</span>)  # <span class=\"hljs-string\">'Earth'</span>의 첫 번째 발생을 제거합니다\n</code></pre>\n<h1>5. 리스트에서 요소를 뽑아내기</h1>\n<p>주어진 인덱스에서 요소를 제거하고 반환하는 방법은 다음과 같아요:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">last_element = elements.<span class=\"hljs-title function_\">pop</span>()  # 마지막 요소를 제거하고 반환합니다\n</code></pre>\n<h1>6. 요소의 인덱스 찾기</h1>\n<p>첫 번째 발생 요소의 인덱스를 찾으려면:</p>\n<pre><code class=\"hljs language-js\">index_of_air = elements.<span class=\"hljs-title function_\">index</span>(<span class=\"hljs-string\">\"Air\"</span>);\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>7. 리스트 슬라이싱</h1>\n<p>리스트를 슬라이스하여 하위 리스트를 얻으려면:</p>\n<pre><code class=\"hljs language-js\"># 인덱스 <span class=\"hljs-number\">1</span>부터 <span class=\"hljs-number\">3</span>까지 요소 가져오기\nsub_elements = elements[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">4</span>]\n</code></pre>\n<h1>8. 리스트 컴프리헨션</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>기존 목록의 각 요소에 식을 적용하여 새 목록을 만들려면:</p>\n<pre><code class=\"hljs language-js\"># 각 요소의 길이로 새 목록 생성\nlengths = [<span class=\"hljs-title function_\">len</span>(element) <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> elements]\n</code></pre>\n<ol start=\"9\">\n<li>목록 정렬</li>\n</ol>\n<p>목록을 오름차순으로 정렬하려면 (위치 기준으로):</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">elements.<span class=\"hljs-title function_\">sort</span>();\n</code></pre>\n<h1>10. 리스트 뒤집기</h1>\n<p>리스트의 요소를 제자리에서 뒤집으려면:</p>\n<pre><code class=\"hljs language-js\">elements.<span class=\"hljs-title function_\">reverse</span>();\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>딕셔너리 사용하기</h1>\n<h1>1. 딕셔너리 생성하기</h1>\n<p>새로운 딕셔너리를 만들려면:</p>\n<pre><code class=\"hljs language-js\"># 요소와 그들의 기호에 관한 책\nelements = {<span class=\"hljs-string\">'Hydrogen'</span>: <span class=\"hljs-string\">'H'</span>, <span class=\"hljs-string\">'Helium'</span>: <span class=\"hljs-string\">'He'</span>, <span class=\"hljs-string\">'Lithium'</span>: <span class=\"hljs-string\">'Li'</span>}\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>2. 항목 추가 또는 업데이트</h1>\n<p>새로운 항목을 추가하거나 기존 항목을 업데이트하려면:</p>\n<pre><code class=\"hljs language-js\">elements[<span class=\"hljs-string\">'Carbon'</span>] = <span class=\"hljs-string\">'C'</span>  # <span class=\"hljs-string\">'Carbon'</span>을 추가하거나 그 값이 <span class=\"hljs-string\">'C'</span>로 업데이트됩니다\n</code></pre>\n<h1>3. 항목 삭제</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>사전에서 항목을 삭제하려면:</p>\n<pre><code class=\"hljs language-js\">del elements[<span class=\"hljs-string\">'Lithium'</span>]  # <span class=\"hljs-string\">'Lithium'</span> 키와 값을 삭제합니다\n</code></pre>\n<h1>4. 키 존재 여부 확인</h1>\n<p>키가 사전 안에 있는지 확인하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'Helium'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">elements</span>:\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'Helium is present'</span>)\n</code></pre>\n<h1>5. 키를 반복하는 법</h1>\n<p>딕셔너리의 키를 반복하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">elements</span>:\n    <span class=\"hljs-title function_\">print</span>(element)  # 각 키를 출력합니다\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>6. 값 순회하기</h2>\n<p>딕셔너리에서 값들을 순회하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">for</span> symbol <span class=\"hljs-keyword\">in</span> elements.values():\n    <span class=\"hljs-built_in\">print</span>(symbol)  <span class=\"hljs-comment\"># 각 값 출력하기</span>\n</code></pre>\n<h2>7. 항목 순회하기</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>두 가지를 통합하여 여행하기:</p>\n<pre><code class=\"hljs language-js\">elements.<span class=\"hljs-title function_\">items</span>()안에서 element, symbol에 대해:\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">'{element}: {symbol}'</span>)\n</code></pre>\n<h1>8. 사전 컴프리헨션</h1>\n<p>반복 가능한 항목 위에 주문을 통해 새로운 사전을 창조하다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>0부터 4까지의 숫자의 제곱</h1>\n<p>squares = {x: x**2 for x in range(5)}</p>\n<h1>9. 딕셔너리 병합</h1>\n<p>두 개 이상의 딕셔너리를 병합하여 그 항목들의 새로운 동맹을 형성합니다:</p>\n<p>alchemists = {'Paracelsus': 'Mercury'}\nphilosophers = {'Plato': 'Aether'}\nmerged = {**alchemists, **philosophers} # Python 3.5+</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>10. 기본값과 함께 값 가져오기</h1>\n<p>값을 안전하게 가져오려면, 없는 키에 대한 기본값을 제공합니다:</p>\n<pre><code class=\"hljs language-js\">element = elements.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'Neon'</span>, <span class=\"hljs-string\">'Unknown'</span>)  # <span class=\"hljs-string\">'Neon'</span>이 발견되지 않을 경우 <span class=\"hljs-string\">'Unknown'</span>을 반환합니다\n</code></pre>\n<h1>운영 체제와 작업하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>1. 파일 경로 탐색</h1>\n<p>파일 경로를 만들고 분해하여 다양한 환경(운영 체제)에서 호환성을 보장합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> os\n# 운영 체제와 호환되는 경로 만들기\npath = os.<span class=\"hljs-property\">path</span>.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">'mystic'</span>, <span class=\"hljs-string\">'forest'</span>, <span class=\"hljs-string\">'artifact.txt'</span>)\n# 고서가 있는 디렉토리 검색\ndirectory = os.<span class=\"hljs-property\">path</span>.<span class=\"hljs-title function_\">dirname</span>(path)\n# 유물의 이름 공개\nartifact_name = os.<span class=\"hljs-property\">path</span>.<span class=\"hljs-title function_\">basename</span>(path)\n</code></pre>\n<h1>2. 디렉터리 내용 나열</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>신비로운 디렉토리 안의 모든 엔티티를 공개하기 위해:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> os\ncontents = os.<span class=\"hljs-title function_\">listdir</span>(<span class=\"hljs-string\">'enchanted_grove'</span>)\n<span class=\"hljs-title function_\">print</span>(contents)\n</code></pre>\n<h2>3. 디렉토리 생성하기</h2>\n<p>파일 시스템의 직물 속에 새로운 디렉토리를 창조하기 위해:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-comment\"># 단일 디렉토리 생성</span>\nos.mkdir(<span class=\"hljs-string\">'alchemy_lab'</span>)\n<span class=\"hljs-comment\"># 디렉토리 계층 생성</span>\nos.makedirs(<span class=\"hljs-string\">'alchemy_lab/potions/elixirs'</span>)\n</code></pre>\n<h1>4. 파일 및 디렉토리 삭제</h1>\n<p>파일이나 디렉토리를 지우고, 그 본질을 추방하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-comment\"># 파일 삭제</span>\nos.remove(<span class=\"hljs-string\">'unnecessary_scroll.txt'</span>)\n<span class=\"hljs-comment\"># 빈 디렉토리 삭제</span>\nos.rmdir(<span class=\"hljs-string\">'abandoned_hut'</span>)\n<span class=\"hljs-comment\"># 디렉토리와 그 내용물 삭제</span>\n<span class=\"hljs-keyword\">import</span> shutil\nshutil.rmtree(<span class=\"hljs-string\">'cursed_cavern'</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>5. 셸 명령 실행하기</h1>\n<p>파이썬에서 쉘의 고대적인 힘을 직접 호출하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> subprocess\n<span class=\"hljs-comment\"># 'echo' 주문 호출</span>\nresult = subprocess.run([<span class=\"hljs-string\">'echo'</span>, <span class=\"hljs-string\">'Revealing the arcane'</span>], capture_output=<span class=\"hljs-literal\">True</span>, text=<span class=\"hljs-literal\">True</span>)\n<span class=\"hljs-built_in\">print</span>(result.stdout)\n</code></pre>\n<h1>6. 환경 변수 사용하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>에테리얼 환경 변수를 읽고 기록하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-comment\"># 'PATH' 변수 읽기</span>\npath = os.environ.get(<span class=\"hljs-string\">'PATH'</span>)\n<span class=\"hljs-comment\"># 새 환경 변수 생성</span>\nos.environ[<span class=\"hljs-string\">'MAGIC'</span>] = <span class=\"hljs-string\">'Arcane'</span>\n</code></pre>\n<h1>7. 현재 작업 디렉토리 변경</h1>\n<p>파일 시스템 내에서 다른 디렉토리로 이동하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> os\n# <span class=\"hljs-string\">'arcane_library'</span> 디렉토리로 이동\nos.<span class=\"hljs-title function_\">chdir</span>(<span class=\"hljs-string\">'arcane_library'</span>)\n</code></pre>\n<h1>8. 경로의 존재 및 유형</h1>\n<p>경로의 존재 및 유형을 구분하는 방법 — 파일인지 디렉토리인지 확인하기:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> os\n# 경로가 존재하는지 확인\nexists = os.<span class=\"hljs-property\">path</span>.<span class=\"hljs-title function_\">exists</span>(<span class=\"hljs-string\">'mysterious_ruins'</span>)\n# 경로가 디렉토리인지 확인\nis_directory = os.<span class=\"hljs-property\">path</span>.<span class=\"hljs-title function_\">isdir</span>(<span class=\"hljs-string\">'mysterious_ruins'</span>)\n# 경로가 파일인지 확인\nis_file = os.<span class=\"hljs-property\">path</span>.<span class=\"hljs-title function_\">isfile</span>(<span class=\"hljs-string\">'ancient_manuscript.txt'</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>9. 임시 파일 작업</h1>\n<p>임시 파일과 디렉토리를 소환하려면, 일시적이며 덧없습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> tempfile\n# 임시 파일 생성\ntemp_file = tempfile.<span class=\"hljs-title class_\">NamedTemporaryFile</span>(<span class=\"hljs-keyword\">delete</span>=<span class=\"hljs-title class_\">False</span>)\n<span class=\"hljs-title function_\">print</span>(temp_file.<span class=\"hljs-property\">name</span>)\n# 임시 디렉토리 생성\ntemp_dir = tempfile.<span class=\"hljs-title class_\">TemporaryDirectory</span>()\n<span class=\"hljs-title function_\">print</span>(temp_dir.<span class=\"hljs-property\">name</span>)\n</code></pre>\n<h1>10. 시스템 정보 가져오기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>호스트 시스템에 대한 정보, 시스템 이름 및 해당 지원하는 마법을 알아보려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> platform\n# 운영 체제 확인\nos_name = os.<span class=\"hljs-property\">name</span>  # <span class=\"hljs-string\">'posix'</span>, <span class=\"hljs-string\">'nt'</span>, <span class=\"hljs-string\">'java'</span>\n# 자세한 시스템 정보 확인\nsystem_info = platform.<span class=\"hljs-title function_\">system</span>()  # <span class=\"hljs-string\">'Linux'</span>, <span class=\"hljs-string\">'Windows'</span>, <span class=\"hljs-string\">'Darwin'</span>\n</code></pre>\n<h1>CLI 작업 — 표준 입력, 표준 출력, 표준 에러</h1>\n<h1>1. 사용자 입력 읽기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>STDIN에서 입력 받기:</p>\n<pre><code class=\"hljs language-js\">user_input = <span class=\"hljs-title function_\">input</span>(<span class=\"hljs-string\">\"지혜를 나누어주세요: \"</span>)\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"당신이 공유한 내용: {user_input}\"</span>)\n</code></pre>\n<h1>2. STDOUT로 출력하기</h1>\n<p>콘솔에 메시지 출력하기:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Behold, the message of the ancients!\"</span>);\n</code></pre>\n<h1>3. 포맷팅된 출력</h1>\n<p>우아하고 정확하게 변수를 메시지에 작살낼 때:</p>\n<pre><code class=\"hljs language-js\">name = <span class=\"hljs-string\">\"Merlin\"</span>\nage = <span class=\"hljs-number\">300</span>\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{name}, of {age} years, speaks of forgotten lore.\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4. 표준 입력에서 행 읽기</h1>\n<p>표준 입력에서 행마다 공백을 제거하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> sys.<span class=\"hljs-property\">stdin</span>:\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Echo from the void: {line.strip()}\"</span>)\n</code></pre>\n<h1>5. 표준 에러로 쓰기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>STDERR로 메시지를 보내려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> sys\nsys.<span class=\"hljs-property\">stderr</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">\"조심하세요! 그 길에는 위험이 가득합니다.\\n\"</span>)\n</code></pre>\n<h1>6. STDOUT 리다이렉션</h1>\n<p>STDOUT을 리다이렉션하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> sys\noriginal_stdout = sys.<span class=\"hljs-property\">stdout</span>  # 원래 <span class=\"hljs-variable constant_\">STDOUT</span>을 보존합니다\n<span class=\"hljs-keyword\">with</span> <span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'mystic_log.txt'</span>, <span class=\"hljs-string\">'w'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">f</span>:\n    sys.<span class=\"hljs-property\">stdout</span> = f  # <span class=\"hljs-variable constant_\">STDOUT</span>을 파일로 리디렉션합니다\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"이 메시지는 mystic_log.txt 파일 안에 새겨졌습니다.\"</span>)\nsys.<span class=\"hljs-property\">stdout</span> = original_stdout  # <span class=\"hljs-variable constant_\">STDOUT</span>을 본래의 상태로 복원합니다\n</code></pre>\n<h1>7. STDERR 리디렉션</h1>\n<p>STDERR 리디렉션:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">with</span> <span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'warnings.txt'</span>, <span class=\"hljs-string\">'w'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">f</span>:\n    sys.<span class=\"hljs-property\">stderr</span> = f  # <span class=\"hljs-variable constant_\">STDERR</span>를 리디렉션합니다\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"이 경고는 warnings.txt 파일 안에 봉인되었습니다.\"</span>, file=sys.<span class=\"hljs-property\">stderr</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>8. 비밀번호 요청하기</h1>\n<p>비밀번호를 요청하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> getpass\nsecret_spell = getpass.getpass(<span class=\"hljs-string\">\"비밀 주문을 속삭여주세요: \"</span>)\n</code></pre>\n<h1>9. 명령줄 인수</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>커맨드 라인 인수를 처리하고 작업하는 중:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-comment\"># 스크립트의 이름은 첫 번째 인수이며, 호출자가 전달한 것이 이어집니다</span>\nscript, first_arg, second_arg = sys.argv\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"신성한 토큰과 함께 호출됨: <span class=\"hljs-subst\">{first_arg}</span> 및 <span class=\"hljs-subst\">{second_arg}</span>\"</span>)\n</code></pre>\n<h2>10. 복잡한 CLI 상호작용을 위한 Argparse 사용</h2>\n<p>설명과 옵션/인수 추가하기:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> argparse\nparser = argparse.<span class=\"hljs-title class_\">ArgumentParser</span>(description=<span class=\"hljs-string\">\"Summon the power of the ancient scripts.\"</span>)\nparser.<span class=\"hljs-title function_\">add_argument</span>(<span class=\"hljs-string\">'spell'</span>, help=<span class=\"hljs-string\">\"Specify the spell to cast\"</span>)\nparser.<span class=\"hljs-title function_\">add_argument</span>(<span class=\"hljs-string\">'--power'</span>, type=int, help=<span class=\"hljs-string\">\"Indicate the power level of the spell\"</span>)\nargs = parser.<span class=\"hljs-title function_\">parse_args</span>()\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Invoking {args.spell} with a power level of {args.power}\"</span>)\n</code></pre>\n<h1>Working with Mathematical Operations and Permutations</h1>\n<h1>1. Basic Arithmetic Operations</h1>\n<p>For basic arithmetic operations:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">sum = <span class=\"hljs-number\">7</span> + <span class=\"hljs-number\">3</span>  # 더하기\ndifference = <span class=\"hljs-number\">7</span> - <span class=\"hljs-number\">3</span>  # 빼기\nproduct = <span class=\"hljs-number\">7</span> * <span class=\"hljs-number\">3</span>  # 곱하기\nquotient = <span class=\"hljs-number\">7</span> / <span class=\"hljs-number\">3</span>  # 나누기\nremainder = <span class=\"hljs-number\">7</span> % <span class=\"hljs-number\">3</span>  # 나머지\npower = <span class=\"hljs-number\">7</span> ** <span class=\"hljs-number\">3</span>  # 지수\n</code></pre>\n<h1>2. 복소수 다루기</h1>\n<p>복소수를 다루기 위해:</p>\n<pre><code class=\"hljs language-js\">z = <span class=\"hljs-title function_\">complex</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)  # 복소수 <span class=\"hljs-number\">2</span> + 3j 생성\nreal_part = z.<span class=\"hljs-property\">real</span>  # 실수부 추출\nimaginary_part = z.<span class=\"hljs-property\">imag</span>  # 허수부 추출\nconjugate = z.<span class=\"hljs-title function_\">conjugate</span>()  # 켤레복소수 구하기\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>3. 수학 함수</h1>\n<p>일반적인 수학 함수:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> math\nroot = math.<span class=\"hljs-title function_\">sqrt</span>(<span class=\"hljs-number\">16</span>)  # 제곱근\nlogarithm = math.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">10</span>)  # 밑이 <span class=\"hljs-number\">10</span>인 <span class=\"hljs-number\">100</span>의 로그값\nsine = math.<span class=\"hljs-title function_\">sin</span>(math.<span class=\"hljs-property\">pi</span> / <span class=\"hljs-number\">2</span>)  # <span class=\"hljs-number\">90</span>도의 사인 (라디안 단위)\n</code></pre>\n<h1>4. 순열 생성</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래는 주어진 집합에서 순열을 생성하는 간단한 방법입니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> itertools <span class=\"hljs-keyword\">import</span> permutations\npaths = permutations([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])  <span class=\"hljs-comment\"># 리스트 [1, 2, 3]의 모든 순열을 생성합니다.</span>\n<span class=\"hljs-keyword\">for</span> path <span class=\"hljs-keyword\">in</span> paths:\n    <span class=\"hljs-built_in\">print</span>(path)\n</code></pre>\n<h1>5. 조합 생성하기</h1>\n<p>조합을 생성하는 간단한 방법입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> itertools <span class=\"hljs-keyword\">import</span> combinations\ncombos = <span class=\"hljs-title function_\">combinations</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">2</span>)  # 모든 <span class=\"hljs-number\">2</span>개 요소 조합 생성\n<span class=\"hljs-keyword\">for</span> combo <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">combos</span>:\n    <span class=\"hljs-title function_\">print</span>(combo)\n</code></pre>\n<h1>6. 랜덤 숫자 생성</h1>\n<p>랜덤 숫자를 얻으려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> random\nnum = random.<span class=\"hljs-title function_\">randint</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>)  # <span class=\"hljs-number\">1</span>부터 <span class=\"hljs-number\">100</span> 사이의 랜덤 정수 생성\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>7. 분수 작업하기</h1>\n<p>분수를 다룰 때는:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> fractions <span class=\"hljs-keyword\">import</span> Fraction\nf = Fraction(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)  <span class=\"hljs-comment\"># 3/4 분수를 생성합니다</span>\n<span class=\"hljs-built_in\">print</span>(f + <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\"># 분수와 정수를 더합니다</span>\n</code></pre>\n<h1>8. 통계 함수</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>평균, 중앙값 및 표준 편차를 얻으려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> statistics\ndata = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\nmean = statistics.<span class=\"hljs-title function_\">mean</span>(data)  # 평균\nmedian = statistics.<span class=\"hljs-title function_\">median</span>(data)  # 중앙값\nstdev = statistics.<span class=\"hljs-title function_\">stdev</span>(data)  # 표준 편차\n</code></pre>\n<h1>9. 삼각 함수</h1>\n<p>삼각함수 작업하기:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> math\nangle_rad = math.<span class=\"hljs-title function_\">radians</span>(<span class=\"hljs-number\">60</span>)  # <span class=\"hljs-number\">60</span>도를 라디안으로 변환\ncosine = math.<span class=\"hljs-title function_\">cos</span>(angle_rad)  # 해당 각도의 코사인\n</code></pre>\n<h1>10. 무한대 및 NaN 다루기</h1>\n<p>무한대 및 NaN을 다루는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> math\ninfinity = math.<span class=\"hljs-property\">inf</span>  # 무한대 표현\nnot_a_number = math.<span class=\"hljs-property\">nan</span>  # 숫자가 아닌 값을 나타내는 <span class=\"hljs-title class_\">NaN</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>데이터베이스 작업</h1>\n<h1>1. 연결 설정</h1>\n<p>포스트그레스 데이터베이스에 연결을 생성하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> psycopg2\nconnection = psycopg2.<span class=\"hljs-title function_\">connect</span>(\n    dbname=<span class=\"hljs-string\">'your_database'</span>,\n    user=<span class=\"hljs-string\">'your_username'</span>,\n    password=<span class=\"hljs-string\">'your_password'</span>,\n    host=<span class=\"hljs-string\">'your_host'</span>\n)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>2. 커서 만들기</h1>\n<p>데이터베이스 커서를 생성하여 레코드를 이동하고 조작할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">cursor = connection.<span class=\"hljs-title function_\">cursor</span>();\n</code></pre>\n<h1>3. 쿼리 실행</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>데이터베이스에서 데이터 선택하기:</p>\n<pre><code class=\"hljs language-js\">cursor.<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">\"SELECT * FROM your_table\"</span>);\n</code></pre>\n<h2>4. 쿼리 결과 가져오기</h2>\n<p>커서를 사용하여 데이터 가져오기:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">records = cursor.<span class=\"hljs-title function_\">fetchall</span>()\n<span class=\"hljs-keyword\">for</span> record <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">records</span>:\n    <span class=\"hljs-title function_\">print</span>(record)\n</code></pre>\n<h1>5. 레코드 삽입</h1>\n<p>데이터를 데이터베이스 테이블에 삽입하는 방법:</p>\n<pre><code class=\"hljs language-js\">cursor.<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">\"INSERT INTO your_table (column1, column2) VALUES (%s, %s)\"</span>, (<span class=\"hljs-string\">'value1'</span>, <span class=\"hljs-string\">'value2'</span>))\nconnection.<span class=\"hljs-title function_\">commit</span>()  # 트랜잭션을 완료합니다\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>6. 레코드 업데이트</h1>\n<p>레코드를 변경하려면:</p>\n<pre><code class=\"hljs language-js\">cursor.<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">\"UPDATE your_table SET column1 = %s WHERE column2 = %s\"</span>, (<span class=\"hljs-string\">\"new_value\"</span>, <span class=\"hljs-string\">\"condition_value\"</span>));\nconnection.<span class=\"hljs-title function_\">commit</span>();\n</code></pre>\n<h1>7. 레코드 삭제</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>테이블에서 레코드를 삭제하려면:</p>\n<pre><code class=\"hljs language-js\">cursor.<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">\"DELETE FROM your_table WHERE condition_column = %s\"</span>, (<span class=\"hljs-string\">'condition_value'</span>,))\nconnection.<span class=\"hljs-title function_\">commit</span>()\n</code></pre>\n<h1>8. 테이블 생성</h1>\n<p>새로운 테이블을 생성하려면, 구조를 정의하세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">cursor.<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    CREATE TABLE your_new_table (\n        id SERIAL PRIMARY KEY,\n        column1 VARCHAR(255),\n        column2 INTEGER\n    )\n\"</span><span class=\"hljs-string\">\"\"</span>)\nconnection.<span class=\"hljs-title function_\">commit</span>()\n</code></pre>\n<h1>9. 테이블 삭제하기</h1>\n<p>테이블을 삭제하려면:</p>\n<pre><code class=\"hljs language-js\">cursor.<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">\"DROP TABLE if exists your_table\"</span>);\nconnection.<span class=\"hljs-title function_\">commit</span>();\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>10. 트랜잭션 사용하기</h1>\n<p>원자성을 위해 트랜잭션을 사용하는 방법입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">try</span>:\n    cursor.<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">\"첫 번째 트랜잭션 쿼리\"</span>)\n    cursor.<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">\"두 번째 트랜잭션 쿼리\"</span>)\n    connection.<span class=\"hljs-title function_\">commit</span>()  # 모든 것이 잘되면 커밋\nexcept <span class=\"hljs-title class_\">Exception</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">e</span>:\n    connection.<span class=\"hljs-title function_\">rollback</span>()  # 문제 발생 시 롤백\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"오류 발생: {e}\"</span>)\n</code></pre>\n<h1>비동기 IO 작업하기 (비동기 프로그래밍)</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>1. 비동기 함수 정의하기</h1>\n<p>async 함수를 선언하려면 다음과 같이 작성할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">fetch_data</span>():\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"데이터 가져오는 중...\"</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.<span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">2</span>)  # I/O 작업 시뮬레이션\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"데이터를 가져왔습니다.\"</span>)\n</code></pre>\n<h1>2. 비동기 함수 실행하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>비동기 함수를 호출하고 기다리려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch_data</span>()\nasyncio.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title function_\">main</span>())\n</code></pre>\n<h1>3. 여러 코루틴 기다리기</h1>\n<p>여러 비동기 함수를 호출하고 모두 기다리려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\">비동기로 주요 함수():\n    작업<span class=\"hljs-number\">1</span> = 데이터_가져오기()\n    작업<span class=\"hljs-number\">2</span> = 데이터_가져오기()\n    <span class=\"hljs-keyword\">await</span> asyncio.gather(작업<span class=\"hljs-number\">1</span>, 작업<span class=\"hljs-number\">2</span>)\nasyncio.run(주요 함수())\n</code></pre>\n<h2>4. 작업 생성하기</h2>\n<p>작업을 보내려면:</p>\n<pre><code class=\"hljs language-python\">비동기로 주요 함수():\n    작업<span class=\"hljs-number\">1</span> = asyncio.create_task(데이터_가져오기())\n    작업<span class=\"hljs-number\">2</span> = asyncio.create_task(데이터_가져오기())\n    <span class=\"hljs-keyword\">await</span> 작업<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">await</span> 작업<span class=\"hljs-number\">2</span>\nasyncio.run(주요 함수())\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>5. 비동기 반복</h1>\n<p>비동기적으로 횡행하면서 다른 함수에 시간을 주는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">fetch_item</span>(item):\n    <span class=\"hljs-keyword\">await</span> asyncio.<span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">1</span>)  # I/O 작업을 시뮬레이션합니다\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{item}을 가져왔습니다\"</span>)\n<span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">main</span>():\n    items = [<span class=\"hljs-string\">'물약'</span>, <span class=\"hljs-string\">'스크롤'</span>, <span class=\"hljs-string\">'마법봉'</span>]\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">items</span>:\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch_item</span>(item)\nasyncio.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title function_\">main</span>())\n</code></pre>\n<h1>6. 비동기적인 컨텍스트 매니저 사용하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>비동기 함수 내에서 리소스가 적절하게 관리되도록 하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">async_context_manager</span>():\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"컨텍스트 진입 중\"</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.<span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"컨텍스트 종료 중\"</span>)\n<span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title function_\">async_context_manager</span>():\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"컨텍스트 내부에 있음\"</span>)\nasyncio.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title function_\">main</span>())\n</code></pre>\n<h1>7. 비동기 코드에서 예외 처리</h1>\n<p>비동기 함수에서 에러를 우아하게 처리하고 관리하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">risky_spell</span>():\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">\"주문이 실패했습니다!\"</span>)\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">await</span> risky_spell()\n    <span class=\"hljs-keyword\">except</span> ValueError <span class=\"hljs-keyword\">as</span> e:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"에러가 발생했습니다: <span class=\"hljs-subst\">{e}</span>\"</span>)\nasyncio.run(main())\n</code></pre>\n<h1>8. 비동기 생성기</h1>\n<p>개별 시간에 도착하는 각각의 비동기 생성기를 생성하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fetch_items</span>():\n    items = [<span class=\"hljs-string\">'크리스탈'</span>, <span class=\"hljs-string\">'부적'</span>, <span class=\"hljs-string\">'단검'</span>]\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> items:\n        <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">yield</span> item\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> fetch_items():\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{item}</span>을(를) 찾았습니다\"</span>)\nasyncio.run(main())\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>9. 세마포어 사용하기</h1>\n<p>동시 작업의 수를 제한하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">guarded_spell</span>(semaphore, item):\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-attr\">semaphore</span>:\n        <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{item} 처리 중\"</span>)\n        <span class=\"hljs-keyword\">await</span> asyncio.<span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">main</span>():\n    semaphore = asyncio.<span class=\"hljs-title class_\">Semaphore</span>(<span class=\"hljs-number\">2</span>)  # 동시 작업 <span class=\"hljs-number\">2</span>개 허용\n    <span class=\"hljs-keyword\">await</span> asyncio.<span class=\"hljs-title function_\">gather</span>(*(<span class=\"hljs-title function_\">guarded_spell</span>(semaphore, i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">5</span>)))\nasyncio.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title function_\">main</span>())\n</code></pre>\n<h1>10. 이벤트 루프</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>비동기 루프와 직접 상호 작용하여 실행 흐름을 사용자 정의할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">perform_spell</span>():\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"주문 시전 중...\"</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.<span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"주문 완료.\"</span>)\nloop = asyncio.<span class=\"hljs-title function_\">get_event_loop</span>()\n<span class=\"hljs-attr\">try</span>:\n    loop.<span class=\"hljs-title function_\">run_until_complete</span>(<span class=\"hljs-title function_\">perform_spell</span>())\n<span class=\"hljs-attr\">finally</span>:\n    loop.<span class=\"hljs-title function_\">close</span>()\n</code></pre>\n<h1>네트워크, 소켓 및 네트워크 인터페이스 작업</h1>\n<h1>1. 소켓 생성</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>네트워크 통신용 소켓을 만들려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> socket\ns = socket.<span class=\"hljs-title function_\">socket</span>(socket.<span class=\"hljs-property\">AF_INET</span>, socket.<span class=\"hljs-property\">SOCK_STREAM</span>)\n</code></pre>\n<h1>2. 원격 서버에 연결하기</h1>\n<p>소켓을 통해 원격 서버와 연결을 설정합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">s.<span class=\"hljs-title function_\">connect</span>((<span class=\"hljs-string\">'example.com'</span>, <span class=\"hljs-number\">80</span>))  # <span class=\"hljs-title class_\">Connect</span> to example.<span class=\"hljs-property\">com</span> on port <span class=\"hljs-number\">80</span>\n</code></pre>\n<h1>3. Sending Data</h1>\n<p>To dispatch data through the network to a connected entity:</p>\n<pre><code class=\"hljs language-js\">s.<span class=\"hljs-title function_\">sendall</span>(b<span class=\"hljs-string\">'Hello, server'</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4. 데이터 수신</h1>\n<p>네트워크로부터 데이터를 수신하려면:</p>\n<pre><code class=\"hljs language-js\">data = s.<span class=\"hljs-title function_\">recv</span>(<span class=\"hljs-number\">1024</span>)  # 최대 <span class=\"hljs-number\">1024</span>바이트까지 수신\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'수신 완료'</span>, <span class=\"hljs-title function_\">repr</span>(data))\n</code></pre>\n<h1>5. 소켓 닫기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>기분 좋은 마음으로 다음과 같이 번역합니다.</p>\n<p>네트워크 링크를 끊고 소켓을 차분히 종료하려면:</p>\n<pre><code class=\"hljs language-js\">s.<span class=\"hljs-title function_\">close</span>();\n</code></pre>\n<h1>6. 수신 소켓 생성</h1>\n<p>들어오는 연결을 수신하기 위해 소켓을 열려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">serversocket = socket.<span class=\"hljs-title function_\">socket</span>(socket.<span class=\"hljs-property\">AF_INET</span>, socket.<span class=\"hljs-property\">SOCK_STREAM</span>)\nserversocket.<span class=\"hljs-title function_\">bind</span>((<span class=\"hljs-string\">'localhost'</span>, <span class=\"hljs-number\">8080</span>))  # localhost와 포트 <span class=\"hljs-number\">8080</span>에 바인딩합니다.\nserversocket.<span class=\"hljs-title function_\">listen</span>()  # 들어오는 연결을 대기합니다.\n</code></pre>\n<h1>7. 연결 수락하기</h1>\n<p>네트워크 링크를 수락하고 설정하기 위해서:</p>\n<pre><code class=\"hljs language-js\">clientsocket, address = serversocket.<span class=\"hljs-title function_\">accept</span>()\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Connection from {address} has been established.\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>8. 블로킹되지 않는 소켓 작업</h1>\n<p>소켓의 모드를 블로킹되지 않도록 설정하려면:</p>\n<pre><code class=\"hljs language-js\">s.<span class=\"hljs-title function_\">setblocking</span>(<span class=\"hljs-title class_\">False</span>);\n</code></pre>\n<h1>9. UDP 소켓 사용하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>UDP 소켓을 생성하여 더 빠르지만 덜 신뢰성있는 통신을 위한 프로토콜이 필요합니다:</p>\n<pre><code class=\"hljs language-js\">udp_socket = socket.<span class=\"hljs-title function_\">socket</span>(socket.<span class=\"hljs-property\">AF_INET</span>, socket.<span class=\"hljs-property\">SOCK_DGRAM</span>)\nudp_socket.<span class=\"hljs-title function_\">bind</span>((<span class=\"hljs-string\">'localhost'</span>, <span class=\"hljs-number\">8081</span>))  # <span class=\"hljs-variable constant_\">UDP</span> 소켓을 로컬호스트의 <span class=\"hljs-number\">8081</span> 포트에 바인딩합니다\n</code></pre>\n<h1>10. 네트워크 인터페이스 나열하기</h1>\n<p>기계의 네트워크 인터페이스의 이름과 주소를 확인하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> socket\n<span class=\"hljs-keyword\">import</span> netifaces\n<span class=\"hljs-keyword\">for</span> interface <span class=\"hljs-keyword\">in</span> netifaces.<span class=\"hljs-title function_\">interfaces</span>():\n    addr = netifaces.<span class=\"hljs-title function_\">ifaddresses</span>(interface).<span class=\"hljs-title function_\">get</span>(netifaces.<span class=\"hljs-property\">AF_INET</span>)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">addr</span>:\n        <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Interface: {interface}, Address: {addr[0]['addr']}\"</span>)\n</code></pre>\n<h1></h1>\n<h1>판다 라이브러리 (데이터프레임) 사용하기</h1>\n<h1>1. 데이터프레임 생성하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>자신만의 열과 데이터로 DataFrame을 만들려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\ndata = {\n    <span class=\"hljs-string\">'Element'</span>: [<span class=\"hljs-string\">'Earth'</span>, <span class=\"hljs-string\">'Water'</span>, <span class=\"hljs-string\">'Fire'</span>, <span class=\"hljs-string\">'Air'</span>],\n    <span class=\"hljs-string\">'Symbol'</span>: [<span class=\"hljs-string\">'🜃'</span>, <span class=\"hljs-string\">'🜄'</span>, <span class=\"hljs-string\">'🜂'</span>, <span class=\"hljs-string\">'🜁'</span>]\n}\ndf = pd.<span class=\"hljs-title class_\">DataFrame</span>(data)\n</code></pre>\n<h1>2. CSV 파일에서 데이터 읽기</h1>\n<p>CSV 파일에서 데이터를 읽어와 DataFrame으로 변환하기:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">df = pd.<span class=\"hljs-title function_\">read_csv</span>(<span class=\"hljs-string\">\"elements.csv\"</span>);\n</code></pre>\n<h1>3. 처음 몇 개 행 확인하기</h1>\n<p>데이터프레임에서 처음 행들을 얻으려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">print</span>(df.<span class=\"hljs-title function_\">head</span>());\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4. 열 선택하기</h1>\n<p>데이터프레임에서 특정 열을 선택하려면:</p>\n<pre><code class=\"hljs language-js\">symbols = df[<span class=\"hljs-string\">\"Symbol\"</span>];\n</code></pre>\n<h1>5. 행 필터링하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>DataFrame을 살펴보고, 기준을 충족하는 행을 선택하려면:</p>\n<pre><code class=\"hljs language-js\">fire_elements = df[df[<span class=\"hljs-string\">\"Element\"</span>] == <span class=\"hljs-string\">\"Fire\"</span>];\n</code></pre>\n<h1>6. 새 열 만들기</h1>\n<p>데이터 내에서 파생된 DataFrame에 새 열을 만들려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">df[<span class=\"hljs-string\">\"Length\"</span>] = df[<span class=\"hljs-string\">\"Element\"</span>].<span class=\"hljs-title function_\">apply</span>(len);\n</code></pre>\n<h1>7. 데이터 그룹화 및 집계</h1>\n<p>데이터를 그룹으로 모으고 집계를 통해 새로운 데이터를 추출하려면:</p>\n<pre><code class=\"hljs language-js\">element_groups = df.<span class=\"hljs-title function_\">groupby</span>(<span class=\"hljs-string\">\"Element\"</span>).<span class=\"hljs-title function_\">agg</span>({ <span class=\"hljs-title class_\">Length</span>: <span class=\"hljs-string\">\"mean\"</span> });\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>8. 데이터프레임 병합</h1>\n<p>두 데이터프레임을 공통 키를 기준으로 결합하려면:</p>\n<pre><code class=\"hljs language-js\">df2 = pd.<span class=\"hljs-title class_\">DataFrame</span>({ <span class=\"hljs-title class_\">Element</span>: [<span class=\"hljs-string\">\"Earth\"</span>, <span class=\"hljs-string\">\"Fire\"</span>], <span class=\"hljs-title class_\">Quality</span>: [<span class=\"hljs-string\">\"Solid\"</span>, <span class=\"hljs-string\">\"Plasma\"</span>] });\nmerged_df = pd.<span class=\"hljs-title function_\">merge</span>(df, df2, (on = <span class=\"hljs-string\">\"Element\"</span>));\n</code></pre>\n<h1>9. 누락된 데이터 처리</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>DataFrame을 정리하여 데이터가 없는 곳에 값이 존재하는 빈 칸을 채우는 방법입니다:</p>\n<pre><code class=\"hljs language-js\">df.<span class=\"hljs-title function_\">fillna</span>((value = <span class=\"hljs-string\">\"Unknown\"</span>), (inplace = <span class=\"hljs-title class_\">True</span>));\n</code></pre>\n<h1>10. 데이터 변환 및 형태 재구성</h1>\n<p>DataFrame의 형태를 변환하여 pivot 작업을 통해 숨겨진 패턴과 구조를 드러내는 방법:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\">pivoted_df = df.pivot(index=<span class=\"hljs-string\">'Element'</span>, columns=<span class=\"hljs-string\">'Symbol'</span>, values=<span class=\"hljs-string\">'Length'</span>)\n</code></pre>\n<h2>넘파이 라이브러리 (배열) 작업</h2>\n<h2>1. 넘파이 배열 생성하기</h2>\n<p>배열을 생성하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\narray = np.array([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>])\n</code></pre>\n<h1>2. 영이나 일의 배열</h1>\n<p>영으로 채워진 배열을 생성하려면:</p>\n<pre><code class=\"hljs language-python\">zeros = np.zeros((<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>))  <span class=\"hljs-comment\"># 3x3 크기의 영으로 채워진 배열</span>\nones = np.ones((<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>))  <span class=\"hljs-comment\"># 2x4 크기의 일로 채워진 배열</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>3. 숫자 범위 생성하기</h1>\n<p>일련의 숫자를 만들려면:</p>\n<pre><code class=\"hljs language-js\">range_array = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">5</span>)  # <span class=\"hljs-number\">10</span>부터 <span class=\"hljs-number\">50</span>까지, 간격은 <span class=\"hljs-number\">5</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래와 같이 두 경계 사이에 균일하게 분포된 값들의 시리즈를 만들 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">linear_spaced = np.<span class=\"hljs-title function_\">linspace</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)  # <span class=\"hljs-number\">0</span>부터 <span class=\"hljs-number\">1</span>까지 <span class=\"hljs-number\">5</span>개의 값\n</code></pre>\n<h1>5. 배열 형태 재구성</h1>\n<p>배열의 모양을 변경하여 차원을 수정할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">reshaped = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">9</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)  # <span class=\"hljs-number\">1</span>차원 배열을 3x3 <span class=\"hljs-number\">2</span>차원 배열로 재구성합니다\n</code></pre>\n<h1>6. 기본 배열 작업</h1>\n<p>배열에 원소별 조작을 수행하려면:</p>\n<pre><code class=\"hljs language-js\">a = np.<span class=\"hljs-title function_\">array</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\nb = np.<span class=\"hljs-title function_\">array</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>])\nsum = a + b  # 원소별 덧셈\ndifference = b - a  # 원소별 뺄셈\nproduct = a * b  # 원소별 곱셈\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>7. 행렬 곱셈</h2>\n<p>기본 점곱 연산:</p>\n<pre><code class=\"hljs language-js\">result = np.<span class=\"hljs-title function_\">dot</span>(a.<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>), b.<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>))  # a와 b의 점곱\n</code></pre>\n<h2>8. 배열 요소에 액세스하기</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>유용한 구문을 사용하여 배열 요소에 액세스하기:</p>\n<pre><code class=\"hljs language-js\">element = a[<span class=\"hljs-number\">2</span>]  # 배열 <span class=\"hljs-string\">'a'</span>의 세 번째 요소를 가져옵니다\nrow = reshaped[<span class=\"hljs-number\">1</span>, :]  # <span class=\"hljs-string\">'reshaped'</span>의 두 번째 행을 가져옵니다\n</code></pre>\n<h1>9. 부울 인덱싱</h1>\n<p>배열 요소를 조건문의 체로 필터링합니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">필터링된 = a[a > <span class=\"hljs-number\">2</span>]  # <span class=\"hljs-string\">'a'</span>의 원소 중 <span class=\"hljs-number\">2</span>보다 큰 것들\n\n</code></pre>\n<h1>10. 집계 및 통계</h1>\n<p>np 배열에 대한 통계 연산:</p>\n<pre><code class=\"hljs language-js\">평균 = np.<span class=\"hljs-title function_\">mean</span>(a);\n최대값 = np.<span class=\"hljs-title function_\">max</span>(a);\n합 = np.<span class=\"hljs-title function_\">sum</span>(a);\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Matplotlib 라이브러리 사용하기 (데이터 시각화)</h1>\n<h1>1. 기본 플롯 만들기</h1>\n<p>시각화 플롯을 만들려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\nx = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\ny = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">25</span>]\nplt.<span class=\"hljs-title function_\">plot</span>(x, y)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>2. 제목과 라벨 추가하기</h1>\n<p>축에 이름을 지어 그래프에 더 나은 맥락을 부여하고 제목을 달기 위해서:</p>\n<pre><code class=\"hljs language-js\">plt.<span class=\"hljs-title function_\">plot</span>(x, y);\nplt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">\"시간 경과에 따른 성장\"</span>);\nplt.<span class=\"hljs-title function_\">xlabel</span>(<span class=\"hljs-string\">\"시간\"</span>);\nplt.<span class=\"hljs-title function_\">ylabel</span>(<span class=\"hljs-string\">\"성장\"</span>);\nplt.<span class=\"hljs-title function_\">show</span>();\n</code></pre>\n<h1>3. 산점도 그래프 생성하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>산점도를 만들어 봅시다:</p>\n<pre><code class=\"hljs language-js\">plt.<span class=\"hljs-title function_\">scatter</span>(x, y);\nplt.<span class=\"hljs-title function_\">show</span>();\n</code></pre>\n<h3>4. 선 스타일 및 마커 사용자 정의</h3>\n<p>플롯에 기호를 추가하여 유용성을 높일 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">plt.<span class=\"hljs-title function_\">plot</span>(x, y, (linestyle = <span class=\"hljs-string\">\"--\"</span>), (marker = <span class=\"hljs-string\">\"o\"</span>), (color = <span class=\"hljs-string\">\"b\"</span>));\nplt.<span class=\"hljs-title function_\">show</span>();\n</code></pre>\n<h1>5. Creating Multiple Plots on the Same Axes</h1>\n<p>Creating Multiple Plots on the Same Axes:</p>\n<pre><code class=\"hljs language-js\">z = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\nplt.<span class=\"hljs-title function_\">plot</span>(x, y);\nplt.<span class=\"hljs-title function_\">plot</span>(x, z);\nplt.<span class=\"hljs-title function_\">show</span>();\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>6. 서브플롯 만들기</h1>\n<p>서브플롯을 만들려면:</p>\n<pre><code class=\"hljs language-js\">fig, ax = plt.<span class=\"hljs-title function_\">subplots</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)  # <span class=\"hljs-number\">2</span>개의 행, <span class=\"hljs-number\">1</span>개의 열\nax[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">plot</span>(x, y)\nax[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">plot</span>(x, z)\nplt.<span class=\"hljs-title function_\">show</span>()\n</code></pre>\n<h1>7. 히스토그램 만들기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>히스토그램을 생성하려면:</p>\n<pre><code class=\"hljs language-js\">data = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>];\nplt.<span class=\"hljs-title function_\">hist</span>(data, (bins = <span class=\"hljs-number\">4</span>));\nplt.<span class=\"hljs-title function_\">show</span>();\n</code></pre>\n<h1>8. 범례 추가</h1>\n<p>플롯에 범례를 만드는 방법:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">plt.<span class=\"hljs-title function_\">plot</span>(x, y, (label = <span class=\"hljs-string\">\"성장\"</span>));\nplt.<span class=\"hljs-title function_\">plot</span>(x, z, (label = <span class=\"hljs-string\">\"감소\"</span>));\nplt.<span class=\"hljs-title function_\">legend</span>();\nplt.<span class=\"hljs-title function_\">show</span>();\n</code></pre>\n<h1>9. 눈금 맞춤</h1>\n<p>축에 직접 마킹을 추가하여 값의 스케일을 정의할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">plt.<span class=\"hljs-title function_\">plot</span>(x, y);\nplt.<span class=\"hljs-title function_\">xticks</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-string\">\"일\"</span>, <span class=\"hljs-string\">\"이\"</span>, <span class=\"hljs-string\">\"삼\"</span>, <span class=\"hljs-string\">\"사\"</span>, <span class=\"hljs-string\">\"오\"</span>]);\nplt.<span class=\"hljs-title function_\">yticks</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">25</span>], [<span class=\"hljs-string\">\"0\"</span>, <span class=\"hljs-string\">\"5\"</span>, <span class=\"hljs-string\">\"10\"</span>, <span class=\"hljs-string\">\"15\"</span>, <span class=\"hljs-string\">\"20\"</span>, <span class=\"hljs-string\">\"25+\"</span>]);\nplt.<span class=\"hljs-title function_\">show</span>();\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>10. 그림 저장하기</h1>\n<p>그림을 .png 파일로 저장하려면:</p>\n<pre><code class=\"hljs language-js\">plt.<span class=\"hljs-title function_\">plot</span>(x, y);\nplt.<span class=\"hljs-title function_\">savefig</span>(<span class=\"hljs-string\">\"growth_over_time.png\"</span>);\n</code></pre>\n<h1>Scikit-Learn 라이브러리 활용하기 (머신러닝)</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>1. 데이터셋 불러오기</h1>\n<p>ML 실험을 위해 데이터셋을 사용하려면</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> datasets\niris = datasets.<span class=\"hljs-title function_\">load_iris</span>()\nX, y = iris.<span class=\"hljs-property\">data</span>, iris.<span class=\"hljs-property\">target</span>\n</code></pre>\n<h1>2. 데이터를 훈련 세트와 테스트 세트로 나누기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>데이터를 나눠서 학습 및 평가할 때 사용하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> sklearn.<span class=\"hljs-property\">model_selection</span> <span class=\"hljs-keyword\">import</span> train_test_split\nX_train, X_test, y_train, y_test = <span class=\"hljs-title function_\">train_test_split</span>(X, y, test_size=<span class=\"hljs-number\">0.2</span>)\n</code></pre>\n<h1>3. 모델 학습</h1>\n<p>RandomForestClassifier를 사용하여 ML 모델을 학습합니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sklearn.ensemble <span class=\"hljs-keyword\">import</span> RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n</code></pre>\n<h1>4. 예측하기</h1>\n<p>모델 예측 결과를 확인하려면:</p>\n<pre><code class=\"hljs language-python\">predictions = model.predict(X_test)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>5. 모델 성능 평가</h1>\n<p>모델을 평가하려면 예측 정확성을 측정해야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> sklearn.<span class=\"hljs-property\">metrics</span> <span class=\"hljs-keyword\">import</span> accuracy_score\naccuracy = <span class=\"hljs-title function_\">accuracy_score</span>(y_test, predictions)\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"모델 정확도: {accuracy}\"</span>)\n</code></pre>\n<h1>6. 교차 검증 사용하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>교차 검증을 사용하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> sklearn.<span class=\"hljs-property\">model_selection</span> <span class=\"hljs-keyword\">import</span> cross_val_score\nscores = <span class=\"hljs-title function_\">cross_val_score</span>(model, X, y, cv=<span class=\"hljs-number\">5</span>)\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"교차 검증 점수: {scores}\"</span>)\n</code></pre>\n<h1>7. 피처 스케일링</h1>\n<p>당신의 피처들에 적절한 스케일을 만들어 모델이 더 효율적으로 학습할 수 있도록하세요:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sklearn.preprocessing <span class=\"hljs-keyword\">import</span> StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n</code></pre>\n<h1>8. 그리드 서치를 사용한 매개변수 튜닝</h1>\n<p>모델의 매개변수를 미세 조정하여 최적의 조합을 찾아냅니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> GridSearchCV\nparam_grid = {<span class=\"hljs-string\">'n_estimators'</span>: [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">100</span>], <span class=\"hljs-string\">'max_depth'</span>: [<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>]}\ngrid_search = GridSearchCV(model, param_grid, cv=<span class=\"hljs-number\">5</span>)\ngrid_search.fit(X_train, y_train)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>9. 파이프라인 생성</h1>\n<p>데이터 처리 및 모델링 단계를 간편하게 만들기 위해 원활한 흐름을 만들어주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> sklearn.<span class=\"hljs-property\">pipeline</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Pipeline</span>\npipeline = <span class=\"hljs-title class_\">Pipeline</span>([\n    (<span class=\"hljs-string\">'scaler'</span>, <span class=\"hljs-title class_\">StandardScaler</span>()),\n    (<span class=\"hljs-string\">'classifier'</span>, <span class=\"hljs-title class_\">RandomForestClassifier</span>())\n])\npipeline.<span class=\"hljs-title function_\">fit</span>(X_train, y_train)\n</code></pre>\n<h1>10. 모델 저장 및 불러오기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>모델을 보존하기 위해서:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> joblib\n# 모델 저장하기\njoblib.<span class=\"hljs-title function_\">dump</span>(model, <span class=\"hljs-string\">'model.joblib'</span>)\n# 모델 불러오기\nloaded_model = joblib.<span class=\"hljs-title function_\">load</span>(<span class=\"hljs-string\">'model.joblib'</span>)\n</code></pre>\n<h2>Plotly 라이브러리 활용 (상호작용적 데이터 시각화)</h2>\n<h2>1. 기본 선 그래프 만들기</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>라인 차트를 만드는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> plotly.<span class=\"hljs-property\">graph_objs</span> <span class=\"hljs-keyword\">as</span> go\n<span class=\"hljs-keyword\">import</span> plotly.<span class=\"hljs-property\">io</span> <span class=\"hljs-keyword\">as</span> pio\nx = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\ny = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">25</span>]\nfig = go.<span class=\"hljs-title class_\">Figure</span>(data=go.<span class=\"hljs-title class_\">Scatter</span>(x=x, y=y, mode=<span class=\"hljs-string\">'lines'</span>))\npio.<span class=\"hljs-title function_\">show</span>(fig)\n</code></pre>\n<h1>2. 산점도 그래프 만들기</h1>\n<p>산점도 그래프를 만드는 방법:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">fig = go.<span class=\"hljs-title class_\">Figure</span>((data = go.<span class=\"hljs-title class_\">Scatter</span>((x = x), (y = y), (mode = <span class=\"hljs-string\">\"markers\"</span>))));\npio.<span class=\"hljs-title function_\">show</span>(fig);\n</code></pre>\n<h1>3. Creating a Bar Chart</h1>\n<p>To Create a Bar Chart:</p>\n<pre><code class=\"hljs language-js\">categories = [<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"C\"</span>, <span class=\"hljs-string\">\"D\"</span>, <span class=\"hljs-string\">\"E\"</span>];\nvalues = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">25</span>];\nfig = go.<span class=\"hljs-title class_\">Figure</span>((data = go.<span class=\"hljs-title class_\">Bar</span>((x = categories), (y = values))));\npio.<span class=\"hljs-title function_\">show</span>(fig);\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4. 원형 차트 만들기</h1>\n<p>원형 차트를 만들려면:</p>\n<pre><code class=\"hljs language-js\">labels = [<span class=\"hljs-string\">\"지구\"</span>, <span class=\"hljs-string\">\"물\"</span>, <span class=\"hljs-string\">\"불\"</span>, <span class=\"hljs-string\">\"바람\"</span>];\nsizes = [<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>];\nfig = go.<span class=\"hljs-title class_\">Figure</span>((data = go.<span class=\"hljs-title class_\">Pie</span>((labels = labels), (values = sizes))));\npio.<span class=\"hljs-title function_\">show</span>(fig);\n</code></pre>\n<h1>5. 히스토그램 만들기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>히스토그램을 만들려면:</p>\n<pre><code class=\"hljs language-js\">data = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>];\nfig = go.<span class=\"hljs-title class_\">Figure</span>((data = go.<span class=\"hljs-title class_\">Histogram</span>((x = data))));\npio.<span class=\"hljs-title function_\">show</span>(fig);\n</code></pre>\n<h1>6. 상자 그림 만들기</h1>\n<p>상자 그림을 만들려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">데이터 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n피그 = go.<span class=\"hljs-title class_\">Figure</span>((data = go.<span class=\"hljs-title class_\">Box</span>((y = 데이터))));\npio.<span class=\"hljs-title function_\">show</span>(피그);\n</code></pre>\n<h1>7. 히트맵 생성하기</h1>\n<p>히트맵을 생성하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\nz = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>)  # 임의의 데이터 생성\n피그 = go.<span class=\"hljs-title class_\">Figure</span>(data=go.<span class=\"hljs-title class_\">Heatmap</span>(z=z))\npio.<span class=\"hljs-title function_\">show</span>(피그)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>8. 3D 표면 플롯 만들기</h1>\n<p>3D 표면 플롯을 만들려면:</p>\n<pre><code class=\"hljs language-js\">z = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)  # 랜덤 데이터 생성\nfig = go.<span class=\"hljs-title class_\">Figure</span>(data=go.<span class=\"hljs-title class_\">Surface</span>(z=z))\npio.<span class=\"hljs-title function_\">show</span>(fig)\n</code></pre>\n<h1>9. 서브플롯 만들기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>서브플롯을 만들려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> plotly.<span class=\"hljs-property\">subplots</span> <span class=\"hljs-keyword\">import</span> make_subplots\nfig = <span class=\"hljs-title function_\">make_subplots</span>(rows=<span class=\"hljs-number\">1</span>, cols=<span class=\"hljs-number\">2</span>)\nfig.<span class=\"hljs-title function_\">add_trace</span>(go.<span class=\"hljs-title class_\">Scatter</span>(x=x, y=y, mode=<span class=\"hljs-string\">'lines'</span>), row=<span class=\"hljs-number\">1</span>, col=<span class=\"hljs-number\">1</span>)\nfig.<span class=\"hljs-title function_\">add_trace</span>(go.<span class=\"hljs-title class_\">Bar</span>(x=categories, y=values), row=<span class=\"hljs-number\">1</span>, col=<span class=\"hljs-number\">2</span>)\npio.<span class=\"hljs-title function_\">show</span>(fig)\n</code></pre>\n<h1>10. 대화형 시계열 생성</h1>\n<p>시계열 작업을 위해서:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\ndates = pd.date_range(<span class=\"hljs-string\">'20230101'</span>, periods=<span class=\"hljs-number\">5</span>)\nvalues = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>]\nfig = go.Figure(data=go.Scatter(x=dates, y=values, mode=<span class=\"hljs-string\">'lines+markers'</span>))\npio.show(fig)\n</code></pre>\n<h2>날짜와 시간 다루기</h2>\n<h2>1. 현재 날짜와 시간 얻기</h2>\n<p>현재 날짜와 시간을 얻으려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\nnow = datetime.now()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Current date and time: <span class=\"hljs-subst\">{now}</span>\"</span>)\n</code></pre>\n<h1>2. Creating Specific Date and Time</h1>\n<p>To conjure a moment from the past or future, crafting it with precision:</p>\n<pre><code class=\"hljs language-python\">specific_time = datetime(<span class=\"hljs-number\">2023</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">30</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Specific date and time: <span class=\"hljs-subst\">{specific_time}</span>\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>3. 날짜와 시간 형식 지정하기</h1>\n<p>날짜와 시간 형식 지정하기:</p>\n<pre><code class=\"hljs language-js\">formatted = now.<span class=\"hljs-title function_\">strftime</span>(<span class=\"hljs-string\">\"%Y-%m-%d %H:%M:%S\"</span>)\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"형식화된 날짜와 시간: {formatted}\"</span>)\n</code></pre>\n<h1>4. 문자열에서 날짜와 시간 구문 분석하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>문자열에서 날짜와 시간을 파싱하려면:</p>\n<pre><code class=\"hljs language-js\">date_string = <span class=\"hljs-string\">\"2023-01-01 15:00:00\"</span>\nparsed_date = datetime.<span class=\"hljs-title function_\">strptime</span>(date_string, <span class=\"hljs-string\">\"%Y-%m-%d %H:%M:%S\"</span>)\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Parsed date and time: {parsed_date}\"</span>)\n</code></pre>\n<h1>5. 시간 간격 다루기</h1>\n<p>시간을 통해 앞뒤로 시간을 건너뛰며 순간 간의 거리를 이동하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> timedelta\ndelta = timedelta(days=<span class=\"hljs-number\">7</span>)\nfuture_date = now + delta\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"7일 후의 날짜: <span class=\"hljs-subst\">{future_date}</span>\"</span>)\n</code></pre>\n<h2>6. 날짜와 시간 비교</h2>\n<p>날짜 및 시간 비교:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">if</span> specific_time > now:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"특정 시간은 미래에 있습니다.\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"특정 시간은 지났습니다.\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>7. 날짜/시간에서 구성 요소 추출하기</h1>\n<p>년, 월, 일 및 더 많은 것들을 추출하려면:</p>\n<pre><code class=\"hljs language-js\">year = now.<span class=\"hljs-property\">year</span>\nmonth = now.<span class=\"hljs-property\">month</span>\nday = now.<span class=\"hljs-property\">day</span>\nhour = now.<span class=\"hljs-property\">hour</span>\nminute = now.<span class=\"hljs-property\">minute</span>\nsecond = now.<span class=\"hljs-property\">second</span>\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Year: {year}, Month: {month}, Day: {day}, Hour: {hour}, Minute: {minute}, Second: {second}\"</span>)\n</code></pre>\n<h1>8. 시간대 처리하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>현지 시간을 준수하는 시간대에서 작업하기:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> timezone, timedelta\nutc_time = datetime.now(timezone.utc)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"현재 UTC 시간: <span class=\"hljs-subst\">{utc_time}</span>\"</span>)\n<span class=\"hljs-comment\"># 특정 시간대에 맞게 조정하기 (예: EST)</span>\nest_time = utc_time - timedelta(hours=<span class=\"hljs-number\">5</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"현재 EST 시간: <span class=\"hljs-subst\">{est_time}</span>\"</span>)\n</code></pre>\n<h2>9. 요일 가져오기</h2>\n<p>한 주의 요일을 식별하기:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\">weekday = now.strftime(<span class=\"hljs-string\">\"%A\"</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"오늘은: <span class=\"hljs-subst\">{weekday}</span>\"</span>)\n</code></pre>\n<h1>10. 유닉스 타임스탬프 작업</h1>\n<p>고대 시대와 대화하며, 유닉스 탄생의 숫자를 번역합니다:</p>\n<pre><code class=\"hljs language-python\">timestamp = datetime.timestamp(now)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"현재 타임스탬프: <span class=\"hljs-subst\">{timestamp}</span>\"</span>)\n<span class=\"hljs-comment\"># 타임스탬프를 날짜로 다시 변환</span>\ndate_from_timestamp = datetime.fromtimestamp(timestamp)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"타임스탬프에서 날짜로: <span class=\"hljs-subst\">{date_from_timestamp}</span>\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>더 고급 리스트 컴프리헨션과 람다 함수 사용하기</h1>\n<h1>1. 중첩된 리스트 컴프리헨션</h1>\n<p>중첩된 리스트 컴프리헨션을 사용하려면:</p>\n<pre><code class=\"hljs language-js\">matrix = [[j <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">5</span>)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">3</span>)]\n<span class=\"hljs-title function_\">print</span>(matrix)  # 3x5 행렬을 생성합니다\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>2. 조건부 리스트 컴프리헨션</h1>\n<p>원하는 조건을 충족하는 요소를 필터링하려면:</p>\n<pre><code class=\"hljs language-js\">filtered = [x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">if</span> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>]\n<span class=\"hljs-title function_\">print</span>(filtered)  # <span class=\"hljs-number\">0</span>부터 <span class=\"hljs-number\">9</span>까지의 짝수\n</code></pre>\n<h1>3. 다중 이터러블을 사용한 리스트 컴프리헨션</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여러 원본에서 요소를 병합하고 변환하여 하나의 춤으로 표현하기:</p>\n<pre><code class=\"hljs language-js\">pairs = [(x, y) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>] <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>] <span class=\"hljs-keyword\">if</span> x != y]\n<span class=\"hljs-title function_\">print</span>(pairs)  # 서로 다른 요소의 쌍을 출력\n</code></pre>\n<h1>4. Lambda 함수 사용</h1>\n<p>익명 함수를 소환하여 일회성이자 간결하게 마술의 행위를 하나 생성합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">square = lambda <span class=\"hljs-attr\">x</span>: x**<span class=\"hljs-number\">2</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">square</span>(<span class=\"hljs-number\">5</span>))  # <span class=\"hljs-title class_\">Returns</span> <span class=\"hljs-number\">25</span>\n</code></pre>\n<h1>5. Lambda Functions in List Comprehensions</h1>\n<p>To employ lambda functions within your list comprehensions:</p>\n<pre><code class=\"hljs language-js\">squared = [(lambda <span class=\"hljs-attr\">x</span>: x**<span class=\"hljs-number\">2</span>)(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">5</span>)]\n<span class=\"hljs-title function_\">print</span>(squared)  # <span class=\"hljs-title class_\">Squares</span> <span class=\"hljs-keyword\">of</span> numbers <span class=\"hljs-keyword\">from</span> <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">4</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>6. 리스트를 평평하게 만드는 리스트 컴프리헨션</h1>\n<p>중첩된 리스트를 평탄화하면 해당 요소들이 한 차원으로 펼쳐집니다:</p>\n<pre><code class=\"hljs language-js\">nested = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]]\nflattened = [x <span class=\"hljs-keyword\">for</span> sublist <span class=\"hljs-keyword\">in</span> nested <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> sublist]\n<span class=\"hljs-title function_\">print</span>(flattened)\n</code></pre>\n<h1>7. 요소에 함수 적용하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>각 요소에 변환 함수를 적용하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> math\ntransformed = [math.<span class=\"hljs-title function_\">sqrt</span>(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>)]\n<span class=\"hljs-title function_\">print</span>(transformed)  # <span class=\"hljs-number\">1</span>부터 <span class=\"hljs-number\">5</span>까지 숫자의 제곱근\n</code></pre>\n<h2>8. Map 및 Filter와 함께 람다 사용</h2>\n<p>리스트를 매핑하고 필터링하는 방법:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">mapped = <span class=\"hljs-title function_\">list</span>(<span class=\"hljs-title function_\">map</span>(lambda <span class=\"hljs-attr\">x</span>: x**<span class=\"hljs-number\">2</span>, <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">5</span>)))\nfiltered = <span class=\"hljs-title function_\">list</span>(<span class=\"hljs-title function_\">filter</span>(lambda <span class=\"hljs-attr\">x</span>: x > <span class=\"hljs-number\">5</span>, mapped))\n<span class=\"hljs-title function_\">print</span>(mapped)    # <span class=\"hljs-number\">0</span>부터 <span class=\"hljs-number\">4</span>까지 숫자의 제곱\n<span class=\"hljs-title function_\">print</span>(filtered)  # <span class=\"hljs-number\">5</span>보다 큰 요소들\n</code></pre>\n<h1>9. 조건 표현식을 사용한 리스트 컴프리헨션</h1>\n<p>조건 표현식을 사용한 리스트 컴프리헨션:</p>\n<pre><code class=\"hljs language-js\">conditional = [x <span class=\"hljs-keyword\">if</span> x > <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">else</span> x**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">5</span>)]\n<span class=\"hljs-title function_\">print</span>(conditional)  # <span class=\"hljs-number\">2</span>보다 작거나 같은 숫자의 제곱, 그 외에는 동일하게\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>10. 람다를 사용한 복잡한 변환</h1>\n<p>복잡한 변환을 수행하기 위해서는 람다 함수를 사용하세요:</p>\n<pre><code class=\"hljs language-js\">complex_transformation = <span class=\"hljs-title function_\">list</span>(<span class=\"hljs-title function_\">map</span>(lambda <span class=\"hljs-attr\">x</span>: x**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">if</span> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> x + <span class=\"hljs-number\">5</span>, <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">5</span>)))\n<span class=\"hljs-title function_\">print</span>(complex_transformation)  # 짝수-홀수 조건에 따라 다른 변환을 적용합니다\n</code></pre>\n<h1>객체 지향 프로그래밍으로 작업하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>1. 클래스 정의하기</h1>\n<p>클래스 만들기:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Wizard</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self, name, power):\n        self.<span class=\"hljs-property\">name</span> = name\n        self.<span class=\"hljs-property\">power</span> = power\n    def <span class=\"hljs-title function_\">cast_spell</span>(self):\n        <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{self.name}이(가) 힘 {self.power}으로 주문을 사용합니다!\"</span>)\n</code></pre>\n<h1>2. 인스턴스 생성</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>클래스의 인스턴스를 생성하려면:</p>\n<pre><code class=\"hljs language-js\">merlin = <span class=\"hljs-title class_\">Wizard</span>(<span class=\"hljs-string\">\"Merlin\"</span>, <span class=\"hljs-number\">100</span>);\n</code></pre>\n<h1>3. 메서드 호출</h1>\n<p>클래스 인스턴스의 메서드를 호출하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">merlin.<span class=\"hljs-title function_\">cast_spell</span>();\n</code></pre>\n<h1>4. 상속</h1>\n<p>서브클래싱:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArchWizard</span>(<span class=\"hljs-title class_\">Wizard</span>):\n    def <span class=\"hljs-title function_\">__init__</span>(self, name, power, realm):\n        <span class=\"hljs-variable language_\">super</span>().<span class=\"hljs-title function_\">__init__</span>(name, power)\n        self.<span class=\"hljs-property\">realm</span> = realm\n    def <span class=\"hljs-title function_\">summon_familiar</span>(self):\n        <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{self.name}가 {self.realm} 영역에서 친구를 소환합니다.\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>5. 메서드 오버라이딩</h1>\n<p>기본 클래스를 오버라이드하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Sorcerer</span>(<span class=\"hljs-title class_\">Wizard</span>):\n    def <span class=\"hljs-title function_\">cast_spell</span>(self):\n        <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{self.name}이(가) 강력한 암흑 주문을 사용합니다!\"</span>)\n</code></pre>\n<h1>6. 다형성</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다양한 형태와 상호작용하기 위해 공통 인터페이스를 통해:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">unleash_magic</span>(wizard):\n    wizard.<span class=\"hljs-title function_\">cast_spell</span>()\n<span class=\"hljs-title function_\">unleash_magic</span>(merlin)\n<span class=\"hljs-title function_\">unleash_magic</span>(<span class=\"hljs-title class_\">Sorcerer</span>(<span class=\"hljs-string\">\"Voldemort\"</span>, <span class=\"hljs-number\">90</span>))\n</code></pre>\n<h1>7. 캡슐화</h1>\n<p>정보 은닉을 사용하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Alchemist</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, secret_ingredient</span>):\n        self.__secret = secret_ingredient\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reveal_secret</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"The secret ingredient is <span class=\"hljs-subst\">{self.__secret}</span>\"</span>)\n</code></pre>\n<h1>8. Composition</h1>\n<p>To assemble Objects from simpler ones:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Spellbook</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, spells</span>):\n        self.spells = spells\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Mage</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, spellbook</span>):\n        self.name = name\n        self.spellbook = spellbook\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>9. 클래스 메소드와 정적 메소드</h1>\n<p>클래스 메소드와 정적 메소드를 사용하여 클래스에 특정 작업을 묶거나 인스턴스에 제한 없이 사용하여 더 넓은 목적에 부합하도록 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Enchanter</span>:\n    @staticmethod\n    def <span class=\"hljs-title function_\">enchant</span>(item):\n        <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{item}이(가) 마법으로 걸렸습니다!\"</span>)\n    @classmethod\n    def <span class=\"hljs-title function_\">summon</span>(cls):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"새로운 마법사가 소환되었습니다.\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>엔티티의 속성에 접근을 우아하게 관리하여 사용 및 보호를 안내하기 위해:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Elementalist</span>:\n    def <span class=\"hljs-title function_\">__init__</span>(self, element):\n        self.<span class=\"hljs-property\">_element</span> = element\n\n    @property\n    def <span class=\"hljs-title function_\">element</span>(self):\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">_element</span>\n\n    @element.<span class=\"hljs-property\">setter</span>\n    def <span class=\"hljs-title function_\">element</span>(self, value):\n        <span class=\"hljs-keyword\">if</span> value <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">\"Fire\"</span>, <span class=\"hljs-string\">\"Water\"</span>, <span class=\"hljs-string\">\"Earth\"</span>, <span class=\"hljs-string\">\"Air\"</span>]:\n            self.<span class=\"hljs-property\">_element</span> = value\n        <span class=\"hljs-attr\">else</span>:\n            <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"잘못된 속성입니다!\"</span>)\n</code></pre>\n<h1>데코레이터로 작업하기</h1>\n<h1>1. 기본 데코레이터</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>간단한 데코레이터를 만들려면:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">my_decorator</span>(func):\n    def <span class=\"hljs-title function_\">wrapper</span>():\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"함수가 호출되기 전에 무언가가 발생합니다.\"</span>)\n        <span class=\"hljs-title function_\">func</span>()\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"함수가 호출된 후에 무언가가 발생합니다.\"</span>)\n    <span class=\"hljs-keyword\">return</span> wrapper\n\n@my_decorator\ndef <span class=\"hljs-title function_\">say_hello</span>():\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"안녕!\"</span>)\n\n<span class=\"hljs-title function_\">say_hello</span>()\n</code></pre>\n<h1>2. 인수를 전달하는 데코레이터</h1>\n<p>데코레이터 내에서 함수에 인수를 전달하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">my_decorator</span>(func):\n    def <span class=\"hljs-title function_\">wrapper</span>(*args, **kwargs):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"함수 호출 전\"</span>)\n        result = <span class=\"hljs-title function_\">func</span>(*args, **kwargs)\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"함수 호출 후\"</span>)\n        <span class=\"hljs-keyword\">return</span> result\n    <span class=\"hljs-keyword\">return</span> wrapper\n\n@my_decorator\ndef <span class=\"hljs-title function_\">greet</span>(name):\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{name}님 안녕하세요\"</span>)\n\n<span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-string\">\"Alice\"</span>)\n</code></pre>\n<h1>3. functools.wraps 사용</h1>\n<p>원본 함수의 메타데이터를 보존하려면 데코레이팅할 때 다음을 사용하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> wraps\n\ndef <span class=\"hljs-title function_\">my_decorator</span>(func):\n    @<span class=\"hljs-title function_\">wraps</span>(func)\n    def <span class=\"hljs-title function_\">wrapper</span>(*args, **kwargs):\n        <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"래핑 함수\"</span><span class=\"hljs-string\">\"\"</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">func</span>(*args, **kwargs)\n    <span class=\"hljs-keyword\">return</span> wrapper\n\n@my_decorator\ndef <span class=\"hljs-title function_\">greet</span>(name):\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"누군가에게 인사하기\"</span><span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{name}님 안녕하세요\"</span>)\n\n<span class=\"hljs-title function_\">print</span>(greet.<span class=\"hljs-property\">__name__</span>)  # 출력: <span class=\"hljs-string\">'greet'</span>\n<span class=\"hljs-title function_\">print</span>(greet.<span class=\"hljs-property\">__doc__</span>)   # 출력: <span class=\"hljs-string\">'누군가에게 인사하기'</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4. 클래스 데코레이터</h1>\n<p>클래스를 사용하여 데코레이터를 만드는 방법은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyDecorator</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, func</span>):\n        self.func = func\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__call__</span>(<span class=\"hljs-params\">self, *args, **kwargs</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"함수 호출 전\"</span>)\n        self.func(*args, **kwargs)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"함수 호출 후\"</span>)\n\n<span class=\"hljs-meta\">@MyDecorator</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"안녕 <span class=\"hljs-subst\">{name}</span>\"</span>)\n\ngreet(<span class=\"hljs-string\">\"Alice\"</span>)\n</code></pre>\n<h1>5. 인수를 받는 데코레이터</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>자신의 인수를 받아들이는 데코레이터를 작성하려면:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">repeat</span>(times):\n    def <span class=\"hljs-title function_\">decorator</span>(func):\n        @<span class=\"hljs-title function_\">wraps</span>(func)\n        def <span class=\"hljs-title function_\">wrapper</span>(*args, **kwargs):\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(times):\n                <span class=\"hljs-title function_\">func</span>(*args, **kwargs)\n        <span class=\"hljs-keyword\">return</span> wrapper\n    <span class=\"hljs-keyword\">return</span> decorator\n\n@<span class=\"hljs-title function_\">repeat</span>(<span class=\"hljs-number\">3</span>)\ndef <span class=\"hljs-title function_\">say_hello</span>():\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Hello\"</span>)\n\n<span class=\"hljs-title function_\">say_hello</span>()\n</code></pre>\n<h1>6. 메소드 데코레이터</h1>\n<p>클래스 내부의 메소드에 데코레이터를 적용하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">method_decorator</span>(<span class=\"hljs-params\">func</span>):\n<span class=\"hljs-meta\">    @wraps(<span class=\"hljs-params\">func</span>)</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">wrapper</span>(<span class=\"hljs-params\">self, *args, **kwargs</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"메소드 데코레이터\"</span>)\n        <span class=\"hljs-keyword\">return</span> func(self, *args, **kwargs)\n    <span class=\"hljs-keyword\">return</span> wrapper\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n<span class=\"hljs-meta\">    @method_decorator</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">self, name</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"안녕 <span class=\"hljs-subst\">{name}</span>\"</span>)\n\nobj = MyClass()\nobj.greet(<span class=\"hljs-string\">\"Alice\"</span>)\n</code></pre>\n<h1>7. 데코레이터 중첩</h1>\n<p>하나의 함수에 여러 데코레이터를 적용하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">@my_decorator</span>\n<span class=\"hljs-meta\">@repeat(<span class=\"hljs-params\"><span class=\"hljs-number\">2</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"안녕 <span class=\"hljs-subst\">{name}</span>\"</span>)\n\ngreet(<span class=\"hljs-string\">\"Alice\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>8. 선택적 인수를 가진 데코레이터</h1>\n<p>인수를 사용하여 작동하는 데코레이터를 만들어 보겠습니다:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">smart_decorator</span>(arg=<span class=\"hljs-title class_\">None</span>):\n    def <span class=\"hljs-title function_\">decorator</span>(func):\n        @<span class=\"hljs-title function_\">wraps</span>(func)\n        def <span class=\"hljs-title function_\">wrapper</span>(*args, **kwargs):\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">arg</span>:\n                <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Argument: {arg}\"</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">func</span>(*args, **kwargs)\n        <span class=\"hljs-keyword\">return</span> wrapper\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_\">callable</span>(arg):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">decorator</span>(arg)\n    <span class=\"hljs-keyword\">return</span> decorator\n\n@smart_decorator\ndef <span class=\"hljs-title function_\">no_args</span>():\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"인수 없음\"</span>)\n\n@<span class=\"hljs-title function_\">smart_decorator</span>(<span class=\"hljs-string\">\"인수 포함\"</span>)\ndef <span class=\"hljs-title function_\">with_args</span>():\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"인수 포함\"</span>)\n\n<span class=\"hljs-title function_\">no_args</span>()\n<span class=\"hljs-title function_\">with_args</span>()\n</code></pre>\n<h1>9. 클래스 메서드 데코레이터</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>클래스 메소드를 꾸미려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n    @classmethod\n    @my_decorator\n    def <span class=\"hljs-title function_\">class_method</span>(cls):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Class method called\"</span>)\n\n<span class=\"hljs-title class_\">MyClass</span>.<span class=\"hljs-title function_\">class_method</span>()\n</code></pre>\n<h1>10. 정적 메소드를 위한 데코레이터</h1>\n<p>정적 메소드를 꾸미려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n    @staticmethod\n    @my_decorator\n    def <span class=\"hljs-title function_\">static_method</span>():\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Static method called\"</span>)\n\n<span class=\"hljs-title class_\">MyClass</span>.<span class=\"hljs-title function_\">static_method</span>()\n</code></pre>\n<h1>GraphQL 작업</h1>\n<h1>1. GraphQL 클라이언트 설정</h1>\n<p>GraphQL 작업을 위해서는:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> gql <span class=\"hljs-keyword\">import</span> gql, Client\n<span class=\"hljs-keyword\">from</span> gql.transport.requests <span class=\"hljs-keyword\">import</span> RequestsHTTPTransport\ntransport = RequestsHTTPTransport(url=<span class=\"hljs-string\">'https://your-graphql-endpoint.com/graphql'</span>)\nclient = Client(transport=transport, fetch_schema_from_transport=<span class=\"hljs-literal\">True</span>)\n</code></pre>\n<h2>2. Executing a Simple Query</h2>\n<p>Executing a Query:</p>\n<pre><code class=\"hljs language-python\">query = gql(<span class=\"hljs-string\">'''\n{\n  allWizards {\n    id\n    name\n    power\n  }\n}\n'''</span>)\n\nresult = client.execute(query)\n<span class=\"hljs-built_in\">print</span>(result)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>3. 변수를 사용하여 쿼리 실행하기</h1>\n<p>변수를 사용한 쿼리:</p>\n<pre><code class=\"hljs language-js\">query = <span class=\"hljs-title function_\">gql</span>(<span class=\"hljs-string\">''</span><span class=\"hljs-string\">'\nquery GetWizards($element: String!) {\n  wizards(element: $element) {\n    id\n    name\n  }\n}\n'</span><span class=\"hljs-string\">''</span>)\nparams = {<span class=\"hljs-string\">\"element\"</span>: <span class=\"hljs-string\">\"Fire\"</span>}\nresult = client.<span class=\"hljs-title function_\">execute</span>(query, variable_values=params)\n<span class=\"hljs-title function_\">print</span>(result)\n</code></pre>\n<h1>4. 뮤테이션</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>변이를 생성하고 실행하려면:</p>\n<pre><code class=\"hljs language-js\">mutation = <span class=\"hljs-title function_\">gql</span>(<span class=\"hljs-string\">''</span><span class=\"hljs-string\">'\nmutation CreateWizard($name: String!, $element: String!) {\n  createWizard(name: $name, element: $element) {\n    wizard {\n      id\n      name\n    }\n  }\n}\n'</span><span class=\"hljs-string\">''</span>)\nparams = {<span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Gandalf\"</span>, <span class=\"hljs-string\">\"element\"</span>: <span class=\"hljs-string\">\"Light\"</span>}\nresult = client.<span class=\"hljs-title function_\">execute</span>(mutation, variable_values=params)\n<span class=\"hljs-title function_\">print</span>(result)\n</code></pre>\n<h1>5. 에러 처리</h1>\n<p>에러 처리:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> gql <span class=\"hljs-keyword\">import</span> gql, Client\n<span class=\"hljs-keyword\">from</span> gql.transport.exceptions <span class=\"hljs-keyword\">import</span> TransportQueryError\n\n<span class=\"hljs-keyword\">try</span>:\n    result = client.execute(query)\n<span class=\"hljs-keyword\">except</span> TransportQueryError <span class=\"hljs-keyword\">as</span> e:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"GraphQL Query Error: <span class=\"hljs-subst\">{e}</span>\"</span>)\n</code></pre>\n<h1>6. Subscriptions</h1>\n<p>Working with Subscriptions:</p>\n<pre><code class=\"hljs language-python\">subscription = gql(<span class=\"hljs-string\">'''\nsubscription {\n  wizardUpdated {\n    id\n    name\n    power\n  }\n}\n'''</span>)\n\n<span class=\"hljs-keyword\">for</span> result <span class=\"hljs-keyword\">in</span> client.subscribe(subscription):\n    <span class=\"hljs-built_in\">print</span>(result)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>7. 단편</h1>\n<p>단편 사용 방법:</p>\n<pre><code class=\"hljs language-js\">query = <span class=\"hljs-title function_\">gql</span>(<span class=\"hljs-string\">''</span><span class=\"hljs-string\">'\nfragment WizardDetails on Wizard {\n  name\n  power\n}\nquery {\n  allWizards {\n    ...WizardDetails\n  }\n}\n'</span><span class=\"hljs-string\">''</span>)\nresult = client.<span class=\"hljs-title function_\">execute</span>(query)\n<span class=\"hljs-title function_\">print</span>(result)\n</code></pre>\n<h1>8. 인라인 단편</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 표를 마크다운 형식으로 변경해주세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">query = <span class=\"hljs-title function_\">gql</span>(<span class=\"hljs-string\">''</span><span class=\"hljs-string\">'\nquery 위자드얻기($withPower: Boolean!) {\n  allWizards {\n    name\n    power @include(if: $withPower)\n  }\n}\n'</span><span class=\"hljs-string\">''</span>)\nparams = {<span class=\"hljs-string\">\"withPower\"</span>: <span class=\"hljs-title class_\">True</span>}\nresult = client.<span class=\"hljs-title function_\">execute</span>(query, variable_values=params)\n<span class=\"hljs-title function_\">print</span>(result)\n</code></pre>\n<h1>10. 요청 일괄 처리</h1>\n<p>여러 작업을 하나의 요청으로 결합하여 네트워크 오버헤드를 줄이는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> gql <span class=\"hljs-keyword\">import</span> gql, <span class=\"hljs-title class_\">Client</span>\n<span class=\"hljs-keyword\">from</span> gql.<span class=\"hljs-property\">transport</span>.<span class=\"hljs-property\">requests</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">RequestsHTTPTransport</span>\n\ntransport = <span class=\"hljs-title class_\">RequestsHTTPTransport</span>(url=<span class=\"hljs-string\">'https://your-graphql-endpoint.com/graphql'</span>, use_json=<span class=\"hljs-title class_\">True</span>)\nclient = <span class=\"hljs-title class_\">Client</span>(transport=transport, fetch_schema_from_transport=<span class=\"hljs-title class_\">True</span>)\n\nquery1 = <span class=\"hljs-title function_\">gql</span>(<span class=\"hljs-string\">'query { wizard(id: \"1\") { name } }'</span>)\nquery2 = <span class=\"hljs-title function_\">gql</span>(<span class=\"hljs-string\">'query { allSpells { name } }'</span>)\n\nresults = client.<span class=\"hljs-title function_\">execute</span>([query1, query2])\n<span class=\"hljs-title function_\">print</span>(results)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>정규 표현식 사용하기</h1>\n<h1>1. 기본 패턴 매칭</h1>\n<p>문자열 내에서 패턴과 일치하는 항목을 찾으려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> re\ntext = <span class=\"hljs-string\">\"Search this string for patterns.\"</span>\nmatch = re.<span class=\"hljs-title function_\">search</span>(r<span class=\"hljs-string\">\"patterns\"</span>, text)\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">match</span>:\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"패턴을 찾았습니다!\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>2. 정규 표현식 컴파일하기</h1>\n<p>정규 표현식을 반복적으로 사용하려면 다음과 같이 컴파일하세요:</p>\n<pre><code class=\"hljs language-js\">pattern = re.<span class=\"hljs-title function_\">compile</span>(r<span class=\"hljs-string\">\"patterns\"</span>)\nmatch = pattern.<span class=\"hljs-title function_\">search</span>(text)\n</code></pre>\n<h1>3. 시작 또는 끝에서 매칭하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>문자열이 특정 패턴으로 시작하거나 끝나는지 확인하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> re.<span class=\"hljs-title function_\">match</span>(r<span class=\"hljs-string\">\"^Search\"</span>, text):\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Starts with 'Search'\"</span>)\n<span class=\"hljs-keyword\">if</span> re.<span class=\"hljs-title function_\">search</span>(r<span class=\"hljs-string\">\"patterns.$\"</span>, text):\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Ends with 'patterns.'\"</span>)\n</code></pre>\n<h1>4. 모든 일치 항목 찾기</h1>\n<p>문자열에서 특정 패턴의 모든 발생을 찾으려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">all_matches = re.<span class=\"hljs-title function_\">findall</span>(r<span class=\"hljs-string\">\"t\\w+\"</span>, text)  # <span class=\"hljs-string\">'t'</span>로 시작하는 단어를 찾습니다.\n<span class=\"hljs-title function_\">print</span>(all_matches)\n</code></pre>\n<h1>5. 검색 및 대체 (치환)</h1>\n<p>문자열 내에서 패턴의 발생을 대체하는 방법:</p>\n<pre><code class=\"hljs language-js\">replaced_text = re.<span class=\"hljs-title function_\">sub</span>(r<span class=\"hljs-string\">\"string\"</span>, <span class=\"hljs-string\">\"sentence\"</span>, text)\n<span class=\"hljs-title function_\">print</span>(replaced_text)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>6. 문자열 분할하기</h1>\n<p>패턴의 발생에 따라 문자열을 분할하려면:</p>\n<pre><code class=\"hljs language-js\">words = re.<span class=\"hljs-title function_\">split</span>(r<span class=\"hljs-string\">\"\\s+\"</span>, text)  # 하나 이상의 공백으로 분할\n<span class=\"hljs-title function_\">print</span>(words)\n</code></pre>\n<h1>7. 특수 문자 이스케이프하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>특수 문자를 그대로 비교하려면 이스케이프 처리를 해야 합니다:</p>\n<pre><code class=\"hljs language-js\">escaped = re.<span class=\"hljs-title function_\">search</span>(r<span class=\"hljs-string\">\"\\bfor\\b\"</span>, text)  # \\b는 단어 경계를 의미합니다\n</code></pre>\n<h3>8. 그룹 지정 및 캡처</h3>\n<p>패턴의 부분을 그룹으로 묶어서 값을 추출하기 위해:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">match = re.<span class=\"hljs-title function_\">search</span>(r<span class=\"hljs-string\">\"(\\w+) (\\w+)\"</span>, text)\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">match</span>:\n    <span class=\"hljs-title function_\">print</span>(match.<span class=\"hljs-title function_\">group</span>())  # 전체 매치\n    <span class=\"hljs-title function_\">print</span>(match.<span class=\"hljs-title function_\">group</span>(<span class=\"hljs-number\">1</span>)) # 첫 번째 그룹\n</code></pre>\n<h1>9. 캡처하지 않는 그룹</h1>\n<p>캡처하지 않고 그룹을 정의하는 방법:</p>\n<pre><code class=\"hljs language-js\">match = re.<span class=\"hljs-title function_\">search</span>(r<span class=\"hljs-string\">\"(?:\\w+) (\\w+)\"</span>, text)\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">match</span>:\n    <span class=\"hljs-title function_\">print</span>(match.<span class=\"hljs-title function_\">group</span>(<span class=\"hljs-number\">1</span>))  # 첫 번째 (그리고 유일한) 그룹\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>10. 룩어헤드 및 룩비하인드 어설션</h1>\n<p>결과에 포함되지 않고 패턴을 일치시키려면 주변에 오는 내용을 기반으로 합니다:</p>\n<pre><code class=\"hljs language-js\">lookahead = re.<span class=\"hljs-title function_\">search</span>(r<span class=\"hljs-string\">\"\\b\\w+(?= string)\"</span>, text)  # <span class=\"hljs-string\">' string'</span> 앞에 있는 단어\nlookbehind = re.<span class=\"hljs-title function_\">search</span>(r<span class=\"hljs-string\">\"(?&#x3C;=Search )\\w+\"</span>, text)  # <span class=\"hljs-string\">'Search '</span> 뒤에 있는 단어\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">lookahead</span>:\n    <span class=\"hljs-title function_\">print</span>(lookahead.<span class=\"hljs-title function_\">group</span>())\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">lookbehind</span>:\n    <span class=\"hljs-title function_\">print</span>(lookbehind.<span class=\"hljs-title function_\">group</span>())\n</code></pre>\n<h1>11. 패턴 일치 동작 수정을 위한 플래그</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래와 같이 플래그를 사용하여 re.IGNORECASE와 같이 패턴이 일치하는 방식을 변경할 수 있어요:</p>\n<pre><code class=\"hljs language-js\">대소문자_무시 = re.<span class=\"hljs-title function_\">findall</span>(r<span class=\"hljs-string\">\"search\"</span>, text, re.<span class=\"hljs-property\">IGNORECASE</span>)\n<span class=\"hljs-title function_\">print</span>(대소문자_무시)\n</code></pre>\n<h1>12. 명명된 그룹 사용하기</h1>\n<p>그룹에 이름을 할당하고 이름으로 참조할 수 있어요:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>match = re.search(r\"(?P<first>\\w+) (?P<second>\\w+)\", text)\nif match:\nprint(match.group('first'))\nprint(match.group('second'))</second></first></p>\n<h1>13. 여러 줄에 걸쳐 매칭하기</h1>\n<p>re.MULTILINE 플래그를 사용하여 여러 줄에 걸쳐 패턴을 매칭하려면:</p>\n<pre><code class=\"hljs language-js\">multi_line_text = <span class=\"hljs-string\">\"Start\\nmiddle end\"</span>\nmatches = re.<span class=\"hljs-title function_\">findall</span>(r<span class=\"hljs-string\">\"^m\\w+\"</span>, multi_line_text, re.<span class=\"hljs-property\">MULTILINE</span>)\n<span class=\"hljs-title function_\">print</span>(matches)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>14. 게으른 양자</h1>\n<p>가능한 한 적은 문자와 일치시키려면 게으른 양자 (*?, +?, ??)를 사용하세요:</p>\n<pre><code class=\"hljs language-js\">html = <span class=\"hljs-string\">\"&#x3C;body>&#x3C;h1>Title&#x3C;/h1>&#x3C;/body>\"</span>\nmatch = re.<span class=\"hljs-title function_\">search</span>(r<span class=\"hljs-string\">\"&#x3C;.*?>\"</span>, html)\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">match</span>:\n    <span class=\"hljs-title function_\">print</span>(match.<span class=\"hljs-title function_\">group</span>())  # <span class=\"hljs-string\">'&#x3C;body>'</span>와 일치합니다\n</code></pre>\n<h1>15. 상세한 정규 표현식</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>re.VERBOSE를 사용하여 더 읽기 쉬운 정규 표현식을 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">pattern = re.<span class=\"hljs-title function_\">compile</span>(r<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    \\b      # 단어 경계\n    \\w+     # 하나 이상의 단어 문자\n    \\s      # 공백\n    \"</span><span class=\"hljs-string\">\"\"</span>, re.<span class=\"hljs-property\">VERBOSE</span>)\nmatch = pattern.<span class=\"hljs-title function_\">search</span>(text)\n</code></pre>\n<h1>문자열 다루기</h1>\n<h1>1. 문자열 연결하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>문자열을 합치려면:</p>\n<pre><code class=\"hljs language-js\">greeting = <span class=\"hljs-string\">\"Hello\"</span>;\nname = <span class=\"hljs-string\">\"Alice\"</span>;\nmessage = greeting + <span class=\"hljs-string\">\", \"</span> + name + <span class=\"hljs-string\">\"!\"</span>;\n<span class=\"hljs-title function_\">print</span>(message);\n</code></pre>\n<h1>2. str.format을 사용한 문자열 서식 지정</h1>\n<p>문자열 템플릿에 값을 삽입하는 방법:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">message = <span class=\"hljs-string\">\"{}, {}. Welcome!\"</span>.<span class=\"hljs-title function_\">format</span>(greeting, name);\n<span class=\"hljs-title function_\">print</span>(message);\n</code></pre>\n<h1>3. Formatted String Literals (f-strings)</h1>\n<p>To embed expressions inside string literals (Python 3.6+):</p>\n<pre><code class=\"hljs language-js\">message = f<span class=\"hljs-string\">\"{greeting}, {name}. Welcome!\"</span>\n<span class=\"hljs-title function_\">print</span>(message)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4. 문자열 메소드 — 대소문자 변환</h1>\n<p>문자열의 대소문자를 변경하려면:</p>\n<pre><code class=\"hljs language-js\">s = <span class=\"hljs-string\">\"Python\"</span>\n<span class=\"hljs-title function_\">print</span>(s.<span class=\"hljs-title function_\">upper</span>())  # 대문자로 변환\n<span class=\"hljs-title function_\">print</span>(s.<span class=\"hljs-title function_\">lower</span>())  # 소문자로 변환\n<span class=\"hljs-title function_\">print</span>(s.<span class=\"hljs-title function_\">title</span>())  # 제목 케이스로 변환\n</code></pre>\n<h1>5. 문자열 메소드 — strip, rstrip, lstrip</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>문자열 끝에서 공백이나 특정 문자를 제거하려면:</p>\n<pre><code class=\"hljs language-js\">s = <span class=\"hljs-string\">\"   trim me   \"</span>\n<span class=\"hljs-title function_\">print</span>(s.<span class=\"hljs-title function_\">strip</span>())   # 양쪽 끝\n<span class=\"hljs-title function_\">print</span>(s.<span class=\"hljs-title function_\">rstrip</span>())  # 오른쪽 끝\n<span class=\"hljs-title function_\">print</span>(s.<span class=\"hljs-title function_\">lstrip</span>())  # 왼쪽 끝\n</code></pre>\n<h1>6. 문자열 메소드 — startswith, endswith</h1>\n<p>특정 텍스트를 찾아 문자열의 시작 또는 끝을 확인하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">s = <span class=\"hljs-string\">\"filename.txt\"</span>\n<span class=\"hljs-title function_\">print</span>(s.<span class=\"hljs-title function_\">startswith</span>(<span class=\"hljs-string\">\"file\"</span>))  # <span class=\"hljs-title class_\">True</span>\n<span class=\"hljs-title function_\">print</span>(s.<span class=\"hljs-title function_\">endswith</span>(<span class=\"hljs-string\">\".txt\"</span>))    # <span class=\"hljs-title class_\">True</span>\n</code></pre>\n<h1>7. 문자열 메서드 — split, join</h1>\n<p>문자열을 리스트로 나누거나 리스트를 문자열로 결합하려면:</p>\n<pre><code class=\"hljs language-js\">s = <span class=\"hljs-string\">\"split,this,string\"</span>\nwords = s.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">\",\"</span>)        # 문자열을 리스트로 분할\njoined = <span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-title function_\">join</span>(words)    # 리스트를 문자열로 결합\n<span class=\"hljs-title function_\">print</span>(words)\n<span class=\"hljs-title function_\">print</span>(joined)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>8. 문자열 메소드 — replace</h1>\n<p>문자열의 일부를 다른 문자열로 바꾸려면:</p>\n<pre><code class=\"hljs language-js\">s = <span class=\"hljs-string\">\"Hello world\"</span>;\nnew_s = s.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">\"world\"</span>, <span class=\"hljs-string\">\"Python\"</span>);\n<span class=\"hljs-title function_\">print</span>(new_s);\n</code></pre>\n<h1>9. 문자열 메소드 — find, index</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>서브스트링이 문자열 내에서의 위치를 찾으려면:</p>\n<pre><code class=\"hljs language-js\">s = <span class=\"hljs-string\">\"look for a substring\"</span>\nposition = s.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">\"substring\"</span>)  # 찾지 못하면 -<span class=\"hljs-number\">1</span> 반환\nindex = s.<span class=\"hljs-title function_\">index</span>(<span class=\"hljs-string\">\"substring\"</span>)    # 찾지 못하면 <span class=\"hljs-title class_\">ValueError</span>를 일으킴\n<span class=\"hljs-title function_\">print</span>(position)\n<span class=\"hljs-title function_\">print</span>(index)\n</code></pre>\n<h1>10. 문자열 메소드 — 문자와 작업하기</h1>\n<p>문자열 내 개별 문자를 처리하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\">s = <span class=\"hljs-string\">\"characters\"</span>\n<span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> s:\n    <span class=\"hljs-built_in\">print</span>(char)  <span class=\"hljs-comment\"># Prints each character on a new line</span>\n</code></pre>\n<h1>11. 문자열 메서드 — isdigit, isalpha, isalnum</h1>\n<p>문자열이 숫자만, 알파벳 문자만, 또는 알파벳 및 숫자만을 포함하는지 확인하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"123\"</span>.isdigit())   <span class=\"hljs-comment\"># True</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"abc\"</span>.isalpha())   <span class=\"hljs-comment\"># True</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"abc123\"</span>.isalnum())<span class=\"hljs-comment\"># True</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>12. 문자열 슬라이싱</h1>\n<p>슬라이싱을 사용하여 부분 문자열을 추출하려면:</p>\n<pre><code class=\"hljs language-js\">s = <span class=\"hljs-string\">\"나를 슬라이스해봐\"</span>\nsub = s[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">7</span>]  # <span class=\"hljs-number\">3</span>번째부터 <span class=\"hljs-number\">7</span>번째 문자까지\n<span class=\"hljs-title function_\">print</span>(sub)\n</code></pre>\n<h1>13. len으로 문자열 길이 계산</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>문자열의 길이를 구하려면:</p>\n<pre><code class=\"hljs language-js\">s = <span class=\"hljs-string\">\"length\"</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">len</span>(s))  # <span class=\"hljs-number\">6</span>\n</code></pre>\n<h2>14. 여러 줄을 포함하는 문자열</h2>\n<p>여러 줄에 걸쳐 있는 문자열을 다루려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">multi = <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"Line one\nLine two\nLine three\"</span><span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-title function_\">print</span>(multi)\n</code></pre>\n<h1>15. 원시 문자열</h1>\n<p>백슬래시를 리터럴 문자로 취급하려면 정규식 패턴 및 파일 경로에 유용합니다:</p>\n<pre><code class=\"hljs language-js\">path = r<span class=\"hljs-string\">\"C:\\User\\name\\folder\"</span>\n<span class=\"hljs-title function_\">print</span>(path)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>웹 스크레이핑 작업 중</h1>\n<h1>1. requests를 사용하여 웹 페이지 가져오기</h1>\n<p>웹 페이지의 내용을 검색하는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> requests\n\nurl = <span class=\"hljs-string\">'https://example.com'</span>\nresponse = requests.<span class=\"hljs-title function_\">get</span>(url)\nhtml = response.<span class=\"hljs-property\">text</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>2. BeautifulSoup을 사용하여 HTML 구문 분석</h1>\n<p>HTML을 구문 분석하고 데이터를 추출하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup\nsoup = BeautifulSoup(html, <span class=\"hljs-string\">'html.parser'</span>)\n<span class=\"hljs-built_in\">print</span>(soup.prettify())  <span class=\"hljs-comment\"># HTML을 예쁘게 출력</span>\n</code></pre>\n<h1>3. HTML 트리 내비게이션</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>태그를 사용하여 요소를 찾는 방법:</p>\n<pre><code class=\"hljs language-js\">title = soup.<span class=\"hljs-property\">title</span>.<span class=\"hljs-property\">text</span>  # 페이지 제목 가져오기\nheadings = soup.<span class=\"hljs-title function_\">find_all</span>(<span class=\"hljs-string\">'h1'</span>)  # 모든 &#x3C;h1> 태그 목록\n</code></pre>\n<h1>4. CSS 선택자 사용</h1>\n<p>CSS 선택자를 사용하여 요소를 선택하는 방법:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>articles = soup.select('div.article') # </p><div> 태그 안에 클래스 'article'을 가진 모든 요소 선택<p></p>\n<h1>5. 태그로부터 데이터 추출</h1>\n<p>HTML 요소에서 텍스트와 속성을 추출하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> article <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">articles</span>:\n    title = article.<span class=\"hljs-property\">h2</span>.<span class=\"hljs-property\">text</span>  # &#x3C;h2> 태그 안의 텍스트\n    link = article.<span class=\"hljs-property\">a</span>[<span class=\"hljs-string\">'href'</span>]  # &#x3C;a> 태그의 <span class=\"hljs-string\">'href'</span> 속성\n    <span class=\"hljs-title function_\">print</span>(title, link)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>6. 상대 URL 다루기</h1>\n<p>상대 URL을 절대 URL로 변환하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> urllib.<span class=\"hljs-property\">parse</span> <span class=\"hljs-keyword\">import</span> urljoin\nabsolute_urls = [<span class=\"hljs-title function_\">urljoin</span>(url, link) <span class=\"hljs-keyword\">for</span> link <span class=\"hljs-keyword\">in</span> relative_urls]\n</code></pre>\n<h1>7. 페이지네이션 다루기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여러 페이지에서 콘텐츠를 스크래핑하기:</p>\n<pre><code class=\"hljs language-js\">base_url = <span class=\"hljs-string\">\"https://example.com/page/\"</span>\n<span class=\"hljs-keyword\">for</span> page <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>):  # <span class=\"hljs-number\">5</span>페이지에 대해\n    page_url = base_url + <span class=\"hljs-title function_\">str</span>(page)\n    response = requests.<span class=\"hljs-title function_\">get</span>(page_url)\n    # 각 페이지의 콘텐츠 처리\n</code></pre>\n<h1>8. AJAX 요청 처리</h1>\n<p>AJAX 요청으로 로드된 데이터를 스크래핑하기</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-variable constant_\">AJAX</span> 요청의 <span class=\"hljs-variable constant_\">URL</span>을 찾아보세요 (브라우저의 개발자 도구 사용) 그리고 가져와보세요\najax_url = <span class=\"hljs-string\">'https://example.com/ajax_endpoint'</span>\ndata = requests.<span class=\"hljs-title function_\">get</span>(ajax_url).<span class=\"hljs-title function_\">json</span>()  # 응답이 <span class=\"hljs-title class_\">JSON</span> 형식일 것으로 가정합니다\n</code></pre>\n<h1>9. 정규 표현식을 활용한 웹 스크래핑</h1>\n<p>정규 표현식을 사용하여 데이터를 추출하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> re\nemails = re.<span class=\"hljs-title function_\">findall</span>(r<span class=\"hljs-string\">'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'</span>, html)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>10. 로봇 파일 (robots.txt) 존중하기</h1>\n<p>스크래핑 권한을 확인하려면 다음과 같이 robots.txt를 확인하세요:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> urllib.robotparser <span class=\"hljs-keyword\">import</span> RobotFileParser\n\nrp = RobotFileParser()\nrp.set_url(<span class=\"hljs-string\">'https://example.com/robots.txt'</span>)\nrp.read()\ncan_scrape = rp.can_fetch(<span class=\"hljs-string\">'*'</span>, url)\n</code></pre>\n<h1>11. 세션 및 쿠키 사용하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>세션 유지 및 쿠키 처리를 위해:</p>\n<pre><code class=\"hljs language-python\">session = requests.Session()\nsession.get(<span class=\"hljs-string\">'https://example.com/login'</span>)\nsession.cookies.<span class=\"hljs-built_in\">set</span>(<span class=\"hljs-string\">'key'</span>, <span class=\"hljs-string\">'value'</span>)  <span class=\"hljs-comment\"># 필요한 경우 쿠키 설정</span>\nresponse = session.get(<span class=\"hljs-string\">'https://example.com/protected_page'</span>)\n</code></pre>\n<h1>12. 브라우저 자동화를 통한 스크래이핑 (selenium 라이브러리)</h1>\n<p>자바스크립트로 렌더링된 동적 콘텐츠를 스크래이핑하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> selenium <span class=\"hljs-keyword\">import</span> webdriver\nbrowser = webdriver.Chrome()\nbrowser.get(<span class=\"hljs-string\">'https://example.com'</span>)\ncontent = browser.page_source\n<span class=\"hljs-comment\"># BeautifulSoup 등을 사용하여 데이터를 파싱하고 추출합니다.</span>\nbrowser.quit()\n</code></pre>\n<h1>13. 웹 스크래핑에서의 오류 처리</h1>\n<p>오류와 예외를 처리하는 방법:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">try</span>:\n    response = requests.get(url, timeout=<span class=\"hljs-number\">5</span>)\n    response.raise_for_status()  <span class=\"hljs-comment\"># 나쁜 상태 코드에 대해 오류를 발생시킵니다.</span>\n<span class=\"hljs-keyword\">except</span> requests.exceptions.RequestException <span class=\"hljs-keyword\">as</span> e:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"오류 발생: <span class=\"hljs-subst\">{e}</span>\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>14. 비동기 웹 스크래핑</h1>\n<p>데이터를 빠르게 검색하기 위해 웹 사이트를 비동기적으로 스크랩하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> aiohttp\n<span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">fetch</span>(url):\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> aiohttp.<span class=\"hljs-title class_\">ClientSession</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">session</span>:\n        <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> session.<span class=\"hljs-title function_\">get</span>(url) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">response</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">text</span>()\n\nurls = [<span class=\"hljs-string\">'https://example.com/page1'</span>, <span class=\"hljs-string\">'https://example.com/page2'</span>]\nloop = asyncio.<span class=\"hljs-title function_\">get_event_loop</span>()\npages = loop.<span class=\"hljs-title function_\">run_until_complete</span>(asyncio.<span class=\"hljs-title function_\">gather</span>(*(<span class=\"hljs-title function_\">fetch</span>(url) <span class=\"hljs-keyword\">for</span> url <span class=\"hljs-keyword\">in</span> urls)))\n</code></pre>\n<h1>15. 데이터 저장 (CSV, 데이터베이스)</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>크롤링한 데이터를 CSV 파일이나 데이터베이스에 저장하는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> csv\n\n<span class=\"hljs-keyword\">with</span> <span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'output.csv'</span>, <span class=\"hljs-string\">'w'</span>, newline=<span class=\"hljs-string\">''</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">file</span>:\n    writer = csv.<span class=\"hljs-title function_\">writer</span>(file)\n    writer.<span class=\"hljs-title function_\">writerow</span>([<span class=\"hljs-string\">'Title'</span>, <span class=\"hljs-string\">'URL'</span>])\n    <span class=\"hljs-keyword\">for</span> article <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">articles</span>:\n        writer.<span class=\"hljs-title function_\">writerow</span>([article[<span class=\"hljs-string\">'title'</span>], article[<span class=\"hljs-string\">'url'</span>]])\n</code></pre>\n<h1>pip로 작업하기 (패키지 관리)</h1>\n<h1>1. 패키지 설치</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>거대한 저장소에서 라이브러리를 불러와서 그 힘을 환경에 통합하려면:</p>\n<pre><code class=\"hljs language-js\">pip install numpy\n</code></pre>\n<h2>2. 설치된 패키지 나열</h2>\n<p>당신의 영역에 존재하는 라이브러리들을 조사하여 버전과 계열을 확인하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">pip list\n</code></pre>\n<h1>3. 패키지 업그레이드</h1>\n<p>설치된 라이브러리에 강화된 기능과 능력을 부여하여 최신 버전으로 업그레이드하는 방법:</p>\n<pre><code class=\"hljs language-js\">pip install --upgrade numpy\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4. 패키지 삭제</h1>\n<p>패키지를 삭제하려면:</p>\n<pre><code class=\"hljs language-js\">pip uninstall numpy\n</code></pre>\n<h1>5. 패키지 검색</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>패키지를 검색 중입니다:</p>\n<pre><code class=\"hljs language-js\">pip search <span class=\"hljs-string\">\"data visualization\"</span>\n</code></pre>\n<h2>6. 패키지의 특정 버전 설치하기</h2>\n<p>특정 버전을 설치하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">pip install numpy==<span class=\"hljs-number\">1.18</span><span class=\"hljs-number\">.5</span>\n</code></pre>\n<h1>7. Requirements 파일 생성하기</h1>\n<p>Requirements 파일:</p>\n<pre><code class=\"hljs language-js\">pip freeze > requirements.<span class=\"hljs-property\">txt</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>8. 요구 사항 파일에서 패키지 설치하기</h1>\n<p>친구야, 너의 요구 사항의 노트에 맞게 조율된 라이브러리의 교향곡을 창작할 때:</p>\n<pre><code class=\"hljs language-bash\">pip install -r requirements.txt\n</code></pre>\n<h1>9. 가상 환경 사용하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>패키지 충돌을 관리하기 위해 가상 환경을 생성하세요:</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-string\">'venv'</span>라는 이름의 가상 환경 생성\npython -m venv venv\n\n# 가상 환경 활성화\n# <span class=\"hljs-title class_\">Windows</span>에서는\n.\\venv\\<span class=\"hljs-title class_\">Scripts</span>\\activate\n\n# <span class=\"hljs-title class_\">Unix</span>나 <span class=\"hljs-title class_\">MacOS</span>에서는\nsource venv/bin/activate\n</code></pre>\n<h1>10. 패키지 의존성 확인</h1>\n<p>의존성 이해:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">pip show numpy\n</code></pre>\n<h1>일반 내장 함수 및 패키지 사용하기</h1>\n<h1>1. os - 운영 체제 인터페이스</h1>\n<p>운영 체제와 상호 작용하기 위해서:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\ncurrent_directory = os.getcwd()  <span class=\"hljs-comment\"># 현재 작업 디렉토리 가져오기</span>\n</code></pre>\n<h2>2. sys - 시스템별 매개변수 및 함수</h2>\n<p>시스템별 매개변수 및 함수에 액세스하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> sys\nsys.exit()  <span class=\"hljs-comment\"># 스크립트 종료</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>3. datetime - 기본 날짜와 시간 유형</h1>\n<p>날짜 및 시간을 다루려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\nnow = datetime.now()  <span class=\"hljs-comment\"># 현재 날짜와 시간</span>\n</code></pre>\n<h1>4. math - 수학 함수</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>수학적인 연산을 수행하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> math\nresult = math.<span class=\"hljs-title function_\">sqrt</span>(<span class=\"hljs-number\">16</span>)  # 제곱근\n</code></pre>\n<h1>5. random - 유사 난수 생성</h1>\n<p>유사 난수를 생성하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> random\nnumber = random.<span class=\"hljs-title function_\">randint</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)  # <span class=\"hljs-number\">1</span>부터 <span class=\"hljs-number\">10</span> 사이의 난수 생성\n</code></pre>\n<h1>6. json - JSON 인코더 및 디코더</h1>\n<p>JSON 데이터를 구문 분석하고 생성하기 위해:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> json\njson_string = json.<span class=\"hljs-title function_\">dumps</span>({<span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Alice'</span>, <span class=\"hljs-string\">'age'</span>: <span class=\"hljs-number\">30</span>})  # 딕셔너리를 <span class=\"hljs-title class_\">JSON</span> 문자열로 변환\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>7. 정규 표현식을 사용하기</h1>\n<p>정규 표현식을 사용하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> re\nmatch = re.<span class=\"hljs-title function_\">search</span>(<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'Hello, world!'</span>)  # 문자열에서 <span class=\"hljs-string\">'Hello'</span>를 검색함\n</code></pre>\n<h1>8. urllib - URL 처리 모듈</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>URL과 함께 작업하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> urllib.request <span class=\"hljs-keyword\">import</span> urlopen\ncontent = urlopen(<span class=\"hljs-string\">'http://example.com'</span>).read()  <span class=\"hljs-comment\"># 웹 페이지의 내용을 가져오기</span>\n</code></pre>\n<h1>9. http - HTTP 모듈</h1>\n<p>HTTP 서버를 만들고 HTTP 요청을 처리하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> http.<span class=\"hljs-property\">server</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">HTTPServer</span>, <span class=\"hljs-title class_\">BaseHTTPRequestHandler</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SimpleHTTPRequestHandler</span>(<span class=\"hljs-title class_\">BaseHTTPRequestHandler</span>):\n    def <span class=\"hljs-title function_\">do_GET</span>(self):\n        self.<span class=\"hljs-title function_\">send_response</span>(<span class=\"hljs-number\">200</span>)\n        self.<span class=\"hljs-title function_\">send_header</span>(<span class=\"hljs-string\">'Content-type'</span>, <span class=\"hljs-string\">'text/html'</span>)\n        self.<span class=\"hljs-title function_\">end_headers</span>()\n        self.<span class=\"hljs-property\">wfile</span>.<span class=\"hljs-title function_\">write</span>(b<span class=\"hljs-string\">'&#x3C;html>&#x3C;head>&#x3C;title>Python HTTP Server&#x3C;/title>&#x3C;/head>'</span>)\n        self.<span class=\"hljs-property\">wfile</span>.<span class=\"hljs-title function_\">write</span>(b<span class=\"hljs-string\">'&#x3C;body>&#x3C;h1>Hello from a simple Python HTTP server!&#x3C;/h1>&#x3C;/body>&#x3C;/html>'</span>)\n\ndef <span class=\"hljs-title function_\">run</span>(server_class=<span class=\"hljs-title class_\">HTTPServer</span>, handler_class=<span class=\"hljs-title class_\">SimpleHTTPRequestHandler</span>):\n    server_address = (<span class=\"hljs-string\">''</span>, <span class=\"hljs-number\">8000</span>)  # <span class=\"hljs-title class_\">Serve</span> on all addresses, port <span class=\"hljs-number\">8000</span>\n    httpd = <span class=\"hljs-title function_\">server_class</span>(server_address, handler_class)\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Server starting on port 8000...\"</span>)\n    httpd.<span class=\"hljs-title function_\">serve_forever</span>()\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-title function_\">run</span>()\n</code></pre>\n<h1>10. subprocess - Subprocess Management</h1>\n<p>새로운 프로세스를 생성하고 그들의 입력/출력/에러 파이프에 연결하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> subprocess\nsubprocess.<span class=\"hljs-title function_\">run</span>([<span class=\"hljs-string\">'ls'</span>, <span class=\"hljs-string\">'-l'</span>])  # <span class=\"hljs-string\">'ls -l'</span> 명령 실행\n</code></pre>\n<h1>11. 소켓 - 저수준 네트워킹 인터페이스</h1>\n<p>네트워크 클라이언트와 서버를 만들려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> socket\ns = socket.<span class=\"hljs-title function_\">socket</span>(socket.<span class=\"hljs-property\">AF_INET</span>, socket.<span class=\"hljs-property\">SOCK_STREAM</span>)  # <span class=\"hljs-variable constant_\">TCP</span>/<span class=\"hljs-variable constant_\">IP</span> 소켓 만들기\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>12. threading - 스레드 기반 병렬 처리</h1>\n<p>동시에 코드를 실행하는 방법을 알아보세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> threading\ndef <span class=\"hljs-title function_\">worker</span>():\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"작업자 스레드 실행 중\"</span>)\nthread = threading.<span class=\"hljs-title class_\">Thread</span>(target=worker)\nthread.<span class=\"hljs-title function_\">start</span>()\n</code></pre>\n<h1>13. multiprocessing - 프로세스 기반 병렬 처리</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>동시에 실행중인 프로세스를 관리하기 위해:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> multiprocessing <span class=\"hljs-keyword\">import</span> Process\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">worker</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"작업자 프로세스\"</span>)\np = Process(target=worker)\np.start()\n</code></pre>\n<h1>14. argparse - 명령행 옵션, 인수 및 하위 명령어를 위한 파서</h1>\n<p>명령행 인수를 구문 분석하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> argparse\nparser = argparse.<span class=\"hljs-title class_\">ArgumentParser</span>(description=<span class=\"hljs-string\">\"일부 정수를 처리합니다.\"</span>)\nargs = parser.<span class=\"hljs-title function_\">parse_args</span>()\n</code></pre>\n<h1>15. logging - 로깅 시스템</h1>\n<p>메시지를 기록하려면 (debug, info, warning, error 및 critical):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> logging\nlogging.<span class=\"hljs-title function_\">warning</span>(<span class=\"hljs-string\">'이것은 경고 메시지입니다.'</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>16. unittest - 단위 테스트 프레임워크</h1>\n<p>단위 테스트를 작성하고 실행하는 방법은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> unittest\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestStringMethods</span>(unittest.<span class=\"hljs-property\">TestCase</span>):\n    def <span class=\"hljs-title function_\">test_upper</span>(self):\n        self.<span class=\"hljs-title function_\">assertEqual</span>(<span class=\"hljs-string\">'foo'</span>.<span class=\"hljs-title function_\">upper</span>(), <span class=\"hljs-string\">'FOO'</span>)\n</code></pre>\n<h1>17. pathlib - 객체 지향형 파일 시스템 경로</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파일 시스템 경로를 객체 지향적으로 다루려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> Path\np = Path(<span class=\"hljs-string\">'.'</span>)\n</code></pre>\n<h1>18. functools - 고계 함수 및 호출 가능 객체에 대한 작업</h1>\n<p>고계 함수 및 호출 가능 객체에 대해 작업하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> lru_cache\n@<span class=\"hljs-title function_\">lru_cache</span>(maxsize=<span class=\"hljs-title class_\">None</span>)\ndef <span class=\"hljs-title function_\">fib</span>(n):\n    <span class=\"hljs-keyword\">if</span> n &#x3C; <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">return</span> n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fib</span>(n-<span class=\"hljs-number\">1</span>) + <span class=\"hljs-title function_\">fib</span>(n-<span class=\"hljs-number\">2</span>)\n</code></pre>\n<h1>19. collections - Container Data Types</h1>\n<p>특수화된 컨테이너 데이터 타입 (deque, Counter, OrderedDict 등)을 사용하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Counter</span>\nc = <span class=\"hljs-title class_\">Counter</span>(<span class=\"hljs-string\">'hello world'</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>20. itertools - 효율적인 루핑을 위한 반복자 생성 함수</h1>\n<p>효율적인 루핑을 위해 반복자를 생성하고 사용하는 방법은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> itertools\n<span class=\"hljs-keyword\">for</span> combination <span class=\"hljs-keyword\">in</span> itertools.combinations(<span class=\"hljs-string\">'ABCD'</span>, <span class=\"hljs-number\">2</span>):\n    <span class=\"hljs-built_in\">print</span>(combination)\n</code></pre>\n<h1>21. hashlib - 안전한 해시 및 메시지 다이제스트 알고리즘</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>데이터를 해싱하기 위해:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> hashlib\nhash_object = hashlib.<span class=\"hljs-title function_\">sha256</span>(b<span class=\"hljs-string\">'Hello World'</span>)\nhex_dig = hash_object.<span class=\"hljs-title function_\">hexdigest</span>()\n</code></pre>\n<h1>22. csv - CSV 파일 읽기 및 쓰기</h1>\n<p>CSV 파일에서 읽고 쓰려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> csv\n<span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'file.csv'</span>, mode=<span class=\"hljs-string\">'r'</span>) <span class=\"hljs-keyword\">as</span> infile:\n    reader = csv.reader(infile)\n</code></pre>\n<h1>23. xml.etree.ElementTree - The ElementTree XML API</h1>\n<p>To parse and create XML data:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> xml.etree.ElementTree <span class=\"hljs-keyword\">as</span> ET\ntree = ET.parse(<span class=\"hljs-string\">'file.xml'</span>)\nroot = tree.getroot()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>24. sqlite3 - SQLite 데이터베이스를 위한 DB-API 2.0 인터페이스</h1>\n<p>SQLite 데이터베이스와 상호 작용하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> sqlite3\nconn = sqlite3.connect(<span class=\"hljs-string\">'example.db'</span>)\n</code></pre>\n<h1>25. tkinter - GUI 도구 상자</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>GUI 애플리케이션을 만들려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> tkinter <span class=\"hljs-keyword\">as</span> tk\nroot = tk.<span class=\"hljs-title class_\">Tk</span>()\n</code></pre>\n<h1>26. pickle - Python 객체 직렬화</h1>\n<p>Python 객체 구조를 직렬화하고 역직렬화하는 데 사용됩니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> pickle\nserialized_obj = pickle.dumps(obj)\n</code></pre>\n<h1>27. io - Core Tools for Working with Streams</h1>\n<p>To handle streams (file-like objects):</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> io <span class=\"hljs-keyword\">import</span> StringIO\nf = StringIO(<span class=\"hljs-string\">\"some initial text data\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>28. time - 시간 액세스 및 변환</h1>\n<p>시간 관련 함수에 접근하기 위해서:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> time\ntime.sleep(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\"># 1초 동안 대기</span>\n</code></pre>\n<h1>29. calendar - 일반 캘린더 관련 함수</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>달력을 활용하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> calendar\n<span class=\"hljs-built_in\">print</span>(calendar.month(<span class=\"hljs-number\">2023</span>, <span class=\"hljs-number\">1</span>))  <span class=\"hljs-comment\"># 2023년 1월 달력 출력</span>\n</code></pre>\n<p><strong>30. queue - 동기화된 큐 클래스</strong></p>\n<p>멀티스레드 프로그래밍에 유용한 큐를 관리하세요:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> queue <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Queue</span>\nq = <span class=\"hljs-title class_\">Queue</span>()\n</code></pre>\n<h1>31. shutil - 고수준 파일 작업</h1>\n<p>고수준 파일 작업을 수행하려면 복사 및 아카이빙과 같은 작업을 사용합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> shutil\nshutil.<span class=\"hljs-title function_\">copyfile</span>(<span class=\"hljs-string\">'source.txt'</span>, <span class=\"hljs-string\">'dest.txt'</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>32. glob - Unix 스타일의 경로명 패턴 확장</h1>\n<p>지정된 패턴과 일치하는 파일을 찾기:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> glob\n<span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> glob.<span class=\"hljs-title function_\">glob</span>(<span class=\"hljs-string\">\"*.txt\"</span>):\n    <span class=\"hljs-title function_\">print</span>(file)\n</code></pre>\n<h1>33. tempfile - 임시 파일 및 디렉토리 생성</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>임시 파일과 디렉토리를 생성하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> tempfile\ntemp = tempfile.<span class=\"hljs-title class_\">TemporaryFile</span>()\n</code></pre>\n<h1>34. bz2 - Bzip2 압축 지원</h1>\n<p>bzip2 압축을 사용하여 데이터를 압축하고 해제하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> bz2\ncompressed = bz2.<span class=\"hljs-title function_\">compress</span>(b<span class=\"hljs-string\">'여기에 데이터를 입력하세요'</span>)\n</code></pre>\n<h1>35. gzip - Gzip 압축 지원</h1>\n<p>gzip 압축을 사용하여 데이터를 압축 및 해제하는 방법:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> gzip\n<span class=\"hljs-keyword\">with</span> gzip.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'file.txt.gz'</span>, <span class=\"hljs-string\">'wt'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">f</span>:\n    f.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">'여기에 데이터를 입력하세요'</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>36. ssl - TLS/SSL Wrapper for Socket Objects</h1>\n<p>네트워크 소켓에서 TLS/SSL 암호화 및 피어 인증을 처리하기 위해:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> ssl\nssl.<span class=\"hljs-title function_\">wrap_socket</span>(sock)\n</code></pre>\n<h1>37. imaplib - IMAP4 프로토콜 클라이언트</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>IMAP4를 통해 메일에 액세스하고 조작하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> imaplib\nmail = imaplib.<span class=\"hljs-title class_\">IMAP4</span>_SSL(<span class=\"hljs-string\">'imap.example.com'</span>)\n</code></pre>\n<h1>38. smtplib - SMTP 프로토콜 클라이언트</h1>\n<p>Simple Mail Transfer Protocol (SMTP)를 사용하여 메일을 보내려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> smtplib\nserver = smtplib.<span class=\"hljs-title function_\">SMTP</span>(<span class=\"hljs-string\">'smtp.example.com'</span>, <span class=\"hljs-number\">587</span>)\n</code></pre>\n<h1>39. email - 이메일 메시지 관리</h1>\n<p>이메일 메시지를 관리하려면 MIME 및 다른 RFC 2822 기반 메시지 문서를 포함합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> email.<span class=\"hljs-property\">message</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">EmailMessage</span>\nmsg = <span class=\"hljs-title class_\">EmailMessage</span>()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>40. base64 - Base16, Base32, Base64, Base85 Data Encodings</h1>\n<p>베이스64를 사용하여 데이터를 인코딩 및 디코딩하는 방법:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> base64\nencoded_data = base64.b64encode(<span class=\"hljs-string\">b'data to encode'</span>)\n</code></pre>\n<h1>41. difflib - Deltas를 계산하는 도우미</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>시퀀스를 비교하고 사람이 읽기 쉬운 차이를 생성하려면:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> difflib\ndiff = difflib.ndiff(<span class=\"hljs-string\">'one\\ntwo\\nthree\\n'</span>.splitlines(keepends=<span class=\"hljs-literal\">True</span>),\n                     <span class=\"hljs-string\">'ore\\ntree\\nemu\\n'</span>.splitlines(keepends=<span class=\"hljs-literal\">True</span>))\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">''</span>.join(diff))\n</code></pre>\n<h1>42. gettext - 다국어 지역화 서비스</h1>\n<p>파이썬 프로그램의 국제화를 위해:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> gettext\ngettext.<span class=\"hljs-title function_\">install</span>(<span class=\"hljs-string\">'myapp'</span>)\n</code></pre>\n<h1>43. locale - Internationalization Services</h1>\n<p>To access a database of culture-specific data formats:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> locale\nlocale.<span class=\"hljs-title function_\">setlocale</span>(locale.<span class=\"hljs-property\">LC_ALL</span>, <span class=\"hljs-string\">''</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>44. secrets - 시크릿 관리를 위한 안전한 무작위 숫자 생성</h1>\n<p>시크릿 관리를 위해 안전한 무작위 숫자를 생성하려면 토큰이나 비밀번호와 같은 비밀을 생성합니다:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> secrets\nsecure_token = secrets.<span class=\"hljs-title function_\">token_hex</span>(<span class=\"hljs-number\">16</span>)\n</code></pre>\n<h1>45. uuid - RFC 4122에 따른 UUID 개체</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>유니버설 유니크 식별자(UUID)를 생성하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> uuid\nunique_id = uuid.<span class=\"hljs-title function_\">uuid4</span>()\n</code></pre>\n<h1>46. html - 하이퍼텍스트 마크업 언어 지원</h1>\n<p>HTML 개체를 처리하고 조작하려면:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> html\nescaped = html.<span class=\"hljs-built_in\">escape</span>(<span class=\"hljs-string\">'&#x3C;a href=\"https://example.com\">link&#x3C;/a>'</span>)\n</code></pre>\n<h1>47. ftplib - FTP Protocol Client</h1>\n<p>FTP 프로토콜을 통해 파일을 교환 및 상호 작용하기 위해:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> ftplib <span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">FTP</span>\nftp = <span class=\"hljs-title function_\">FTP</span>(<span class=\"hljs-string\">'ftp.example.com'</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>48. tarfile - Tar 아카이브 파일 읽고 쓰기</h1>\n<p>tar 아카이브 파일을 다루는 방법입니다. 아카이빙하고 압축/압축해제할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> tarfile\n<span class=\"hljs-keyword\">with</span> tarfile.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'sample.tar.gz'</span>, <span class=\"hljs-string\">'w:gz'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">tar</span>:\n    tar.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">'sample.txt'</span>)\n</code></pre>\n<p>요약하자면, 여기까지가 전부에요. 여기서 제공된 목록이 빠르게 숙련되는 데 도움이 되었으면 좋겠어요. 만약 마음에 드셨다면 공유하거나 좋아요를 눌러주세요 (참 많은 도움이 됩니다!).</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>더 자세하고 포괄적인 Python 개발 가이드가 필요하시다면, 제가 실용적인 Python 개발에 대해 가장 좋은 자료로 발견한 두 권의 책이 있습니다. 이 책들을 강력히 추천합니다:</p>\n<ul>\n<li>파이썬 졸업반 — 제3판</li>\n<li>따분한 일 자동화하기 — 제2판</li>\n</ul>\n<p>읽어 주셔서 감사합니다! 댓글에 놓친 부분이 있다면 언제든 댓글로 남겨주세요!</p>\n<h1>Stackademic 🎓</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>끝까지 읽어주셔서 감사합니다. 떠나시기 전에:</p>\n<ul>\n<li>작가를 응원하고 팔로우해주세요! 👏</li>\n<li>저희를 팔로우하기: X | LinkedIn | YouTube | Discord</li>\n<li>다른 플랫폼 방문하기: In Plain English | CoFeed | Venture | Cubed</li>\n<li>더 많은 콘텐츠: Stackademic.com</li>\n</ul></div>\n</body>\n</html>\n"},"__N_SSG":true}