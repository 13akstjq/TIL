{"pageProps":{"post":{"title":"Next.js 15에서 instrumentation-client.js 로 웹사이트 분석 도구 사용하기₩","description":"","date":"2025-04-22 02:38","slug":"2025-04-22-instrumentation-clientjs","content":"\n\n# instrumentation-client.js\n\ninstrumentation-client.js|ts 파일은 여러분의 애플리케이션 프런트엔드 코드가 실행되기 전에 모니터링이나 분석 코드를 추가할 수 있게 해줍니다. 이를 통해 성능 추적, 오류 감지 같은 클라이언트 측 관찰성 도구들을 쉽고 빠르게 셋업할 수 있죠.\n\n사용 방법도 아주 간단해요! 파일을 애플리케이션 루트 폴더나 `src` 폴더 안에 넣기만 하면 준비 완료입니다.\n\n## 사용법\n\n(여기서부터 구체적인 사용법을 이어서 작성하면 됩니다.)  \n\n이렇게 미리 모니터링 코드를 두면, 현장에서 발생하는 문제를 더 빨리 발견할 수 있고, 서비스 품질을 높이는데 큰 도움이 되니 꼭 활용해보세요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n서버 사이드 계측(instrumentation)과 달리, 클라이언트 쪽에서는 특정 함수를 따로 export할 필요가 없어요. 그냥 원하는 파일 안에 모니터링 코드를 바로 작성해주시면 됩니다.\n\n```js\n// 퍼포먼스 모니터링 시작 시점 찍기\nperformance.mark('app-init')\n \n// 애널리틱스 초기화\nconsole.log('Analytics initialized')\n \n// 에러 추적 세팅\nwindow.addEventListener('error', (event) => {\n  // 에러 추적 서비스로 에러 데이터 전송\n  reportError(event.error)\n})\n```\n\n이렇게 간단히 작성할 수 있죠. \n\n참고로 `performance.mark()`는 브라우저의 성능 측정 API로, 특정 시점에 표시를 찍어서 나중에 성능 분석 자료로 활용할 수 있어요. 그리고 `window.addEventListener('error', ...)`를 사용하면 페이지 내에서 발생하는 자바스크립트 에러를 잡아내서 별도의 추적 시스템에 전송할 수 있어서 디버깅에 매우 유용합니다.\n\n---\n\n## 버전 히스토리\n\n| Version | Changes                         |\n|---------|--------------------------------|\n| v15.3   | `instrumentation-client` 도입  |\n\n`instrumentation-client`를 도입하면서 클라이언트 쪽에서도 더 쉽게 모니터링 코드 작성이 가능해졌어요. 이 부분 활용하면 애플리케이션 상태를 실시간으로 추적하거나 성능 병목을 빠르게 찾는 데 큰 도움이 됩니다.","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>instrumentation-client.js</h1>\n<p>instrumentation-client.js|ts 파일은 여러분의 애플리케이션 프런트엔드 코드가 실행되기 전에 모니터링이나 분석 코드를 추가할 수 있게 해줍니다. 이를 통해 성능 추적, 오류 감지 같은 클라이언트 측 관찰성 도구들을 쉽고 빠르게 셋업할 수 있죠.</p>\n<p>사용 방법도 아주 간단해요! 파일을 애플리케이션 루트 폴더나 <code>src</code> 폴더 안에 넣기만 하면 준비 완료입니다.</p>\n<h2>사용법</h2>\n<p>(여기서부터 구체적인 사용법을 이어서 작성하면 됩니다.)</p>\n<p>이렇게 미리 모니터링 코드를 두면, 현장에서 발생하는 문제를 더 빨리 발견할 수 있고, 서비스 품질을 높이는데 큰 도움이 되니 꼭 활용해보세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>서버 사이드 계측(instrumentation)과 달리, 클라이언트 쪽에서는 특정 함수를 따로 export할 필요가 없어요. 그냥 원하는 파일 안에 모니터링 코드를 바로 작성해주시면 됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 퍼포먼스 모니터링 시작 시점 찍기</span>\nperformance.<span class=\"hljs-title function_\">mark</span>(<span class=\"hljs-string\">'app-init'</span>)\n \n<span class=\"hljs-comment\">// 애널리틱스 초기화</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Analytics initialized'</span>)\n \n<span class=\"hljs-comment\">// 에러 추적 세팅</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =></span> {\n  <span class=\"hljs-comment\">// 에러 추적 서비스로 에러 데이터 전송</span>\n  <span class=\"hljs-title function_\">reportError</span>(event.<span class=\"hljs-property\">error</span>)\n})\n</code></pre>\n<p>이렇게 간단히 작성할 수 있죠.</p>\n<p>참고로 <code>performance.mark()</code>는 브라우저의 성능 측정 API로, 특정 시점에 표시를 찍어서 나중에 성능 분석 자료로 활용할 수 있어요. 그리고 <code>window.addEventListener('error', ...)</code>를 사용하면 페이지 내에서 발생하는 자바스크립트 에러를 잡아내서 별도의 추적 시스템에 전송할 수 있어서 디버깅에 매우 유용합니다.</p>\n<hr>\n<h2>버전 히스토리</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v15.3</td><td><code>instrumentation-client</code> 도입</td></tr></tbody></table>\n<p><code>instrumentation-client</code>를 도입하면서 클라이언트 쪽에서도 더 쉽게 모니터링 코드 작성이 가능해졌어요. 이 부분 활용하면 애플리케이션 상태를 실시간으로 추적하거나 성능 병목을 빠르게 찾는 데 큰 도움이 됩니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}