{"pageProps":{"post":{"title":"github 회사 개인 계정 등록해서 동시에 사용하기","description":"","date":"2025-04-22 19:34","slug":"2025-04-22-github-ssh-multi-login","content":"\n\n# github\n\ngithub 을 사용하다보면 회사와 개인 계정이 분리되어있어서 사용하는데 번거로운 경우가 있는데요. \n로컬에서 push 하거나 pull할 때 저장소 권한이 없어서 막히는 경우가 있습니다. \n\n\ngithub에 로그인 하는 방법이 https와 ssh 가 있는데 이 중에서 ssh 를 사용하면 편리하게 할 수 있습니다. \nhttps를 사용하지 않는 이유는 매번 회사 혹은 개인 깃헙 계정으로 웹 사이트 로그인을 해야하기 때문입니다. \n\n## ssh 자동화 스크립트\n\nssh 를 이용하여 회사와 개인 깃 계정을 분리하는 자동 스크립트를 만들었습니다. \n아래에 이름 바꾸는 부분만 바꿔주신 후 사용하시면 됩니다. \n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```sh\n#!/bin/bash\n\n# 이름만 바꿔주면 돼요\nPERSONAL_EMAIL=\"you@example.com\"\nWORK_EMAIL=\"you@company.com\"\nPERSONAL_NAME=\"yourusername\"\nWORK_NAME=\"yourcompany\"\n\n# 1. SSH 키 생성\necho \"🔑 Generating SSH keys...\"\nssh-keygen -t ed25519 -C \"$PERSONAL_EMAIL\" -f ~/.ssh/id_ed25519_personal -N \"\"\nssh-keygen -t ed25519 -C \"$WORK_EMAIL\" -f ~/.ssh/id_ed25519_work -N \"\"\n\n# 2. SSH Config 파일에 Host alias 추가\necho \"⚙️ Updating ~/.ssh/config...\"\ncat <<EOF >> ~/.ssh/config\n\n# Personal GitHub\nHost github-personal\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519_personal\n  IdentitiesOnly yes\n\n# Work GitHub\nHost github-work\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519_work\n  IdentitiesOnly yes\nEOF\n\n# 3. SSH Agent 등록 (macOS/Linux 공통)\necho \"🚀 Adding SSH keys to ssh-agent...\"\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519_personal\nssh-add ~/.ssh/id_ed25519_work\n\n# 4. 키 확인 안내\necho \"📋 Copy the following keys and add them to GitHub:\"\n\necho \"🔐 Personal:\"\ncat ~/.ssh/id_ed25519_personal.pub\necho \"\"\necho \"🔐 Work:\"\ncat ~/.ssh/id_ed25519_work.pub\necho \"\"\necho \"👉 Add these keys at https://github.com/settings/keys (각 계정마다 로그인해서)\"\n\n# 5. gh auth login 안내\necho \"\"\necho \"🧪 Now login to GitHub CLI for each account:\"\necho \"👉 Personal account: gh auth login --hostname github-personal\"\necho \"👉 Work account: gh auth login --hostname github-work\"\n\n```\n\n\n### 사용 방법 \n\n1. 실행 권한 부여 \n\n```bash\nnano setup_ssh_accounts.sh\n# 붙여넣기 후 저장 (Ctrl+O, Enter → Ctrl+X)\n\n```\n\n2. 실행\n\n```bash\n./setup_ssh_accounts.sh \n```\n\n3. ssh 생성\n위 파일 실행으로 생성된 ssh 키들을 회사와 개인 계정에 접속해 \nhttps://github.com/settings/keys 페이지로 들어가서 new SSH key 를 클릭해 새로운 ssh key를 만들어줍니다. \n\n![github ssh setting](/TIL/assets/img/2025-04-22-github-ssh-multi-login-0.png)\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n3. remote 저장소 url 변경\n\n```bash\n// 개인 \ngit remote set-url origin git@github-personal:yourusername/my-repo.git\n\n// 회사\ngit remote set-url origin git@github-work:yourcompany/project.git\n```\n\n이제 각 저장소에서 기존에 https 로 remote 저장소가 연결되어있던 부분들을 ssh 형태의 remote url로 바꿔줍니다. \n\n\n4. 확인 \n\n이렇게 한 후에 정상적으로 ssh가 적용되었는지 확인하려면 아래 명령어를 입력합니다. \n\n```bash\nssh -T git@github.com\n```\n\n아래와 같이 나오면 정상 적용된 것입니다. \n만약 Permission denied가 뜬다면 → GitHub와 연결이 안 된 것입니다.\n\n```bash\nHi yourusername! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n올바른 키가 등록되어 있는지 확인하려면\n\n```bash\nssh-add -l\n```\n\n이 결과에 id_ed25519_personal 또는 id_ed25519_work 가 없으면 아래 명령으로 추가해 주세요:\n\n```bash\nssh-add ~/.ssh/id_ed25519_personal\nssh-add ~/.ssh/id_ed25519_work\n```\n\n~/.ssh/config에 alias 설정 제대로 했는지 확인하려면\n\n```bash\ncat ~/.ssh/config\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래처럼 나오면 정상 적용된 것입니다. \n\n```bash\nHost github-personal\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519_personal\n  IdentitiesOnly yes\n```\n\n여기까지하면 회사 계정과 개인 계정을 동시에 사용할 수 있지만 만약 회사가 SSO 로그인을 하도록 설정되어있다면 아래와 같은 에러가 발생합니다. \n\n```bash\nERROR: The 'organization' organization has enabled or enforced SAML SSO.\nTo access this repository, you must use the HTTPS remote with a personal access token or SSH with an SSH key and passphrase that has been authorized for this organization.\nVisit https://docs.github.com/articles/authenticating-to-a-github-organization-with-saml-single-sign-on/ for more information.\n\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이런 경우에는 회사 organization에서 ssh를 승인 해야합니다. \n\n[https://github.com/settings/keys](https://github.com/settings/keys) 다시 key 페이지로 들어가서 아래 사진의 configure SSO를 클릭한 후 authorize를 눌러서 활성화를 시켜줍니다. \n\n![github ssh authorize](/TIL/assets/img/2025-04-22-github-ssh-multi-login-1.png)","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>github</h1>\n<p>github 을 사용하다보면 회사와 개인 계정이 분리되어있어서 사용하는데 번거로운 경우가 있는데요.\n로컬에서 push 하거나 pull할 때 저장소 권한이 없어서 막히는 경우가 있습니다.</p>\n<p>github에 로그인 하는 방법이 https와 ssh 가 있는데 이 중에서 ssh 를 사용하면 편리하게 할 수 있습니다.\nhttps를 사용하지 않는 이유는 매번 회사 혹은 개인 깃헙 계정으로 웹 사이트 로그인을 해야하기 때문입니다.</p>\n<h2>ssh 자동화 스크립트</h2>\n<p>ssh 를 이용하여 회사와 개인 깃 계정을 분리하는 자동 스크립트를 만들었습니다.\n아래에 이름 바꾸는 부분만 바꿔주신 후 사용하시면 됩니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-meta\">#!/bin/bash</span>\n\n<span class=\"hljs-comment\"># 이름만 바꿔주면 돼요</span>\nPERSONAL_EMAIL=<span class=\"hljs-string\">\"you@example.com\"</span>\nWORK_EMAIL=<span class=\"hljs-string\">\"you@company.com\"</span>\nPERSONAL_NAME=<span class=\"hljs-string\">\"yourusername\"</span>\nWORK_NAME=<span class=\"hljs-string\">\"yourcompany\"</span>\n\n<span class=\"hljs-comment\"># 1. SSH 키 생성</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"🔑 Generating SSH keys...\"</span>\nssh-keygen -t ed25519 -C <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$PERSONAL_EMAIL</span>\"</span> -f ~/.ssh/id_ed25519_personal -N <span class=\"hljs-string\">\"\"</span>\nssh-keygen -t ed25519 -C <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$WORK_EMAIL</span>\"</span> -f ~/.ssh/id_ed25519_work -N <span class=\"hljs-string\">\"\"</span>\n\n<span class=\"hljs-comment\"># 2. SSH Config 파일에 Host alias 추가</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"⚙️ Updating ~/.ssh/config...\"</span>\n<span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF >> ~/.ssh/config\n\n# Personal GitHub\nHost github-personal\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519_personal\n  IdentitiesOnly yes\n\n# Work GitHub\nHost github-work\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519_work\n  IdentitiesOnly yes\nEOF</span>\n\n<span class=\"hljs-comment\"># 3. SSH Agent 등록 (macOS/Linux 공통)</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"🚀 Adding SSH keys to ssh-agent...\"</span>\n<span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(ssh-agent -s)</span>\"</span>\nssh-add ~/.ssh/id_ed25519_personal\nssh-add ~/.ssh/id_ed25519_work\n\n<span class=\"hljs-comment\"># 4. 키 확인 안내</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"📋 Copy the following keys and add them to GitHub:\"</span>\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"🔐 Personal:\"</span>\n<span class=\"hljs-built_in\">cat</span> ~/.ssh/id_ed25519_personal.pub\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"🔐 Work:\"</span>\n<span class=\"hljs-built_in\">cat</span> ~/.ssh/id_ed25519_work.pub\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"👉 Add these keys at https://github.com/settings/keys (각 계정마다 로그인해서)\"</span>\n\n<span class=\"hljs-comment\"># 5. gh auth login 안내</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"🧪 Now login to GitHub CLI for each account:\"</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"👉 Personal account: gh auth login --hostname github-personal\"</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"👉 Work account: gh auth login --hostname github-work\"</span>\n\n</code></pre>\n<h3>사용 방법</h3>\n<ol>\n<li>실행 권한 부여</li>\n</ol>\n<pre><code class=\"hljs language-bash\">nano setup_ssh_accounts.sh\n<span class=\"hljs-comment\"># 붙여넣기 후 저장 (Ctrl+O, Enter → Ctrl+X)</span>\n\n</code></pre>\n<ol start=\"2\">\n<li>실행</li>\n</ol>\n<pre><code class=\"hljs language-bash\">./setup_ssh_accounts.sh \n</code></pre>\n<ol start=\"3\">\n<li>ssh 생성\n위 파일 실행으로 생성된 ssh 키들을 회사와 개인 계정에 접속해\n<a href=\"https://github.com/settings/keys\" rel=\"nofollow\" target=\"_blank\">https://github.com/settings/keys</a> 페이지로 들어가서 new SSH key 를 클릭해 새로운 ssh key를 만들어줍니다.</li>\n</ol>\n<p><img src=\"/TIL/assets/img/2025-04-22-github-ssh-multi-login-0.png\" alt=\"github ssh setting\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ol start=\"3\">\n<li>remote 저장소 url 변경</li>\n</ol>\n<pre><code class=\"hljs language-bash\">// 개인 \ngit remote set-url origin git@github-personal:yourusername/my-repo.git\n\n// 회사\ngit remote set-url origin git@github-work:yourcompany/project.git\n</code></pre>\n<p>이제 각 저장소에서 기존에 https 로 remote 저장소가 연결되어있던 부분들을 ssh 형태의 remote url로 바꿔줍니다.</p>\n<ol start=\"4\">\n<li>확인</li>\n</ol>\n<p>이렇게 한 후에 정상적으로 ssh가 적용되었는지 확인하려면 아래 명령어를 입력합니다.</p>\n<pre><code class=\"hljs language-bash\">ssh -T git@github.com\n</code></pre>\n<p>아래와 같이 나오면 정상 적용된 것입니다.\n만약 Permission denied가 뜬다면 → GitHub와 연결이 안 된 것입니다.</p>\n<pre><code class=\"hljs language-bash\">Hi yourusername! You<span class=\"hljs-string\">'ve successfully authenticated, but GitHub does not provide shell access.\n</span></code></pre>\n<p>올바른 키가 등록되어 있는지 확인하려면</p>\n<pre><code class=\"hljs language-bash\">ssh-add -l\n</code></pre>\n<p>이 결과에 id_ed25519_personal 또는 id_ed25519_work 가 없으면 아래 명령으로 추가해 주세요:</p>\n<pre><code class=\"hljs language-bash\">ssh-add ~/.ssh/id_ed25519_personal\nssh-add ~/.ssh/id_ed25519_work\n</code></pre>\n<p>~/.ssh/config에 alias 설정 제대로 했는지 확인하려면</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> ~/.ssh/config\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래처럼 나오면 정상 적용된 것입니다.</p>\n<pre><code class=\"hljs language-bash\">Host github-personal\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519_personal\n  IdentitiesOnly <span class=\"hljs-built_in\">yes</span>\n</code></pre>\n<p>여기까지하면 회사 계정과 개인 계정을 동시에 사용할 수 있지만 만약 회사가 SSO 로그인을 하도록 설정되어있다면 아래와 같은 에러가 발생합니다.</p>\n<pre><code class=\"hljs language-bash\">ERROR: The <span class=\"hljs-string\">'organization'</span> organization has enabled or enforced SAML SSO.\nTo access this repository, you must use the HTTPS remote with a personal access token or SSH with an SSH key and passphrase that has been authorized <span class=\"hljs-keyword\">for</span> this organization.\nVisit https://docs.github.com/articles/authenticating-to-a-github-organization-with-saml-single-sign-on/ <span class=\"hljs-keyword\">for</span> more information.\n\nfatal: Could not <span class=\"hljs-built_in\">read</span> from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이런 경우에는 회사 organization에서 ssh를 승인 해야합니다.</p>\n<p><a href=\"https://github.com/settings/keys\" rel=\"nofollow\" target=\"_blank\">https://github.com/settings/keys</a> 다시 key 페이지로 들어가서 아래 사진의 configure SSO를 클릭한 후 authorize를 눌러서 활성화를 시켜줍니다.</p>\n<p><img src=\"/TIL/assets/img/2025-04-22-github-ssh-multi-login-1.png\" alt=\"github ssh authorize\"></p>\n</body>\n</html>\n"},"__N_SSG":true}