{"pageProps":{"post":{"title":"ESLint 8 최신 버전에서 실무에 바로 활용하는 방법","description":"","date":"2025-04-22 13:06","slug":"2025-04-22-eslint","content":"\n\n# ESLint와 Next.js 빌드 오류 해결하기\n\nNext.js 프로젝트에서 ESLint를 사용하고 있다면, **`next build`** 실행 시 ESLint 오류가 있을 경우 프로덕션 빌드가 실패하는 걸 경험해봤을 거예요. 이건 Next.js가 기본으로 빌드 단계에서 ESLint 검사를 해서, 오류가 있으면 빌드를 중단하기 때문이죠.\n\n그런데 가끔은, 빌드가 꼭 성공해야 할 상황에서 ESLint 오류가 있어도 일단 빌드는 통과시키고 싶을 때가 있잖아요? 이럴 땐 Next.js 내장 ESLint 검사 기능을 *완전히 비활성화*할 수 있어요. 다만, 이 방법은 **이미 ESLint를 다른 워크플로우(예: CI, 프리커밋 훅 등)에서 따로 검사하고 있을 때만 권장**됩니다.\n\n## ESLint 검사 비활성화 방법\n\n프로젝트 루트에 있는 `next.config.js` 파일을 열고, 아래와 같이 `eslint.ignoreDuringBuilds` 옵션을 활성화해 주세요:\n\n```js\n// next.config.js\nmodule.exports = {\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n};\n```\n\n이렇게 하면 빌드할 때 ESLint 오류가 있어도 무시하고 빌드를 계속 진행해줍니다.\n\n---\n\n### 만약 ESLint를 아예 끄고 싶다면?\n\n- `next build`뿐 아니라 개발 중에도 ESLint 경고/오류가 안 뜨게 하고 싶다면, `next.config.js`에서 `eslint` 옵션을 더 강하게 조절해야 합니다.\n- 또는 `.eslintrc` 설정 자체를 너무 엄격하지 않게 바꾸는 방법도 있지만, 권장하지 않아요.\n- 가능하면 **코드를 깨끗하게 유지하는 것이 장기적으로 개발 생산성에 훨씬 좋으니, ESLint 오류는 최대한 빨리 해결하는 걸 추천**합니다.\n\n---\n\n### 추가 팁!\n\n- CI(Continuous Integration) 환경에서 별도로 ESLint를 돌리고 있다면, Next.js 내장 ESLint를 끄는 것이 더 효율적입니다.\n- 프리커밋 훅(`husky` + `lint-staged`)을 사용하면 커밋 전에 ESLint 검사로 코드 질을 확보할 수 있어요.\n- 만약 ESLint 오류가 많아서 빌드가 자꾸 실패한다면, 이 옵션을 임시방편으로 켜고 문제를 하나씩 해결해 나가세요!\n\n---\n\n## 요약\n\n| 내용                            | 설명                                              |\n|-------------------------------|---------------------------------------------------|\n| 기본 동작                      | ESLint 오류 있으면 Next.js 프로덕션 빌드 실패       |\n| 빌드 중 ESLint 검사를 무시하려면 | `next.config.js`에 `eslint.ignoreDuringBuilds: true` 설정 |\n| 권장 방법                      | 코드 품질을 위해 ESLint 오류는 최대한 빨리 수정      |\n| 대안                          | CI나 프리커밋 훅에서 별도로 ESLint 검사 설정         |\n\n---\n\n이렇게 Next.js에서 ESLint 오류 때문에 빌드 실패해서 당황스럽던 분들은, `ignoreDuringBuilds` 옵션을 기억해두시면 꽤 편리할 거예요! 하지만 항상 코드 퀄리티 관리도 잊지 마시고요. Happy coding! 🚀\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자, 위 코드는 Next.js 프로젝트에서 ESLint 설정하는 부분인데요.\n\n```js\nmodule.exports = {\n  eslint: {\n    // Warning: This allows production builds to successfully complete even if\n    // your project has ESLint errors.\n    ignoreDuringBuilds: true,\n  },\n}\n```\n\n설명하자면, `ignoreDuringBuilds: true` 옵션은 빌드할 때 ESLint 에러가 있어도 빌드를 멈추지 않고 계속 진행하게 해줍니다. 즉, 코드에 문법적 문제나 스타일 가이드 위반이 있어도 생산용 빌드가 성공하도록 허용하죠.\n\n이게 왜 필요하냐면, 가끔 프로젝트를 배포해야 하는데 ESLint 문제 때문에 빌드가 멈춰버리면 난감할 때가 있어요. 그래서 임시방편으로 이 옵션을 켜두고 빌드 성공을 할 수도 있죠. 하지만 권장하는 방법은 절대 아닙니다!\n\n> 추천 팁!  \n> 빌드 성공은 중요하지만 더 중요한 건 코드 품질입니다. 가능하면 `ignoreDuringBuilds`를 `false`로 두고 로컬 환경에서 ESLint를 철저하게 점검하는 게 좋아요. CI(Continuous Integration) 파이프라인에 ESLint 검사를 추가해서 문제 발생시 바로 잡는 습관을 들이길 권해요.\n\n마지막으로 Next.js에서 ESLint 관련 더 자세한 설정이나 자동 수정 기능 같은 것도 있으니 공식 문서도 한번 훑어보세요. \n\n그럼 오늘도 좋은 코딩 하세요! 🚀","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>ESLint와 Next.js 빌드 오류 해결하기</h1>\n<p>Next.js 프로젝트에서 ESLint를 사용하고 있다면, <strong><code>next build</code></strong> 실행 시 ESLint 오류가 있을 경우 프로덕션 빌드가 실패하는 걸 경험해봤을 거예요. 이건 Next.js가 기본으로 빌드 단계에서 ESLint 검사를 해서, 오류가 있으면 빌드를 중단하기 때문이죠.</p>\n<p>그런데 가끔은, 빌드가 꼭 성공해야 할 상황에서 ESLint 오류가 있어도 일단 빌드는 통과시키고 싶을 때가 있잖아요? 이럴 땐 Next.js 내장 ESLint 검사 기능을 <em>완전히 비활성화</em>할 수 있어요. 다만, 이 방법은 <strong>이미 ESLint를 다른 워크플로우(예: CI, 프리커밋 훅 등)에서 따로 검사하고 있을 때만 권장</strong>됩니다.</p>\n<h2>ESLint 검사 비활성화 방법</h2>\n<p>프로젝트 루트에 있는 <code>next.config.js</code> 파일을 열고, 아래와 같이 <code>eslint.ignoreDuringBuilds</code> 옵션을 활성화해 주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// next.config.js</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">eslint</span>: {\n    <span class=\"hljs-attr\">ignoreDuringBuilds</span>: <span class=\"hljs-literal\">true</span>,\n  },\n};\n</code></pre>\n<p>이렇게 하면 빌드할 때 ESLint 오류가 있어도 무시하고 빌드를 계속 진행해줍니다.</p>\n<hr>\n<h3>만약 ESLint를 아예 끄고 싶다면?</h3>\n<ul>\n<li><code>next build</code>뿐 아니라 개발 중에도 ESLint 경고/오류가 안 뜨게 하고 싶다면, <code>next.config.js</code>에서 <code>eslint</code> 옵션을 더 강하게 조절해야 합니다.</li>\n<li>또는 <code>.eslintrc</code> 설정 자체를 너무 엄격하지 않게 바꾸는 방법도 있지만, 권장하지 않아요.</li>\n<li>가능하면 <strong>코드를 깨끗하게 유지하는 것이 장기적으로 개발 생산성에 훨씬 좋으니, ESLint 오류는 최대한 빨리 해결하는 걸 추천</strong>합니다.</li>\n</ul>\n<hr>\n<h3>추가 팁!</h3>\n<ul>\n<li>CI(Continuous Integration) 환경에서 별도로 ESLint를 돌리고 있다면, Next.js 내장 ESLint를 끄는 것이 더 효율적입니다.</li>\n<li>프리커밋 훅(<code>husky</code> + <code>lint-staged</code>)을 사용하면 커밋 전에 ESLint 검사로 코드 질을 확보할 수 있어요.</li>\n<li>만약 ESLint 오류가 많아서 빌드가 자꾸 실패한다면, 이 옵션을 임시방편으로 켜고 문제를 하나씩 해결해 나가세요!</li>\n</ul>\n<hr>\n<h2>요약</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>내용</th><th>설명</th></tr></thead><tbody><tr><td>기본 동작</td><td>ESLint 오류 있으면 Next.js 프로덕션 빌드 실패</td></tr><tr><td>빌드 중 ESLint 검사를 무시하려면</td><td><code>next.config.js</code>에 <code>eslint.ignoreDuringBuilds: true</code> 설정</td></tr><tr><td>권장 방법</td><td>코드 품질을 위해 ESLint 오류는 최대한 빨리 수정</td></tr><tr><td>대안</td><td>CI나 프리커밋 훅에서 별도로 ESLint 검사 설정</td></tr></tbody></table>\n<hr>\n<p>이렇게 Next.js에서 ESLint 오류 때문에 빌드 실패해서 당황스럽던 분들은, <code>ignoreDuringBuilds</code> 옵션을 기억해두시면 꽤 편리할 거예요! 하지만 항상 코드 퀄리티 관리도 잊지 마시고요. Happy coding! 🚀</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>자, 위 코드는 Next.js 프로젝트에서 ESLint 설정하는 부분인데요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">eslint</span>: {\n    <span class=\"hljs-comment\">// Warning: This allows production builds to successfully complete even if</span>\n    <span class=\"hljs-comment\">// your project has ESLint errors.</span>\n    <span class=\"hljs-attr\">ignoreDuringBuilds</span>: <span class=\"hljs-literal\">true</span>,\n  },\n}\n</code></pre>\n<p>설명하자면, <code>ignoreDuringBuilds: true</code> 옵션은 빌드할 때 ESLint 에러가 있어도 빌드를 멈추지 않고 계속 진행하게 해줍니다. 즉, 코드에 문법적 문제나 스타일 가이드 위반이 있어도 생산용 빌드가 성공하도록 허용하죠.</p>\n<p>이게 왜 필요하냐면, 가끔 프로젝트를 배포해야 하는데 ESLint 문제 때문에 빌드가 멈춰버리면 난감할 때가 있어요. 그래서 임시방편으로 이 옵션을 켜두고 빌드 성공을 할 수도 있죠. 하지만 권장하는 방법은 절대 아닙니다!</p>\n<blockquote>\n<p>추천 팁!<br>\n빌드 성공은 중요하지만 더 중요한 건 코드 품질입니다. 가능하면 <code>ignoreDuringBuilds</code>를 <code>false</code>로 두고 로컬 환경에서 ESLint를 철저하게 점검하는 게 좋아요. CI(Continuous Integration) 파이프라인에 ESLint 검사를 추가해서 문제 발생시 바로 잡는 습관을 들이길 권해요.</p>\n</blockquote>\n<p>마지막으로 Next.js에서 ESLint 관련 더 자세한 설정이나 자동 수정 기능 같은 것도 있으니 공식 문서도 한번 훑어보세요.</p>\n<p>그럼 오늘도 좋은 코딩 하세요! 🚀</p>\n</body>\n</html>\n"},"__N_SSG":true}