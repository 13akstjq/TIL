{"pageProps":{"post":{"title":"Nextjs에서 Tailwind와 Swiper로 썸네일 슬라이더 만드는 방법","description":"","date":"2024-07-02 21:47","slug":"2024-07-02-CreatingaThumbnailSliderinNextjswithTailwindandSwiper","content":"\n## Next.js, Tailwind CSS, 및 Swiper를 사용하여 썸네일 슬라이더 만들기 단계별 가이드\n\n썸네일은 더 큰 이미지의 작은 이미지 표현입니다.\n\n썸네일 슬라이더는 클릭할 수 있는 주요 이미지와 그 아래 일련의 썸네일을 포함하는 슬라이더입니다.\n\n위 내용을 기반으로, Next.js, Tailwind CSS, 및 Swiper를 사용하여 자체 썸네일 슬라이더를 만드는 것을 시작해보겠습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 프로젝트 설정\n\n우선, 새로운 Next.js 프로젝트를 설정해보세요. 터미널을 열고 다음 명령어를 실행하세요:\n\n```js\nnpx create-next-app@latest\n```\n\n그런 다음에 뒤이어 나오는 프롬프트에 답변하세요. 내 개인적인 답변은 각 줄의 괄호 안에 있습니다. \"Tailwind CSS\"에 대해 \"Yes\"로 선택하는 것을 잊지 마세요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n프로젝트의 이름은 무엇인가요? my-app (thumbnail-slider)\n\nTypeScript를 사용하시겠습니까? 아니요 / 예 (예)\n\nESLint를 사용하시겠습니까? 아니요 / 예 (예)\n\nTailwind CSS를 사용하시겠습니까? 아니요 / 예 (예)\n\n`src/` 디렉토리를 사용하시겠습니까? 아니요 / 예 (아니요)\n\nApp Router를 사용하시겠습니까? (권장) 아니요 / 예 (예)\n\n기본 import 별칭 (@/*)을 사용자 정의하시겠습니까? 아니요 / 예 (아니요)\n```\n\n다음으로, 프로젝트 디렉토리에 들어간 후에 Swiper를 설치하세요.\n\n```js\nnpm install swiper\n```\n\n# 썸네일 슬라이더 구축하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 Thumbnail Slider를 구축하기 위한 필수 구성 요소를 생성해 봅시다.\n\n- 프로젝트 디렉토리에 components라는 새 디렉토리를 만듭니다.\n- components 디렉토리 내부에 ThumbnailSlider.tsx 또는 .jsx라는 새 파일을 만듭니다(typescript를 사용하지 않는 경우).\n\n## 필수 구성 요소 가져오기\n\nswiper에 필요한 가져오기를 추가하는 것부터 시작해 봅시다. 아래 코드를 그대로 복사하세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport Image from \"next/image\";\n\n// Swiper React 컴포넌트 가져오기\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n\n// Swiper 유형 가져오기\nimport { Swiper as SwiperType } from \"swiper\";\n\n// Swiper 스타일 가져오기\nimport \"swiper/css\";\nimport \"swiper/css/navigation\";\nimport \"swiper/css/thumbs\";\n\n// 필요한 모듈 가져오기\nimport { Thumbs } from \"swiper/modules\";\n```\n\n설명:\n\n- 컴포넌트 가져오기: Swiper 및 SwiperSlide는 Swiper 라이브러리의 React 모듈에서 가져옵니다. 이러한 컴포넌트는 캐러셀/슬라이더와 개별 슬라이드를 만들고 관리하는 데 사용됩니다.\n- 유형 가져오기: Swiper as SwiperType은 TypeScript 유형 안전성을 위해 가져옵니다. 이를 통해 적절한 코드 지원과 오류 확인이 가능합니다.\n- 스타일 가져오기: Swiper CSS 파일을 가져와서 캐러셀에 필요한 중요한 스타일을 적용합니다. 이는 네비게이션 버튼 및 썸네일 네비게이션을 포함합니다.\n- Thumbs 모듈: Thumbs는 \"swiper/modules\"에서 가져온 것입니다. 이 모듈은 Swiper 슬라이더의 썸네일 네비게이션 기능을 제공합니다.\n\n## 개별 컴포넌트 생성하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 썸네일 슬라이더 컴포넌트를 만들어볼 차례에요. 슬라이더 컴포넌트와 썸네일 컴포넌트와 함께 만들 것인데요, 이들은 한 컴포넌트에 모은 코드양을 줄이기 위해 분리되어 있어요.\n\n```js\nconst ThumbnailSlider = ({ images }: { images: string[] }) => {\n  return (\n    // 메인 슬라이더와 썸네일 슬라이더를 담는 컨테이너\n    <div className=\"w-4/5 h-4/5 flex flex-col gap-4\">\n      <Slider images={images} /> {/* 메인 이미지 슬라이더 */}\n      <Thumbnail images={images} /> {/* 썸네일 내비게이션 슬라이더 */}\n    </div>\n  );\n};\n\nconst Slider = ({ images }: { images: string[] }) => {\n  return (\n    // 메인 이미지 슬라이더 컴포넌트\n    <div className=\"w-full h-full flex-1 overflow-hidden\">\n      <Swiper className=\"h-full\" grabCursor loop>\n        {/* 각 이미지 슬라이드를 만들기 위해 이미지를 반복합니다. */}\n        {images.map((image, index) => (\n          <SwiperSlide key={index}>\n            <div className=\"relative w-full h-full\">\n              {/* 각 슬라이드의 이미지 컴포넌트 */}\n              <Image\n                src={image}\n                alt=\"slide\"\n                fill\n                className=\"object-cover\"\n                sizes=\"70vw\"\n                priority={index === 0 && true} // 첫 번째 이미지가 우선적으로 로드되도록 합니다.\n              />\n            </div>\n          </SwiperSlide>\n        ))}\n      </Swiper>\n    </div>\n  );\n};\n\nconst Thumbnail = ({ images }: { images: string[] }) => {\n  return (\n    // 썸네일 내비게이션 슬라이더 컴포넌트\n    <div className=\"relative flex gap-2 justify-center h-14\">\n      <Swiper className=\"w-2/4 h-full\" loop slidesPerView={4} spaceBetween={8}>\n        {/* 각 썸네일을 만들기 위해 이미지를 반복합니다. */}\n        {images.map((image, index) => (\n          <SwiperSlide\n            key={index}\n            className=\"rounded-md cursor-pointer border-[3px] border-solid border-transparent overflow-hidden\"\n          >\n            <div className=\"relative w-full h-full\">\n              {/* 썸네일 이미지 컴포넌트 */}\n              <Image src={image} alt=\"thumbnail\" fill className=\"object-cover\" sizes=\"100px\" />\n            </div>\n          </SwiperSlide>\n        ))}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default ThumbnailSlider;\n```\n\n## 슬라이더와 썸네일 컴포넌트 연결하기\n\n여기까지 오면 썸네일 슬라이더는 거의 완성되었어요. 유일한 문제는 현재 각각 따로 움직인다는 것이죠. 하지만 우리가 원하는 것은 이들이 연결된 것처럼 함께 움직이도록 하는 것입니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이를 달성하기 위해 ThumbnailSlider 컴포넌트에 다음을 추가할 것입니다:\n\n```js\nconst [thumbsSwiper, setThumbsSwiper] = (useState < SwiperType) | (null > null);\n```\n\n그런 다음 이를 Slider 및 Thumbnail 컴포넌트로 props로 전달하세요.\n\n```js\n<Slider images={images} thumbs={ thumbsSwiper, setThumbsSwiper } />\n<Thumbnail images={images} thumbs={ thumbsSwiper, setThumbsSwiper } />\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n물론, Slider 및 Thumbnail 컴포넌트에 새로운 속성(props)을 전달하고 있기 때문에 해당 코드를 업데이트해야 합니다.\n\nTypescript를 사용 중이라면, 다음과 같이 타입 안전성을 위한 인터페이스를 붙여넣으세요:\n\n```js\ninterface SliderProps {\n  images: string[];\n  thumbs: {\n    thumbsSwiper: SwiperType | null,\n    setThumbsSwiper: React.Dispatch<React.SetStateAction<SwiperType | null>>,\n  };\n}\n```\n\n이제 정의한 상태를 사용하도록 Slider 및 Thumbnail 컴포넌트를 편집해 보겠습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n슬라이더 컴포넌트에서 다음 작업을 수행하십시오:\n\n```js\nconst Slider = ({ images, thumbs }: SliderProps) => {\n  const { thumbsSwiper } = thumbs;\n\n  return (\n    <div className=\"w-full h-full flex-1 overflow-hidden\">\n      {/* 이미지 슬라이더용 주 스와이퍼 컴포넌트 */}\n      <Swiper\n        className=\"h-full\"\n        grabCursor\n        loop\n\n        thumbs={{ swiper: thumbsSwiper }} // 메인 슬라이더를 썸네일 싱크를 위해 썸네일 스와이퍼에 연결\n        modules={[Thumbs]} // 썸네일 탐색을 위해 Thumbs 모듈을 활성화\n      >\n       // 이전 코드를 여기에 추가하세요...\n      </Swiper>\n    </div>\n```\n\n썸네일 컴포넌트에서 다음 작업을 수행하십시오:\n\n```js\nconst Thumbnail = ({ images, thumbs }: SliderProps) => {\n  const { setThumbsSwiper } = thumbs;\n\n  return (\n    <div className=\"relative flex gap-2 justify-center h-14\">\n      {/* 썸네일 탐색용 스와이퍼 컴포넌트 */}\n      <Swiper\n        className=\"w-2/4 h-full\"\n        loop\n        slidesPerView={4} // 한 뷰 당 썸네일 수\n        spaceBetween={8} // 썸네일 간 간격\n        onSwiper={setThumbsSwiper} // 컴포넌트가 마운트될 때 썸네일 스와이퍼 설정\n        freeMode // 스냅 포인트 없이 자유롭게 슬라이딩 허용\n        watchSlidesProgress // 썸네일의 슬라이드 진행 상황을 감시\n      >\n        // 이전 코드를 여기에 추가하세요...\n      </Swiper>\n    </div>\n  );\n};\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 활성 썸네일 요소 스타일링\n\n지금은 섬네일 슬라이더가 제대로 작동해야 하지만, 현재 활성화된 썸네일을 강조하고 싶다면 globals.css 파일을 /app 디렉토리에서 열어서 다음 CSS 코드를 추가할 수 있어요:\n\n```js\n.swiper-slide-thumb-active {\n    border-color: black;\n}\n```\n\n## 썸네일 슬라이더 컴포넌트 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n최종적으로 코드에서 썸네일 슬라이더를 사용하려면 간단히 가져와서 다음과 같이 호출하면 됩니다:\n\n```js\nimport ThumbnailSlider from \"@/components/ThumbnailSlider\";\n\nexport default function Home() {\n  return (\n    <main className=\"w-full h-screen flex items-center justify-center\">\n      <ThumbnailSlider images={images} />\n    </main>\n  );\n}\n```\n\n썸네일 슬라이더가 작동하려면 이미지 URL을 나타내는 문자열 배열을 제공해야 합니다. 아래는 그 예시입니다:\n\n```js\n// 별칭을 사용하여 components 디렉토리에서 ThumbnailSlider 컴포넌트 가져오기\nimport ThumbnailSlider from \"@/components/ThumbnailSlider\";\n\n// 홈 페이지를 위한 기본 함수 컴포넌트\nexport default function Home() {\n  // 동적으로 생성된 이미지 URL 배열\n  const images = Array(4)\n    .fill(null)\n    .map((_, index) => `/random/image (${index + 1}).png`);\n\n  // 주요 콘텐츠 영역 렌더링\n  return (\n    <main className=\"w-full h-screen flex items-center justify-center\">\n      {/* 동적으로 생성된 이미지를 사용하여 ThumbnailSlider 컴포넌트 렌더링 */}\n      <ThumbnailSlider images={images} />\n    </main>\n  );\n}\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 글을 읽어주셔서 정말 감사합니다! 😊\n만약 이 글이 도움이 되었다면 반드시 박수를 치고 팔로우해주세요! 👏\n","ogImage":{"url":"/TIL/assets/img/2024-07-02-CreatingaThumbnailSliderinNextjswithTailwindandSwiper_0.png"},"coverImage":"/TIL/assets/img/2024-07-02-CreatingaThumbnailSliderinNextjswithTailwindandSwiper_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>Next.js, Tailwind CSS, 및 Swiper를 사용하여 썸네일 슬라이더 만들기 단계별 가이드</h2>\n<p>썸네일은 더 큰 이미지의 작은 이미지 표현입니다.</p>\n<p>썸네일 슬라이더는 클릭할 수 있는 주요 이미지와 그 아래 일련의 썸네일을 포함하는 슬라이더입니다.</p>\n<p>위 내용을 기반으로, Next.js, Tailwind CSS, 및 Swiper를 사용하여 자체 썸네일 슬라이더를 만드는 것을 시작해보겠습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>프로젝트 설정</h1>\n<p>우선, 새로운 Next.js 프로젝트를 설정해보세요. 터미널을 열고 다음 명령어를 실행하세요:</p>\n<pre><code class=\"hljs language-js\">npx create-next-app@latest\n</code></pre>\n<p>그런 다음에 뒤이어 나오는 프롬프트에 답변하세요. 내 개인적인 답변은 각 줄의 괄호 안에 있습니다. \"Tailwind CSS\"에 대해 \"Yes\"로 선택하는 것을 잊지 마세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">프로젝트의 이름은 무엇인가요? my-app (thumbnail-slider)\n\n<span class=\"hljs-title class_\">TypeScript</span>를 사용하시겠습니까? 아니요 / 예 (예)\n\n<span class=\"hljs-title class_\">ESLint</span>를 사용하시겠습니까? 아니요 / 예 (예)\n\n<span class=\"hljs-title class_\">Tailwind</span> <span class=\"hljs-variable constant_\">CSS</span>를 사용하시겠습니까? 아니요 / 예 (예)\n\n<span class=\"hljs-string\">`src/`</span> 디렉토리를 사용하시겠습니까? 아니요 / 예 (아니요)\n\n<span class=\"hljs-title class_\">App</span> <span class=\"hljs-title class_\">Router</span>를 사용하시겠습니까? (권장) 아니요 / 예 (예)\n\n기본 <span class=\"hljs-keyword\">import</span> 별칭 (@<span class=\"hljs-comment\">/*)을 사용자 정의하시겠습니까? 아니요 / 예 (아니요)\n</span></code></pre>\n<p>다음으로, 프로젝트 디렉토리에 들어간 후에 Swiper를 설치하세요.</p>\n<pre><code class=\"hljs language-js\">npm install swiper\n</code></pre>\n<h1>썸네일 슬라이더 구축하기</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 Thumbnail Slider를 구축하기 위한 필수 구성 요소를 생성해 봅시다.</p>\n<ul>\n<li>프로젝트 디렉토리에 components라는 새 디렉토리를 만듭니다.</li>\n<li>components 디렉토리 내부에 ThumbnailSlider.tsx 또는 .jsx라는 새 파일을 만듭니다(typescript를 사용하지 않는 경우).</li>\n</ul>\n<h2>필수 구성 요소 가져오기</h2>\n<p>swiper에 필요한 가져오기를 추가하는 것부터 시작해 봅시다. 아래 코드를 그대로 복사하세요:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"use client\"</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Image</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/image\"</span>;\n\n<span class=\"hljs-comment\">// Swiper React 컴포넌트 가져오기</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Swiper</span>, <span class=\"hljs-title class_\">SwiperSlide</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"swiper/react\"</span>;\n\n<span class=\"hljs-comment\">// Swiper 유형 가져오기</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Swiper</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">SwiperType</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"swiper\"</span>;\n\n<span class=\"hljs-comment\">// Swiper 스타일 가져오기</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"swiper/css\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"swiper/css/navigation\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"swiper/css/thumbs\"</span>;\n\n<span class=\"hljs-comment\">// 필요한 모듈 가져오기</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Thumbs</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"swiper/modules\"</span>;\n</code></pre>\n<p>설명:</p>\n<ul>\n<li>컴포넌트 가져오기: Swiper 및 SwiperSlide는 Swiper 라이브러리의 React 모듈에서 가져옵니다. 이러한 컴포넌트는 캐러셀/슬라이더와 개별 슬라이드를 만들고 관리하는 데 사용됩니다.</li>\n<li>유형 가져오기: Swiper as SwiperType은 TypeScript 유형 안전성을 위해 가져옵니다. 이를 통해 적절한 코드 지원과 오류 확인이 가능합니다.</li>\n<li>스타일 가져오기: Swiper CSS 파일을 가져와서 캐러셀에 필요한 중요한 스타일을 적용합니다. 이는 네비게이션 버튼 및 썸네일 네비게이션을 포함합니다.</li>\n<li>Thumbs 모듈: Thumbs는 \"swiper/modules\"에서 가져온 것입니다. 이 모듈은 Swiper 슬라이더의 썸네일 네비게이션 기능을 제공합니다.</li>\n</ul>\n<h2>개별 컴포넌트 생성하기</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 썸네일 슬라이더 컴포넌트를 만들어볼 차례에요. 슬라이더 컴포넌트와 썸네일 컴포넌트와 함께 만들 것인데요, 이들은 한 컴포넌트에 모은 코드양을 줄이기 위해 분리되어 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ThumbnailSlider</span> = (<span class=\"hljs-params\">{ images }: { images: string[] }</span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"hljs-comment\">// 메인 슬라이더와 썸네일 슬라이더를 담는 컨테이너</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-4/5 h-4/5 flex flex-col gap-4\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Slider</span> <span class=\"hljs-attr\">images</span>=<span class=\"hljs-string\">{images}</span> /></span> {/* 메인 이미지 슬라이더 */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Thumbnail</span> <span class=\"hljs-attr\">images</span>=<span class=\"hljs-string\">{images}</span> /></span> {/* 썸네일 내비게이션 슬라이더 */}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Slider</span> = (<span class=\"hljs-params\">{ images }: { images: string[] }</span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"hljs-comment\">// 메인 이미지 슬라이더 컴포넌트</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-full h-full flex-1 overflow-hidden\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Swiper</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"h-full\"</span> <span class=\"hljs-attr\">grabCursor</span> <span class=\"hljs-attr\">loop</span>></span>\n        {/* 각 이미지 슬라이드를 만들기 위해 이미지를 반복합니다. */}\n        {images.map((image, index) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">SwiperSlide</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"relative w-full h-full\"</span>></span>\n              {/* 각 슬라이드의 이미지 컴포넌트 */}\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span>\n                <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{image}</span>\n                <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"slide\"</span>\n                <span class=\"hljs-attr\">fill</span>\n                <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"object-cover\"</span>\n                <span class=\"hljs-attr\">sizes</span>=<span class=\"hljs-string\">\"70vw\"</span>\n                <span class=\"hljs-attr\">priority</span>=<span class=\"hljs-string\">{index</span> === <span class=\"hljs-string\">0</span> &#x26;&#x26; <span class=\"hljs-attr\">true</span>} // <span class=\"hljs-attr\">첫</span> <span class=\"hljs-attr\">번째</span> <span class=\"hljs-attr\">이미지가</span> <span class=\"hljs-attr\">우선적으로</span> <span class=\"hljs-attr\">로드되도록</span> <span class=\"hljs-attr\">합니다.</span>\n              /></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">SwiperSlide</span>></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Swiper</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Thumbnail</span> = (<span class=\"hljs-params\">{ images }: { images: string[] }</span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"hljs-comment\">// 썸네일 내비게이션 슬라이더 컴포넌트</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"relative flex gap-2 justify-center h-14\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Swiper</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-2/4 h-full\"</span> <span class=\"hljs-attr\">loop</span> <span class=\"hljs-attr\">slidesPerView</span>=<span class=\"hljs-string\">{4}</span> <span class=\"hljs-attr\">spaceBetween</span>=<span class=\"hljs-string\">{8}</span>></span>\n        {/* 각 썸네일을 만들기 위해 이미지를 반복합니다. */}\n        {images.map((image, index) => (\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">SwiperSlide</span>\n            <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"rounded-md cursor-pointer border-[3px] border-solid border-transparent overflow-hidden\"</span>\n          ></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"relative w-full h-full\"</span>></span>\n              {/* 썸네일 이미지 컴포넌트 */}\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{image}</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"thumbnail\"</span> <span class=\"hljs-attr\">fill</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"object-cover\"</span> <span class=\"hljs-attr\">sizes</span>=<span class=\"hljs-string\">\"100px\"</span> /></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">SwiperSlide</span>></span>\n        ))}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Swiper</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ThumbnailSlider</span>;\n</code></pre>\n<h2>슬라이더와 썸네일 컴포넌트 연결하기</h2>\n<p>여기까지 오면 썸네일 슬라이더는 거의 완성되었어요. 유일한 문제는 현재 각각 따로 움직인다는 것이죠. 하지만 우리가 원하는 것은 이들이 연결된 것처럼 함께 움직이도록 하는 것입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이를 달성하기 위해 ThumbnailSlider 컴포넌트에 다음을 추가할 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> [thumbsSwiper, setThumbsSwiper] = (useState &#x3C; <span class=\"hljs-title class_\">SwiperType</span>) | (<span class=\"hljs-literal\">null</span> > <span class=\"hljs-literal\">null</span>);\n</code></pre>\n<p>그런 다음 이를 Slider 및 Thumbnail 컴포넌트로 props로 전달하세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;<span class=\"hljs-title class_\">Slider</span> images={images} thumbs={ thumbsSwiper, setThumbsSwiper } />\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Thumbnail</span> <span class=\"hljs-attr\">images</span>=<span class=\"hljs-string\">{images}</span> <span class=\"hljs-attr\">thumbs</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">thumbsSwiper</span>, <span class=\"hljs-attr\">setThumbsSwiper</span> } /></span></span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>물론, Slider 및 Thumbnail 컴포넌트에 새로운 속성(props)을 전달하고 있기 때문에 해당 코드를 업데이트해야 합니다.</p>\n<p>Typescript를 사용 중이라면, 다음과 같이 타입 안전성을 위한 인터페이스를 붙여넣으세요:</p>\n<pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">SliderProps</span> {\n  <span class=\"hljs-attr\">images</span>: string[];\n  <span class=\"hljs-attr\">thumbs</span>: {\n    <span class=\"hljs-attr\">thumbsSwiper</span>: <span class=\"hljs-title class_\">SwiperType</span> | <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">setThumbsSwiper</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">Dispatch</span>&#x3C;<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">SetStateAction</span>&#x3C;<span class=\"hljs-title class_\">SwiperType</span> | <span class=\"hljs-literal\">null</span>>>,\n  };\n}\n</code></pre>\n<p>이제 정의한 상태를 사용하도록 Slider 및 Thumbnail 컴포넌트를 편집해 보겠습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>슬라이더 컴포넌트에서 다음 작업을 수행하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Slider</span> = (<span class=\"hljs-params\">{ images, thumbs }: SliderProps</span>) => {\n  <span class=\"hljs-keyword\">const</span> { thumbsSwiper } = thumbs;\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-full h-full flex-1 overflow-hidden\"</span>></span>\n      {/* 이미지 슬라이더용 주 스와이퍼 컴포넌트 */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Swiper</span>\n        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"h-full\"</span>\n        <span class=\"hljs-attr\">grabCursor</span>\n        <span class=\"hljs-attr\">loop</span>\n\n        <span class=\"hljs-attr\">thumbs</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">swiper:</span> <span class=\"hljs-attr\">thumbsSwiper</span> }} // <span class=\"hljs-attr\">메인</span> <span class=\"hljs-attr\">슬라이더를</span> <span class=\"hljs-attr\">썸네일</span> <span class=\"hljs-attr\">싱크를</span> <span class=\"hljs-attr\">위해</span> <span class=\"hljs-attr\">썸네일</span> <span class=\"hljs-attr\">스와이퍼에</span> <span class=\"hljs-attr\">연결</span>\n        <span class=\"hljs-attr\">modules</span>=<span class=\"hljs-string\">{[Thumbs]}</span> // <span class=\"hljs-attr\">썸네일</span> <span class=\"hljs-attr\">탐색을</span> <span class=\"hljs-attr\">위해</span> <span class=\"hljs-attr\">Thumbs</span> <span class=\"hljs-attr\">모듈을</span> <span class=\"hljs-attr\">활성화</span>\n      ></span>\n       // 이전 코드를 여기에 추가하세요...\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Swiper</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<p>썸네일 컴포넌트에서 다음 작업을 수행하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Thumbnail</span> = (<span class=\"hljs-params\">{ images, thumbs }: SliderProps</span>) => {\n  <span class=\"hljs-keyword\">const</span> { setThumbsSwiper } = thumbs;\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"relative flex gap-2 justify-center h-14\"</span>></span>\n      {/* 썸네일 탐색용 스와이퍼 컴포넌트 */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Swiper</span>\n        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-2/4 h-full\"</span>\n        <span class=\"hljs-attr\">loop</span>\n        <span class=\"hljs-attr\">slidesPerView</span>=<span class=\"hljs-string\">{4}</span> // <span class=\"hljs-attr\">한</span> <span class=\"hljs-attr\">뷰</span> <span class=\"hljs-attr\">당</span> <span class=\"hljs-attr\">썸네일</span> <span class=\"hljs-attr\">수</span>\n        <span class=\"hljs-attr\">spaceBetween</span>=<span class=\"hljs-string\">{8}</span> // <span class=\"hljs-attr\">썸네일</span> <span class=\"hljs-attr\">간</span> <span class=\"hljs-attr\">간격</span>\n        <span class=\"hljs-attr\">onSwiper</span>=<span class=\"hljs-string\">{setThumbsSwiper}</span> // <span class=\"hljs-attr\">컴포넌트가</span> <span class=\"hljs-attr\">마운트될</span> <span class=\"hljs-attr\">때</span> <span class=\"hljs-attr\">썸네일</span> <span class=\"hljs-attr\">스와이퍼</span> <span class=\"hljs-attr\">설정</span>\n        <span class=\"hljs-attr\">freeMode</span> // <span class=\"hljs-attr\">스냅</span> <span class=\"hljs-attr\">포인트</span> <span class=\"hljs-attr\">없이</span> <span class=\"hljs-attr\">자유롭게</span> <span class=\"hljs-attr\">슬라이딩</span> <span class=\"hljs-attr\">허용</span>\n        <span class=\"hljs-attr\">watchSlidesProgress</span> // <span class=\"hljs-attr\">썸네일의</span> <span class=\"hljs-attr\">슬라이드</span> <span class=\"hljs-attr\">진행</span> <span class=\"hljs-attr\">상황을</span> <span class=\"hljs-attr\">감시</span>\n      ></span>\n        // 이전 코드를 여기에 추가하세요...\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Swiper</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>활성 썸네일 요소 스타일링</h2>\n<p>지금은 섬네일 슬라이더가 제대로 작동해야 하지만, 현재 활성화된 썸네일을 강조하고 싶다면 globals.css 파일을 /app 디렉토리에서 열어서 다음 CSS 코드를 추가할 수 있어요:</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">swiper</span>-slide-thumb-active {\n    border-<span class=\"hljs-attr\">color</span>: black;\n}\n</code></pre>\n<h2>썸네일 슬라이더 컴포넌트 사용하기</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>최종적으로 코드에서 썸네일 슬라이더를 사용하려면 간단히 가져와서 다음과 같이 호출하면 됩니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ThumbnailSlider</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/components/ThumbnailSlider\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Home</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-full h-screen flex items-center justify-center\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ThumbnailSlider</span> <span class=\"hljs-attr\">images</span>=<span class=\"hljs-string\">{images}</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n  );\n}\n</code></pre>\n<p>썸네일 슬라이더가 작동하려면 이미지 URL을 나타내는 문자열 배열을 제공해야 합니다. 아래는 그 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 별칭을 사용하여 components 디렉토리에서 ThumbnailSlider 컴포넌트 가져오기</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ThumbnailSlider</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/components/ThumbnailSlider\"</span>;\n\n<span class=\"hljs-comment\">// 홈 페이지를 위한 기본 함수 컴포넌트</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Home</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 동적으로 생성된 이미지 URL 배열</span>\n  <span class=\"hljs-keyword\">const</span> images = <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">4</span>)\n    .<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">null</span>)\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, index</span>) =></span> <span class=\"hljs-string\">`/random/image (<span class=\"hljs-subst\">${index + <span class=\"hljs-number\">1</span>}</span>).png`</span>);\n\n  <span class=\"hljs-comment\">// 주요 콘텐츠 영역 렌더링</span>\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-full h-screen flex items-center justify-center\"</span>></span>\n      {/* 동적으로 생성된 이미지를 사용하여 ThumbnailSlider 컴포넌트 렌더링 */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ThumbnailSlider</span> <span class=\"hljs-attr\">images</span>=<span class=\"hljs-string\">{images}</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n  );\n}\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위 글을 읽어주셔서 정말 감사합니다! 😊\n만약 이 글이 도움이 되었다면 반드시 박수를 치고 팔로우해주세요! 👏</p>\n</body>\n</html>\n"},"__N_SSG":true}