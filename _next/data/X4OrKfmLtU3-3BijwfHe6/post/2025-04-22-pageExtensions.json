{"pageProps":{"post":{"title":"Next.js 15 pageExtensions로 마크다운 페이지 만들기","description":"","date":"2025-04-22 13:17","slug":"2025-04-22-pageExtensions","content":"\n\n# pageExtensions 설정으로 확장자 추가하기\n\n안녕하세요! 오늘은 Next.js에서 기본으로 인정하는 페이지 확장자 설정을 바꾸는 방법을 살짝 알려드릴게요. 기본적으로 Next.js는 `.tsx`, `.ts`, `.jsx`, `.js` 파일만 페이지로 인식하는데요, 가끔은 마크다운 파일(`.md`, `.mdx`)도 페이지로 쓰고 싶을 때가 있죠? 그런 경우엔 `pageExtensions` 옵션을 활용하면 됩니다.\n\n예를 들어, 마크다운(MD, MDX) 파일을 페이지로 추가하고 싶을 땐, 이렇게 해보세요:\n\n```js\nconst withMDX = require('@next/mdx')()\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],\n}\n\nmodule.exports = withMDX(nextConfig)\n```\n\n여기서 `pageExtensions` 배열에 원하는 확장자를 추가해줌으로써, Next.js가 해당 확장자의 파일들도 자동으로 페이지로 인식해요. 그리고 `@next/mdx` 같은 플러그인을 통해 MDX 파일을 컴포넌트처럼 다룰 수 있게 도와주죠.\n\n---\n\n> **Tip!**  \n> 만약 여러분이 `.md`, `.mdx` 외에 또 다른 확장자를 쓰고 싶다면, 이 배열에 추가만 하면 됩니다. 예를 들어 `.vue` 나 `.svelte` 같은 확장자를 넣으면 되는데, 그걸 다루는 로더나 플러그인이 추가로 필요하다는 점 꼭 기억하세요!\n\nNext.js는 생각보다 커스터마이징이 자유로워서, 여러분 프로젝트에 필요한 파일 확장자는 얼마든지 추가해서 쓰셔도 좋아요. 이렇게 하면 페이지 관리를 더 유연하게 할 수 있답니다. 😉\n\n그럼 오늘 내용도 도움이 되셨으면 좋겠습니다! 다음에도 유용한 팁으로 찾아올게요~","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":1},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>pageExtensions 설정으로 확장자 추가하기</h1>\n<p>안녕하세요! 오늘은 Next.js에서 기본으로 인정하는 페이지 확장자 설정을 바꾸는 방법을 살짝 알려드릴게요. 기본적으로 Next.js는 <code>.tsx</code>, <code>.ts</code>, <code>.jsx</code>, <code>.js</code> 파일만 페이지로 인식하는데요, 가끔은 마크다운 파일(<code>.md</code>, <code>.mdx</code>)도 페이지로 쓰고 싶을 때가 있죠? 그런 경우엔 <code>pageExtensions</code> 옵션을 활용하면 됩니다.</p>\n<p>예를 들어, 마크다운(MD, MDX) 파일을 페이지로 추가하고 싶을 땐, 이렇게 해보세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> withMDX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@next/mdx'</span>)()\n\n<span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@type</span> {<span class=\"hljs-type\">import('next').NextConfig</span>} */</span>\n<span class=\"hljs-keyword\">const</span> nextConfig = {\n  <span class=\"hljs-attr\">pageExtensions</span>: [<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-string\">'jsx'</span>, <span class=\"hljs-string\">'ts'</span>, <span class=\"hljs-string\">'tsx'</span>, <span class=\"hljs-string\">'md'</span>, <span class=\"hljs-string\">'mdx'</span>],\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-title function_\">withMDX</span>(nextConfig)\n</code></pre>\n<p>여기서 <code>pageExtensions</code> 배열에 원하는 확장자를 추가해줌으로써, Next.js가 해당 확장자의 파일들도 자동으로 페이지로 인식해요. 그리고 <code>@next/mdx</code> 같은 플러그인을 통해 MDX 파일을 컴포넌트처럼 다룰 수 있게 도와주죠.</p>\n<hr>\n<blockquote>\n<p><strong>Tip!</strong><br>\n만약 여러분이 <code>.md</code>, <code>.mdx</code> 외에 또 다른 확장자를 쓰고 싶다면, 이 배열에 추가만 하면 됩니다. 예를 들어 <code>.vue</code> 나 <code>.svelte</code> 같은 확장자를 넣으면 되는데, 그걸 다루는 로더나 플러그인이 추가로 필요하다는 점 꼭 기억하세요!</p>\n</blockquote>\n<p>Next.js는 생각보다 커스터마이징이 자유로워서, 여러분 프로젝트에 필요한 파일 확장자는 얼마든지 추가해서 쓰셔도 좋아요. 이렇게 하면 페이지 관리를 더 유연하게 할 수 있답니다. 😉</p>\n<p>그럼 오늘 내용도 도움이 되셨으면 좋겠습니다! 다음에도 유용한 팁으로 찾아올게요~</p>\n</body>\n</html>\n"},"__N_SSG":true}