{"pageProps":{"post":{"title":"Next.js 15에서 404 페이지 만드는 방법(notFound)","description":"","date":"2025-04-22 12:43","slug":"2025-04-22-notFound","content":"\n\n# notFound\n\n`notFound` 함수는 특정 라우트 세그먼트 내에서 \"찾을 수 없음\" 페이지를 렌더링할 수 있게 해주고, 동시에 `<meta name=\"robots\" content=\"noindex\" />` 태그를 주입해서 검색엔진이 해당 페이지를 인덱싱하지 않도록 설정해 줍니다.\n\n## notFound()\n\n`notFound()` 함수를 호출하면 `NEXT_HTTP_ERROR_FALLBACK;404` 에러가 발생하면서 현재 라우트 세그먼트의 렌더링이 종료됩니다. 그런데 이런 에러를 처리하기 위해 \"not-found\" 파일을 지정해놓으면, 에러 대신 유저에게 보여줄 깔끔한 \"페이지를 찾을 수 없습니다\" UI를 해당 세그먼트 내에서 렌더링할 수 있어요.\n\n---\n\n추가로, Next.js 같은 프레임워크에서는 이 `notFound` 함수를 활용해서 유저가 잘못된 URL에 접근했을 때 단순한 404 페이지 대신, 맞춤형 디자인이나 메시지를 보여줄 수 있기 때문에 사용자 경험(UX)이 훨씬 좋아집니다. 그리고 SEO 측면에서도 `noindex` 메타 태그를 자동 주입해주니 검색엔진에 불필요한 페이지가 노출되는 것을 방지할 수 있답니다.\n\n---\n\n마지막으로, `notFound`를 사용할 때는 다음처럼 작성할 수 있어요:\n\n```js\nimport { notFound } from 'next/navigation';\n\nexport default function Page({ params }) {\n  const data = fetchData(params.id);\n\n  if (!data) {\n    notFound();\n  }\n\n  return <div>{data.title}</div>;\n}\n```\n\n데이터가 없을 때 `notFound()`를 호출해서 404 처리와 함께 적절한 UI가 렌더링되도록 하는 예시입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport { notFound } from 'next/navigation'\n\nasync function fetchUser(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const { id } = await params\n  const user = await fetchUser(id)\n\n  if (!user) {\n    notFound()\n  }\n\n  // ...\n}\n```\n\n> 참고로 알아두면 좋은 점: `notFound()` 함수는 `return notFound()`처럼 반드시 반환문과 함께 사용할 필요가 없어요. TypeScript의 `never` 타입 덕분에 함수 실행 후 더 이상 코드가 실행되지 않는다는 걸 타입 시스템이 알고 있기 때문이죠.\n\n---\n\n## 버전 히스토리\n\n| 버전       | 변경 사항               |\n|------------|------------------------|\n| v13.0.0    | `notFound` 함수가 도입됨 |\n\n---\n\n### 조금 더 알아볼까요?\n\n`notFound()` 함수는 Next.js의 새로워진 라우팅 시스템에서 404 페이지를 간편하게 렌더링할 수 있게 해주는데요. 예전에는 직접 `return <ErrorPage statusCode={404} />` 같은 식으로 처리하거나 서버 쪽에서 응답 상태를 관리해야 했죠. \n\n하지만 이제는 이렇게 데이터를 비동기로 가져오면서, 만약 데이터가 없으면 `notFound()`만 호출하면 페이지가 바로 404 페이지로 전환돼서 사용자 경험도 깔끔해졌어요.\n\n또한, `notFound()`가 `never` 타입을 반환하는 덕분에 이후 코드는 실행되지 않으니, 따로 `return` 구문으로 감싸 주지 않아도 된다는 점은 개인적으로 매우 마음에 드는 부분입니다.\n\n이외에도 Next.js 13부터는 이런 여러 편리한 API들이 추가되면서, 개발할 때 코드도 더 간결해지고, 에러 핸들링도 한결 직관적으로 할 수 있게 됐답니다!","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>notFound</h1>\n<p><code>notFound</code> 함수는 특정 라우트 세그먼트 내에서 \"찾을 수 없음\" 페이지를 렌더링할 수 있게 해주고, 동시에 <code>&#x3C;meta name=\"robots\" content=\"noindex\" /></code> 태그를 주입해서 검색엔진이 해당 페이지를 인덱싱하지 않도록 설정해 줍니다.</p>\n<h2>notFound()</h2>\n<p><code>notFound()</code> 함수를 호출하면 <code>NEXT_HTTP_ERROR_FALLBACK;404</code> 에러가 발생하면서 현재 라우트 세그먼트의 렌더링이 종료됩니다. 그런데 이런 에러를 처리하기 위해 \"not-found\" 파일을 지정해놓으면, 에러 대신 유저에게 보여줄 깔끔한 \"페이지를 찾을 수 없습니다\" UI를 해당 세그먼트 내에서 렌더링할 수 있어요.</p>\n<hr>\n<p>추가로, Next.js 같은 프레임워크에서는 이 <code>notFound</code> 함수를 활용해서 유저가 잘못된 URL에 접근했을 때 단순한 404 페이지 대신, 맞춤형 디자인이나 메시지를 보여줄 수 있기 때문에 사용자 경험(UX)이 훨씬 좋아집니다. 그리고 SEO 측면에서도 <code>noindex</code> 메타 태그를 자동 주입해주니 검색엔진에 불필요한 페이지가 노출되는 것을 방지할 수 있답니다.</p>\n<hr>\n<p>마지막으로, <code>notFound</code>를 사용할 때는 다음처럼 작성할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { notFound } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/navigation'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\">{ params }</span>) {\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title function_\">fetchData</span>(params.<span class=\"hljs-property\">id</span>);\n\n  <span class=\"hljs-keyword\">if</span> (!data) {\n    <span class=\"hljs-title function_\">notFound</span>();\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{data.title}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>;\n}\n</code></pre>\n<p>데이터가 없을 때 <code>notFound()</code>를 호출해서 404 처리와 함께 적절한 UI가 렌더링되도록 하는 예시입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { notFound } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/navigation'</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchUser</span>(<span class=\"hljs-params\">id</span>) {\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'https://...'</span>)\n  <span class=\"hljs-keyword\">if</span> (!res.<span class=\"hljs-property\">ok</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n  <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">json</span>()\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Profile</span>(<span class=\"hljs-params\">{ params }</span>) {\n  <span class=\"hljs-keyword\">const</span> { id } = <span class=\"hljs-keyword\">await</span> params\n  <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetchUser</span>(id)\n\n  <span class=\"hljs-keyword\">if</span> (!user) {\n    <span class=\"hljs-title function_\">notFound</span>()\n  }\n\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<blockquote>\n<p>참고로 알아두면 좋은 점: <code>notFound()</code> 함수는 <code>return notFound()</code>처럼 반드시 반환문과 함께 사용할 필요가 없어요. TypeScript의 <code>never</code> 타입 덕분에 함수 실행 후 더 이상 코드가 실행되지 않는다는 걸 타입 시스템이 알고 있기 때문이죠.</p>\n</blockquote>\n<hr>\n<h2>버전 히스토리</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v13.0.0</td><td><code>notFound</code> 함수가 도입됨</td></tr></tbody></table>\n<hr>\n<h3>조금 더 알아볼까요?</h3>\n<p><code>notFound()</code> 함수는 Next.js의 새로워진 라우팅 시스템에서 404 페이지를 간편하게 렌더링할 수 있게 해주는데요. 예전에는 직접 <code>return &#x3C;ErrorPage statusCode={404} /></code> 같은 식으로 처리하거나 서버 쪽에서 응답 상태를 관리해야 했죠.</p>\n<p>하지만 이제는 이렇게 데이터를 비동기로 가져오면서, 만약 데이터가 없으면 <code>notFound()</code>만 호출하면 페이지가 바로 404 페이지로 전환돼서 사용자 경험도 깔끔해졌어요.</p>\n<p>또한, <code>notFound()</code>가 <code>never</code> 타입을 반환하는 덕분에 이후 코드는 실행되지 않으니, 따로 <code>return</code> 구문으로 감싸 주지 않아도 된다는 점은 개인적으로 매우 마음에 드는 부분입니다.</p>\n<p>이외에도 Next.js 13부터는 이런 여러 편리한 API들이 추가되면서, 개발할 때 코드도 더 간결해지고, 에러 핸들링도 한결 직관적으로 할 수 있게 됐답니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}