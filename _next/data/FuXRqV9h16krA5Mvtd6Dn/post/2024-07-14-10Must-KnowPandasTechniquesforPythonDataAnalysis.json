{"pageProps":{"post":{"title":"파이썬 데이터 분석을 위한 반드시 알아야 할 10가지 판다스 기술","description":"","date":"2024-07-14 20:38","slug":"2024-07-14-10Must-KnowPandasTechniquesforPythonDataAnalysis","content":"\n\n## 판다스(Pandas)로 파이썬 데이터 분석 능력을 향상시켜요\n\n안녕하세요! 오늘은 Pandas를 사용하여 데이터 분석 능력을 향상시키는 방법에 대해 알려 드릴게요!\n\n# 1. 빠른 데이터 가져오기 및 미리보기\n\n```python\nimport pandas as pd\n# \"data.csv\"라는 파일이 있다고 가정합니다\ndf = pd.read_csv('data.csv')\n# 첫 5개 행을 미리보기, 마치 미지를 드러내는 것처럼\nprint(df.head())\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 단계는 새 서점에 들어가서 목차를 훑는 것과 비슷합니다.\n\nDataFrame은 판다스의 핵심입니다. `read_csv`를 사용하면 CSV 파일을 테이블로 변환할 수 있고, `head()`를 사용하면 미리보기를 볼 수 있습니다.\n\n# 2. 데이터 정리: 누락된 값 처리\n\n```js\n# 누락된 값 확인\nprint(df.isnull().sum())\n# 누락된 값들을 해당 열의 평균값으로 채우기\ndf.fillna(df.mean(), inplace=True)\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터 정리는 먼지가 쌓인 보석을 닦는 것과 같아요. `isnull().sum()`은 먼지가 있는 곳을 보여주는데, `fillna`은 보석을 깨끗이 닦는 도구에요. 평균을 활용해서 닦습니다.\n\n# 3. 선택과 필터링: 정확한 대상 선정\n\n```js\n# 'Age' 열 선택\nage_column = df['Age']\n# 나이가 25보다 큰 행 필터링\nadults = df[df['Age'] > 25]\n```\n\n슈퍼마켓 통로를 걷고 있는 것처럼 상상해봐요. `df[‘Age’]`은 라벨을 확인하는 것처럼, `df[df[‘Age’] > 25]`는 기준을 충족하는 항목을 고르는 것과 같아요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 탐색적 데이터 분석: 기술 통계\n\n```js\n# 개요를 위한 기술 통계\nprint(df.describe())\n```\n\n이것은 건강 진단과 같아요. 평균값, 최댓값 등을 보여줘서 데이터 상태를 알려줘요.\n\n# 5. 데이터 병합: 퍼즐 게임\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 가정: df2는 또 다른 DataFrame이라고 가정합니다.\nmerged_df = pd.concat([df, df2], axis=0)  # 수직으로 쌓기\nmerged_df = pd.merge(df, df2, on='공통_컬럼')  # 공통 열을 기준으로 조인\n\n```\n\n데이터 병합은 퍼즐 조각을 맞추는 것과 비슷합니다. `concat`은 쌓고, `merge`는 키 열을 기반으로 결합합니다.\n\n# 6. 그룹화: 패턴 찾기\n\n```js\n# 성별로 그룹화하여 평균 나이 계산\naverage_age_by_gender = df.groupby('성별')['나이'].mean()\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그룹화는 데이터 마이닝의 시작입니다. 비슷한 항목을 그룹화하고 그들의 평균 무게를 측정하는 것과 같아요. `groupby`는 분석에 깊이를 더해줍니다.\n\n## 7. 데이터 형태 변형: 큐브 회전\n\n```js\n# 다른 관점을 위해 데이터 전치\ndf_transposed = df.T\n# 유연한 분석을 위한 피벗 테이블\npivot_table = df.pivot_table(index='Gender', values='Age', aggfunc='mean')\n```\n\n데이터 형태 변형은 루빅 큐브를 돌리는 것과 같아요. `T`는 측면을 보여주고, `pivot_table`은 다차원 분석을 위한 사용자 정의 관점을 제공해줘요.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 조건부 필터링: 정밀 타겟팅\n\n```js\n# Filter rows where age is between 25 and 30 and city is 'New York'\nfiltered_df = df[(df['Age'] > 25) & (df['Age'] < 30) & (df['City'] == 'New York')]\n```\n\n조건부 필터링은 마치 목표를 정확하게 조준하는 것과 같아요. 논리 연산자 `&` (그리고)와 `|` (또는)를 사용하여 필요한 데이터를 정밀하게 찾을 수 있어요.\n\n# 9. 데이터 정렬: 누가 선두일까요?\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 나이를 오름차순으로 정렬합니다\nsorted_df = df.sort_values(by='나이')\n# 혹은 내림차순으로 정렬할 수도 있습니다\nsorted_df_desc = df.sort_values(by='나이', ascending=False)\n```\n\n정렬은 마치 경쟁에서 순위 매기는 것과 같아요. `sort_values`는 지정된 열을 기준으로 데이터를 정렬해주는데, `ascending=False`는 가장 빠른 선수들을 보여줘요.\n\n# 10. 데이터 시각화: 즉각적인 통찰\n\n판다스로 직접 제공되지는 않지만, 맷플롯립이나 시본과 결합하면 데이터가 생동각을 불어넣어줄 수 있어요!\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\nimport matplotlib.pyplot as plt\n# 나이에 대한 히스토그램 그리기\ndf['Age'].hist()\nplt.title('나이 분포')\nplt.show()\n\n\n시각화는 데이터 분석의 하이라이트에요. 히스토그램, 산점도... `hist()` 함수를 사용하면 한눈에 나이 분포 패턴을 확인할 수 있어요. 제목을 추가하고 차트를 표시하면, 여러분의 이야기가 살아날 거예요!\n\n이 10가지 판다스 팁은 데이터 분석을 위한 10가지 마법 주문 같아요. 이를 마스터하면 데이터 바다를 탐험하며 더 많은 비밀을 발견할 수 있어요. 이제 파이썬을 실행하고 데이터를 춤추게 해보세요!\n\n최신 인공지능 이야기에 대한 소식을 받으려면 Substack에서 저희와 연락하세요.함께 인공지능의 미래를 만들어가요!\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저희와 함께 파이썬 이야기를 업데이트 받으려면 Substack에서 연락을 유지하세요. 함께 파이썬을 배워봐요!","ogImage":{"url":"/TIL/assets/no-image.jpg"},"coverImage":"/TIL/assets/no-image.jpg","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>판다스(Pandas)로 파이썬 데이터 분석 능력을 향상시켜요</h2>\n<p>안녕하세요! 오늘은 Pandas를 사용하여 데이터 분석 능력을 향상시키는 방법에 대해 알려 드릴게요!</p>\n<h1>1. 빠른 데이터 가져오기 및 미리보기</h1>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-comment\"># \"data.csv\"라는 파일이 있다고 가정합니다</span>\ndf = pd.read_csv(<span class=\"hljs-string\">'data.csv'</span>)\n<span class=\"hljs-comment\"># 첫 5개 행을 미리보기, 마치 미지를 드러내는 것처럼</span>\n<span class=\"hljs-built_in\">print</span>(df.head())\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 단계는 새 서점에 들어가서 목차를 훑는 것과 비슷합니다.</p>\n<p>DataFrame은 판다스의 핵심입니다. <code>read_csv</code>를 사용하면 CSV 파일을 테이블로 변환할 수 있고, <code>head()</code>를 사용하면 미리보기를 볼 수 있습니다.</p>\n<h1>2. 데이터 정리: 누락된 값 처리</h1>\n<pre><code class=\"hljs language-js\"># 누락된 값 확인\n<span class=\"hljs-title function_\">print</span>(df.<span class=\"hljs-title function_\">isnull</span>().<span class=\"hljs-title function_\">sum</span>())\n# 누락된 값들을 해당 열의 평균값으로 채우기\ndf.<span class=\"hljs-title function_\">fillna</span>(df.<span class=\"hljs-title function_\">mean</span>(), inplace=<span class=\"hljs-title class_\">True</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>데이터 정리는 먼지가 쌓인 보석을 닦는 것과 같아요. <code>isnull().sum()</code>은 먼지가 있는 곳을 보여주는데, <code>fillna</code>은 보석을 깨끗이 닦는 도구에요. 평균을 활용해서 닦습니다.</p>\n<h1>3. 선택과 필터링: 정확한 대상 선정</h1>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-string\">'Age'</span> 열 선택\nage_column = df[<span class=\"hljs-string\">'Age'</span>]\n# 나이가 <span class=\"hljs-number\">25</span>보다 큰 행 필터링\nadults = df[df[<span class=\"hljs-string\">'Age'</span>] > <span class=\"hljs-number\">25</span>]\n</code></pre>\n<p>슈퍼마켓 통로를 걷고 있는 것처럼 상상해봐요. <code>df[‘Age’]</code>은 라벨을 확인하는 것처럼, <code>df[df[‘Age’] > 25]</code>는 기준을 충족하는 항목을 고르는 것과 같아요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4. 탐색적 데이터 분석: 기술 통계</h1>\n<pre><code class=\"hljs language-js\"># 개요를 위한 기술 통계\n<span class=\"hljs-title function_\">print</span>(df.<span class=\"hljs-title function_\">describe</span>())\n</code></pre>\n<p>이것은 건강 진단과 같아요. 평균값, 최댓값 등을 보여줘서 데이터 상태를 알려줘요.</p>\n<h1>5. 데이터 병합: 퍼즐 게임</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># 가정: df2는 또 다른 <span class=\"hljs-title class_\">DataFrame</span>이라고 가정합니다.\nmerged_df = pd.<span class=\"hljs-title function_\">concat</span>([df, df2], axis=<span class=\"hljs-number\">0</span>)  # 수직으로 쌓기\nmerged_df = pd.<span class=\"hljs-title function_\">merge</span>(df, df2, on=<span class=\"hljs-string\">'공통_컬럼'</span>)  # 공통 열을 기준으로 조인\n\n</code></pre>\n<p>데이터 병합은 퍼즐 조각을 맞추는 것과 비슷합니다. <code>concat</code>은 쌓고, <code>merge</code>는 키 열을 기반으로 결합합니다.</p>\n<h1>6. 그룹화: 패턴 찾기</h1>\n<pre><code class=\"hljs language-js\"># 성별로 그룹화하여 평균 나이 계산\naverage_age_by_gender = df.<span class=\"hljs-title function_\">groupby</span>(<span class=\"hljs-string\">'성별'</span>)[<span class=\"hljs-string\">'나이'</span>].<span class=\"hljs-title function_\">mean</span>()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그룹화는 데이터 마이닝의 시작입니다. 비슷한 항목을 그룹화하고 그들의 평균 무게를 측정하는 것과 같아요. <code>groupby</code>는 분석에 깊이를 더해줍니다.</p>\n<h2>7. 데이터 형태 변형: 큐브 회전</h2>\n<pre><code class=\"hljs language-js\"># 다른 관점을 위해 데이터 전치\ndf_transposed = df.<span class=\"hljs-property\">T</span>\n# 유연한 분석을 위한 피벗 테이블\npivot_table = df.<span class=\"hljs-title function_\">pivot_table</span>(index=<span class=\"hljs-string\">'Gender'</span>, values=<span class=\"hljs-string\">'Age'</span>, aggfunc=<span class=\"hljs-string\">'mean'</span>)\n</code></pre>\n<p>데이터 형태 변형은 루빅 큐브를 돌리는 것과 같아요. <code>T</code>는 측면을 보여주고, <code>pivot_table</code>은 다차원 분석을 위한 사용자 정의 관점을 제공해줘요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>8. 조건부 필터링: 정밀 타겟팅</h1>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Filter</span> rows where age is between <span class=\"hljs-number\">25</span> and <span class=\"hljs-number\">30</span> and city is <span class=\"hljs-string\">'New York'</span>\nfiltered_df = df[(df[<span class=\"hljs-string\">'Age'</span>] > <span class=\"hljs-number\">25</span>) &#x26; (df[<span class=\"hljs-string\">'Age'</span>] &#x3C; <span class=\"hljs-number\">30</span>) &#x26; (df[<span class=\"hljs-string\">'City'</span>] == <span class=\"hljs-string\">'New York'</span>)]\n</code></pre>\n<p>조건부 필터링은 마치 목표를 정확하게 조준하는 것과 같아요. 논리 연산자 <code>&#x26;</code> (그리고)와 <code>|</code> (또는)를 사용하여 필요한 데이터를 정밀하게 찾을 수 있어요.</p>\n<h1>9. 데이터 정렬: 누가 선두일까요?</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># 나이를 오름차순으로 정렬합니다\nsorted_df = df.<span class=\"hljs-title function_\">sort_values</span>(by=<span class=\"hljs-string\">'나이'</span>)\n# 혹은 내림차순으로 정렬할 수도 있습니다\nsorted_df_desc = df.<span class=\"hljs-title function_\">sort_values</span>(by=<span class=\"hljs-string\">'나이'</span>, ascending=<span class=\"hljs-title class_\">False</span>)\n</code></pre>\n<p>정렬은 마치 경쟁에서 순위 매기는 것과 같아요. <code>sort_values</code>는 지정된 열을 기준으로 데이터를 정렬해주는데, <code>ascending=False</code>는 가장 빠른 선수들을 보여줘요.</p>\n<h1>10. 데이터 시각화: 즉각적인 통찰</h1>\n<p>판다스로 직접 제공되지는 않지만, 맷플롯립이나 시본과 결합하면 데이터가 생동각을 불어넣어줄 수 있어요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>import matplotlib.pyplot as plt</p>\n<h1>나이에 대한 히스토그램 그리기</h1>\n<p>df['Age'].hist()\nplt.title('나이 분포')\nplt.show()</p>\n<p>시각화는 데이터 분석의 하이라이트에요. 히스토그램, 산점도... <code>hist()</code> 함수를 사용하면 한눈에 나이 분포 패턴을 확인할 수 있어요. 제목을 추가하고 차트를 표시하면, 여러분의 이야기가 살아날 거예요!</p>\n<p>이 10가지 판다스 팁은 데이터 분석을 위한 10가지 마법 주문 같아요. 이를 마스터하면 데이터 바다를 탐험하며 더 많은 비밀을 발견할 수 있어요. 이제 파이썬을 실행하고 데이터를 춤추게 해보세요!</p>\n<p>최신 인공지능 이야기에 대한 소식을 받으려면 Substack에서 저희와 연락하세요.함께 인공지능의 미래를 만들어가요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>저희와 함께 파이썬 이야기를 업데이트 받으려면 Substack에서 연락을 유지하세요. 함께 파이썬을 배워봐요!</p>\n</body>\n</html>\n"},"__N_SSG":true}