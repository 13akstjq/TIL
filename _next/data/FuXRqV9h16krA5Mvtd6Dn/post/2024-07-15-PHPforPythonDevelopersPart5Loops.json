{"pageProps":{"post":{"title":"파이썬 개발자를 위한 PHP  5편  반복문 사용하는 방법","description":"","date":"2024-07-15 00:02","slug":"2024-07-15-PHPforPythonDevelopersPart5Loops","content":"\n\n![image](/TIL/assets/img/2024-07-15-PHPforPythonDevelopersPart5Loops_0.png)\n\n# 시리즈의 목적\n\n이 시리즈의 목적은 PHP 8.x를 배우려는 Python 3.x 개발자들에게 체계적인 안내를 제공하는 것입니다. 두 언어 사이의 유사점과 차이점을 강조하며, 원활한 전환을 보장하기 위해 실용적인 예제와 비교를 제공할 것입니다.\n\n본 시리즈는 이미 Python과 핵심 프로그래밍 개념에 익숙하다고 가정합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 소개\n\n반복문은 프로그래밍에 중요한 요소로, 특정 조건에 따라 코드가 반복적으로 실행될 수 있습니다. PHP에서는 다양한 종류의 반복문을 제공하여 더 많은 유연성을 제공합니다.\n\n본 문서에서는 다음을 비교할 것입니다:\n\n- while 루프\n- for 루프\n- foreach 루프\n- do-while 루프\n- break / continue 문장\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# While loop\n\nwhile 루프는 지정된 조건이 참인 경우에만 코드 블록을 반복하고 싶을 때 사용됩니다.\n\n파이썬에서는 while 루프를 다음과 같이 사용합니다:\n\n```python\ncount = 0\nwhile count < 5:\n    print(f\"Count: {count}\")\n    count += 1\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- count은 0부터 시작합니다\n- 루프가 count가 5보다 작은 동안 계속 실행됩니다\n- 루프 내에서 count가 출력되고 증가합니다\n\nPHP에서는 다음과 같이 while 루프를 사용합니다:\n\n```php\n<?php\n$count = 0;\nwhile ($count < 5) {\n    echo \"Count: $count\\n\";\n    $count++;\n}\n?>\n```\n\n- count가 0으로 초기화됩니다\n- 루프는 $count가 5보다 작은 동안 계속 실행됩니다\n- 루프 내에서 count가 출력되고 1씩 증가합니다\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n구문은 매우 유사하며, 로직은 정확히 같습니다.\n\n# for 루프\n\nfor 루프는 일반적으로 반복 횟수가 미리 알려진 경우에 사용됩니다. 두 언어 모두 구별되는 구문을 갖고 있습니다.\n\n파이썬에서:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfor i in range(5):\n    print(f\"Iteration: {i}\")\n```\n\n- range(5) 함수는 0부터 4까지의 숫자를 생성합니다.\n- 이 범위 내 각 숫자마다 i가 출력됩니다.\n\nPHP에서:\n\n```php\n<?php\nfor ($i = 0; $i < 5; $i++) {\n    echo \"Iteration: $i\\n\";\n}\n?>\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 루프는 $i를 0으로 초기화합니다.\n- $i가 5보다 작은 경우에만 실행됩니다.\n- 각 반복 후에 $i는 1씩 증가합니다.\n\nPHP는 for 루프에 대해 C 스타일 구문을 사용합니다. $i = 0은 for 루프가 실행하는 반복 횟수와 관계없이 한 번만 계산됩니다. $i ` 5는 각 반복의 시작부에서 계산되고, $i++은 각 반복의 끝에서 계산됩니다.\n\n재미있게도, 한 줄로 for 루프를 작성할 수 있지만, 하지 말아주세요. 코드는 실행되겠지만, 모든 해석기가 에러를 발생시킵니다.\n\n파이썬에서:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 표를 마크다운 형식으로 변경해보겠습니다.\n\n\n| Header One | Header Two |\n|------------|------------|\n| Row 1, Col 1 | Row 1, Col 2 |\n| Row 2, Col 1 | Row 2, Col 2 |\n\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n<?php\nfor ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++);\n?>\n```\n\n# Foreach Loop\n\nThe foreach loop is used to iterate over arrays or collections only.\n\nIn Python, we don't have foreach loops, but we can mimic it using the in membership operator and a for loop like this:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```javascript\ncolors = [\"red\", \"green\", \"blue\"];\nfor color in colors:\n    print(f\"Color: {color}\")\n```\n\n- colors는 리스트입니다.\n- for 루프는 각 요소를 순회하며 color에 할당하고 콘솔에 인쇄합니다.\n\nPHP는 foreach 루프를 지원하며 for 루프와는 매우 다른 구문을 사용합니다.\n\n```php\n<?php\n$colors = [\"red\", \"green\", \"blue\"];\nforeach ($colors as $color) {\n    echo \"Color: $color\\n\";\n}\n?>\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- `$colors`은 배열입니다\n- 루프는 `$colors` 배열의 각 요소를 순회하며 현재 요소를 `$color`에 할당하고 콘솔에 출력합니다.\n\n만약 연관 배열(파이썬의 딕셔너리)을 순회하려면 다른 구문을 사용할 수 있습니다:\n\n```js\n<?php\n$color = [\n    \"r\" => \"red\",\n    \"g\" => \"green\",\n    \"b\" => \"blue\",\n];\n\nforeach ($color as $key => $value) {\n    echo \"The $key is $value\\n\";\n}\n?>\n\n// 결과:\n// The r is red\n// The g is green\n// The b is blue\n```\n\n# Do-While 루프\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPHP에는 코드 블록이 한 번 이상 실행되도록 보장하는 do-while 루프가 있습니다. Python에는 내장 do-while 루프가 없지만 while 루프와 break 조건을 사용하여 유사한 효과를 얻을 수 있습니다.\n\nPython에서:\n\n```python\ncount = 0\nwhile True:\n    print(f\"Count: {count}\")\n    count += 1\n    if count >= 5:\n        break\n```\n\n- while True 룹은 무한히 실행됩니다.\n- count가 5에 도달하면 break 문으로 루프를 수동으로 중단합니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPHP에서:\n\n```js\n<?php\n$count = 0;\ndo {\n    echo \"Count: $count\\n\";\n    $count++;\n} while ($count < 5);\n?>\n```\n\n- 코드 블록이 먼저 실행됩니다\n- 그 후 $count < 5 조건이 확인됩니다\n- 조건이 참인 동안 반복 실행됩니다\n\nwhile 및 do-while 루프의 주요 차이점은 각 반복에서 진실 식이 시작이 아닌 끝에서 확인된다는 점입니다. 이것이 첫 반복이 항상 보장되는 이유입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# break / continue 문\n\nPHP와 Python 모두 break 및 continue 문을 제공하여 반복문의 흐름을 제어할 수 있습니다.\n\n## break\n\nPython에서는 반복문을 종료하는 방법은 다음과 같습니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\r\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor number in numbers:\n    if number > 5:\n        break # 숫자가 5보다 크면 룹을 종료합니다.\n    print(f\"Number: {number}\")\r\n```\n\nPHP에서:\n\n```js\r\n<?php\n$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nforeach ($numbers as $number) {\n    if ($number > 5) {\n        break; // 숫자가 5보다 크면 룹을 종료합니다.\n    }\n    echo \"Number: $number\\n\";\n}\n?>\r\n```\n\n추가로, PHP에서의 break는 선택적으로 숫자 인수를 허용하며, 이는 몇 개의 중첩된 룹을 탈출할지를 나타냅니다. 기본값은 1입니다. 두 룹을 동시에 탈출하는 방법에 대한 예시는 다음과 같습니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n<?php\n$matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n$target = 5;\n$found = false;\n\nforeach ($matrix as $row) {\n    foreach ($row as $value) {\n        if ($value == $target) {\n            echo \"Found target value $target. Breaking out of both loops.\\n\";\n            $found = true;\n            break 2; // Break out of both loops\n        }\n    }\n}\n\nif (!$found) {\n    echo \"Target value $target not found.\\n\";\n}\n?>\n```\n\n이 코드는 매우 유용하네요! Python에 이 기능을 추가해야 할까요?\n\n## continue\n\nPython에서는 다음 반복으로 건너뛰는 방법이 있습니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor number in numbers:\n    if number % 2 == 0:\n        continue # 짝수를 건너뛰기\n    print(f\"Number: {number}\")\n```\n\nPHP에서 동일한 기능:\n\n```js\n<?php\n$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nforeach ($numbers as $number) {\n    if ($number % 2 == 0) {\n        continue; // 짝수를 건너뛰기\n    }\n    echo \"Number: $number\\n\";\n}\n?>\n```\n\ncontinue 문은 중첩된 루프의 끝까지 건너뛰어야 하는 수준을 나타내는 선택적 숫자 인수를 받을 수도 있습니다. 기본 값은 1이며, 따라서 현재 루프의 끝으로 건너뛰게 됩니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n<?php\n$matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nforeach ($matrix as $row) {\n    foreach ($row as $value) {\n        if ($value % 2 == 0) {\n            echo \"짝수 $value를 만나면 해당 행 건너뛰기.\\n\";\n            continue 2; // 해당 행의 나머지 부분을 건너뛰고 외부 루프의 다음 행으로 이동\n        }\n        echo \"값: $value\\n\";\n    }\n}\n?>\n\n// 출력:\n// 값: 1\n// 짝수 2를 만나면 해당 행 건너뛰기.\n// 짝수 4를 만나면 해당 행 건너뛰기.\n// 값: 7\n// 짝수 8를 만나면 해당 행 건너뛰기.\n```\n\n# 결론\n\n루프는 프로그래밍에서 반복 작업에 필수적입니다. PHP 8 및 Python 3은 각기 다른 문법과 흐름을 가진 다양한 루프 구조를 제공합니다:\n\n- while 루프: 두 언어에서 유사하며 조건에 기반한 반복에 사용됩니다.\n- for 루프: Python에서는 range 함수를 사용하여 더 간단하며, PHP에서는 초기화자, 조건 및 증가자를 사용합니다.\n- foreach 루프: PHP에서 직접 배열에 사용 가능하며, Python에서는 for 루프 기능의 일부입니다.\n- do-while 루프: PHP에서 기본적으로 제공되며, Python에서는 while True 루프와 중단 조건을 사용하여 시뮬레이션할 수 있습니다.\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 만약 이 기사를 읽는 것을 즐기셨거나 도움이 되었다면, 아래와 같이 할 수 있어요:\n\n- 20번 클랩을 눌러주세요\n- 어떻게 도움이 되었는지 댓글을 남겨주세요\n- 파이썬, PHP 및 AI 기사를 더 보려면 팔로우해주세요\n\n여러분의 피드백과 참여가 저에게 글쓰고 가치 있는 콘텐츠를 공유하도록 격려해줍니다. 이 여정의 한 부분이 되어 주셔서 감사합니다!\n\n또한 저를 LinkedIn에서도 만날 수 있어요.","ogImage":{"url":"/TIL/assets/img/2024-07-15-PHPforPythonDevelopersPart5Loops_0.png"},"coverImage":"/TIL/assets/img/2024-07-15-PHPforPythonDevelopersPart5Loops_0.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/TIL/assets/img/2024-07-15-PHPforPythonDevelopersPart5Loops_0.png\" alt=\"image\"></p>\n<h1>시리즈의 목적</h1>\n<p>이 시리즈의 목적은 PHP 8.x를 배우려는 Python 3.x 개발자들에게 체계적인 안내를 제공하는 것입니다. 두 언어 사이의 유사점과 차이점을 강조하며, 원활한 전환을 보장하기 위해 실용적인 예제와 비교를 제공할 것입니다.</p>\n<p>본 시리즈는 이미 Python과 핵심 프로그래밍 개념에 익숙하다고 가정합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>소개</h1>\n<p>반복문은 프로그래밍에 중요한 요소로, 특정 조건에 따라 코드가 반복적으로 실행될 수 있습니다. PHP에서는 다양한 종류의 반복문을 제공하여 더 많은 유연성을 제공합니다.</p>\n<p>본 문서에서는 다음을 비교할 것입니다:</p>\n<ul>\n<li>while 루프</li>\n<li>for 루프</li>\n<li>foreach 루프</li>\n<li>do-while 루프</li>\n<li>break / continue 문장</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>While loop</h1>\n<p>while 루프는 지정된 조건이 참인 경우에만 코드 블록을 반복하고 싶을 때 사용됩니다.</p>\n<p>파이썬에서는 while 루프를 다음과 같이 사용합니다:</p>\n<pre><code class=\"hljs language-python\">count = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">while</span> count &#x3C; <span class=\"hljs-number\">5</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Count: <span class=\"hljs-subst\">{count}</span>\"</span>)\n    count += <span class=\"hljs-number\">1</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>count은 0부터 시작합니다</li>\n<li>루프가 count가 5보다 작은 동안 계속 실행됩니다</li>\n<li>루프 내에서 count가 출력되고 증가합니다</li>\n</ul>\n<p>PHP에서는 다음과 같이 while 루프를 사용합니다:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&#x3C;?php</span>\n<span class=\"hljs-variable\">$count</span> = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable\">$count</span> &#x3C; <span class=\"hljs-number\">5</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Count: <span class=\"hljs-subst\">$count</span>\\n\"</span>;\n    <span class=\"hljs-variable\">$count</span>++;\n}\n<span class=\"hljs-meta\">?></span>\n</code></pre>\n<ul>\n<li>count가 0으로 초기화됩니다</li>\n<li>루프는 $count가 5보다 작은 동안 계속 실행됩니다</li>\n<li>루프 내에서 count가 출력되고 1씩 증가합니다</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>구문은 매우 유사하며, 로직은 정확히 같습니다.</p>\n<h1>for 루프</h1>\n<p>for 루프는 일반적으로 반복 횟수가 미리 알려진 경우에 사용됩니다. 두 언어 모두 구별되는 구문을 갖고 있습니다.</p>\n<p>파이썬에서:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">5</span>):\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Iteration: {i}\"</span>)\n</code></pre>\n<ul>\n<li>range(5) 함수는 0부터 4까지의 숫자를 생성합니다.</li>\n<li>이 범위 내 각 숫자마다 i가 출력됩니다.</li>\n</ul>\n<p>PHP에서:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&#x3C;?php</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &#x3C; <span class=\"hljs-number\">5</span>; <span class=\"hljs-variable\">$i</span>++) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Iteration: <span class=\"hljs-subst\">$i</span>\\n\"</span>;\n}\n<span class=\"hljs-meta\">?></span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>루프는 $i를 0으로 초기화합니다.</li>\n<li>$i가 5보다 작은 경우에만 실행됩니다.</li>\n<li>각 반복 후에 $i는 1씩 증가합니다.</li>\n</ul>\n<p>PHP는 for 루프에 대해 C 스타일 구문을 사용합니다. $i = 0은 for 루프가 실행하는 반복 횟수와 관계없이 한 번만 계산됩니다. $i ` 5는 각 반복의 시작부에서 계산되고, $i++은 각 반복의 끝에서 계산됩니다.</p>\n<p>재미있게도, 한 줄로 for 루프를 작성할 수 있지만, 하지 말아주세요. 코드는 실행되겠지만, 모든 해석기가 에러를 발생시킵니다.</p>\n<p>파이썬에서:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 표를 마크다운 형식으로 변경해보겠습니다.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Header One</th><th>Header Two</th></tr></thead><tbody><tr><td>Row 1, Col 1</td><td>Row 1, Col 2</td></tr><tr><td>Row 2, Col 1</td><td>Row 2, Col 2</td></tr></tbody></table>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">&#x3C;?php\n<span class=\"hljs-keyword\">for</span> ($i = <span class=\"hljs-number\">1</span>, $j = <span class=\"hljs-number\">0</span>; $i &#x3C;= <span class=\"hljs-number\">10</span>; $j += $i, print $i, $i++);\n?>\n</code></pre>\n<h1>Foreach Loop</h1>\n<p>The foreach loop is used to iterate over arrays or collections only.</p>\n<p>In Python, we don't have foreach loops, but we can mimic it using the in membership operator and a for loop like this:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-javascript\">colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\n<span class=\"hljs-keyword\">for</span> color <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">colors</span>:\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Color: {color}\"</span>)\n</code></pre>\n<ul>\n<li>colors는 리스트입니다.</li>\n<li>for 루프는 각 요소를 순회하며 color에 할당하고 콘솔에 인쇄합니다.</li>\n</ul>\n<p>PHP는 foreach 루프를 지원하며 for 루프와는 매우 다른 구문을 사용합니다.</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&#x3C;?php</span>\n<span class=\"hljs-variable\">$colors</span> = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$colors</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$color</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Color: <span class=\"hljs-subst\">$color</span>\\n\"</span>;\n}\n<span class=\"hljs-meta\">?></span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li><code>$colors</code>은 배열입니다</li>\n<li>루프는 <code>$colors</code> 배열의 각 요소를 순회하며 현재 요소를 <code>$color</code>에 할당하고 콘솔에 출력합니다.</li>\n</ul>\n<p>만약 연관 배열(파이썬의 딕셔너리)을 순회하려면 다른 구문을 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;?php\n$color = [\n    <span class=\"hljs-string\">\"r\"</span> => <span class=\"hljs-string\">\"red\"</span>,\n    <span class=\"hljs-string\">\"g\"</span> => <span class=\"hljs-string\">\"green\"</span>,\n    <span class=\"hljs-string\">\"b\"</span> => <span class=\"hljs-string\">\"blue\"</span>,\n];\n\nforeach ($color <span class=\"hljs-keyword\">as</span> $key => $value) {\n    echo <span class=\"hljs-string\">\"The $key is $value\\n\"</span>;\n}\n?>\n\n<span class=\"hljs-comment\">// 결과:</span>\n<span class=\"hljs-comment\">// The r is red</span>\n<span class=\"hljs-comment\">// The g is green</span>\n<span class=\"hljs-comment\">// The b is blue</span>\n</code></pre>\n<h1>Do-While 루프</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>PHP에는 코드 블록이 한 번 이상 실행되도록 보장하는 do-while 루프가 있습니다. Python에는 내장 do-while 루프가 없지만 while 루프와 break 조건을 사용하여 유사한 효과를 얻을 수 있습니다.</p>\n<p>Python에서:</p>\n<pre><code class=\"hljs language-python\">count = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Count: <span class=\"hljs-subst\">{count}</span>\"</span>)\n    count += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> count >= <span class=\"hljs-number\">5</span>:\n        <span class=\"hljs-keyword\">break</span>\n</code></pre>\n<ul>\n<li>while True 룹은 무한히 실행됩니다.</li>\n<li>count가 5에 도달하면 break 문으로 루프를 수동으로 중단합니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>PHP에서:</p>\n<pre><code class=\"hljs language-js\">&#x3C;?php\n$count = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">do</span> {\n    echo <span class=\"hljs-string\">\"Count: $count\\n\"</span>;\n    $count++;\n} <span class=\"hljs-keyword\">while</span> ($count &#x3C; <span class=\"hljs-number\">5</span>);\n?>\n</code></pre>\n<ul>\n<li>코드 블록이 먼저 실행됩니다</li>\n<li>그 후 $count &#x3C; 5 조건이 확인됩니다</li>\n<li>조건이 참인 동안 반복 실행됩니다</li>\n</ul>\n<p>while 및 do-while 루프의 주요 차이점은 각 반복에서 진실 식이 시작이 아닌 끝에서 확인된다는 점입니다. 이것이 첫 반복이 항상 보장되는 이유입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>break / continue 문</h1>\n<p>PHP와 Python 모두 break 및 continue 문을 제공하여 반복문의 흐름을 제어할 수 있습니다.</p>\n<h2>break</h2>\n<p>Python에서는 반복문을 종료하는 방법은 다음과 같습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]\n\n<span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">numbers</span>:\n    <span class=\"hljs-keyword\">if</span> number > <span class=\"hljs-number\">5</span>:\n        <span class=\"hljs-keyword\">break</span> # 숫자가 <span class=\"hljs-number\">5</span>보다 크면 룹을 종료합니다.\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Number: {number}\"</span>)\n</code></pre>\n<p>PHP에서:</p>\n<pre><code class=\"hljs language-js\">&#x3C;?php\n$numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>];\n\nforeach ($numbers <span class=\"hljs-keyword\">as</span> $number) {\n    <span class=\"hljs-keyword\">if</span> ($number > <span class=\"hljs-number\">5</span>) {\n        <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 숫자가 5보다 크면 룹을 종료합니다.</span>\n    }\n    echo <span class=\"hljs-string\">\"Number: $number\\n\"</span>;\n}\n?>\n</code></pre>\n<p>추가로, PHP에서의 break는 선택적으로 숫자 인수를 허용하며, 이는 몇 개의 중첩된 룹을 탈출할지를 나타냅니다. 기본값은 1입니다. 두 룹을 동시에 탈출하는 방법에 대한 예시는 다음과 같습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">&#x3C;?php\n$matrix = [\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],\n    [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>],\n    [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]\n];\n\n$target = <span class=\"hljs-number\">5</span>;\n$found = <span class=\"hljs-literal\">false</span>;\n\nforeach ($matrix <span class=\"hljs-keyword\">as</span> $row) {\n    foreach ($row <span class=\"hljs-keyword\">as</span> $value) {\n        <span class=\"hljs-keyword\">if</span> ($value == $target) {\n            echo <span class=\"hljs-string\">\"Found target value $target. Breaking out of both loops.\\n\"</span>;\n            $found = <span class=\"hljs-literal\">true</span>;\n            <span class=\"hljs-keyword\">break</span> <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// Break out of both loops</span>\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">if</span> (!$found) {\n    echo <span class=\"hljs-string\">\"Target value $target not found.\\n\"</span>;\n}\n?>\n</code></pre>\n<p>이 코드는 매우 유용하네요! Python에 이 기능을 추가해야 할까요?</p>\n<h2>continue</h2>\n<p>Python에서는 다음 반복으로 건너뛰는 방법이 있습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]\n\n<span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">numbers</span>:\n    <span class=\"hljs-keyword\">if</span> number % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">continue</span> # 짝수를 건너뛰기\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Number: {number}\"</span>)\n</code></pre>\n<p>PHP에서 동일한 기능:</p>\n<pre><code class=\"hljs language-js\">&#x3C;?php\n$numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>];\n\nforeach ($numbers <span class=\"hljs-keyword\">as</span> $number) {\n    <span class=\"hljs-keyword\">if</span> ($number % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">continue</span>; <span class=\"hljs-comment\">// 짝수를 건너뛰기</span>\n    }\n    echo <span class=\"hljs-string\">\"Number: $number\\n\"</span>;\n}\n?>\n</code></pre>\n<p>continue 문은 중첩된 루프의 끝까지 건너뛰어야 하는 수준을 나타내는 선택적 숫자 인수를 받을 수도 있습니다. 기본 값은 1이며, 따라서 현재 루프의 끝으로 건너뛰게 됩니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">&#x3C;?php\n$matrix = [\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],\n    [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>],\n    [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]\n];\n\nforeach ($matrix <span class=\"hljs-keyword\">as</span> $row) {\n    foreach ($row <span class=\"hljs-keyword\">as</span> $value) {\n        <span class=\"hljs-keyword\">if</span> ($value % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n            echo <span class=\"hljs-string\">\"짝수 $value를 만나면 해당 행 건너뛰기.\\n\"</span>;\n            <span class=\"hljs-keyword\">continue</span> <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 해당 행의 나머지 부분을 건너뛰고 외부 루프의 다음 행으로 이동</span>\n        }\n        echo <span class=\"hljs-string\">\"값: $value\\n\"</span>;\n    }\n}\n?>\n\n<span class=\"hljs-comment\">// 출력:</span>\n<span class=\"hljs-comment\">// 값: 1</span>\n<span class=\"hljs-comment\">// 짝수 2를 만나면 해당 행 건너뛰기.</span>\n<span class=\"hljs-comment\">// 짝수 4를 만나면 해당 행 건너뛰기.</span>\n<span class=\"hljs-comment\">// 값: 7</span>\n<span class=\"hljs-comment\">// 짝수 8를 만나면 해당 행 건너뛰기.</span>\n</code></pre>\n<h1>결론</h1>\n<p>루프는 프로그래밍에서 반복 작업에 필수적입니다. PHP 8 및 Python 3은 각기 다른 문법과 흐름을 가진 다양한 루프 구조를 제공합니다:</p>\n<ul>\n<li>while 루프: 두 언어에서 유사하며 조건에 기반한 반복에 사용됩니다.</li>\n<li>for 루프: Python에서는 range 함수를 사용하여 더 간단하며, PHP에서는 초기화자, 조건 및 증가자를 사용합니다.</li>\n<li>foreach 루프: PHP에서 직접 배열에 사용 가능하며, Python에서는 for 루프 기능의 일부입니다.</li>\n<li>do-while 루프: PHP에서 기본적으로 제공되며, Python에서는 while True 루프와 중단 조건을 사용하여 시뮬레이션할 수 있습니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>만약 이 기사를 읽는 것을 즐기셨거나 도움이 되었다면, 아래와 같이 할 수 있어요:</h1>\n<ul>\n<li>20번 클랩을 눌러주세요</li>\n<li>어떻게 도움이 되었는지 댓글을 남겨주세요</li>\n<li>파이썬, PHP 및 AI 기사를 더 보려면 팔로우해주세요</li>\n</ul>\n<p>여러분의 피드백과 참여가 저에게 글쓰고 가치 있는 콘텐츠를 공유하도록 격려해줍니다. 이 여정의 한 부분이 되어 주셔서 감사합니다!</p>\n<p>또한 저를 LinkedIn에서도 만날 수 있어요.</p>\n</body>\n</html>\n"},"__N_SSG":true}