{"pageProps":{"posts":[{"title":"알고 계셨나요  Python 내장 우선순위 큐 소개","description":"","date":"2024-07-07 21:48","slug":"2024-07-07-DidYouKnowPythonHasABuilt-inPriorityQueue","content":"\n<img src=\"/TIL/assets/img/2024-07-07-DidYouKnowPythonHasABuilt-inPriorityQueue_0.png\" />\n\n우선 순위 큐:\n\n- 요소들의 집합\n- 각 요소는 어떤 종류의 우선 순위가 할당되어 있음\n- 큐 내에서 가장 높은 우선 순위를 가진 요소가 먼저 처리됨\n- 요소를 큐에 넣는 순서는 중요하지 않음\n\n예를 들어, 이 숫자들이 포함된 우선 순위 큐가 있다고 가정해봅시다. 낮은 숫자가 높은 우선 순위를 의미합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npq = [3, 7, 1, 6, 4, 5];\n```\n\n- 여기서 3이 먼저 삽입되고, 그 다음에 7, 그 다음에 1이 들어갑니다.\n- 그러나 3은 큐에서 제일 먼저 떠난 요소가 아닙니다.\n\n```js\n# 큐에서 팝\n1\n\n# 큐에서 팝\n3\n\n# 큐에서 팝\n4\n```\n\n- 1이 3보다 먼저 나가는 이유는 더 높은 우선순위를 가지고 있기 때문입니다.\n- 3은 1 다음으로 가장 높은 우선순위를 가지고 있기 때문에 다음에 나갑니다.\n- 4는 3 다음으로 가장 높은 우선순위를 가지고 있기 때문에 그 다음에 나갑니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 이런. 정렬만 하면 되잖아요?\n\n```js\npq = [3, 7, 1, 6, 4, 5]\npq.sort()\n\n# pq = [1, 3, 4, 5, 6, 7]\n```\n\n이제는 우선순위대로 1, 3, 4 순으로 pop할 수 있습니다. 네 할 수 있어요.\n\n하지만 문제는 이 목록에 새 숫자를 추가하려고 할 때 발생합니다.\n","ogImage":{"url":"/assets/img/2024-07-07-DidYouKnowPythonHasABuilt-inPriorityQueue_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-DidYouKnowPythonHasABuilt-inPriorityQueue_0.png","tag":["Tech"],"readingTime":2},{"title":"Python 기초 __init__py를 사용해야 하는 이유","description":"","date":"2024-07-07 21:47","slug":"2024-07-07-PythonBasicsWhyuse__init__py","content":"\n![Screenshot](/TIL/assets/img/2024-07-07-PythonBasicsWhyuse__init__py_0.png)\n\n안녕하세요! 오늘은 Python의 **init**.py에 대해 이해해보겠습니다. 아주 작지만 중요한 역할을 하는 파일이에요. 기술 용어 없이 쉽게 파악해봐요.\n\n## **init**.py란?\n\nPython 파일이 모인 디렉터리를 패키지로 취급하고 싶다면 **init**.py 파일을 넣어주면 됩니다. 그러면 Python이 그 디렉터리를 패키지로 인식해요. 코드와 Python 사이의 비밀 악수 같은 존재죠.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*vRslGzL6g4YZkmkF5DDX1g.gif)\n\n# 이 init.py 파일 안에는 무엇이 있을까요?\n\n파이썬의 **init**.py에 대해 궁금해 해보셨나요? 이 파일은 단순히 빈 파일일 수도 있고, 특별한 설정이 필요한 경우 일부 초기화 코드를 포함할 수도 있습니다. 하지만 대부분의 경우, 비어있는 **init**.py 파일만 있어도 충분합니다. **init**.py 파일을 패키지의 사용 준비가 되어 있다고 생각해보세요. 누군가 당신의 패키지를 사용하고자 할 때, 그들은 코드에서 그것을 import하고 Python은 그 마법같은 **init**.py를 찾아볼 것입니다.\n\n**init**.py가 없으면, Python은 당신의 디렉토리를 패키지로 인식하지 못하며 표준 \"import\" 문을 사용하여 해당 모듈을 가져올 수 없습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![](https://miro.medium.com/v2/resize:fit:1400/1*ICEW26oY5tK3yjpO267rHw.gif)\n\n# \\_\\_init\\_\\_.py 가 파이썬 패키지 생성에 어떻게 도움이 될까요?\n\n\\_\\_init\\_\\_.py 는 코드를 모듈화된 청크로 구성할 수 있게 해주어 모든 것을 매우 효율적으로 관리하고 재사용할 수 있습니다. 패키지의 청사진으로 상상해보세요 — \\_\\_init\\_\\_.py 에서 공통 함수, 변수를 정의하거나 다른 모듈을 import하여 패키지의 기능에 대한 기반을 설정할 수 있습니다.\n\n# 예제\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n간단한 패키지인 my_package를 생성해보겠습니다. my_package 디렉토리 내부에서 어떻게 **init**.py가 작동하는지 설명하기 위해 빈 **init**.py 파일을 만들고 greetings.py 파일을 생성하여 say_hello() 함수를 작성해봅시다. 이 함수는 “Hello, World!”를 출력합니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*Bk3i_Yta7rGPZ9b_xap4KA.gif)\n\n```python\n# greetings.py\ndef say_hello():\n  print(\"Hello, World!\")\n```\n\n이제 my_package 디렉토리 외부의 어떤 파일에서든 greetings 모듈을 가져와 say_hello() 함수를 사용할 수 있습니다. 이 때 **init**.py 파일이 greetings 모듈을 my_package 네임스페이스 내에서 접근 가능하게 만들어주기 때문에 “Hello, World!”가 출력됩니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*fcHy0Fyq7xfaCafR3hcGHw.gif\" />\n\n# 결론\n\n**init**.py는 구조화되고 조직화된 Python 패키지를 만드는 데 중요한 기본 요소입니다. 코드를 함께 유지하는 보이지 않는 접착제처럼 동작하여 재사용하고 공유하기가 쉬워집니다. 간단히 말하면, **init**.py는 Python 프로젝트의 시작 선과도 같습니다.\n\n좋아요, 멋진 분들! 여기까지가 전부에요. **init**.py를 Python 프로젝트의 중요한 역할로 생각해보세요! 조용하게 존재하지만 모든 코드 조각들을 함께 모아 깔끔하게 정리하고 공유할 수 있게 도와줍니다. 언제나처럼, 즐거운 코딩하시고 여러분의 프로젝트가 항상 조직적이기를 바라겠습니다!\n","ogImage":{"url":"/assets/img/2024-07-07-PythonBasicsWhyuse__init__py_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-PythonBasicsWhyuse__init__py_0.png","tag":["Tech"],"readingTime":4},{"title":"SQLAlchemy ORM 시작하기  데이터 가져오기 버전 35","description":"","date":"2024-07-07 21:46","slug":"2024-07-07-GettingStartedwithSQLAlchemyORMDataFetching35","content":"\n![이미지](/TIL/assets/img/2024-07-07-GettingStartedwithSQLAlchemyORMDataFetching35_0.png)\n\nORM에서 Core와 동일하게 많은 것들이 작동합니다. 한 가지 다른 점은 연결 실행 방법 대신 세션을 사용한다는 것입니다.\n\n## ID로 가져오기\n\n만약 ID로 사용자를 가져오고 싶다면, 두 가지 옵션이 있습니다. session.query와 session.get을 사용할 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n세션에서 get 메서드를 직접 사용할 수 있으며, Todo 클래스와 기본 키를 전달해야 합니다.\n\n```python\nfrom sqlalchemy import create_engine, Column, Integer, Text\nfrom sqlalchemy.orm import Session, DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Todo(Base):\n    __tablename__ = \"todos\"\n\n    id = Column(Integer, primary_key=True)\n    label = Column(Text, nullable=False)\n    status = Column(Text, nullable=False)\n\n# Base.metadata.drop_all(engine)\n# Base.metadata.create_all(engine)\n\ntodos = [\n    Todo(label=\"Walk a dog\", status=\"doing\"),\n    Todo(label=\"Shopping\", status=\"in_progress\"),\n]\n\nwith Session(engine) as session:\n    # session.add_all(todos)\n    # session.commit()\n\n    result = (\n        session.get(Todo, 1)\n    )\n\n    print(result.id, result.label, result.status)  # 1 Walk a dog doing\n```\n\n기본 키를 사용하지 않거나 다른 열에서 검색하려는 경우 where 메서드를 사용할 수 있습니다. 이 경우에는 예를 들어서...\n","ogImage":{"url":"/assets/img/2024-07-07-GettingStartedwithSQLAlchemyORMDataFetching35_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-GettingStartedwithSQLAlchemyORMDataFetching35_0.png","tag":["Tech"],"readingTime":2},{"title":"Redis 대신 PostgreSQL을 사용해야 하는 이유","description":"","date":"2024-07-07 21:46","slug":"2024-07-07-WhoneedsRediswhenPostgreswilldo","content":"\n![이미지1](/TIL/assets/img/2024-07-07-WhoneedsRediswhenPostgreswilldo_0.png)\n\n레디스를 정말 좋아합니다. 토네이도 앱을 확장하고 실시간 업데이트를 지원할 수 있게 해줬죠. 토네이도는 nginx 뒤에서 실행하고 토네이도 앱의 여러 인스턴스를 가동하는 것을 권장합니다.\n\n![이미지2](/TIL/assets/img/2024-07-07-WhoneedsRediswhenPostgreswilldo_1.png)\n\n이제 클라이언트가 앱에 연결하고 모든 앱의 모든 클라이언트에게 방송이 전달되어야 합니다. 레디스는 여기서 나서서 모든 앱이 레디스 채널을 구독하고 작성 앱에서 publish를 호출하는 pub/sub(발행 및 구독) 패턴을 제공합니다. 이는 Heroku나 AWS에서 매우 잘 작동하는데, 누가 서버가 몇 개나 있는지 알 수 없는 환경에서 작동합니다. 그러나 단일 장애 지점을 도입하게 됩니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/TIL/assets/img/2024-07-07-WhoneedsRediswhenPostgreswilldo_2.png\" />\n\n그럼, Postgres는 어떤가요? 저의 지속성은 SQLAlchemy로 이뤄집니다. MySQL에서 Postgres로 가끔 전환해 보았는데, 장점이 있는지 살펴보기 위해서예요. MySQL은 인noDB 인터페이스를 통해 캐시를 업데이트할 수 있는데, 이는 인noDB 트랜잭션 내에서 기본 데이터를 업데이트하는 동시에 캐시를 업데이트할 수 있어요. 안타깝게도, MySQL의 개발자들은 이 확장 기능을 폐기하기로 결정했어요. 그래서 Postgres와 그들 자체의 연결 클래스를 살펴보았어요. 함께 살펴보죠...\n","ogImage":{"url":"/assets/img/2024-07-07-WhoneedsRediswhenPostgreswilldo_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-WhoneedsRediswhenPostgreswilldo_0.png","tag":["Tech"],"readingTime":2},{"title":"E-도서관 데이터베이스 설계, 핵심 요약","description":"","date":"2024-07-07 21:44","slug":"2024-07-07-E-LibraryDatabaseDesigninginaNutshell","content":"\n내가 이것을 쓰기 전에, 팝컬쳐 특히 원피스에 너무 많은 선호를 준 것에 대해 죄송합니다. 강조해야 할 특정한 것이 하나 있거든요. 오하라 섬과 그 도서관에 관한 것입니다.\n\n![이미지](/TIL/assets/img/2024-07-07-E-LibraryDatabaseDesigninginaNutshell_0.png)\n\n여기서 무슨 일이 있었는지에 대해 너무 많이 이야기하고 싶지 않겠습니다. 이 기사의 초점은 책에 있습니다. 어떻게 디자인하고 관리하며 관련 정보를 수집하는지 등의 것이요. 그러나 이 기사에서는 컴퓨터의 도움을 받아서 이 작업을 잘 할 겁니다. 여전히 책들과 다루긴 하지만, 지난 큰 도서관과의 추악한 역사처럼 이번에는 이 책들이 쉽게 태울 수 없어요. 그러니 시작해봅시다.\n\n내 첫 인상은, 책을 두려워하지 마세요. 책은 어디서나 있어요. 만나본 모든 사람이 다르지 않나요? 네, 우리는 생동하는 책 자체예요. 심지어 당신의 책도 만나본 수많은 사람들에게 빌려주면 수천 권의 책으로 번지더라구요. 모든 것이 아직 기계적이었던 옛날, 도서관에 가는 것은 세계 여행하는 것과 같았어요, 그러나 최대한 싼 방법으로요. 우리가 와서 자신의 ID를 만들고, 원하는 책을 고르고, 빌리고, 그 책을 돌려주고, 그리고 되풀이했죠. 하지만 요즘엔 그렇지 않아요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현재의 디지턈 시대에는 젊은 세대를 중심으로 디지턈 도서관이 인기를 끌고 있어요. 이는 접근성과 유연성이 뛰어나기 때문입니다. 이제는 실제 도서관을 방문하지 않고도 다양한 정보, 책 및 학습 자료를 얻을 수 있어요. 전자책 같은 걸 들어봤나요?\n\n그래서 이 기사의 목적은 디지턈 도서관을 위한 데이터베이스 시스템을 설계하여 효율성을 향상시키고 잘 조직된 구조를 유지하는 데 도움을 주는 것이에요. 오하라 도서관처럼, 하지만 디지턈 버전으로 말이죠.\n\n데이터베이스를 설계할 때의 첫 번째 단계는 미션 명성을 결정하는 것이에요. 이 프로젝트의 미션 명성은 다음과 같아요:\n\n- 사용자는 도서관에 있는 책 제목을 살펴볼 수 있어요.\n- 사용자는 카테고리 또는 유형에 따라 책을 검색할 수 있어요.\n- 사용자는 각 책의 도서관 보유량을 알 수 있어요.\n- 사용자는 읽고 싶은 책을 대출하거나 예약할 수 있어요.\n- 사용자는 각 책의 가용성을 확인할 수 있어요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그럼에도 불구하고 이 프로젝트에는 몇 가지 주의할 점이 있습니다:\n\n- 기본 대출 기간은 2주입니다. 그러나 고객들은 책을 더 빨리 반납할 수 있고, 도서 대출 기간을 초과하면 책이 자동으로 반납됩니다.\n- 고객들은 동시에 최대 2권의 책을 대출할 수 있습니다.\n- 현재 이용 불가한 책을 예약할 수 있지만, 고객들은 한 번에 최대 2권만 예약할 수 있습니다.\n\n그리고 이후에 전자 도서관 시스템을 위한 표를 만들고, 주요 및 외래 키를 정의하여 그들의 관계를 확립할 수 있습니다. 아래 그림은 저가 만든 개체 관계 다이어그램(ERD)이며, 각 표에 대한 설명이 포함되어 있습니다. 전체로 10개의 표가 있습니다.\n\n![E-Library ERD](/TIL/assets/img/2024-07-07-E-LibraryDatabaseDesigninginaNutshell_1.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Image](/TIL/assets/img/2024-07-07-E-LibraryDatabaseDesigninginaNutshell_2.png)\n\nLibraries table\n\n- This table contains information about libraries, including the library_id of each library, its name, and address\n\nCategories table\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n---\n\n이 표는 각 카테고리의 ID와 이름을 포함한 카테고리 정보를 담고 있습니다.\n\n작가 테이블\n\n---\n\n이 표는 각 작가의 ID와 이름을 포함한 작가 정보를 담고 있습니다.\n\n출판사 테이블\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n— 이 테이블은 각 출판사의 ID와 이름을 포함한 출판사에 대한 정보가 포함되어 있습니다.\n\nBooks 테이블\n\n— 이 테이블은 책에 대한 정보를 포함하고 있으며, 주요 키로 책의 ID, 제목, 작가 ID, 카테고리 ID, 출판사 ID 및 책 유형이 포함되어 있습니다.\n\nLibrary Collections 테이블\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n특정 도서관에 소장된 책 정보가 담긴 이 테이블은 특정 컬렉션의 ID, 특정 도서관의 ID, 해당 도서관의 ID, 그리고 이용 가능한 수량을 포함하고 있습니다.\n\n회원 테이블\n\n— 특정 회원의 ID(주요 키), 이름, 주소, 이메일 정보를 포함하는 회원 정보가 담긴 테이블입니다.\n\n사용자 테이블\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n— 사용자 정보를 포함한 테이블이며 특정 사용자의 ID가 주요 키로 사용되고, 회원 ID, 비밀번호 및 전화 번호가 포함되어 있습니다.\n\nBorrow 테이블\n\n— 이 전자 도서관에서 대출 된 책에 대한 정보가 포함 된 테이블입니다. 각 대여 사례에 대해 ID가 주요 키로 사용됩니다. 대출 한 사용자의 ID, 대출 된 도서관 컬렉션 ID, 대출 된 책이 빌린 시간을 나타내는 borrow_date, 대출 날짜가 만료 된 도서의 due_date, 책이 반납 된 시간인 return_date, 그리고 책이 반납 되었는지 여부를 나타내는 return_status가 포함되어 있습니다.\n\nHolds 테이블\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n— 이 테이블은 전자 도서관에 보관되어 있는 컬렉션에 관한 정보를 포함하고 있습니다. 각 보유 케이스에는 id가 있습니다. 사용자 id, 보유한 도서관 컬렉션 id, 도서 보유가 시작된 시간에 대한 정보를 나타내는 hold_start, 도서 보유 날짜가 만료되는 시간을 나타내는 hold_end가 포함되어 있습니다.\n\n## 디자인 구현\n\n다음 단계에서는 PostgreSQL을 사용하여 데이터베이스 또는 ERD의 디자인을 구현할 수 있습니다. 테이블을 생성하고 관계를 정의하기 위해 데이터 정의 언어(DDL) 구문을 사용할 수 있습니다. 그리고 데이터베이스 디자인을 구현하는 단계는 다음과 같습니다:\n\n- PostgreSQL 데이터베이스에 연결\n- 데이터베이스 생성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nCREATE TABLE library_collections\n(\nlibrary_collection_id SERIAL PRIMARY KEY,\nlibrary_id INTEGER NOT NULL,\nbooks_id INTEGER NOT NULL,\nquantity_available INTEGER NOT NULL CHECK(quantity_available >= 0),\nCONSTRAINT fk_library_collections_lib\nFOREIGN KEY(library_id)\nREFERENCES libraries(library_id),\nCONSTRAINT fk_library_collections_bk\nFOREIGN KEY(books_id)\nREFERENCES books(books_id)\n);\n\n위의 예시는 라이브러리 컬렉션 테이블 세트를 만드는 경우이며, 해당 외래 키로 제약 조건이 있는 테이블을 작성하는 방법을 보여줍니다. 각각의 외래 키는 자신이 참조하는 원본 테이블을 참조하며, 각 키는 자신이 참조하는 테이블의 기본 키입니다. 전체 문서에 대한 자세한 내용은 아래 링크를 클릭하십시오:\n\nhttps://github.com/ziadbwdn/E-LibraryRDB\n\n## 데이터베이스 생성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터베이스에서 데이터를 검색하기 위해 테이블 형식의 데이터가 필요합니다. 이 경우, 테이블을 수동으로 생성한 데이터와 Python 라이브러리 Faker를 결합하여 얻은 더미 데이터를 사용합니다. 아래에 이전 스크립트를 통해 생성된 코드 예제와 faker를 사용한 이후 스크립트를 살펴볼 수 있습니다:\n\n```js\n# 라이브러리 테이블 생성\ndef create_libraries(library_name, library_address):\n    \"\"\"\n    도서관에 대한 DataFrame 생성\n\n    Parameters:\n    - library_names (list): 도서관 이름 목록, 총 8개가 있습니다.\n    - library_address (list): 도서관 주소 목록, 총 8개가 있습니다.\n\n    Returns:\n    - pd.DataFrame: 도서관 ID 및 도서관 이름과 같은 정보를 포함하는 DataFrame\n    \"\"\"\n\n    libraries = {\n        \"library_id\": [i + 1 for i in range(len(library_name))],\n        \"library_name\": library_name,\n        \"library_address\": library_address\n    }\n\n    libraries_df = pd.DataFrame(libraries)\n    return libraries_df\n\nlibrary_name = [\"와칸다 도서관\",\n                \"푸스타카 코노하\",\n                \"포헨 펜게타후안 풀라우 오하라\",\n                \"마이크로 라이브러리 와락 카유\",\n                \"C2O 도서관\",\n                \"키네루쿠 도서관\",\n                \"바카 디 테벳\",\n                \"타만 바카 아민 페르푸스타카안 콘테이너\",\n                ]\n\nlibrary_address = [\"서라바야 자바 팀루 마르고무르 요 퍼마이 6-8 도메인 G 술라바야 자바 팀루\",\n                   \"자와 바랏 반둥 지엠 앙디리 34-38 번듕 자와 바랏\",\n                   \"자카르타 디케이 아일란트 자카르타 끄븽나가 라야 25 풀로 게방 라야 25 자카르타 DKI 자카르타\",\n                   \"메단 수마테라 우타라 마니아 라야 18-20 서라바야 자바 팀루\",\n                   \"주아 티음틸리스 라야 26 자카르타 DKI 자카르타\",\n                   \"레페트시부 올라야 16 자카르타 DKI 자카르타\",\n                   \"반두르 자와 바랏 H Juanda 377 반등 자와 바랏\",\n                   \"반두르 자와 바랏 H Juanda 377 반등 자와 바랏\"\n                  ]\nlibraries_table = create_libraries(library_name, library_address)\nlibraries_table\n```\n\n```js\n# 저자 테이블 생성\ndef create_authors(n_authors):\n    \"\"\"\n    저자 및 저자 이름과 저자 ID 사이의 매핑을 만드는 작업\n\n    Parameters:\n    - n_authors (int): 작성할 저자 정보의 수\n\n    Returns:\n    - pd.DataFrame: 저자 ID 및 저자 이름과 같은 정보를 포함하는 DataFrame\n    \"\"\"\n    authors = []\n    for a in range(n_authors):\n        authors.append({\n            'author_id': fake.unique.random_int(min=1, max=9999),\n            'author_name': fake.name()\n        })\n\n    authors_df = pd.DataFrame(authors)\n    return authors_df\n\n# 저자 DataFrame 및 매핑 생성\nauthors_table = create_authors(800)\nauthors_table\n```\n\n사용할 라이브러리를 가져오는 첫 번째 단계는 다음과 같습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- pandas: Python에서 데이터 조작 및 분석에 사용됩니다.\n- Faker: 가짜 데이터를 생성하는 데 사용되는 라이브러리입니다.\n- random: 무작위 값을 생성하는 데 사용됩니다.\n- timedelta: 시간을 계산하는 데 사용됩니다.\n\n그리고 가짜 데이터를 얻기 위해 위치 설정을 인도네시아로 설정하세요. 이름, 주소 및 이메일과 같은 가짜 데이터를 얻을 수 있습니다.\n\n```js\n# 2단계: 인도네시아 또는 영어로 위치 설정\nfake = Faker('id_ID' or 'en_EN')\n```\n\n이후에는 PostgreSQL에 가져오기 전에 더미 데이터를 얻기 위해 필요한 데이터를 실행할 수 있습니다. 만든 테이블 데이터프레임을 성공적으로 저장하기 위해 먼저 csv로 저장해야 합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# CSV로 저장하기\nauthors_table.to_csv('authors.csv', index=False)\n\n# CSV로 저장하기\nlibrary_collections_table.to_csv('library_collections.csv', index=False)\n```\n\n전체 코드는 이 페이지에서 확인할 수 있습니다\n\nhttps://github.com/ziadbwdn/E-LibraryRDB\n\n이제 가져오기 프로세스에 필요한 모든 데이터가 있는 경우 예를 들어 SQL 쿼리 도구에서 계속할 수 있습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nCOPY authors(author_id, author_name)\nFROM 'C:\\Program Files\\PostgreSQL\\16\\pgAdmin 4\\SQL Exercise 4\\authors.csv'\nDELIMITER ','\nCSV HEADER\n\nCOPY library_collections(library_collection_id, library_id, books_id, quantity_available)\nFROM 'C:\\Program Files\\PostgreSQL\\16\\pgAdmin 4\\SQL Exercise 4\\library_collections.csv'\nDELIMITER ','\nCSV HEADER\n```\n\n이 작업을 수행하기 전에, DDL 구문에서 만든 데이터와 파이썬에서 출력한 csv가 ERD 다이어그램 처럼 우리가 설계한 요구 사항을 충분히 준수하는지 확인하는 것이 중요합니다.\n\n## 사례 연구\n\n먼저, 각각의 도서관에서 가장 많고 가장 적은 책을 가지고 있는 도서관을 확인해보겠습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```sql\nSELECT\n l.library_name,\n COUNT (books_id) AS total_book_collections\nFROM library_collections AS lc\nJOIN libraries AS l ON lc.library_id = l.library_id\nGROUP BY library_name\nORDER BY total_book_collections DESC\n```\n\n그리고 아래는 결과입니다:\n\n![이미지](/TIL/assets/img/2024-07-07-E-LibraryDatabaseDesigninginaNutshell_3.png)\n\nBaca Di Tebet은 책 수집량을 기준으로 하면 가장 많이 모은 도서관이며, Taman Baca Amin은 가장 작은 책 모음을 가진 1196 대비 1304개를 수집했습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그리고 두 번째로, 우리는 가장 많은 책을 대출한 도서관 회원을 살펴보려고 해요.\n\n```js\nWITH frequent_borrower as (\n SELECT\n  br.user_id,\n  m.member_name,\n  count (br.borrow_id) as amount_of_borrow,\n  br.return_status\n\n FROM borrows as br\n join users as u on br.user_id = u.user_id\n join members as m on u.member_id = m.member_id\n WHERE return_status is true\n GROUP BY 1,2,4\n )\n\nSELECT * from frequent_borrower as fb\nwhere fb.amount_of_borrow > 2\norder by amount_of_borrow desc limit 10\n```\n\n그런 다음 우리가 결과물로 다음을 받았어요:\n\n<img src=\"/TIL/assets/img/2024-07-07-E-LibraryDatabaseDesigninginaNutshell_4.png\" />\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nHartika Narpati부터 Edward Prasetya까지는 도서 4권을 대출한 가장 빈번한 독자입니다.\n\n세 번째 단계에서는, 테이브이지를 다음과 같이 마크다운 형식으로 변경해주세요:\n\n| 책 제목    | 카테고리 이름 | 도서관 이름  | 이용 가능 수량     |\n| ---------- | ------------- | ------------ | ------------------ |\n| book_title | category_name | library_name | quantity_available |\n\n예를 들어, 청소년 자매가 로맨스 소설을 찾고 있어서 도와달라고 요청하며, 특정 도서관(예: Pustaka Konoha)를 찾고 있다면 어떨까요? 아래 PostgreSQL 쿼리를 사용해볼까요?\n\n```sql\nWITH konoha_books as (\n SELECT b.book_title,\n   c.category_name,\n   l.library_name,\n   lc.quantity_available\n FROM books as b\n join categories as c on b.category_id = c.category_id\n join library_collections as lc on b.books_id = lc.books_id\n join libraries as l on lc.library_id = l.library_id\n WHERE library_name = 'Pustaka Konoha'\n )\n\nSELECT * FROM konoha_books as kb\nWHERE category_name ilike '%Romance%'\nORDER BY kb.quantity_available DESC\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이후 다음이 결과로 나타납니다:\n\n![이미지](/TIL/assets/img/2024-07-07-E-LibraryDatabaseDesigninginaNutshell_5.png)\n\n푸스타카 코노하에는 카테고리 소설 - 로맨스에 속하는 131개의 컬렉션이 있습니다.\n\n성장을 위해 사회과학을 주전공으로 선택하셨고, 감독님으로부터 사회과학 주제의 참고 자료를 우선으로 찾아야 한다는 지시를 받았지만 수라바야에 있다는 한계가 있습니다. PostgreSQL 쿼리를 사용하십시오.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nWITH surabaya_books as (\n SELECT  b.book_title,\n   c.category_name,\n   l.library_name,\n   l.library_address,\n   lc.quantity_available\n FROM books as b\n join categories as c on b.category_id = c.category_id\n join library_collections as lc on b.books_id = lc.books_id\n join libraries as l on lc.library_id = l.library_id\n WHERE library_address ilike '%Surabaya%'\n )\n\nSELECT * FROM surabaya_books as sb\nWHERE category_name ilike '%Social%'\nORDER BY ab.quantity_available\n```\n\n위 쿼리를 실행한 결과는 아래와 같습니다:\n\n![이미지](/TIL/assets/img/2024-07-07-E-LibraryDatabaseDesigninginaNutshell_6.png)\n\n위 결과를 보면, 수라바야에서 볼 수 있는 사회과학 분야의 도서 총 174권이 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마지막으로, 빌린 날짜로부터 일반적으로 두 주 후인 만기일을 초과하는 반납으로 인해 벌금을 내야 할 수 있는 사람들이 있습니다. 그들이 누구인지 알아보세요!\n\n```js\nWITH duration_borrower as (\n SELECT\n  EXTRACT (DAY FROM br.borrow_date) as days_of_borrow,\n  EXTRACT (DAY FROM br.return_date) as days_of_return,\n  br.user_id,\n  br.borrow_id,\n  m.member_name,\n  count (br.borrow_id) as amount_of_borrow,\n  br.return_status\n\n FROM borrows as br\n join users as u on br.user_id = u.user_id\n join members as m on u.member_id = m.member_id\n GROUP BY 1,2,3,4,5,7\n )\n\nSELECT\n dur_b.borrow_id,\n dur_b.member_name,\n ABS(dur_b.days_of_return - dur_b.days_of_borrow) as interval_days,\n dur_b.return_status\n\nfrom duration_borrower as dur_b\nwhere return_status is false\ngroup by 1,2,3,4\norder by 3 desc\nlimit 10\n```\n\n그런 다음 다음을 결과로 받았습니다:\n\n<img src=\"/TIL/assets/img/2024-07-07-E-LibraryDatabaseDesigninginaNutshell_7.png\" />\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현재 Farah Padmasari와 Latika Wasita가 이번 기회에 조금의 경고나 벌금을 받아야할 것 같아요.\n\n안팎을 다듬으면서 이런 것들의 내부 작동 방식을 조금씩 파악할 수 있기를 희망해요. 완벽하지는 않겠지만, 계속해서 발전할 여지가 많을 거에요.\n\n혹시 실제 책은 태울 수 있지만, 디지털 책은 그렇게 쉽게 태울 수 없지요. 오하라의 지식의 등대는 아직 살아있어요, 적어도 이제는 니코 로빈과 빨강머리 해적단의 손에 있어요. 감사합니다.\n\n참고자료:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- https://github.com/ziadbwdn/E-LibraryRDB\n- https://faker.readthedocs.io/en/master/\n- https://www.postgresql.org/docs/\n","ogImage":{"url":"/assets/img/2024-07-07-E-LibraryDatabaseDesigninginaNutshell_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-E-LibraryDatabaseDesigninginaNutshell_0.png","tag":["Tech"],"readingTime":18},{"title":"PySpark 완벽 가이드 DataFrame 생성과 데이터를 채우는 네 가지 방법","description":"","date":"2024-07-07 21:43","slug":"2024-07-07-PySparkExplainedFourWaystoCreateandPopulateDataFrames","content":"\n\n파이스파크를 사용할 때 특히 SQL에 백그라운드를 가지고 있다면, 처리할 데이터를 데이터프레임으로 가져오는 것이 처음으로 해야 할 일 중 하나일 것입니다. 데이터가 데이터프레임에 들어있으면, 데이터프레임에서 임시 뷰(또는 영구 테이블)를 쉽게 생성할 수 있습니다. 그 순간부터, PySpark SQL의 다양한 연산 명령이 데이터를 더 탐색하고 처리할 수 있도록 사용 가능해집니다.\n\n표준 SQL 기술이 PySpark SQL로 쉽게 전이 가능하기 때문에, 데이터를 처리 파이프라인에서 가능한 한 빠르게 PySpark SQL과 직접적으로 사용할 수 있도록 준비하는 것이 중요합니다. 효율적인 데이터 처리 및 분석을 위해 이 작업을 최우선 순위로 두어야 합니다.\n\n물론 이렇게 할 필요는 없습니다. PySpark SQL에서 뷰나 테이블을 사용할 수 있는 모든 작업은 API를 사용하여 데이터프레임에서도 직접 수행할 수 있습니다. 그렇지만, DataFrame API보다 SQL을 사용하는 것이 더 편한 사람으로써, 나의 스파크 사용 방법은 항상 다음과 같습니다.\n\n이 과정을 돕기 위해, 이 글에서는 파이프라인의 첫 단계인 데이터를 데이터프레임에 넣는 과정을 설명하여 네 가지를 한눈에 알려드릴 것입니다...","ogImage":{"url":"/TIL/assets/no-image.jpg"},"coverImage":"/TIL/assets/no-image.jpg","tag":["Tech"],"readingTime":1},{"title":"Python과 Boto3로 Redshift 자동화 효율적이고 비용 효과적인 클러스터 구축 가이드","description":"","date":"2024-07-07 21:41","slug":"2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters","content":"\n<img src=\"/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_0.png\" />\n\n파이썬과 Boto3를 활용한 Amazon Redshift 클러스터 자동화에 관한 궁극의 안내서에 오신 것을 환영합니다! Redshift 관리 프로세스를 최적화하고 클러스터 및 스냅샷을 생성 및 관리하며 비용을 절감하고 효율성을 향상시키려면 올바른 곳에 왔습니다. 이 블로그에서는 환경 설정부터 Python을 사용한 고급 자동화 스크립트 구현까지 필수 단계를 안내합니다. 이 가이드를 마치면 실용적인 지식과 프로처럼 Redshift 클러스터를 처리할 준비가 된 코드 조각을 가지고 있을 것입니다. 시작해보죠! 💻📊\n\n# 준비 사항📋\n\nRedshift 자동화의 흥미로운 세계로 뛰어들기 전에 시작할 준비가 되어 있는지 확인해보겠습니다. 이 섹션에서는 AWS Redshift 환경 및 Python 설정에 필요한 필수 준비 사항을 안내해 드릴 것입니다. 🌐🐍\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- ☁️AWS 계정: Redshift를 사용해보기 위해 무료 체험을 신청해보세요.\n- 🐍 파이썬 설치: Redshift와 원할하게 대화하기 위해 공식 웹사이트에서 다운로드하세요.\n- 📦설치할 모듈: 터미널에서 pip install boto3를 사용하여 설치하세요. AWS 계정을 로컬 컴퓨터에 연결하는 방법에 대한 단계별 비주얼 가이드가 필요하다면, AWS 계정에 Boto3를 설정하는 비디오 자습서를 참고하세요.\n\n이러한 필수 사항이 갖춰지면, 클라우드 데이터베이스와 데이터 분석에 전문가처럼 뛰어들 준비가 되었습니다. ☁️📊\n\n# 목차 📚\n\n- 수동으로 Redshift 클러스터 생성하기 🎥\n- Python과 Boto3를 사용하여 클러스터 생성 자동화 🚀\n- 클러스터 일시 중지 및 재개 ⏸️▶️\n- 단일 작업으로 모든 Redshift 클러스터 일시 중지 ⏸️📊\n- 전문가처럼 클러스터 관리하기 🔍\n- 스냅샷: 데이터의 가장 친한 친구 📸\n- 효율적인 클러스터 관리 스크립트 📝\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 📚자료 섹션\n\n- 포괄적인 YouTube 비디오🎬: 이 YouTube 재생 목록에는 이 블로그의 코드 실행과 관련된 모든 비디오가 포함되어 있습니다.\n- GitHub 텍스트 파일 📄: 본 저장소에는 이 블로그에서 참조하는 모든 코드가 포함되어 있어, 프로젝트에 필요한 모든 스크립트와 도구에 액세스할 수 있습니다.\n\n# 수동으로 Redshift 클러스터 만들기 🎥\n\n시작해 볼까요? 여러분만의 Redshift 클러스터를 설정해 봅시다. 다음 단계를 따라 주세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- AWS Management Console에 로그인하세요: Redshift 서비스로 이동해주세요 🔍.\n- 클러스터 생성하기: '클러스터 생성'을 클릭하세요. 클러스터 식별자, 노드 유형, 데이터베이스 구성과 같은 세부 정보를 입력해주세요 🛠️.\n- 검토하고 시작하기: 설정을 확인하고 클러스터를 시작하세요. 이 과정은 몇 분이 소요될 수 있습니다⏳.\n- 보안 그룹 및 포트 구성: 보안 그룹을 편집하고 포트 번호를 5439로 설정해주세요.\n- 클러스터를 공개적으로 접속 가능하게 만들기: 작업으로 이동하여 공개적으로 접속 가능한 옵션을 활성화해주세요 🌐.\n\n레드시프트 클러스터 생성 방법에 대한 자세한 설명은 다음을 참고하세요:\n\n- 📺 이 비디오 튜토리얼 시청: 시각적인 학습자에게 완벽합니다!\n- 📄 이 블로그 포스트를 참조: 단계별 설명서를 선호하는 경우에 유용합니다.\n\n# Python 및 Boto3를 활용한 클러스터 생성 자동화 🚀\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 섹션에서는 Boto3와 Python을 사용하여 Redshift 클러스터를 생성하는 방법을 배우게 될 거에요. 이 안내서를 통해 상세한 코드 예제와 설명을 통해 과정을 안내할 거에요.\n\n## Redshift 클러스터 생성을 위한 코드 안내\n\n아래 이미지는 코드에서 수행되는 주요 단계를 보여줍니다:\n\n![Redshift Cluster Creation](/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_1.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 Python 스크립트는 Boto3를 사용하여 Amazon Redshift 클러스터를 생성합니다. 특정 매개변수로 클러스터를 설정하고 클러스터의 상태를 지속적으로 확인하여 사용 가능해질 때까지 기다립니다. 클러스터를 사용할 수 있게 되면 확인 메시지를 출력합니다.\n\n## 비디오 자습서\n\n실제 코드 실행을 볼 수 있는 비디오 자습서를 확인해보세요:\n\n동일한 코드에 대한 링크 📎.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 가이드를 따라하면 Python과 Boto3를 사용하여 Redshift 클러스터를 효율적으로 생성할 수 있습니다. 다음 섹션에서는 클러스터 일시 중지 및 재개에 대해 배울 것입니다 ⏸️▶️\n\n# 클러스터 일시 중지 및 재개 ⏸️▶️\n\n이 섹션에서는 Boto3와 Python을 사용하여 Redshift 클러스터의 일시 중지 및 재개 프로세스를 자동화하는 방법을 배웁니다.\n\n# 1. 클러스터 재개하기 ▶️\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클러스터를 다시 시작해보겠습니다. 아래는 코드 설명입니다:\n\n![code explanation](/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_2.png)\n\n제공된 코드 스니펫은 Boto3를 사용하여 Redshift 클러스터를 재개하는 Redshift 클라이언트를 생성합니다. 클러스터가 성공적으로 재개되면 성공 메시지를 출력하고, 그렇지 않으면 발생하는 모든 오류를 잡아서 출력합니다.\n\n## 비디오 자습서\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 코드가 어떻게 실행되는지 확인하려면 이 비디오 튜토리얼을 확인해보세요:\n\n동일한 코드에 대한 링크 📎.\n\n# 2. 클러스터 일시 중지 ⏸️\n\n다음으로 클러스터를 일시 중지하는 방법에 대해 배워봅시다. 여기 코드 설명이 있습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Redshift Cluster Pause](/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_3.png)\n\nThe code snippet creates a Redshift client using Boto3 to pause ⏸️ a Redshift cluster identified by cluster_identifier. If the cluster pauses successfully, it prints a success message; otherwise, it catches and prints any errors that occur during the process.\n\n## Video Tutorial\n\nCheck out this video tutorial to see the execution of the code in action:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 가이드를 따르면 Redshift 클러스터를 자동으로 다시 작동하고 일시 중지하는 프로세스를 효율적으로 관리할 수 있습니다. 이는 비용을 절약하고 클러스터가 필요할 때만 작동되도록 보장하는 데 도움이 될 수 있습니다.\n\n다음 섹션에서는 모든 클러스터를 일시 중지하는 방법을 보여주는 작은 프로젝트를 살펴볼 것입니다. 기대해 주세요! 🚀\n\n# 모든 Redshift 클러스터를 한 번에 일시 중지하기 ⏸️📊\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 섹션에서는 Python과 Boto3를 사용하여 모든 실행 중인 Redshift 클러스터를 자동으로 일시 중지하는 멋진 프로젝트를 살펴보겠습니다. 이 자동화는 비용을 절약하고 클러스터 관리를 간편화할 수 있습니다.\n\n![이미지](/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_4.png)\n\n이 Python 스크립트는 Boto3를 사용하여 Amazon Redshift와 상호 작용하여 모든 클러스터를 설명하고 상태를 확인하고 사용 가능한 클러스터를 일시 중지합니다. 그렇게 하기 위해 Redshift 클라이언트의 describe_clusters 및 pause_cluster 함수를 활용하여 클러스터 상태와 일시 중지 시 클러스터 상태 및 성공 메시지를 출력합니다.\n\n## 비디오 자습서\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 코드 실행을 보고 싶다면 이 비디오 튜토리얼을 확인해보세요:\n\n동일한 코드 링크 📎.\n\n# 실제 활용 사례 시나리오 ⏰🔄\n\n모든 클러스터 일시 중지 및 모든 클러스터 재개는 다양한 시나리오에서 매우 유익할 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 예정된 다운타임: AWS Lambda와 이벤트 트리거를 사용하여 클러스터가 사용되지 않을 때 오후 6시에 모든 클러스터를 일시 중지하는 스크립트를 자동으로 예약 할 수 있습니다.\n- 비용 관리: 필요한 시간인 아침 9시 전에 스크립트를 예약하여 모든 클러스터를 자동으로 다시 시작하면 효율적인 클러스터 이용과 비용 관리가 보장됩니다.\n\n파이썬과 Boto3를 사용하여 모든 Amazon Redshift 클러스터의 일시 중지를 자동화 함으로써 효율적인 비용 관리와 운영 제어를 보장할 수 있습니다. 🌟\n\n이 섹션에서는 파이썬과 Boto3를 사용하여 모든 Amazon Redshift 클러스터의 일시 중지를 자동화하여 비용 관리와 운영 제어를 효율적으로 보장했습니다. 다음으로 클러스터를 효과적으로 관리하는 몇 가지 기술을 탐색해 보겠습니다.\n\n# 전문가처럼 클러스터 관리하기 🔍\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 섹션에서는 Python 및 Boto3를 사용하여 Amazon Redshift 클러스터를 관리하는 내용을 살펴보겠습니다. 모든 클러스터를 볼 수 있는 방법과 특정 클러스터를 삭제하는 방법을 다룰 것입니다.\n\n# 1. 모든 클러스터 보기\n\n먼저, Redshift 클러스터를 모두 검색하고 표시해 봅시다:\n\n![image](/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_5.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 코드는 Boto3를 사용하여 지정된 지역(us-east-1)의 AWS Redshift 서비스에 연결하고 모든 클러스터 식별자의 목록을 검색합니다. 이 목록은 당신의 필요에 따라 필터링 및 정렬과 같은 추가 작업에 유용할 수 있습니다.\n\n## 비디오 자습서\n\n코드 실행 과정을 확인하려면 이 비디오 자습서를 확인해보세요:\n\n동일한 코드에 대한 링크 📎.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 실제 활용:\n\n클러스터 필터링 및 정렬: 정규 표현식 (regex)을 사용하여 특정 기준에 따라 클러스터를 필터링하는 코드를 수정할 수 있습니다. 이를 통해 유지 관리 또는 삭제와 같은 특정 작업을 위해 클러스터를 대상으로할 수 있습니다.\n\n# 클러스터 삭제\n\n이제 Redshift 클러스터를 프로그래밍 방식으로 삭제하는 방법을 살펴보겠습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_6.png)\n\n이 코드 조각은 Boto3를 사용하여 지정된 Redshift 클러스터 (myredshiftcluster)를 최종 스냅샷을 찍지 않고 삭제하는 방법을 보여줍니다. 삭제 프로세스의 현재 상태를 출력합니다.\n\n## 비디오 튜토리얼\n\n실제 코드 실행을 확인하려면 이 비디오 튜토리얼을 확인하세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n동일한 코드에 대한 링크 📎\n\n이제 클러스터를 관리하는 데 sol하게 이해했으니, Redshift 관리의 다음 중요한 측면인 스냅샷으로 넘어가 봅시다.\n\n# 스냅샷: 데이터의 베스트 프렌드 📸\n\n이 섹션에서는 Redshift 스냅샷의 세계에 대해 알아볼 것입니다. 데이터 백업 및 복구를위한 중요한 기능인 스냅샷을 다룰 것입니다. 포함될 내용은 다음과 같습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- **스냅샷이란 무엇인가요?**\n- **스냅샷 목록을 위한 코드 Walkthrough**\n- **클러스터를 위한 스냅샷 생성**\n- **스냅샷 생성 및 삭제에 대한 코드 Walkthrough**\n\n**# 스냅샷이란 무엇인가요?**\n\nAmazon Redshift에서 스냅샷은 클러스터의 데이터와 메타데이터를 캡처하는 클러스터의 특정 시점 백업입니다. 스냅샷은 자동화되거나 수동으로 이루어질 수 있으며, 스냅샷이 촬영된 시점의 상태로 클러스터를 복원할 수 있도록 합니다. 이는 데이터 복구, 재해 복구 및 데이터 무결성 유지를 위해 중요합니다.\n\n**# 스냅샷 목록을 위한 코드 Walkthrough**\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRedshift 스냅샷을 관리하기 위해, 특정 클러스터에 대한 모든 스냅샷을 나열하는 것부터 시작해보세요.\n\n![스냅샷](/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_7.png)\n\n이 코드는 지정된 Redshift 클러스터의 스냅샷 목록을 가져와 표시합니다. Redshift 서비스와 상호 작용하기 위해 Boto3를 사용하여 스냅샷을 효율적으로 모니터링하고 관리할 수 있습니다.\n\n## 비디오 튜토리얼\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n해당 코드 실행 과정을 확인하려면 이 비디오 튜토리얼을 확인해보세요:\n\n해당 코드 링크는 여기 있습니다 📎.\n\n# 클러스터에 대한 스냅샷 만들기\n\n스냅샷을 만들면 클러스터의 현재 상태를 백업하여 필요 시 나중에 복원할 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_8.png)\n\n이 코드는 지정된 Redshift 클러스터의 수동 스냅샷을 생성하고 스냅샷 상태가 'available'일 때까지 기다립니다. 이렇게 함으로써 스냅샷 생성 프로세스가 완료된 후 추가 작업을 진행할 수 있습니다.\n\n## 비디오 튜토리얼\n\n실행 중인 코드를 보려면 이 비디오 튜토리얼을 확인해보세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n동일한 코드에 대한 링크를 첨부합니다 📎.\n\n이 섹션에서는 데이터 백업 및 복구를 위해 Amazon Redshift의 스냅샷의 중요성을 탐색했습니다. 우리는 스냅샷이 무엇인지, 스냅샷 목록 및 생성을 위한 코드 안내, 그리고 데이터 무결성 유지에 대한 실제 응용 사례를 강조했습니다.\n\n다음 섹션에서는 효율적인 클러스터 관리에 대한 우리의 학습을 유기적으로 연결하는 실용적인 프로젝트를 살펴볼 것입니다.\n\n# 효율적인 클러스터 관리 스크립트 📝\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 프로젝트는 Redshift 클러스터를 관리하는 포괄적인 스크립트를 보여줍니다. 클러스터를 재개하거나 데이터베이스를 생성하고 스냅샷을 찍거나 클러스터를 일시 중지하는 등의 작업이 가능합니다.\n\n## 코드 안내\n\n아래 이미지는 코드에서 수행되는 주요 단계를 설명합니다:\n\n![워크스루](/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_9.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_10.png\" />\n\n이 스크립트는 Amazon Redshift 클러스터를 관리하는 여러 핵심 작업을 자동화합니다. 일시 중지된 클러스터를 다시 시작하고 사용 가능해질 때까지 대기합니다. 클러스터가 준비되면 redshift_connector를 사용하여 클러스터에 연결하고 새 데이터베이스를 만듭니다. 그 후 클러스터의 수동 스냅샷을 만들고 스냅샷이 사용 가능해질 때까지 대기합니다. 마지막으로 스크립트는 비용을 절약하기 위해 클러스터를 일시 중지합니다. 프로세스 전반에 걸쳐 스크립트는 오류 처리를 포함하고 데이터베이스 연결이 올바르게 닫혀 있는지 확인합니다. 이 포괄적인 방법은 효율적이고 자동화된 Redshift 클러스터 관리를 보장합니다.\n\n## 비디오 자습서\n\n실행 중인 코드를 확인하려면 이 비디오 자습서를 확인해보세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n링크를 마크다운 형식으로 변경하세요 📎.\n\n# 결론\n\n이 블로그에서는 Python과 Boto3를 사용하여 Amazon Redshift 클러스터를 관리하는 다양한 측면을 다루었습니다. 수동 및 프로그래밍 방식으로 클러스터를 생성하고, 비용 효율성을 위해 클러스터를 일시 중지하고 재개하며, 데이터 백업과 복구를 위해 스냅샷을 활용하는 등 Redshift 작업을 최적화하는 실용적이고 강력한 기술을 탐색했습니다.\n\n제공된 단계와 코드 예제를 따르면 Redshift 클러스터 관리를 자동화하여 최적의 성능과 비용 절감을 보장할 수 있습니다. 효율적인 Redshift 클러스터 관리는 비용을 절약할 뿐만 아니라 데이터 처리 능력을 향상시켜 데이터 작업을 더 견고하고 신뢰할 수 있게 만듭니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 많은 고급 기술과 프로젝트가 있는 것을 기대해 주세요. AWS 관리 기술을 더 향상시킬 수 있도록 도와 드리겠습니다. 자동화 작업을 즐기세요! 🚀💼\n\n![Automating Redshift with Python and Boto3](/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_11.png)\n\n## 다음 단계\n\n이제 Redshift 클러스터를 관리하는 탄탄한 기초가 있으므로, 다음과 같은 고급 주제를 탐험해 볼 수 있습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Redshift 클러스터에 대한 보안 모범 사례를 구현합니다.\n- Redshift를 다른 AWS 서비스와 통합하여 포괄적인 데이터 솔루션을 구축합니다.\n- Redshift 성능 및 쿼리 효율을 최적화합니다.\n\n이러한 개념들을 실험하고 발전시켜 Redshift 자동화 전문가로 성장해보세요. 행운을 빕니다! 💻🌐\n","ogImage":{"url":"/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-AutomatingRedshiftwithPythonandBoto3APlaybookforEfficientandCost-EffectiveClusters_0.png","tag":["Tech"],"readingTime":18},{"title":"궁극의 파이썬 치트 시트 일상적인 작업을 위한 실용적인 파이썬 사용법","description":"","date":"2024-07-07 21:34","slug":"2024-07-07-UltimatePythonCheatSheetPracticalPythonForEverydayTasks","content":"\n<img src=\"/TIL/assets/img/2024-07-07-UltimatePythonCheatSheetPracticalPythonForEverydayTasks_0.png\" />\n\n(다른 내 궁극적인 안내서)\n\n이 치트 시트는 필요에 의해 탄생했습니다. 최근에 언어를 약간 떨어뜨린 후 새로운 Python 프로젝트에 뛰어 들어가야 했기 때문입니다.\n\nPython의 실용적인 구문과 형식을 항상 감사히 여겼습니다. 하지만 Node/Typescript 영역에서 시간을 보내다보니, Python의 최신 기능, 최고의 실천 방법 및 가장 영향적인 도구에 대한 빠른 복습이 필요했습니다. 나는 세부 사항에 얽매이지 않고 빠르게 속도를 내야 했고, 자주 사용해야 하는 작업 및 기능을 참조할 수 있도록 이 목록을 작성했습니다. 본질적으로, 프로그래밍 요구 사항의 80%를 다루는 Python의 중요한 20%를 이해하는 것이 필요했습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 가이드는 그 여정의 결말입니다. 그동안 만난 가장 실용적인 Python 지식, 통찰력 및 유용한 라이브러리의 모음을 제공합니다. 이것은 가장 가치 있게 여겼던 학습을 공유하기 위해 디자인되었습니다. 여러분의 프로젝트와 과제에 즉시 적용할 수 있는 방식으로 제시됩니다.\n\n저는 일반적으로 함께 작동하는 논리적인 영역으로 섹션을 나누어놨습니다. 관심 있는 영역으로 이동하여 특정 작업이나 주제와 관련된 가장 관련된 항목을 찾을 수 있습니다. 파일 작업, API 상호 작용, 스프레드시트 조작, 수학적 계산 및 목록 및 사전과 같은 데이터 구조 작업을 포함할 것입니다. 추가로, Python이 일반적으로 사용되는 도메인에서 흔히 사용되는 Python 도구상자를 향상시킬 수 있는 몇 가지 유용한 라이브러리를 강조할 것입니다.\n\n만약 치트 시트에 포함되어야 할 내용을 빠뜨렸다고 생각한다면, 댓글에서 알려주시면 목록을 업데이트하겠습니다!\n\n# 파일 작업하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 파일 읽기\n\n파일의 전체 내용을 읽으려면:\n\n```python\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)\n```\n\n# 2. 파일 쓰기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기존 내용을 덮어쓰기 위한 파일에 텍스트를 작성하는 방법:\n\n```js\nwith open('example.txt', 'w') as file:\n    file.write('Hello, Python!')\n```\n\n# 3. 파일에 추가\n\n기존 파일 끝에 텍스트를 추가하는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nwith open('example.txt', 'a') as file:\n    file.write('\\n이 줄을 추가합니다.')\n```\n\n# 4. 리스트로 라인 읽기\n\n파일을 라인별로 리스트에 읽어오려면:\n\n```js\nwith open('example.txt', 'r') as file:\n    lines = file.readlines()\n    print(lines)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 파일의 각 라인을 반복하는 방법\n\n파일의 각 라인을 처리하려면:\n\n```python\nwith open('example.txt', 'r') as file:\n    for line in file:\n        print(line.strip())\n```\n\n# 6. 파일의 존재 여부 확인\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파일 작업을 수행하기 전에 파일이 존재하는지 확인하려면:\n\n```js\nimport os\nif os.path.exists('example.txt'):\n    print('파일이 존재합니다.')\nelse:\n    print('파일이 존재하지 않습니다.')\n```\n\n# 7. 파일에 목록 쓰기\n\n목록의 각 요소를 파일의 새 줄에 작성하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nlines = ['첫 번째 줄', '두 번째 줄', '세 번째 줄']\nwith open('example.txt', 'w') as file:\nfor line in lines:\nfile.write(f'{line}\\n')\n\n# 8. 여러 파일에 대해 With 블록 사용하기\n\n여러 파일을 동시에 처리하려면 다음과 같이 with 블록을 사용할 수 있습니다:\n\nwith open('source.txt', 'r') as source, open('destination.txt', 'w') as destination:\ncontent = source.read()\ndestination.write(content)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 9. 파일 삭제하기\n\n해당 파일이 존재할 경우 안전하게 파일을 삭제하는 방법:\n\n```js\nimport os\nif os.path.exists('example.txt'):\n    os.remove('example.txt')\n    print('파일이 삭제되었습니다.')\nelse:\n    print('해당 파일이 존재하지 않습니다.')\n```\n\n# 10. 이진 파일 읽기 및 쓰기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n바이너리 모드로 파일을 읽거나 쓰려면(이미지, 비디오 등에 유용함):\n\n```js\n# 바이너리 파일 읽기\nwith open('image.jpg', 'rb') as file:\n    content = file.read()\n# 바이너리 파일 쓰기\nwith open('copy.jpg', 'wb') as file:\n    file.write(content)\n```\n\n# 간단한 HTTP API 작업\n\n# 1. 기본 GET 요청\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAPI 엔드포인트에서 GET 요청을 사용하여 데이터를 가져오는 방법:\n\n```js\nimport requests\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()  # 응답이 JSON 형식일 경우\nprint(data)\n```\n\n## 2. 쿼리 매개변수를 포함한 GET 요청\n\n쿼리 매개변수를 포함한 GET 요청을 보내려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport requests\nparams = {'key1': 'value1', 'key2': 'value2'}\nresponse = requests.get('https://api.example.com/search', params=params)\ndata = response.json()\nprint(data)\n```\n\n# 3. HTTP 오류 처리하기\n\n가능한 HTTP 오류를 공손하게 처리하기 위해:\n\n```js\nimport requests\nresponse = requests.get('https://api.example.com/data')\ntry:\n    response.raise_for_status()  # 상태가 4xx, 5xx인 경우 HTTPError를 발생시킵니다\n    data = response.json()\n    print(data)\nexcept requests.exceptions.HTTPError as err:\n    print(f'HTTP 오류 발생: {err}')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. API 요청에 대한 Timeout 설정\n\nAPI 요청이 무한 대기되지 않도록 Timeout을 설정하는 방법:\n\n```js\nimport requests\ntry:\n    response = requests.get('https://api.example.com/data', timeout=5)  # Timeout은 초 단위로 설정\n    data = response.json()\n    print(data)\nexcept requests.exceptions.Timeout:\n    print('요청 시간이 초과되었습니다')\n```\n\n# 5. 요청에서 헤더 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n요청에 헤더를 포함하려면 (예: 권한을 위해):\n\n```python\nimport requests\nheaders = {'Authorization': 'Bearer YOUR_ACCESS_TOKEN'}\nresponse = requests.get('https://api.example.com/protected', headers=headers)\ndata = response.json()\nprint(data)\n```\n\n# 6. JSON Payload을 사용한 POST 요청\n\nJSON 페이로드를 사용하여 POST 요청을 통해 API 엔드포인트로 데이터를 전송하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport requests\npayload = {'key1': 'value1', 'key2': 'value2'}\nheaders = {'Content-Type': 'application/json'}\nresponse = requests.post('https://api.example.com/submit', json=payload, headers=headers)\nprint(response.json())\n```\n\n# 7. 응답 인코딩 처리\n\n올바르게 응답 인코딩을 처리하려면:\n\n```js\nimport requests\nresponse = requests.get('https://api.example.com/data')\nresponse.encoding = 'utf-8'  # 응답 형식과 일치하도록 인코딩 설정\ndata = response.text\nprint(data)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 세션과 함께 Requests 사용하기\n\n같은 호스트로 여러 요청을 보내기 위해 세션 객체를 사용하면 성능을 향상시킬 수 있어요:\n\n```js\nimport requests\nwith requests.Session() as session:\n    session.headers.update({'Authorization': 'Bearer 여러분의_액세스_토큰'})\n    response = session.get('https://api.example.com/data')\n    print(response.json())\n```\n\n# 9. 리디렉션 처리\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n리퀘스트에서 리디렉션을 처리하거나 비활성화하려면:\n\n```js\nimport requests\nresponse = requests.get('https://api.example.com/data', allow_redirects=False)\nprint(response.status_code)\n```\n\n### 10. 대용량 응답 스트리밍\n\n대용량 응답을 처리하기 위해 모두 메모리에 로드하는 대신 청크 단위로 처리하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```json\nimport requests\nresponse = requests.get('https://api.example.com/large-data', stream=True)\nfor chunk in response.iter_content(chunk_size=1024):\n    process(chunk)  # 실제 처리 함수로 'process'를 교체하세요\n```\n\n# 리스트 작업\n\n# 1. 리스트 만들기\n\n리스트를 만들려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 신비한 요소 목록\nelements = ['Earth', 'Air', 'Fire', 'Water']\n```\n\n## 2. 리스트에 추가하기\n\n리스트 끝에 새 요소를 추가하려면:\n\n```js\nelements.append(\"Aether\");\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. 리스트에 삽입하기\n\n특정 위치에 요소를 삽입하려면:\n\n```js\n# 인덱스 1에 'Spirit' 삽입\nelements.insert(1, 'Spirit')\n```\n\n# 4. 리스트에서 제거하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n리스트에서 값을 기준으로 요소를 제거하는 방법은 다음과 같아요:\n\n```js\nelements.remove('Earth')  # 'Earth'의 첫 번째 발생을 제거합니다\n```\n\n# 5. 리스트에서 요소를 뽑아내기\n\n주어진 인덱스에서 요소를 제거하고 반환하는 방법은 다음과 같아요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nlast_element = elements.pop()  # 마지막 요소를 제거하고 반환합니다\n```\n\n# 6. 요소의 인덱스 찾기\n\n첫 번째 발생 요소의 인덱스를 찾으려면:\n\n```js\nindex_of_air = elements.index(\"Air\");\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 리스트 슬라이싱\n\n리스트를 슬라이스하여 하위 리스트를 얻으려면:\n\n```js\n# 인덱스 1부터 3까지 요소 가져오기\nsub_elements = elements[1:4]\n```\n\n# 8. 리스트 컴프리헨션\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기존 목록의 각 요소에 식을 적용하여 새 목록을 만들려면:\n\n```js\n# 각 요소의 길이로 새 목록 생성\nlengths = [len(element) for element in elements]\n```\n\n9. 목록 정렬\n\n목록을 오름차순으로 정렬하려면 (위치 기준으로):\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nelements.sort();\n```\n\n# 10. 리스트 뒤집기\n\n리스트의 요소를 제자리에서 뒤집으려면:\n\n```js\nelements.reverse();\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 딕셔너리 사용하기\n\n# 1. 딕셔너리 생성하기\n\n새로운 딕셔너리를 만들려면:\n\n```js\n# 요소와 그들의 기호에 관한 책\nelements = {'Hydrogen': 'H', 'Helium': 'He', 'Lithium': 'Li'}\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 항목 추가 또는 업데이트\n\n새로운 항목을 추가하거나 기존 항목을 업데이트하려면:\n\n```js\nelements['Carbon'] = 'C'  # 'Carbon'을 추가하거나 그 값이 'C'로 업데이트됩니다\n```\n\n# 3. 항목 삭제\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사전에서 항목을 삭제하려면:\n\n```js\ndel elements['Lithium']  # 'Lithium' 키와 값을 삭제합니다\n```\n\n# 4. 키 존재 여부 확인\n\n키가 사전 안에 있는지 확인하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nif 'Helium' in elements:\n    print('Helium is present')\n```\n\n# 5. 키를 반복하는 법\n\n딕셔너리의 키를 반복하려면:\n\n```js\nfor element in elements:\n    print(element)  # 각 키를 출력합니다\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 6. 값 순회하기\n\n딕셔너리에서 값들을 순회하려면:\n\n```python\nfor symbol in elements.values():\n    print(symbol)  # 각 값 출력하기\n```\n\n## 7. 항목 순회하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n두 가지를 통합하여 여행하기:\n\n```js\nelements.items()안에서 element, symbol에 대해:\n    print(f'{element}: {symbol}')\n```\n\n# 8. 사전 컴프리헨션\n\n반복 가능한 항목 위에 주문을 통해 새로운 사전을 창조하다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 0부터 4까지의 숫자의 제곱\n\nsquares = {x: x\\*\\*2 for x in range(5)}\n\n# 9. 딕셔너리 병합\n\n두 개 이상의 딕셔너리를 병합하여 그 항목들의 새로운 동맹을 형성합니다:\n\nalchemists = {'Paracelsus': 'Mercury'}\nphilosophers = {'Plato': 'Aether'}\nmerged = {**alchemists, **philosophers} # Python 3.5+\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 기본값과 함께 값 가져오기\n\n값을 안전하게 가져오려면, 없는 키에 대한 기본값을 제공합니다:\n\n```js\nelement = elements.get('Neon', 'Unknown')  # 'Neon'이 발견되지 않을 경우 'Unknown'을 반환합니다\n```\n\n# 운영 체제와 작업하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 파일 경로 탐색\n\n파일 경로를 만들고 분해하여 다양한 환경(운영 체제)에서 호환성을 보장합니다:\n\n```js\nimport os\n# 운영 체제와 호환되는 경로 만들기\npath = os.path.join('mystic', 'forest', 'artifact.txt')\n# 고서가 있는 디렉토리 검색\ndirectory = os.path.dirname(path)\n# 유물의 이름 공개\nartifact_name = os.path.basename(path)\n```\n\n# 2. 디렉터리 내용 나열\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n신비로운 디렉토리 안의 모든 엔티티를 공개하기 위해:\n\n```js\nimport os\ncontents = os.listdir('enchanted_grove')\nprint(contents)\n```\n\n## 3. 디렉토리 생성하기\n\n파일 시스템의 직물 속에 새로운 디렉토리를 창조하기 위해:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport os\n# 단일 디렉토리 생성\nos.mkdir('alchemy_lab')\n# 디렉토리 계층 생성\nos.makedirs('alchemy_lab/potions/elixirs')\n```\n\n# 4. 파일 및 디렉토리 삭제\n\n파일이나 디렉토리를 지우고, 그 본질을 추방하려면:\n\n```python\nimport os\n# 파일 삭제\nos.remove('unnecessary_scroll.txt')\n# 빈 디렉토리 삭제\nos.rmdir('abandoned_hut')\n# 디렉토리와 그 내용물 삭제\nimport shutil\nshutil.rmtree('cursed_cavern')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 셸 명령 실행하기\n\n파이썬에서 쉘의 고대적인 힘을 직접 호출하려면:\n\n```python\nimport subprocess\n# 'echo' 주문 호출\nresult = subprocess.run(['echo', 'Revealing the arcane'], capture_output=True, text=True)\nprint(result.stdout)\n```\n\n# 6. 환경 변수 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n에테리얼 환경 변수를 읽고 기록하려면:\n\n```python\nimport os\n# 'PATH' 변수 읽기\npath = os.environ.get('PATH')\n# 새 환경 변수 생성\nos.environ['MAGIC'] = 'Arcane'\n```\n\n# 7. 현재 작업 디렉토리 변경\n\n파일 시스템 내에서 다른 디렉토리로 이동하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport os\n# 'arcane_library' 디렉토리로 이동\nos.chdir('arcane_library')\n```\n\n# 8. 경로의 존재 및 유형\n\n경로의 존재 및 유형을 구분하는 방법 — 파일인지 디렉토리인지 확인하기:\n\n```js\nimport os\n# 경로가 존재하는지 확인\nexists = os.path.exists('mysterious_ruins')\n# 경로가 디렉토리인지 확인\nis_directory = os.path.isdir('mysterious_ruins')\n# 경로가 파일인지 확인\nis_file = os.path.isfile('ancient_manuscript.txt')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 9. 임시 파일 작업\n\n임시 파일과 디렉토리를 소환하려면, 일시적이며 덧없습니다:\n\n```js\nimport tempfile\n# 임시 파일 생성\ntemp_file = tempfile.NamedTemporaryFile(delete=False)\nprint(temp_file.name)\n# 임시 디렉토리 생성\ntemp_dir = tempfile.TemporaryDirectory()\nprint(temp_dir.name)\n```\n\n# 10. 시스템 정보 가져오기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n호스트 시스템에 대한 정보, 시스템 이름 및 해당 지원하는 마법을 알아보려면:\n\n```js\nimport os\nimport platform\n# 운영 체제 확인\nos_name = os.name  # 'posix', 'nt', 'java'\n# 자세한 시스템 정보 확인\nsystem_info = platform.system()  # 'Linux', 'Windows', 'Darwin'\n```\n\n# CLI 작업 — 표준 입력, 표준 출력, 표준 에러\n\n# 1. 사용자 입력 읽기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSTDIN에서 입력 받기:\n\n```js\nuser_input = input(\"지혜를 나누어주세요: \")\nprint(f\"당신이 공유한 내용: {user_input}\")\n```\n\n# 2. STDOUT로 출력하기\n\n콘솔에 메시지 출력하기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nprint(\"Behold, the message of the ancients!\");\n```\n\n# 3. 포맷팅된 출력\n\n우아하고 정확하게 변수를 메시지에 작살낼 때:\n\n```js\nname = \"Merlin\"\nage = 300\nprint(f\"{name}, of {age} years, speaks of forgotten lore.\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 표준 입력에서 행 읽기\n\n표준 입력에서 행마다 공백을 제거하세요:\n\n```js\nimport sys\nfor line in sys.stdin:\n    print(f\"Echo from the void: {line.strip()}\")\n```\n\n# 5. 표준 에러로 쓰기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSTDERR로 메시지를 보내려면:\n\n```js\nimport sys\nsys.stderr.write(\"조심하세요! 그 길에는 위험이 가득합니다.\\n\")\n```\n\n# 6. STDOUT 리다이렉션\n\nSTDOUT을 리다이렉션하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport sys\noriginal_stdout = sys.stdout  # 원래 STDOUT을 보존합니다\nwith open('mystic_log.txt', 'w') as f:\n    sys.stdout = f  # STDOUT을 파일로 리디렉션합니다\n    print(\"이 메시지는 mystic_log.txt 파일 안에 새겨졌습니다.\")\nsys.stdout = original_stdout  # STDOUT을 본래의 상태로 복원합니다\n```\n\n# 7. STDERR 리디렉션\n\nSTDERR 리디렉션:\n\n```js\nimport sys\nwith open('warnings.txt', 'w') as f:\n    sys.stderr = f  # STDERR를 리디렉션합니다\n    print(\"이 경고는 warnings.txt 파일 안에 봉인되었습니다.\", file=sys.stderr)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 비밀번호 요청하기\n\n비밀번호를 요청하려면:\n\n```python\nimport getpass\nsecret_spell = getpass.getpass(\"비밀 주문을 속삭여주세요: \")\n```\n\n# 9. 명령줄 인수\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n커맨드 라인 인수를 처리하고 작업하는 중:\n\n```python\nimport sys\n# 스크립트의 이름은 첫 번째 인수이며, 호출자가 전달한 것이 이어집니다\nscript, first_arg, second_arg = sys.argv\nprint(f\"신성한 토큰과 함께 호출됨: {first_arg} 및 {second_arg}\")\n```\n\n## 10. 복잡한 CLI 상호작용을 위한 Argparse 사용\n\n설명과 옵션/인수 추가하기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport argparse\nparser = argparse.ArgumentParser(description=\"Summon the power of the ancient scripts.\")\nparser.add_argument('spell', help=\"Specify the spell to cast\")\nparser.add_argument('--power', type=int, help=\"Indicate the power level of the spell\")\nargs = parser.parse_args()\nprint(f\"Invoking {args.spell} with a power level of {args.power}\")\n```\n\n# Working with Mathematical Operations and Permutations\n\n# 1. Basic Arithmetic Operations\n\nFor basic arithmetic operations:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nsum = 7 + 3  # 더하기\ndifference = 7 - 3  # 빼기\nproduct = 7 * 3  # 곱하기\nquotient = 7 / 3  # 나누기\nremainder = 7 % 3  # 나머지\npower = 7 ** 3  # 지수\n```\n\n# 2. 복소수 다루기\n\n복소수를 다루기 위해:\n\n```js\nz = complex(2, 3)  # 복소수 2 + 3j 생성\nreal_part = z.real  # 실수부 추출\nimaginary_part = z.imag  # 허수부 추출\nconjugate = z.conjugate()  # 켤레복소수 구하기\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. 수학 함수\n\n일반적인 수학 함수:\n\n```js\nimport math\nroot = math.sqrt(16)  # 제곱근\nlogarithm = math.log(100, 10)  # 밑이 10인 100의 로그값\nsine = math.sin(math.pi / 2)  # 90도의 사인 (라디안 단위)\n```\n\n# 4. 순열 생성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 주어진 집합에서 순열을 생성하는 간단한 방법입니다:\n\n```python\nfrom itertools import permutations\npaths = permutations([1, 2, 3])  # 리스트 [1, 2, 3]의 모든 순열을 생성합니다.\nfor path in paths:\n    print(path)\n```\n\n# 5. 조합 생성하기\n\n조합을 생성하는 간단한 방법입니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom itertools import combinations\ncombos = combinations([1, 2, 3, 4], 2)  # 모든 2개 요소 조합 생성\nfor combo in combos:\n    print(combo)\n```\n\n# 6. 랜덤 숫자 생성\n\n랜덤 숫자를 얻으려면:\n\n```js\nimport random\nnum = random.randint(1, 100)  # 1부터 100 사이의 랜덤 정수 생성\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 분수 작업하기\n\n분수를 다룰 때는:\n\n```python\nfrom fractions import Fraction\nf = Fraction(3, 4)  # 3/4 분수를 생성합니다\nprint(f + 1)  # 분수와 정수를 더합니다\n```\n\n# 8. 통계 함수\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n평균, 중앙값 및 표준 편차를 얻으려면:\n\n```js\nimport statistics\ndata = [1, 2, 3, 4, 5]\nmean = statistics.mean(data)  # 평균\nmedian = statistics.median(data)  # 중앙값\nstdev = statistics.stdev(data)  # 표준 편차\n```\n\n# 9. 삼각 함수\n\n삼각함수 작업하기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport math\nangle_rad = math.radians(60)  # 60도를 라디안으로 변환\ncosine = math.cos(angle_rad)  # 해당 각도의 코사인\n```\n\n# 10. 무한대 및 NaN 다루기\n\n무한대 및 NaN을 다루는 방법:\n\n```js\nimport math\ninfinity = math.inf  # 무한대 표현\nnot_a_number = math.nan  # 숫자가 아닌 값을 나타내는 NaN\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 데이터베이스 작업\n\n# 1. 연결 설정\n\n포스트그레스 데이터베이스에 연결을 생성하려면:\n\n```js\nimport psycopg2\nconnection = psycopg2.connect(\n    dbname='your_database',\n    user='your_username',\n    password='your_password',\n    host='your_host'\n)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 커서 만들기\n\n데이터베이스 커서를 생성하여 레코드를 이동하고 조작할 수 있습니다:\n\n```js\ncursor = connection.cursor();\n```\n\n# 3. 쿼리 실행\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터베이스에서 데이터 선택하기:\n\n```js\ncursor.execute(\"SELECT * FROM your_table\");\n```\n\n## 4. 쿼리 결과 가져오기\n\n커서를 사용하여 데이터 가져오기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nrecords = cursor.fetchall()\nfor record in records:\n    print(record)\n```\n\n# 5. 레코드 삽입\n\n데이터를 데이터베이스 테이블에 삽입하는 방법:\n\n```js\ncursor.execute(\"INSERT INTO your_table (column1, column2) VALUES (%s, %s)\", ('value1', 'value2'))\nconnection.commit()  # 트랜잭션을 완료합니다\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 레코드 업데이트\n\n레코드를 변경하려면:\n\n```js\ncursor.execute(\"UPDATE your_table SET column1 = %s WHERE column2 = %s\", (\"new_value\", \"condition_value\"));\nconnection.commit();\n```\n\n# 7. 레코드 삭제\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블에서 레코드를 삭제하려면:\n\n```js\ncursor.execute(\"DELETE FROM your_table WHERE condition_column = %s\", ('condition_value',))\nconnection.commit()\n```\n\n# 8. 테이블 생성\n\n새로운 테이블을 생성하려면, 구조를 정의하세요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ncursor.execute(\"\"\"\n    CREATE TABLE your_new_table (\n        id SERIAL PRIMARY KEY,\n        column1 VARCHAR(255),\n        column2 INTEGER\n    )\n\"\"\")\nconnection.commit()\n```\n\n# 9. 테이블 삭제하기\n\n테이블을 삭제하려면:\n\n```js\ncursor.execute(\"DROP TABLE if exists your_table\");\nconnection.commit();\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 트랜잭션 사용하기\n\n원자성을 위해 트랜잭션을 사용하는 방법입니다:\n\n```js\ntry:\n    cursor.execute(\"첫 번째 트랜잭션 쿼리\")\n    cursor.execute(\"두 번째 트랜잭션 쿼리\")\n    connection.commit()  # 모든 것이 잘되면 커밋\nexcept Exception as e:\n    connection.rollback()  # 문제 발생 시 롤백\n    print(f\"오류 발생: {e}\")\n```\n\n# 비동기 IO 작업하기 (비동기 프로그래밍)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 비동기 함수 정의하기\n\nasync 함수를 선언하려면 다음과 같이 작성할 수 있습니다:\n\n```js\nimport asyncio\nasync def fetch_data():\n    print(\"데이터 가져오는 중...\")\n    await asyncio.sleep(2)  # I/O 작업 시뮬레이션\n    print(\"데이터를 가져왔습니다.\")\n```\n\n# 2. 비동기 함수 실행하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n비동기 함수를 호출하고 기다리려면:\n\n```js\nasync def main():\n    await fetch_data()\nasyncio.run(main())\n```\n\n# 3. 여러 코루틴 기다리기\n\n여러 비동기 함수를 호출하고 모두 기다리려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\n비동기로 주요 함수():\n    작업1 = 데이터_가져오기()\n    작업2 = 데이터_가져오기()\n    await asyncio.gather(작업1, 작업2)\nasyncio.run(주요 함수())\n```\n\n## 4. 작업 생성하기\n\n작업을 보내려면:\n\n```python\n비동기로 주요 함수():\n    작업1 = asyncio.create_task(데이터_가져오기())\n    작업2 = asyncio.create_task(데이터_가져오기())\n    await 작업1\n    await 작업2\nasyncio.run(주요 함수())\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 비동기 반복\n\n비동기적으로 횡행하면서 다른 함수에 시간을 주는 방법:\n\n```js\nasync def fetch_item(item):\n    await asyncio.sleep(1)  # I/O 작업을 시뮬레이션합니다\n    print(f\"{item}을 가져왔습니다\")\nasync def main():\n    items = ['물약', '스크롤', '마법봉']\n    for item in items:\n        await fetch_item(item)\nasyncio.run(main())\n```\n\n# 6. 비동기적인 컨텍스트 매니저 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n비동기 함수 내에서 리소스가 적절하게 관리되도록 하려면:\n\n```js\nasync def async_context_manager():\n    print(\"컨텍스트 진입 중\")\n    await asyncio.sleep(1)\n    print(\"컨텍스트 종료 중\")\nasync def main():\n    async with async_context_manager():\n        print(\"컨텍스트 내부에 있음\")\nasyncio.run(main())\n```\n\n# 7. 비동기 코드에서 예외 처리\n\n비동기 함수에서 에러를 우아하게 처리하고 관리하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nasync def risky_spell():\n    await asyncio.sleep(1)\n    raise ValueError(\"주문이 실패했습니다!\")\nasync def main():\n    try:\n        await risky_spell()\n    except ValueError as e:\n        print(f\"에러가 발생했습니다: {e}\")\nasyncio.run(main())\n```\n\n# 8. 비동기 생성기\n\n개별 시간에 도착하는 각각의 비동기 생성기를 생성하려면:\n\n```python\nasync def fetch_items():\n    items = ['크리스탈', '부적', '단검']\n    for item in items:\n        await asyncio.sleep(1)\n        yield item\nasync def main():\n    async for item in fetch_items():\n        print(f\"{item}을(를) 찾았습니다\")\nasyncio.run(main())\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 9. 세마포어 사용하기\n\n동시 작업의 수를 제한하려면:\n\n```js\nasync def guarded_spell(semaphore, item):\n    async with semaphore:\n        print(f\"{item} 처리 중\")\n        await asyncio.sleep(1)\nasync def main():\n    semaphore = asyncio.Semaphore(2)  # 동시 작업 2개 허용\n    await asyncio.gather(*(guarded_spell(semaphore, i) for i in range(5)))\nasyncio.run(main())\n```\n\n# 10. 이벤트 루프\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n비동기 루프와 직접 상호 작용하여 실행 흐름을 사용자 정의할 수 있습니다:\n\n```js\nasync def perform_spell():\n    print(\"주문 시전 중...\")\n    await asyncio.sleep(1)\n    print(\"주문 완료.\")\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(perform_spell())\nfinally:\n    loop.close()\n```\n\n# 네트워크, 소켓 및 네트워크 인터페이스 작업\n\n# 1. 소켓 생성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n네트워크 통신용 소켓을 만들려면:\n\n```js\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n```\n\n# 2. 원격 서버에 연결하기\n\n소켓을 통해 원격 서버와 연결을 설정합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ns.connect(('example.com', 80))  # Connect to example.com on port 80\n```\n\n# 3. Sending Data\n\nTo dispatch data through the network to a connected entity:\n\n```js\ns.sendall(b'Hello, server')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 데이터 수신\n\n네트워크로부터 데이터를 수신하려면:\n\n```js\ndata = s.recv(1024)  # 최대 1024바이트까지 수신\nprint('수신 완료', repr(data))\n```\n\n# 5. 소켓 닫기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기분 좋은 마음으로 다음과 같이 번역합니다.\n\n네트워크 링크를 끊고 소켓을 차분히 종료하려면:\n\n```js\ns.close();\n```\n\n# 6. 수신 소켓 생성\n\n들어오는 연결을 수신하기 위해 소켓을 열려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nserversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserversocket.bind(('localhost', 8080))  # localhost와 포트 8080에 바인딩합니다.\nserversocket.listen()  # 들어오는 연결을 대기합니다.\n```\n\n# 7. 연결 수락하기\n\n네트워크 링크를 수락하고 설정하기 위해서:\n\n```js\nclientsocket, address = serversocket.accept()\nprint(f\"Connection from {address} has been established.\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 블로킹되지 않는 소켓 작업\n\n소켓의 모드를 블로킹되지 않도록 설정하려면:\n\n```js\ns.setblocking(False);\n```\n\n# 9. UDP 소켓 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nUDP 소켓을 생성하여 더 빠르지만 덜 신뢰성있는 통신을 위한 프로토콜이 필요합니다:\n\n```js\nudp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp_socket.bind(('localhost', 8081))  # UDP 소켓을 로컬호스트의 8081 포트에 바인딩합니다\n```\n\n# 10. 네트워크 인터페이스 나열하기\n\n기계의 네트워크 인터페이스의 이름과 주소를 확인하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport socket\nimport netifaces\nfor interface in netifaces.interfaces():\n    addr = netifaces.ifaddresses(interface).get(netifaces.AF_INET)\n    if addr:\n        print(f\"Interface: {interface}, Address: {addr[0]['addr']}\")\n```\n\n#\n\n# 판다 라이브러리 (데이터프레임) 사용하기\n\n# 1. 데이터프레임 생성하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자신만의 열과 데이터로 DataFrame을 만들려면:\n\n```js\nimport pandas as pd\ndata = {\n    'Element': ['Earth', 'Water', 'Fire', 'Air'],\n    'Symbol': ['🜃', '🜄', '🜂', '🜁']\n}\ndf = pd.DataFrame(data)\n```\n\n# 2. CSV 파일에서 데이터 읽기\n\nCSV 파일에서 데이터를 읽어와 DataFrame으로 변환하기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndf = pd.read_csv(\"elements.csv\");\n```\n\n# 3. 처음 몇 개 행 확인하기\n\n데이터프레임에서 처음 행들을 얻으려면:\n\n```js\nprint(df.head());\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 열 선택하기\n\n데이터프레임에서 특정 열을 선택하려면:\n\n```js\nsymbols = df[\"Symbol\"];\n```\n\n# 5. 행 필터링하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nDataFrame을 살펴보고, 기준을 충족하는 행을 선택하려면:\n\n```js\nfire_elements = df[df[\"Element\"] == \"Fire\"];\n```\n\n# 6. 새 열 만들기\n\n데이터 내에서 파생된 DataFrame에 새 열을 만들려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndf[\"Length\"] = df[\"Element\"].apply(len);\n```\n\n# 7. 데이터 그룹화 및 집계\n\n데이터를 그룹으로 모으고 집계를 통해 새로운 데이터를 추출하려면:\n\n```js\nelement_groups = df.groupby(\"Element\").agg({ Length: \"mean\" });\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 데이터프레임 병합\n\n두 데이터프레임을 공통 키를 기준으로 결합하려면:\n\n```js\ndf2 = pd.DataFrame({ Element: [\"Earth\", \"Fire\"], Quality: [\"Solid\", \"Plasma\"] });\nmerged_df = pd.merge(df, df2, (on = \"Element\"));\n```\n\n# 9. 누락된 데이터 처리\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nDataFrame을 정리하여 데이터가 없는 곳에 값이 존재하는 빈 칸을 채우는 방법입니다:\n\n```js\ndf.fillna((value = \"Unknown\"), (inplace = True));\n```\n\n# 10. 데이터 변환 및 형태 재구성\n\nDataFrame의 형태를 변환하여 pivot 작업을 통해 숨겨진 패턴과 구조를 드러내는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\npivoted_df = df.pivot(index='Element', columns='Symbol', values='Length')\n```\n\n## 넘파이 라이브러리 (배열) 작업\n\n## 1. 넘파이 배열 생성하기\n\n배열을 생성하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport numpy as np\narray = np.array([1, 2, 3, 4, 5])\n```\n\n# 2. 영이나 일의 배열\n\n영으로 채워진 배열을 생성하려면:\n\n```python\nzeros = np.zeros((3, 3))  # 3x3 크기의 영으로 채워진 배열\nones = np.ones((2, 4))  # 2x4 크기의 일로 채워진 배열\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. 숫자 범위 생성하기\n\n일련의 숫자를 만들려면:\n\n```js\nrange_array = np.arange(10, 50, 5)  # 10부터 50까지, 간격은 5\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래와 같이 두 경계 사이에 균일하게 분포된 값들의 시리즈를 만들 수 있습니다:\n\n```js\nlinear_spaced = np.linspace(0, 1, 5)  # 0부터 1까지 5개의 값\n```\n\n# 5. 배열 형태 재구성\n\n배열의 모양을 변경하여 차원을 수정할 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nreshaped = np.arange(9).reshape(3, 3)  # 1차원 배열을 3x3 2차원 배열로 재구성합니다\n```\n\n# 6. 기본 배열 작업\n\n배열에 원소별 조작을 수행하려면:\n\n```js\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nsum = a + b  # 원소별 덧셈\ndifference = b - a  # 원소별 뺄셈\nproduct = a * b  # 원소별 곱셈\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 7. 행렬 곱셈\n\n기본 점곱 연산:\n\n```js\nresult = np.dot(a.reshape(1, 3), b.reshape(3, 1))  # a와 b의 점곱\n```\n\n## 8. 배열 요소에 액세스하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n유용한 구문을 사용하여 배열 요소에 액세스하기:\n\n```js\nelement = a[2]  # 배열 'a'의 세 번째 요소를 가져옵니다\nrow = reshaped[1, :]  # 'reshaped'의 두 번째 행을 가져옵니다\n```\n\n# 9. 부울 인덱싱\n\n배열 요소를 조건문의 체로 필터링합니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n필터링된 = a[a > 2]  # 'a'의 원소 중 2보다 큰 것들\n\n```\n\n# 10. 집계 및 통계\n\nnp 배열에 대한 통계 연산:\n\n```js\n평균 = np.mean(a);\n최대값 = np.max(a);\n합 = np.sum(a);\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Matplotlib 라이브러리 사용하기 (데이터 시각화)\n\n# 1. 기본 플롯 만들기\n\n시각화 플롯을 만들려면:\n\n```js\nimport matplotlib.pyplot as plt\nx = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\nplt.plot(x, y)\nplt.show()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 제목과 라벨 추가하기\n\n축에 이름을 지어 그래프에 더 나은 맥락을 부여하고 제목을 달기 위해서:\n\n```js\nplt.plot(x, y);\nplt.title(\"시간 경과에 따른 성장\");\nplt.xlabel(\"시간\");\nplt.ylabel(\"성장\");\nplt.show();\n```\n\n# 3. 산점도 그래프 생성하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n산점도를 만들어 봅시다:\n\n```js\nplt.scatter(x, y);\nplt.show();\n```\n\n### 4. 선 스타일 및 마커 사용자 정의\n\n플롯에 기호를 추가하여 유용성을 높일 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nplt.plot(x, y, (linestyle = \"--\"), (marker = \"o\"), (color = \"b\"));\nplt.show();\n```\n\n# 5. Creating Multiple Plots on the Same Axes\n\nCreating Multiple Plots on the Same Axes:\n\n```js\nz = [2, 3, 4, 5, 6];\nplt.plot(x, y);\nplt.plot(x, z);\nplt.show();\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 서브플롯 만들기\n\n서브플롯을 만들려면:\n\n```js\nfig, ax = plt.subplots(2, 1)  # 2개의 행, 1개의 열\nax[0].plot(x, y)\nax[1].plot(x, z)\nplt.show()\n```\n\n# 7. 히스토그램 만들기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n히스토그램을 생성하려면:\n\n```js\ndata = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4];\nplt.hist(data, (bins = 4));\nplt.show();\n```\n\n# 8. 범례 추가\n\n플롯에 범례를 만드는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nplt.plot(x, y, (label = \"성장\"));\nplt.plot(x, z, (label = \"감소\"));\nplt.legend();\nplt.show();\n```\n\n# 9. 눈금 맞춤\n\n축에 직접 마킹을 추가하여 값의 스케일을 정의할 수 있습니다:\n\n```js\nplt.plot(x, y);\nplt.xticks([1, 2, 3, 4, 5], [\"일\", \"이\", \"삼\", \"사\", \"오\"]);\nplt.yticks([0, 5, 10, 15, 20, 25], [\"0\", \"5\", \"10\", \"15\", \"20\", \"25+\"]);\nplt.show();\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 그림 저장하기\n\n그림을 .png 파일로 저장하려면:\n\n```js\nplt.plot(x, y);\nplt.savefig(\"growth_over_time.png\");\n```\n\n# Scikit-Learn 라이브러리 활용하기 (머신러닝)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 데이터셋 불러오기\n\nML 실험을 위해 데이터셋을 사용하려면\n\n```js\nfrom sklearn import datasets\niris = datasets.load_iris()\nX, y = iris.data, iris.target\n```\n\n# 2. 데이터를 훈련 세트와 테스트 세트로 나누기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터를 나눠서 학습 및 평가할 때 사용하세요:\n\n```js\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n```\n\n# 3. 모델 학습\n\nRandomForestClassifier를 사용하여 ML 모델을 학습합니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n```\n\n# 4. 예측하기\n\n모델 예측 결과를 확인하려면:\n\n```python\npredictions = model.predict(X_test)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 모델 성능 평가\n\n모델을 평가하려면 예측 정확성을 측정해야 합니다:\n\n```js\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, predictions)\nprint(f\"모델 정확도: {accuracy}\")\n```\n\n# 6. 교차 검증 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n교차 검증을 사용하려면:\n\n```js\nfrom sklearn.model_selection import cross_val_score\nscores = cross_val_score(model, X, y, cv=5)\nprint(f\"교차 검증 점수: {scores}\")\n```\n\n# 7. 피처 스케일링\n\n당신의 피처들에 적절한 스케일을 만들어 모델이 더 효율적으로 학습할 수 있도록하세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n```\n\n# 8. 그리드 서치를 사용한 매개변수 튜닝\n\n모델의 매개변수를 미세 조정하여 최적의 조합을 찾아냅니다:\n\n```python\nfrom sklearn.model_selection import GridSearchCV\nparam_grid = {'n_estimators': [10, 50, 100], 'max_depth': [None, 10, 20]}\ngrid_search = GridSearchCV(model, param_grid, cv=5)\ngrid_search.fit(X_train, y_train)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 9. 파이프라인 생성\n\n데이터 처리 및 모델링 단계를 간편하게 만들기 위해 원활한 흐름을 만들어주세요:\n\n```js\nfrom sklearn.pipeline import Pipeline\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classifier', RandomForestClassifier())\n])\npipeline.fit(X_train, y_train)\n```\n\n# 10. 모델 저장 및 불러오기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모델을 보존하기 위해서:\n\n```js\nimport joblib\n# 모델 저장하기\njoblib.dump(model, 'model.joblib')\n# 모델 불러오기\nloaded_model = joblib.load('model.joblib')\n```\n\n## Plotly 라이브러리 활용 (상호작용적 데이터 시각화)\n\n## 1. 기본 선 그래프 만들기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n라인 차트를 만드는 방법:\n\n```js\nimport plotly.graph_objs as go\nimport plotly.io as pio\nx = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\nfig = go.Figure(data=go.Scatter(x=x, y=y, mode='lines'))\npio.show(fig)\n```\n\n# 2. 산점도 그래프 만들기\n\n산점도 그래프를 만드는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfig = go.Figure((data = go.Scatter((x = x), (y = y), (mode = \"markers\"))));\npio.show(fig);\n```\n\n# 3. Creating a Bar Chart\n\nTo Create a Bar Chart:\n\n```js\ncategories = [\"A\", \"B\", \"C\", \"D\", \"E\"];\nvalues = [10, 20, 15, 30, 25];\nfig = go.Figure((data = go.Bar((x = categories), (y = values))));\npio.show(fig);\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 원형 차트 만들기\n\n원형 차트를 만들려면:\n\n```js\nlabels = [\"지구\", \"물\", \"불\", \"바람\"];\nsizes = [25, 35, 20, 20];\nfig = go.Figure((data = go.Pie((labels = labels), (values = sizes))));\npio.show(fig);\n```\n\n# 5. 히스토그램 만들기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n히스토그램을 만들려면:\n\n```js\ndata = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4];\nfig = go.Figure((data = go.Histogram((x = data))));\npio.show(fig);\n```\n\n# 6. 상자 그림 만들기\n\n상자 그림을 만들려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n데이터 = [1, 2, 2, 3, 4, 4, 4, 5, 5, 6];\n피그 = go.Figure((data = go.Box((y = 데이터))));\npio.show(피그);\n```\n\n# 7. 히트맵 생성하기\n\n히트맵을 생성하려면:\n\n```js\nimport numpy as np\nz = np.random.rand(10, 10)  # 임의의 데이터 생성\n피그 = go.Figure(data=go.Heatmap(z=z))\npio.show(피그)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 3D 표면 플롯 만들기\n\n3D 표면 플롯을 만들려면:\n\n```js\nz = np.random.rand(20, 20)  # 랜덤 데이터 생성\nfig = go.Figure(data=go.Surface(z=z))\npio.show(fig)\n```\n\n# 9. 서브플롯 만들기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n서브플롯을 만들려면:\n\n```js\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=2)\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines'), row=1, col=1)\nfig.add_trace(go.Bar(x=categories, y=values), row=1, col=2)\npio.show(fig)\n```\n\n# 10. 대화형 시계열 생성\n\n시계열 작업을 위해서:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport pandas as pd\ndates = pd.date_range('20230101', periods=5)\nvalues = [10, 11, 12, 13, 14]\nfig = go.Figure(data=go.Scatter(x=dates, y=values, mode='lines+markers'))\npio.show(fig)\n```\n\n## 날짜와 시간 다루기\n\n## 1. 현재 날짜와 시간 얻기\n\n현재 날짜와 시간을 얻으려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom datetime import datetime\nnow = datetime.now()\nprint(f\"Current date and time: {now}\")\n```\n\n# 2. Creating Specific Date and Time\n\nTo conjure a moment from the past or future, crafting it with precision:\n\n```python\nspecific_time = datetime(2023, 1, 1, 12, 30)\nprint(f\"Specific date and time: {specific_time}\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. 날짜와 시간 형식 지정하기\n\n날짜와 시간 형식 지정하기:\n\n```js\nformatted = now.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(f\"형식화된 날짜와 시간: {formatted}\")\n```\n\n# 4. 문자열에서 날짜와 시간 구문 분석하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문자열에서 날짜와 시간을 파싱하려면:\n\n```js\ndate_string = \"2023-01-01 15:00:00\"\nparsed_date = datetime.strptime(date_string, \"%Y-%m-%d %H:%M:%S\")\nprint(f\"Parsed date and time: {parsed_date}\")\n```\n\n# 5. 시간 간격 다루기\n\n시간을 통해 앞뒤로 시간을 건너뛰며 순간 간의 거리를 이동하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom datetime import timedelta\ndelta = timedelta(days=7)\nfuture_date = now + delta\nprint(f\"7일 후의 날짜: {future_date}\")\n```\n\n## 6. 날짜와 시간 비교\n\n날짜 및 시간 비교:\n\n```python\nif specific_time > now:\n    print(\"특정 시간은 미래에 있습니다.\")\nelse:\n    print(\"특정 시간은 지났습니다.\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 날짜/시간에서 구성 요소 추출하기\n\n년, 월, 일 및 더 많은 것들을 추출하려면:\n\n```js\nyear = now.year\nmonth = now.month\nday = now.day\nhour = now.hour\nminute = now.minute\nsecond = now.second\nprint(f\"Year: {year}, Month: {month}, Day: {day}, Hour: {hour}, Minute: {minute}, Second: {second}\")\n```\n\n# 8. 시간대 처리하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현지 시간을 준수하는 시간대에서 작업하기:\n\n```python\nfrom datetime import timezone, timedelta\nutc_time = datetime.now(timezone.utc)\nprint(f\"현재 UTC 시간: {utc_time}\")\n# 특정 시간대에 맞게 조정하기 (예: EST)\nest_time = utc_time - timedelta(hours=5)\nprint(f\"현재 EST 시간: {est_time}\")\n```\n\n## 9. 요일 가져오기\n\n한 주의 요일을 식별하기:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nweekday = now.strftime(\"%A\")\nprint(f\"오늘은: {weekday}\")\n```\n\n# 10. 유닉스 타임스탬프 작업\n\n고대 시대와 대화하며, 유닉스 탄생의 숫자를 번역합니다:\n\n```python\ntimestamp = datetime.timestamp(now)\nprint(f\"현재 타임스탬프: {timestamp}\")\n# 타임스탬프를 날짜로 다시 변환\ndate_from_timestamp = datetime.fromtimestamp(timestamp)\nprint(f\"타임스탬프에서 날짜로: {date_from_timestamp}\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 더 고급 리스트 컴프리헨션과 람다 함수 사용하기\n\n# 1. 중첩된 리스트 컴프리헨션\n\n중첩된 리스트 컴프리헨션을 사용하려면:\n\n```js\nmatrix = [[j for j in range(5)] for i in range(3)]\nprint(matrix)  # 3x5 행렬을 생성합니다\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 조건부 리스트 컴프리헨션\n\n원하는 조건을 충족하는 요소를 필터링하려면:\n\n```js\nfiltered = [x for x in range(10) if x % 2 == 0]\nprint(filtered)  # 0부터 9까지의 짝수\n```\n\n# 3. 다중 이터러블을 사용한 리스트 컴프리헨션\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여러 원본에서 요소를 병합하고 변환하여 하나의 춤으로 표현하기:\n\n```js\npairs = [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]\nprint(pairs)  # 서로 다른 요소의 쌍을 출력\n```\n\n# 4. Lambda 함수 사용\n\n익명 함수를 소환하여 일회성이자 간결하게 마술의 행위를 하나 생성합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nsquare = lambda x: x**2\nprint(square(5))  # Returns 25\n```\n\n# 5. Lambda Functions in List Comprehensions\n\nTo employ lambda functions within your list comprehensions:\n\n```js\nsquared = [(lambda x: x**2)(x) for x in range(5)]\nprint(squared)  # Squares of numbers from 0 to 4\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 리스트를 평평하게 만드는 리스트 컴프리헨션\n\n중첩된 리스트를 평탄화하면 해당 요소들이 한 차원으로 펼쳐집니다:\n\n```js\nnested = [[1, 2, 3], [4, 5], [6, 7]]\nflattened = [x for sublist in nested for x in sublist]\nprint(flattened)\n```\n\n# 7. 요소에 함수 적용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n각 요소에 변환 함수를 적용하려면:\n\n```js\nimport math\ntransformed = [math.sqrt(x) for x in range(1, 6)]\nprint(transformed)  # 1부터 5까지 숫자의 제곱근\n```\n\n## 8. Map 및 Filter와 함께 람다 사용\n\n리스트를 매핑하고 필터링하는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmapped = list(map(lambda x: x**2, range(5)))\nfiltered = list(filter(lambda x: x > 5, mapped))\nprint(mapped)    # 0부터 4까지 숫자의 제곱\nprint(filtered)  # 5보다 큰 요소들\n```\n\n# 9. 조건 표현식을 사용한 리스트 컴프리헨션\n\n조건 표현식을 사용한 리스트 컴프리헨션:\n\n```js\nconditional = [x if x > 2 else x**2 for x in range(5)]\nprint(conditional)  # 2보다 작거나 같은 숫자의 제곱, 그 외에는 동일하게\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 람다를 사용한 복잡한 변환\n\n복잡한 변환을 수행하기 위해서는 람다 함수를 사용하세요:\n\n```js\ncomplex_transformation = list(map(lambda x: x**2 if x % 2 == 0 else x + 5, range(5)))\nprint(complex_transformation)  # 짝수-홀수 조건에 따라 다른 변환을 적용합니다\n```\n\n# 객체 지향 프로그래밍으로 작업하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 클래스 정의하기\n\n클래스 만들기:\n\n```js\nclass Wizard:\n    def __init__(self, name, power):\n        self.name = name\n        self.power = power\n    def cast_spell(self):\n        print(f\"{self.name}이(가) 힘 {self.power}으로 주문을 사용합니다!\")\n```\n\n# 2. 인스턴스 생성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클래스의 인스턴스를 생성하려면:\n\n```js\nmerlin = Wizard(\"Merlin\", 100);\n```\n\n# 3. 메서드 호출\n\n클래스 인스턴스의 메서드를 호출하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmerlin.cast_spell();\n```\n\n# 4. 상속\n\n서브클래싱:\n\n```js\nclass ArchWizard(Wizard):\n    def __init__(self, name, power, realm):\n        super().__init__(name, power)\n        self.realm = realm\n    def summon_familiar(self):\n        print(f\"{self.name}가 {self.realm} 영역에서 친구를 소환합니다.\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 메서드 오버라이딩\n\n기본 클래스를 오버라이드하려면:\n\n```js\nclass Sorcerer(Wizard):\n    def cast_spell(self):\n        print(f\"{self.name}이(가) 강력한 암흑 주문을 사용합니다!\")\n```\n\n# 6. 다형성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다양한 형태와 상호작용하기 위해 공통 인터페이스를 통해:\n\n```js\ndef unleash_magic(wizard):\n    wizard.cast_spell()\nunleash_magic(merlin)\nunleash_magic(Sorcerer(\"Voldemort\", 90))\n```\n\n# 7. 캡슐화\n\n정보 은닉을 사용하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nclass Alchemist:\n    def __init__(self, secret_ingredient):\n        self.__secret = secret_ingredient\n    def reveal_secret(self):\n        print(f\"The secret ingredient is {self.__secret}\")\n```\n\n# 8. Composition\n\nTo assemble Objects from simpler ones:\n\n```python\nclass Spellbook:\n    def __init__(self, spells):\n        self.spells = spells\nclass Mage:\n    def __init__(self, name, spellbook):\n        self.name = name\n        self.spellbook = spellbook\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 9. 클래스 메소드와 정적 메소드\n\n클래스 메소드와 정적 메소드를 사용하여 클래스에 특정 작업을 묶거나 인스턴스에 제한 없이 사용하여 더 넓은 목적에 부합하도록 합니다:\n\n```js\nclass Enchanter:\n    @staticmethod\n    def enchant(item):\n        print(f\"{item}이(가) 마법으로 걸렸습니다!\")\n    @classmethod\n    def summon(cls):\n        print(\"새로운 마법사가 소환되었습니다.\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n엔티티의 속성에 접근을 우아하게 관리하여 사용 및 보호를 안내하기 위해:\n\n```js\nclass Elementalist:\n    def __init__(self, element):\n        self._element = element\n\n    @property\n    def element(self):\n        return self._element\n\n    @element.setter\n    def element(self, value):\n        if value in [\"Fire\", \"Water\", \"Earth\", \"Air\"]:\n            self._element = value\n        else:\n            print(\"잘못된 속성입니다!\")\n```\n\n# 데코레이터로 작업하기\n\n# 1. 기본 데코레이터\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n간단한 데코레이터를 만들려면:\n\n```js\ndef my_decorator(func):\n    def wrapper():\n        print(\"함수가 호출되기 전에 무언가가 발생합니다.\")\n        func()\n        print(\"함수가 호출된 후에 무언가가 발생합니다.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"안녕!\")\n\nsay_hello()\n```\n\n# 2. 인수를 전달하는 데코레이터\n\n데코레이터 내에서 함수에 인수를 전달하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndef my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"함수 호출 전\")\n        result = func(*args, **kwargs)\n        print(\"함수 호출 후\")\n        return result\n    return wrapper\n\n@my_decorator\ndef greet(name):\n    print(f\"{name}님 안녕하세요\")\n\ngreet(\"Alice\")\n```\n\n# 3. functools.wraps 사용\n\n원본 함수의 메타데이터를 보존하려면 데코레이팅할 때 다음을 사용하세요:\n\n```js\nfrom functools import wraps\n\ndef my_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        \"\"\"래핑 함수\"\"\"\n        return func(*args, **kwargs)\n    return wrapper\n\n@my_decorator\ndef greet(name):\n    \"\"\"누군가에게 인사하기\"\"\"\n    print(f\"{name}님 안녕하세요\")\n\nprint(greet.__name__)  # 출력: 'greet'\nprint(greet.__doc__)   # 출력: '누군가에게 인사하기'\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 클래스 데코레이터\n\n클래스를 사용하여 데코레이터를 만드는 방법은 다음과 같습니다:\n\n```python\nclass MyDecorator:\n    def __init__(self, func):\n        self.func = func\n    def __call__(self, *args, **kwargs):\n        print(\"함수 호출 전\")\n        self.func(*args, **kwargs)\n        print(\"함수 호출 후\")\n\n@MyDecorator\ndef greet(name):\n    print(f\"안녕 {name}\")\n\ngreet(\"Alice\")\n```\n\n# 5. 인수를 받는 데코레이터\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자신의 인수를 받아들이는 데코레이터를 작성하려면:\n\n```js\ndef repeat(times):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for _ in range(times):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef say_hello():\n    print(\"Hello\")\n\nsay_hello()\n```\n\n# 6. 메소드 데코레이터\n\n클래스 내부의 메소드에 데코레이터를 적용하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\ndef method_decorator(func):\n    @wraps(func)\n    def wrapper(self, *args, **kwargs):\n        print(\"메소드 데코레이터\")\n        return func(self, *args, **kwargs)\n    return wrapper\n\nclass MyClass:\n    @method_decorator\n    def greet(self, name):\n        print(f\"안녕 {name}\")\n\nobj = MyClass()\nobj.greet(\"Alice\")\n```\n\n# 7. 데코레이터 중첩\n\n하나의 함수에 여러 데코레이터를 적용하려면:\n\n```python\n@my_decorator\n@repeat(2)\ndef greet(name):\n    print(f\"안녕 {name}\")\n\ngreet(\"Alice\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 선택적 인수를 가진 데코레이터\n\n인수를 사용하여 작동하는 데코레이터를 만들어 보겠습니다:\n\n```js\ndef smart_decorator(arg=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if arg:\n                print(f\"Argument: {arg}\")\n            return func(*args, **kwargs)\n        return wrapper\n    if callable(arg):\n        return decorator(arg)\n    return decorator\n\n@smart_decorator\ndef no_args():\n    print(\"인수 없음\")\n\n@smart_decorator(\"인수 포함\")\ndef with_args():\n    print(\"인수 포함\")\n\nno_args()\nwith_args()\n```\n\n# 9. 클래스 메서드 데코레이터\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클래스 메소드를 꾸미려면:\n\n```js\nclass MyClass:\n    @classmethod\n    @my_decorator\n    def class_method(cls):\n        print(\"Class method called\")\n\nMyClass.class_method()\n```\n\n# 10. 정적 메소드를 위한 데코레이터\n\n정적 메소드를 꾸미려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nclass MyClass:\n    @staticmethod\n    @my_decorator\n    def static_method():\n        print(\"Static method called\")\n\nMyClass.static_method()\n```\n\n# GraphQL 작업\n\n# 1. GraphQL 클라이언트 설정\n\nGraphQL 작업을 위해서는:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom gql import gql, Client\nfrom gql.transport.requests import RequestsHTTPTransport\ntransport = RequestsHTTPTransport(url='https://your-graphql-endpoint.com/graphql')\nclient = Client(transport=transport, fetch_schema_from_transport=True)\n```\n\n## 2. Executing a Simple Query\n\nExecuting a Query:\n\n```python\nquery = gql('''\n{\n  allWizards {\n    id\n    name\n    power\n  }\n}\n''')\n\nresult = client.execute(query)\nprint(result)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. 변수를 사용하여 쿼리 실행하기\n\n변수를 사용한 쿼리:\n\n```js\nquery = gql('''\nquery GetWizards($element: String!) {\n  wizards(element: $element) {\n    id\n    name\n  }\n}\n''')\nparams = {\"element\": \"Fire\"}\nresult = client.execute(query, variable_values=params)\nprint(result)\n```\n\n# 4. 뮤테이션\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n변이를 생성하고 실행하려면:\n\n```js\nmutation = gql('''\nmutation CreateWizard($name: String!, $element: String!) {\n  createWizard(name: $name, element: $element) {\n    wizard {\n      id\n      name\n    }\n  }\n}\n''')\nparams = {\"name\": \"Gandalf\", \"element\": \"Light\"}\nresult = client.execute(mutation, variable_values=params)\nprint(result)\n```\n\n# 5. 에러 처리\n\n에러 처리:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom gql import gql, Client\nfrom gql.transport.exceptions import TransportQueryError\n\ntry:\n    result = client.execute(query)\nexcept TransportQueryError as e:\n    print(f\"GraphQL Query Error: {e}\")\n```\n\n# 6. Subscriptions\n\nWorking with Subscriptions:\n\n```python\nsubscription = gql('''\nsubscription {\n  wizardUpdated {\n    id\n    name\n    power\n  }\n}\n''')\n\nfor result in client.subscribe(subscription):\n    print(result)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 단편\n\n단편 사용 방법:\n\n```js\nquery = gql('''\nfragment WizardDetails on Wizard {\n  name\n  power\n}\nquery {\n  allWizards {\n    ...WizardDetails\n  }\n}\n''')\nresult = client.execute(query)\nprint(result)\n```\n\n# 8. 인라인 단편\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 표를 마크다운 형식으로 변경해주세요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nquery = gql('''\nquery 위자드얻기($withPower: Boolean!) {\n  allWizards {\n    name\n    power @include(if: $withPower)\n  }\n}\n''')\nparams = {\"withPower\": True}\nresult = client.execute(query, variable_values=params)\nprint(result)\n```\n\n# 10. 요청 일괄 처리\n\n여러 작업을 하나의 요청으로 결합하여 네트워크 오버헤드를 줄이는 방법:\n\n```js\nfrom gql import gql, Client\nfrom gql.transport.requests import RequestsHTTPTransport\n\ntransport = RequestsHTTPTransport(url='https://your-graphql-endpoint.com/graphql', use_json=True)\nclient = Client(transport=transport, fetch_schema_from_transport=True)\n\nquery1 = gql('query { wizard(id: \"1\") { name } }')\nquery2 = gql('query { allSpells { name } }')\n\nresults = client.execute([query1, query2])\nprint(results)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 정규 표현식 사용하기\n\n# 1. 기본 패턴 매칭\n\n문자열 내에서 패턴과 일치하는 항목을 찾으려면:\n\n```js\nimport re\ntext = \"Search this string for patterns.\"\nmatch = re.search(r\"patterns\", text)\nif match:\n    print(\"패턴을 찾았습니다!\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 정규 표현식 컴파일하기\n\n정규 표현식을 반복적으로 사용하려면 다음과 같이 컴파일하세요:\n\n```js\npattern = re.compile(r\"patterns\")\nmatch = pattern.search(text)\n```\n\n# 3. 시작 또는 끝에서 매칭하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문자열이 특정 패턴으로 시작하거나 끝나는지 확인하려면:\n\n```js\nif re.match(r\"^Search\", text):\n    print(\"Starts with 'Search'\")\nif re.search(r\"patterns.$\", text):\n    print(\"Ends with 'patterns.'\")\n```\n\n# 4. 모든 일치 항목 찾기\n\n문자열에서 특정 패턴의 모든 발생을 찾으려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nall_matches = re.findall(r\"t\\w+\", text)  # 't'로 시작하는 단어를 찾습니다.\nprint(all_matches)\n```\n\n# 5. 검색 및 대체 (치환)\n\n문자열 내에서 패턴의 발생을 대체하는 방법:\n\n```js\nreplaced_text = re.sub(r\"string\", \"sentence\", text)\nprint(replaced_text)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 문자열 분할하기\n\n패턴의 발생에 따라 문자열을 분할하려면:\n\n```js\nwords = re.split(r\"\\s+\", text)  # 하나 이상의 공백으로 분할\nprint(words)\n```\n\n# 7. 특수 문자 이스케이프하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n특수 문자를 그대로 비교하려면 이스케이프 처리를 해야 합니다:\n\n```js\nescaped = re.search(r\"\\bfor\\b\", text)  # \\b는 단어 경계를 의미합니다\n```\n\n### 8. 그룹 지정 및 캡처\n\n패턴의 부분을 그룹으로 묶어서 값을 추출하기 위해:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmatch = re.search(r\"(\\w+) (\\w+)\", text)\nif match:\n    print(match.group())  # 전체 매치\n    print(match.group(1)) # 첫 번째 그룹\n```\n\n# 9. 캡처하지 않는 그룹\n\n캡처하지 않고 그룹을 정의하는 방법:\n\n```js\nmatch = re.search(r\"(?:\\w+) (\\w+)\", text)\nif match:\n    print(match.group(1))  # 첫 번째 (그리고 유일한) 그룹\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 룩어헤드 및 룩비하인드 어설션\n\n결과에 포함되지 않고 패턴을 일치시키려면 주변에 오는 내용을 기반으로 합니다:\n\n```js\nlookahead = re.search(r\"\\b\\w+(?= string)\", text)  # ' string' 앞에 있는 단어\nlookbehind = re.search(r\"(?<=Search )\\w+\", text)  # 'Search ' 뒤에 있는 단어\nif lookahead:\n    print(lookahead.group())\nif lookbehind:\n    print(lookbehind.group())\n```\n\n# 11. 패턴 일치 동작 수정을 위한 플래그\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래와 같이 플래그를 사용하여 re.IGNORECASE와 같이 패턴이 일치하는 방식을 변경할 수 있어요:\n\n```js\n대소문자_무시 = re.findall(r\"search\", text, re.IGNORECASE)\nprint(대소문자_무시)\n```\n\n# 12. 명명된 그룹 사용하기\n\n그룹에 이름을 할당하고 이름으로 참조할 수 있어요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nmatch = re.search(r\"(?P<first>\\w+) (?P<second>\\w+)\", text)\nif match:\nprint(match.group('first'))\nprint(match.group('second'))\n\n# 13. 여러 줄에 걸쳐 매칭하기\n\nre.MULTILINE 플래그를 사용하여 여러 줄에 걸쳐 패턴을 매칭하려면:\n\n```js\nmulti_line_text = \"Start\\nmiddle end\"\nmatches = re.findall(r\"^m\\w+\", multi_line_text, re.MULTILINE)\nprint(matches)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 14. 게으른 양자\n\n가능한 한 적은 문자와 일치시키려면 게으른 양자 (\\*?, +?, ??)를 사용하세요:\n\n```js\nhtml = \"<body><h1>Title</h1></body>\"\nmatch = re.search(r\"<.*?>\", html)\nif match:\n    print(match.group())  # '<body>'와 일치합니다\n```\n\n# 15. 상세한 정규 표현식\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nre.VERBOSE를 사용하여 더 읽기 쉬운 정규 표현식을 사용할 수 있습니다:\n\n```js\npattern = re.compile(r\"\"\"\n    \\b      # 단어 경계\n    \\w+     # 하나 이상의 단어 문자\n    \\s      # 공백\n    \"\"\", re.VERBOSE)\nmatch = pattern.search(text)\n```\n\n# 문자열 다루기\n\n# 1. 문자열 연결하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문자열을 합치려면:\n\n```js\ngreeting = \"Hello\";\nname = \"Alice\";\nmessage = greeting + \", \" + name + \"!\";\nprint(message);\n```\n\n# 2. str.format을 사용한 문자열 서식 지정\n\n문자열 템플릿에 값을 삽입하는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmessage = \"{}, {}. Welcome!\".format(greeting, name);\nprint(message);\n```\n\n# 3. Formatted String Literals (f-strings)\n\nTo embed expressions inside string literals (Python 3.6+):\n\n```js\nmessage = f\"{greeting}, {name}. Welcome!\"\nprint(message)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 문자열 메소드 — 대소문자 변환\n\n문자열의 대소문자를 변경하려면:\n\n```js\ns = \"Python\"\nprint(s.upper())  # 대문자로 변환\nprint(s.lower())  # 소문자로 변환\nprint(s.title())  # 제목 케이스로 변환\n```\n\n# 5. 문자열 메소드 — strip, rstrip, lstrip\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문자열 끝에서 공백이나 특정 문자를 제거하려면:\n\n```js\ns = \"   trim me   \"\nprint(s.strip())   # 양쪽 끝\nprint(s.rstrip())  # 오른쪽 끝\nprint(s.lstrip())  # 왼쪽 끝\n```\n\n# 6. 문자열 메소드 — startswith, endswith\n\n특정 텍스트를 찾아 문자열의 시작 또는 끝을 확인하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ns = \"filename.txt\"\nprint(s.startswith(\"file\"))  # True\nprint(s.endswith(\".txt\"))    # True\n```\n\n# 7. 문자열 메서드 — split, join\n\n문자열을 리스트로 나누거나 리스트를 문자열로 결합하려면:\n\n```js\ns = \"split,this,string\"\nwords = s.split(\",\")        # 문자열을 리스트로 분할\njoined = \" \".join(words)    # 리스트를 문자열로 결합\nprint(words)\nprint(joined)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 문자열 메소드 — replace\n\n문자열의 일부를 다른 문자열로 바꾸려면:\n\n```js\ns = \"Hello world\";\nnew_s = s.replace(\"world\", \"Python\");\nprint(new_s);\n```\n\n# 9. 문자열 메소드 — find, index\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n서브스트링이 문자열 내에서의 위치를 찾으려면:\n\n```js\ns = \"look for a substring\"\nposition = s.find(\"substring\")  # 찾지 못하면 -1 반환\nindex = s.index(\"substring\")    # 찾지 못하면 ValueError를 일으킴\nprint(position)\nprint(index)\n```\n\n# 10. 문자열 메소드 — 문자와 작업하기\n\n문자열 내 개별 문자를 처리하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\ns = \"characters\"\nfor char in s:\n    print(char)  # Prints each character on a new line\n```\n\n# 11. 문자열 메서드 — isdigit, isalpha, isalnum\n\n문자열이 숫자만, 알파벳 문자만, 또는 알파벳 및 숫자만을 포함하는지 확인하려면:\n\n```python\nprint(\"123\".isdigit())   # True\nprint(\"abc\".isalpha())   # True\nprint(\"abc123\".isalnum())# True\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 12. 문자열 슬라이싱\n\n슬라이싱을 사용하여 부분 문자열을 추출하려면:\n\n```js\ns = \"나를 슬라이스해봐\"\nsub = s[2:7]  # 3번째부터 7번째 문자까지\nprint(sub)\n```\n\n# 13. len으로 문자열 길이 계산\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문자열의 길이를 구하려면:\n\n```js\ns = \"length\"\nprint(len(s))  # 6\n```\n\n## 14. 여러 줄을 포함하는 문자열\n\n여러 줄에 걸쳐 있는 문자열을 다루려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmulti = \"\"\"Line one\nLine two\nLine three\"\"\"\nprint(multi)\n```\n\n# 15. 원시 문자열\n\n백슬래시를 리터럴 문자로 취급하려면 정규식 패턴 및 파일 경로에 유용합니다:\n\n```js\npath = r\"C:\\User\\name\\folder\"\nprint(path)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 웹 스크레이핑 작업 중\n\n# 1. requests를 사용하여 웹 페이지 가져오기\n\n웹 페이지의 내용을 검색하는 방법:\n\n```js\nimport requests\n\nurl = 'https://example.com'\nresponse = requests.get(url)\nhtml = response.text\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. BeautifulSoup을 사용하여 HTML 구문 분석\n\nHTML을 구문 분석하고 데이터를 추출하려면:\n\n```python\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(html, 'html.parser')\nprint(soup.prettify())  # HTML을 예쁘게 출력\n```\n\n# 3. HTML 트리 내비게이션\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n태그를 사용하여 요소를 찾는 방법:\n\n```js\ntitle = soup.title.text  # 페이지 제목 가져오기\nheadings = soup.find_all('h1')  # 모든 <h1> 태그 목록\n```\n\n# 4. CSS 선택자 사용\n\nCSS 선택자를 사용하여 요소를 선택하는 방법:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\narticles = soup.select('div.article') # <div> 태그 안에 클래스 'article'을 가진 모든 요소 선택\n\n# 5. 태그로부터 데이터 추출\n\nHTML 요소에서 텍스트와 속성을 추출하려면:\n\n```js\nfor article in articles:\n    title = article.h2.text  # <h2> 태그 안의 텍스트\n    link = article.a['href']  # <a> 태그의 'href' 속성\n    print(title, link)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 상대 URL 다루기\n\n상대 URL을 절대 URL로 변환하려면:\n\n```js\nfrom urllib.parse import urljoin\nabsolute_urls = [urljoin(url, link) for link in relative_urls]\n```\n\n# 7. 페이지네이션 다루기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여러 페이지에서 콘텐츠를 스크래핑하기:\n\n```js\nbase_url = \"https://example.com/page/\"\nfor page in range(1, 6):  # 5페이지에 대해\n    page_url = base_url + str(page)\n    response = requests.get(page_url)\n    # 각 페이지의 콘텐츠 처리\n```\n\n# 8. AJAX 요청 처리\n\nAJAX 요청으로 로드된 데이터를 스크래핑하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# AJAX 요청의 URL을 찾아보세요 (브라우저의 개발자 도구 사용) 그리고 가져와보세요\najax_url = 'https://example.com/ajax_endpoint'\ndata = requests.get(ajax_url).json()  # 응답이 JSON 형식일 것으로 가정합니다\n```\n\n# 9. 정규 표현식을 활용한 웹 스크래핑\n\n정규 표현식을 사용하여 데이터를 추출하려면:\n\n```js\nimport re\nemails = re.findall(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', html)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 로봇 파일 (robots.txt) 존중하기\n\n스크래핑 권한을 확인하려면 다음과 같이 robots.txt를 확인하세요:\n\n```python\nfrom urllib.robotparser import RobotFileParser\n\nrp = RobotFileParser()\nrp.set_url('https://example.com/robots.txt')\nrp.read()\ncan_scrape = rp.can_fetch('*', url)\n```\n\n# 11. 세션 및 쿠키 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n세션 유지 및 쿠키 처리를 위해:\n\n```python\nsession = requests.Session()\nsession.get('https://example.com/login')\nsession.cookies.set('key', 'value')  # 필요한 경우 쿠키 설정\nresponse = session.get('https://example.com/protected_page')\n```\n\n# 12. 브라우저 자동화를 통한 스크래이핑 (selenium 라이브러리)\n\n자바스크립트로 렌더링된 동적 콘텐츠를 스크래이핑하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom selenium import webdriver\nbrowser = webdriver.Chrome()\nbrowser.get('https://example.com')\ncontent = browser.page_source\n# BeautifulSoup 등을 사용하여 데이터를 파싱하고 추출합니다.\nbrowser.quit()\n```\n\n# 13. 웹 스크래핑에서의 오류 처리\n\n오류와 예외를 처리하는 방법:\n\n```python\ntry:\n    response = requests.get(url, timeout=5)\n    response.raise_for_status()  # 나쁜 상태 코드에 대해 오류를 발생시킵니다.\nexcept requests.exceptions.RequestException as e:\n    print(f\"오류 발생: {e}\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 14. 비동기 웹 스크래핑\n\n데이터를 빠르게 검색하기 위해 웹 사이트를 비동기적으로 스크랩하려면:\n\n```js\nimport aiohttp\nimport asyncio\n\nasync def fetch(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as response:\n            return await response.text()\n\nurls = ['https://example.com/page1', 'https://example.com/page2']\nloop = asyncio.get_event_loop()\npages = loop.run_until_complete(asyncio.gather(*(fetch(url) for url in urls)))\n```\n\n# 15. 데이터 저장 (CSV, 데이터베이스)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n크롤링한 데이터를 CSV 파일이나 데이터베이스에 저장하는 방법:\n\n```js\nimport csv\n\nwith open('output.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerow(['Title', 'URL'])\n    for article in articles:\n        writer.writerow([article['title'], article['url']])\n```\n\n# pip로 작업하기 (패키지 관리)\n\n# 1. 패키지 설치\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n거대한 저장소에서 라이브러리를 불러와서 그 힘을 환경에 통합하려면:\n\n```js\npip install numpy\n```\n\n## 2. 설치된 패키지 나열\n\n당신의 영역에 존재하는 라이브러리들을 조사하여 버전과 계열을 확인하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npip list\n```\n\n# 3. 패키지 업그레이드\n\n설치된 라이브러리에 강화된 기능과 능력을 부여하여 최신 버전으로 업그레이드하는 방법:\n\n```js\npip install --upgrade numpy\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 패키지 삭제\n\n패키지를 삭제하려면:\n\n```js\npip uninstall numpy\n```\n\n# 5. 패키지 검색\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n패키지를 검색 중입니다:\n\n```js\npip search \"data visualization\"\n```\n\n## 6. 패키지의 특정 버전 설치하기\n\n특정 버전을 설치하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npip install numpy==1.18.5\n```\n\n# 7. Requirements 파일 생성하기\n\nRequirements 파일:\n\n```js\npip freeze > requirements.txt\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 요구 사항 파일에서 패키지 설치하기\n\n친구야, 너의 요구 사항의 노트에 맞게 조율된 라이브러리의 교향곡을 창작할 때:\n\n```bash\npip install -r requirements.txt\n```\n\n# 9. 가상 환경 사용하기\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n패키지 충돌을 관리하기 위해 가상 환경을 생성하세요:\n\n```js\n# 'venv'라는 이름의 가상 환경 생성\npython -m venv venv\n\n# 가상 환경 활성화\n# Windows에서는\n.\\venv\\Scripts\\activate\n\n# Unix나 MacOS에서는\nsource venv/bin/activate\n```\n\n# 10. 패키지 의존성 확인\n\n의존성 이해:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npip show numpy\n```\n\n# 일반 내장 함수 및 패키지 사용하기\n\n# 1. os - 운영 체제 인터페이스\n\n운영 체제와 상호 작용하기 위해서:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport os\ncurrent_directory = os.getcwd()  # 현재 작업 디렉토리 가져오기\n```\n\n## 2. sys - 시스템별 매개변수 및 함수\n\n시스템별 매개변수 및 함수에 액세스하려면:\n\n```python\nimport sys\nsys.exit()  # 스크립트 종료\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3. datetime - 기본 날짜와 시간 유형\n\n날짜 및 시간을 다루려면:\n\n```python\nfrom datetime import datetime\nnow = datetime.now()  # 현재 날짜와 시간\n```\n\n# 4. math - 수학 함수\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n수학적인 연산을 수행하려면:\n\n```js\nimport math\nresult = math.sqrt(16)  # 제곱근\n```\n\n# 5. random - 유사 난수 생성\n\n유사 난수를 생성하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport random\nnumber = random.randint(1, 10)  # 1부터 10 사이의 난수 생성\n```\n\n# 6. json - JSON 인코더 및 디코더\n\nJSON 데이터를 구문 분석하고 생성하기 위해:\n\n```js\nimport json\njson_string = json.dumps({'name': 'Alice', 'age': 30})  # 딕셔너리를 JSON 문자열로 변환\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 정규 표현식을 사용하기\n\n정규 표현식을 사용하려면:\n\n```js\nimport re\nmatch = re.search('Hello', 'Hello, world!')  # 문자열에서 'Hello'를 검색함\n```\n\n# 8. urllib - URL 처리 모듈\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nURL과 함께 작업하려면:\n\n```python\nfrom urllib.request import urlopen\ncontent = urlopen('http://example.com').read()  # 웹 페이지의 내용을 가져오기\n```\n\n# 9. http - HTTP 모듈\n\nHTTP 서버를 만들고 HTTP 요청을 처리하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n```\n\n```js\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'<html><head><title>Python HTTP Server</title></head>')\n        self.wfile.write(b'<body><h1>Hello from a simple Python HTTP server!</h1></body></html>')\n\ndef run(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler):\n    server_address = ('', 8000)  # Serve on all addresses, port 8000\n    httpd = server_class(server_address, handler_class)\n    print(\"Server starting on port 8000...\")\n    httpd.serve_forever()\n\nif __name__ == '__main__':\n    run()\n```\n\n# 10. subprocess - Subprocess Management\n\n새로운 프로세스를 생성하고 그들의 입력/출력/에러 파이프에 연결하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport subprocess\nsubprocess.run(['ls', '-l'])  # 'ls -l' 명령 실행\n```\n\n# 11. 소켓 - 저수준 네트워킹 인터페이스\n\n네트워크 클라이언트와 서버를 만들려면:\n\n```js\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # TCP/IP 소켓 만들기\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 12. threading - 스레드 기반 병렬 처리\n\n동시에 코드를 실행하는 방법을 알아보세요:\n\n```js\nimport threading\ndef worker():\n    print(\"작업자 스레드 실행 중\")\nthread = threading.Thread(target=worker)\nthread.start()\n```\n\n# 13. multiprocessing - 프로세스 기반 병렬 처리\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n동시에 실행중인 프로세스를 관리하기 위해:\n\n```python\nfrom multiprocessing import Process\ndef worker():\n    print(\"작업자 프로세스\")\np = Process(target=worker)\np.start()\n```\n\n# 14. argparse - 명령행 옵션, 인수 및 하위 명령어를 위한 파서\n\n명령행 인수를 구문 분석하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport argparse\nparser = argparse.ArgumentParser(description=\"일부 정수를 처리합니다.\")\nargs = parser.parse_args()\n```\n\n# 15. logging - 로깅 시스템\n\n메시지를 기록하려면 (debug, info, warning, error 및 critical):\n\n```js\nimport logging\nlogging.warning('이것은 경고 메시지입니다.')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 16. unittest - 단위 테스트 프레임워크\n\n단위 테스트를 작성하고 실행하는 방법은 다음과 같습니다:\n\n```js\nimport unittest\nclass TestStringMethods(unittest.TestCase):\n    def test_upper(self):\n        self.assertEqual('foo'.upper(), 'FOO')\n```\n\n# 17. pathlib - 객체 지향형 파일 시스템 경로\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파일 시스템 경로를 객체 지향적으로 다루려면:\n\n```python\nfrom pathlib import Path\np = Path('.')\n```\n\n# 18. functools - 고계 함수 및 호출 가능 객체에 대한 작업\n\n고계 함수 및 호출 가능 객체에 대해 작업하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom functools import lru_cache\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n```\n\n# 19. collections - Container Data Types\n\n특수화된 컨테이너 데이터 타입 (deque, Counter, OrderedDict 등)을 사용하려면:\n\n```js\nfrom collections import Counter\nc = Counter('hello world')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 20. itertools - 효율적인 루핑을 위한 반복자 생성 함수\n\n효율적인 루핑을 위해 반복자를 생성하고 사용하는 방법은 다음과 같습니다:\n\n```python\nimport itertools\nfor combination in itertools.combinations('ABCD', 2):\n    print(combination)\n```\n\n# 21. hashlib - 안전한 해시 및 메시지 다이제스트 알고리즘\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터를 해싱하기 위해:\n\n```js\nimport hashlib\nhash_object = hashlib.sha256(b'Hello World')\nhex_dig = hash_object.hexdigest()\n```\n\n# 22. csv - CSV 파일 읽기 및 쓰기\n\nCSV 파일에서 읽고 쓰려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport csv\nwith open('file.csv', mode='r') as infile:\n    reader = csv.reader(infile)\n```\n\n# 23. xml.etree.ElementTree - The ElementTree XML API\n\nTo parse and create XML data:\n\n```python\nimport xml.etree.ElementTree as ET\ntree = ET.parse('file.xml')\nroot = tree.getroot()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 24. sqlite3 - SQLite 데이터베이스를 위한 DB-API 2.0 인터페이스\n\nSQLite 데이터베이스와 상호 작용하려면:\n\n```python\nimport sqlite3\nconn = sqlite3.connect('example.db')\n```\n\n# 25. tkinter - GUI 도구 상자\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nGUI 애플리케이션을 만들려면:\n\n```js\nimport tkinter as tk\nroot = tk.Tk()\n```\n\n# 26. pickle - Python 객체 직렬화\n\nPython 객체 구조를 직렬화하고 역직렬화하는 데 사용됩니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport pickle\nserialized_obj = pickle.dumps(obj)\n```\n\n# 27. io - Core Tools for Working with Streams\n\nTo handle streams (file-like objects):\n\n```python\nfrom io import StringIO\nf = StringIO(\"some initial text data\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 28. time - 시간 액세스 및 변환\n\n시간 관련 함수에 접근하기 위해서:\n\n```python\nimport time\ntime.sleep(1)  # 1초 동안 대기\n```\n\n# 29. calendar - 일반 캘린더 관련 함수\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n달력을 활용하려면:\n\n```python\nimport calendar\nprint(calendar.month(2023, 1))  # 2023년 1월 달력 출력\n```\n\n**30. queue - 동기화된 큐 클래스**\n\n멀티스레드 프로그래밍에 유용한 큐를 관리하세요:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom queue import Queue\nq = Queue()\n```\n\n# 31. shutil - 고수준 파일 작업\n\n고수준 파일 작업을 수행하려면 복사 및 아카이빙과 같은 작업을 사용합니다:\n\n```js\nimport shutil\nshutil.copyfile('source.txt', 'dest.txt')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 32. glob - Unix 스타일의 경로명 패턴 확장\n\n지정된 패턴과 일치하는 파일을 찾기:\n\n```js\nimport glob\nfor file in glob.glob(\"*.txt\"):\n    print(file)\n```\n\n# 33. tempfile - 임시 파일 및 디렉토리 생성\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n임시 파일과 디렉토리를 생성하려면:\n\n```js\nimport tempfile\ntemp = tempfile.TemporaryFile()\n```\n\n# 34. bz2 - Bzip2 압축 지원\n\nbzip2 압축을 사용하여 데이터를 압축하고 해제하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport bz2\ncompressed = bz2.compress(b'여기에 데이터를 입력하세요')\n```\n\n# 35. gzip - Gzip 압축 지원\n\ngzip 압축을 사용하여 데이터를 압축 및 해제하는 방법:\n\n```js\nimport gzip\nwith gzip.open('file.txt.gz', 'wt') as f:\n    f.write('여기에 데이터를 입력하세요')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 36. ssl - TLS/SSL Wrapper for Socket Objects\n\n네트워크 소켓에서 TLS/SSL 암호화 및 피어 인증을 처리하기 위해:\n\n```js\nimport ssl\nssl.wrap_socket(sock)\n```\n\n# 37. imaplib - IMAP4 프로토콜 클라이언트\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nIMAP4를 통해 메일에 액세스하고 조작하려면:\n\n```js\nimport imaplib\nmail = imaplib.IMAP4_SSL('imap.example.com')\n```\n\n# 38. smtplib - SMTP 프로토콜 클라이언트\n\nSimple Mail Transfer Protocol (SMTP)를 사용하여 메일을 보내려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport smtplib\nserver = smtplib.SMTP('smtp.example.com', 587)\n```\n\n# 39. email - 이메일 메시지 관리\n\n이메일 메시지를 관리하려면 MIME 및 다른 RFC 2822 기반 메시지 문서를 포함합니다:\n\n```js\nfrom email.message import EmailMessage\nmsg = EmailMessage()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 40. base64 - Base16, Base32, Base64, Base85 Data Encodings\n\n베이스64를 사용하여 데이터를 인코딩 및 디코딩하는 방법:\n\n```python\nimport base64\nencoded_data = base64.b64encode(b'data to encode')\n```\n\n# 41. difflib - Deltas를 계산하는 도우미\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n시퀀스를 비교하고 사람이 읽기 쉬운 차이를 생성하려면:\n\n```python\nimport difflib\ndiff = difflib.ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n                     'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\nprint(''.join(diff))\n```\n\n# 42. gettext - 다국어 지역화 서비스\n\n파이썬 프로그램의 국제화를 위해:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport gettext\ngettext.install('myapp')\n```\n\n# 43. locale - Internationalization Services\n\nTo access a database of culture-specific data formats:\n\n```js\nimport locale\nlocale.setlocale(locale.LC_ALL, '')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 44. secrets - 시크릿 관리를 위한 안전한 무작위 숫자 생성\n\n시크릿 관리를 위해 안전한 무작위 숫자를 생성하려면 토큰이나 비밀번호와 같은 비밀을 생성합니다:\n\n```javascript\nimport secrets\nsecure_token = secrets.token_hex(16)\n```\n\n# 45. uuid - RFC 4122에 따른 UUID 개체\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n유니버설 유니크 식별자(UUID)를 생성하려면:\n\n```js\nimport uuid\nunique_id = uuid.uuid4()\n```\n\n# 46. html - 하이퍼텍스트 마크업 언어 지원\n\nHTML 개체를 처리하고 조작하려면:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport html\nescaped = html.escape('<a href=\"https://example.com\">link</a>')\n```\n\n# 47. ftplib - FTP Protocol Client\n\nFTP 프로토콜을 통해 파일을 교환 및 상호 작용하기 위해:\n\n```js\nfrom ftplib import FTP\nftp = FTP('ftp.example.com')\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 48. tarfile - Tar 아카이브 파일 읽고 쓰기\n\ntar 아카이브 파일을 다루는 방법입니다. 아카이빙하고 압축/압축해제할 수 있습니다:\n\n```js\nimport tarfile\nwith tarfile.open('sample.tar.gz', 'w:gz') as tar:\n    tar.add('sample.txt')\n```\n\n요약하자면, 여기까지가 전부에요. 여기서 제공된 목록이 빠르게 숙련되는 데 도움이 되었으면 좋겠어요. 만약 마음에 드셨다면 공유하거나 좋아요를 눌러주세요 (참 많은 도움이 됩니다!).\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 자세하고 포괄적인 Python 개발 가이드가 필요하시다면, 제가 실용적인 Python 개발에 대해 가장 좋은 자료로 발견한 두 권의 책이 있습니다. 이 책들을 강력히 추천합니다:\n\n- 파이썬 졸업반 — 제3판\n- 따분한 일 자동화하기 — 제2판\n\n읽어 주셔서 감사합니다! 댓글에 놓친 부분이 있다면 언제든 댓글로 남겨주세요!\n\n# Stackademic 🎓\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n끝까지 읽어주셔서 감사합니다. 떠나시기 전에:\n\n- 작가를 응원하고 팔로우해주세요! 👏\n- 저희를 팔로우하기: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼 방문하기: In Plain English | CoFeed | Venture | Cubed\n- 더 많은 콘텐츠: Stackademic.com\n","ogImage":{"url":"/assets/img/2024-07-07-UltimatePythonCheatSheetPracticalPythonForEverydayTasks_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-UltimatePythonCheatSheetPracticalPythonForEverydayTasks_0.png","tag":["Tech"],"readingTime":124},{"title":"리스트 병합을 쉽게 만드는 상위 5가지 파이썬 기법","description":"","date":"2024-07-07 21:33","slug":"2024-07-07-Top5PythonTechniquesforSeamlessListMerging","content":"\n\n## 파이썬 리스트 병합 간단히 알아보기\n\n파이썬 프로그래밍에서는 종종 두 개 이상의 리스트를 하나로 병합해야 할 때가 있습니다.\n\n이러한 과정은 일반적으로 데이터 처리나 더 복잡한 작업을 수행할 때 사용됩니다.\n\n리스트 병합은 두 개 이상의 리스트에서 요소들을 하나로 결합하는 것을 의미합니다. 파이썬은 이를 수행하는 여러 가지 방법을 제공하는데, 각각 다른 상황에 적합한 방법이 있습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. `+` 연산자 사용하기\n\n가장 간단한 방법은 두 개의 리스트를 합치는 `+` 연산자를 사용하는 것입니다.\n\n```js\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nmerged_list = list1 + list2\nprint(merged_list) # 출력: [1, 2, 3, 4, 5, 6]\n```\n\n이 방법은 두 리스트를 직접 연결해야 할 때 빠르고 쉽습니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. `extend()` 메소드 사용하기\n\n리스트의 `extend()` 메소드를 사용할 수도 있는데, 이 메소드는 한 리스트의 모든 요소를 다른 리스트의 끝에 추가합니다.\n\n```js\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist1.extend(list2)\nprint(list1) # 출력: [1, 2, 3, 4, 5, 6]\n```","ogImage":{"url":"/TIL/assets/no-image.jpg"},"coverImage":"/TIL/assets/no-image.jpg","tag":["Tech"],"readingTime":2},{"title":"시와 파이썬의 타이핑 문제 해결 방법","description":"","date":"2024-07-07 21:32","slug":"2024-07-07-Peskytypingissueswithpoetryandpython","content":"\n![이미지](/TIL/assets/img/2024-07-07-Peskytypingissueswithpoetryandpython_0.png)\n\n파이썬에서 커스텀 타입을 더 자주 사용하게 되었습니다. TypeScript와 달리 파이썬의 typing은 비교적 자유롭게 정의됩니다(학술적 정의도 있지만, 본 글을 위해서는 IDE가 가장 중요하게 생각합니다). 계약 포지션에서 일할 때 코드베이스를 빨리 적응할 수 있도록 합니다.\n\n물론 PEP-0585의 instanceof와 같은 해결책이 있습니다. 예를 들어 문제를 제시해보죠. 함수와 루비를 사용한 적이 있는 사람에게 요청된 특정 타입이 있는 경우를 살펴봅시다:\n\n```python\ndef my_special_function(test: Test) -> Output:\n  return Output()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n당연하지만 실제 유형은 전통적인 Python 인터프리터에서 테스트되지 않았습니다. 그러나 우리가 매개변수로 전달되는 것을 정확히 알고 싶다면 다음을 추가할 수 있습니다:\n\n```js\ndef my_special_function(test: Test) -> Output:\n  if not isintanceof(test, Test):\n    raise Exception(\"이런! 저는 뭔가 다른 것을 기대하고 있었어요!\")\n  return Output()\n```\n\n만약 이를 자동으로 처리하는 고차 함수를 만들어 숙제를 하고 싶다면 이를 PEP 요청으로 보내서 표준 릴리스에 포함되도록 요청할 수도 있어요.\n\nPython 3.12 이상에서 추가된 다른 항목(P.E.P. 0695)은 'type' 키워드입니다. 사용자 정의 유형을 제공하여 다음과 같이 정의할 수 있습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport typing\n\ntype EMAIL = typing.String\n```\n","ogImage":{"url":"/assets/img/2024-07-07-Peskytypingissueswithpoetryandpython_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-Peskytypingissueswithpoetryandpython_0.png","tag":["Tech"],"readingTime":2}],"page":"28","totalPageCount":34,"totalPageGroupCount":2,"lastPageGroup":14,"currentPageGroup":1},"__N_SSG":true}