{"pageProps":{"post":{"title":"NiceGUI를 만나보세요 곧 여러분의 최애 파이썬 UI 라이브러리가 될 이유","description":"","date":"2024-07-09 14:57","slug":"2024-07-09-MeettheNiceGUIYourSoon-to-beFavoritePythonUILibrary","content":"\n## 사용자 정의 웹 앱을 쉽고 빠르게 만드세요\n\n![이미지](/TIL/assets/img/2024-07-09-MeettheNiceGUIYourSoon-to-beFavoritePythonUILibrary_0.png)\n\n만나보세요, NiceGUI! 이 간단한 Python 기반 UI 프레임워크는 웹 브라우저나 데스크톱 앱에서 원활하게 작동합니다. 작은 웹 앱, 대시보드, 또는 로봇 프로젝트를 만들고 있는 중이던 중이든, NiceGUI는 쉬운 인터페이스와 다양한 기능으로 여러분을 도와줄 거예요.\n\n이 글의 목표는 이 라이브러리의 장단점을 나열하고 어떻게 NiceGUI 앱을 만들고 배포할 수 있는지 보여줌으로써 여러분이 한 번 시도해보길 설득하는 것입니다. (이 게시물은 후원받은 것이 아니에요, 그냥 이 라이브러리를 좋아해서 쓴거에요 🙃)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nStreamlit 대 NiceGUI: 왜 바꾸어야 할까요?\n\nStreamlit은 대화형 앱을 만드는 데 좋지만, 이벤트 및 상태 처리가 어려울 수 있습니다. 특히 큰 프로젝트의 경우 더 그렇습니다. NiceGUI는 다릅니다. NiceGUI를 사용하면 추가적인 단계나 고난한 해결책 없이 상태와 상호작용을 직접 제어할 수 있습니다.\n\n간단한 상태 관리\n\nNiceGUI는 상태를 쉽게 관리할 수 있습니다. Streamlit과 달리 예상치 못한 상태 재설정이 발생하지 않습니다. NiceGUI는 시작 상태든 사용자가 만든 변경 사항이든 모든 것을 안정적으로 유지합니다. 사용자 상호작용을 처리하기 위해 콜백을 사용할 수 있으며 전체 페이지 새로고침으로 인한 괴롭힘 없이 상태 데이터를 유지할 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n많은 기능들\n\nNiceGUI에는 여러 가지 멋진 기능들이 많이 있어요:\n\n- 상호 작용을 위한 버튼, 스위치, 슬라이더, 입력 등 다양한 요소들이 있어요.\n- 화면에 요소들을 쉽게 배치할 수 있는 방법이 있어요.\n- 차트, 테이블, 심지어 3D 씬까지 시각화에 사용할 수 있어요.\n- Matplotlib 또는 Plotly와 같은 데이터 시각화 라이브러리와 통합이 되어 있어요.\n- 색상과 스타일을 쉽게 사용자 정의할 수 있어요.\n- 코딩과 테스트에 도움이 되는 도구들이 있어요.\n- 주 개발자들은 항상 질문에 대답할 준비가 되어 있고, GitHub 공간에 피드백을 매우 긍정적으로 반영해요.\n- 인기 있는 프레임워크 위에 구축되어 있어요: FastAPI, Vue3, Tailwind, Quasar.\n- 전체 사이트가 NiceGUI 라이브러리로 제작되었어요: https://nicegui.io/documentation\n\n제한사항\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNiceGUI은 정말 멋지지만, 작은 커뮤니티 규모 때문에 다소 제약이 있을 수 있습니다. Streamlit과 같이 인기 있는 프레임워크보다 학습 곡선이 조금 더 길 수도 있습니다. 라이브러리의 기능을 최대한 활용하려면 CSS와 Tailwind CSS에 익숙해지는 것이 좋습니다. 또한, FastAPI, Vue, 그리고 Quasar에 대한 지식은 더 큰 유연성을 제공하고 구현할 수 있는 기능을 확장할 수 있습니다.\n\n# 실습\n\n이제 NiceGUI의 몇 가지 기능을 탐험하고 데모 앱을 만들고 배포해 봅시다.\n\n## 기본 앱\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n먼저 NiceGUI를 설치해주세요:\n\n```js\npip install nicegui[highcharts]\n```\n\n주요 문서의 예제에서 시작해보겠습니다:\n\n```js\n# https://nicegui.io/documentation/section_data_elements\nfrom nicegui import ui\nfrom random import random\n\nchart = ui.highchart({\n    'title': False,\n    'chart': {'type': 'bar'},\n    'xAxis': {'categories': ['A', 'B']},\n    'series': [\n        {'name': 'Alpha', 'data': [0.1, 0.2]},\n        {'name': 'Beta', 'data': [0.3, 0.4]},\n    ],\n}).classes('w-full h-64')\n\ndef update():\n    chart.options['series'][0]['data'][0] = random()\n    chart.update()\n\nui.button('Update', on_click=update)\n\nui.run()\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기서 UI 모듈은 UI 요소를 만들 수 있도록합니다.\n이 예시에서 먼저 Highchart 요소를 생성하는데, 이에 w-full과 h-64의 tailwind 클래스를 할당합니다. w-full은 반응형으로 화면 전체를 가로로 사용하고 h-64는 높이를 지정합니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1162/1*IbE0mHsejGUzviDgE2He3g.gif)\n\n버튼을 클릭하면 콜백 함수가 트리거됩니다. 이 콜백은 차트에 사용되는 데이터를 업데이트하고 그것을 순조롭게 다시 렌더링합니다.\n\n또한, 새로운 막대를 추가하기 위해 콜백을 변경할 수도 있습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndef update():\n    chart.options[\"xAxis\"][\"categories\"].append(random.choice(string.ascii_uppercase))\n    for series in chart.options['series']:\n        series[\"data\"].append(random.random())\n    chart.update()\n```\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*P-IGyImlGMvNFut9LluamA.gif)\n\n또한 페이지를 새로 고침해도 데이터가 손실되지 않는다는 것을 알아두세요! 이것은 다른 Python UI 라이브러리로는 할 수 없는 일입니다. 이렇게 작동하는 이유는 데이터가 모든 사용자 사이에서 공유되기 때문이지만, 앱 저장소의 사용자 객체나 앱 저장소 브라우저같은 방법으로 데이터를 사용자별로 유지하는 방법이 많이 있습니다. @ui.page 데코레이터로 감싸기 위해 app.storage.user 객체나 app.storage.browser를 사용할 수 있습니다.\n\n하지만 주기적 타이머를 사용하여 UI를 업데이트하고 싶다면 어떻게 할까요? 쉽습니다! 버튼 요소를 ui.timer로 변경해주기만 하면 됩니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nui.timer(5, callback=lambda: (update(), ui.notify(\"데이터가 업데이트되었습니다\")))\n```\n\n![gif](https://miro.medium.com/v2/resize:fit:1400/1*wwSF1ib9720JW1FlKDOc0g.gif)\n\n자, 이제 사용자가 범주를 선택한 다음 무작위로 Chuck Norris Fact를 생성할 수 있는 데모 앱을 만들어 봅시다.\n\n먼저, 여기에 메인 코드가 있습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nimport requests  # HTTP 요청을 만들기 위해 requests 라이브러리를 가져옵니다\nfrom nicegui import ui  # NiceGUI 라이브러리에서 UI 구성 요소를 가져옵니다\nfrom nicegui_app.header import add_head_html  # HTML 헤드 내용을 추가하는 함수를 가져옵니다\n\n# Chuck Norris 사실 카테고리 목록\nCATEGORIES = [\n    \"동물\",\n    \"직업\",\n    \"연예인\",\n    \"개발\",\n    \"패션\",\n    \"음식\",\n    \"돈\",\n    \"영화\",\n    \"음악\",\n    \"과학\",\n    \"스포츠\",\n    \"여행\",\n]\n\n# Chuck Norris 사실을 처리하는 클래스\nclass Fact:\n    def __init__(self):\n        self.fact = None  # fact 속성을 None으로 초기화\n\n    # 주어진 카테고리를 기반으로 사실을 업데이트하는 메서드\n    def update_fact(self, category):\n        url = f\"https://api.chucknorris.io/jokes/random?category={category}\"  # Chuck Norris API URL\n\n        for i in range(10):  # 유효한 사실을 가져오려고 최대 10번 시도\n            result = requests.get(url)  # Chuck Norris API로 GET 요청을 보냄\n\n            if result.status_code == 200:  # 요청이 성공하면\n                result_json = result.json()  # JSON 응답을 파싱\n                if self.fact != result_json[\"value\"]:  # 가져온 사실이 현재 사실과 다르면\n                    self.fact = result_json[\"value\"]  # 사실을 업데이트하고\n                    break  # 루프를 종료\n\n# Chuck Norris 사실 UI를 생성하는 함수\ndef chuck():\n    add_head_html()  # NiceGUI 앱에 HTML 헤드 내용 추가\n\n    default_value = CATEGORIES[0]  # Chuck Norris 사실의 기본 카테고리\n\n    fact = Fact()  # Fact 클래스의 인스턴스 생성\n    fact.update_fact(default_value)  # 기본 카테고리로 사실을 업데이트\n\n    # 12개 열을 가진 그리드 레이아웃 생성\n    with ui.grid(columns=12).classes(\"w-full\"):\n        # 카테고리 선택을 위한 열\n        with ui.column().classes(\"col-span-4 sm:col-span-2 space-x-0\"):\n            ui.label(\"사실 카테고리 선택:\")  # 카테고리 선택을 위한 레이블 표시\n            # 카테고리 선택을 위한 라디오 버튼 그룹\n            category = ui.radio(\n                CATEGORIES,\n                value=default_value,\n                on_change=lambda _: fact.update_fact(category.value),  # 카테고리가 변경되면 사실 업데이트\n            ).classes(\"w-full\")\n            # 선택한 카테고리에 대한 사실을 다시 생성하는 버튼\n            ui.button(\n                \"⟳ 다시 생성\", on_click=lambda _: fact.update_fact(category.value)\n            )\n\n        # Chuck Norris 사실을 표시하는 열\n        with ui.column().classes(\n            \"flex col-span-8 sm:col-span-10 w-full justify-center mx-auto max-w-screen-md\"\n        ):\n            # Chuck Norris 사실을 표시하기 위한 레이블, Fact 인스턴스의 fact 속성에 바인딩\n            ui.label().bind_text_from(fact, \"fact\").classes(\n                \"text-lg sm:text-3xl text-gray-800 bg-gray-100 rounded-lg shadow-lg p-6\"\n            )\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nclass Fact:\n    def __init__(self):\n        self.fact = None  # fact 속성을 None으로 초기화합니다.\n\n    # 주어진 카테고리에 따라 팩트를 업데이트하는 메소드\n    def update_fact(self, category):\n        url = f\"https://api.chucknorris.io/jokes/random?category={category}\"  # 척 노리스 API의 URL입니다.\n\n        for i in range(10):  # 유효한 팩트를 가져오기 위해 최대 10번 시도합니다.\n            result = requests.get(url)  # 척 노리스 API에 GET 요청을 보냅니다.\n\n            if result.status_code == 200:  # 요청이 성공한 경우\n                result_json = result.json()  # JSON 응답을 파싱합니다.\n                if self.fact != result_json[\"value\"]:  # 가져온 팩트가 현재 팩트와 다른 경우\n                    self.fact = result_json[\"value\"]  # 팩트 속성을 업데이트합니다.\n                    break  # 루프를 종료합니다\n```\n\n이 클래스는 \"fact\" 속성에 팩트를 저장하고 Chuck Norris 팩트 API를 호출하는 update_fact 메소드를 가지고 있습니다. https://api.chucknorris.io\n\n다음으로, \"chuck\" 함수에서 페이지를 정의합니다. NiceGUI는 여러 모듈과 Python 파일을 거쳐 앱을 정의할 수 있는 모듈식 접근 방식을 채택합니다.\n\n우리는 데이터 클래스의 인스턴스인 fact = Fact()을 정의합니다. 이는 각 사용자별로 구체적인 인스턴스입니다. 그리고 다음으로 update_fact 메소드를 사용하여 팩트를 초기화합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 UI 요소를 정의하기 시작합니다.\n\n두 개의 열을 갖는 그리드를 정의합니다:\n\n- 카테고리 옵션 및 생성 버튼이있는 첫 번째 열입니다. 이 열은 다음과 같은 tailwind 클래스를 갖습니다: col-span-4 sm:col-span-2. 이것은 매우 작은 화면의 경우 화면의 4/12을 사용하고, 그렇지 않으면 화면의 2/12을 사용합니다. 이렇게 함으로써 디자인을 모바일 전화에서도 작동하게 할 수 있습니다.\n- 사실을 표시할 두 번째 열입니다.\n\n첫 번째 열을 위해:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 라디오 메뉴 `ui.radio`.\n- 무작위 사실을 생성하는 버튼이 있습니다.\n\n두 요소 모두 클릭되거나 변경될 때 `fact.update_fact`를 호출하는 콜백을 사용합니다.\n\n두 번째 열에 대해서:\n\n- `fact.fact` 값을 바인딩하는 `ui.label`이 있습니다. 이 변수가 변경될 때마다 디스플레이가 자동으로 업데이트됩니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래에 있는 테일윈드 클래스를 가진 레이블입니다: text-lg sm:text-3xl 이렇게 하면 텍스트가 작은 화면에서 더 작아집니다.\n\n다음 앱을 얻게 되요:\n\n![앱 이미지](https://miro.medium.com/v2/resize:fit:1400/1*ElNrpcoZndHh1If8Cme9kQ.gif)\n\n멋지죠?\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 배포\n\n앱을 배포하는 것은 쉬워요! 예를 들어 CloudRun을 사용하면 매우 간단해요. Dockerfile을 생성한 다음 다음 gcloud 명령어를 실행하기만 하면 돼요:\n\n```js\nPROJECT_ID=$(gcloud config get-value project)\nREPO=\"demo\"\nLOCATION=\"europe-west1\"\nIMAGE=\"nicegui_app\"\nSERVICE_NAME=\"nicegui-app\"\nVERSION=\"0.0.1\"\nGAR_TAG=$LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO/$IMAGE:$VERSION\n\n# 저장소 생성\ngcloud artifacts repositories create $REPO --repository-format=docker \\\n    --location=$LOCATION --description=\"Docker repository\" \\\n    --project=$PROJECT_ID  || true # 이미 존재하는 경우를 위해 실패해도 괜찮아요\n\n# 이미지 빌드\ngcloud builds submit --tag $GAR_TAG\n\n# Cloud Run 배포\ngcloud run deploy $SERVICE_NAME --image=$GAR_TAG --max-instances=1 --min-instances=0 --port=8080 \\\n --allow-unauthenticated --region=europe-west1 --memory=0.5Gi --cpu=1 -q --no-cpu-throttling --session-affinity\n```\n\n이렇게 하면 클라우드 빌드를 사용하여 도커 이미지를 빌드한 다음 CloudRun에 배포할 수 있어요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기서 유일한 키큰 옵션은 다음과 같습니다: \"— no-cpu-throttling — session-affinity\". 이를 통해 동일한 사용자가 가능한 경우 동일한 컨테이너로 라우팅되고 요청 사이에 CPU가 활성 상태로 유지됩니다.\n\n마지막으로\n\nNiceGUI는 파이썬을 사용해 빠르고 쉽게 사용자 인터페이스를 만들고 싶을 때 좋은 선택입니다. 여기에서는 내부 상태를 완전히 제어하고 테스트하고 쉽게 배포할 수 있는 강력한 파이썬 앱을 구축할 수 있습니다. 이를 통해 데이터 과학 프로젝트에서도 도구로 제한받지 않고 창의성을 발휘할 수 있을 것입니다.\n\n여기에 표시된 내용은 NiceGUI로 할 수 있는 작은 부분에 불과합니다. 아래 링크를 따라가면 더 많은 것을 배울 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자원:\n\n- Chuck Norris (매우 과장된) 사실 API: [https://api.chucknorris.io/](https://api.chucknorris.io/)\n- NiceGUI 문서: [https://nicegui.io/documentation](https://nicegui.io/documentation)\n- NiceGUI 예제: [https://github.com/zauberzeug/nicegui/tree/main/examples](https://github.com/zauberzeug/nicegui/tree/main/examples)\n- 이 게시물의 코드: [https://github.com/CVxTz/nicegui_tutorial](https://github.com/CVxTz/nicegui_tutorial)\n","ogImage":{"url":"/assets/img/2024-07-09-MeettheNiceGUIYourSoon-to-beFavoritePythonUILibrary_0.png"},"coverImage":"/TIL/assets/img/2024-07-09-MeettheNiceGUIYourSoon-to-beFavoritePythonUILibrary_0.png","tag":["Tech"],"readingTime":14},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>사용자 정의 웹 앱을 쉽고 빠르게 만드세요</h2>\n<p><img src=\"/TIL/assets/img/2024-07-09-MeettheNiceGUIYourSoon-to-beFavoritePythonUILibrary_0.png\" alt=\"이미지\"></p>\n<p>만나보세요, NiceGUI! 이 간단한 Python 기반 UI 프레임워크는 웹 브라우저나 데스크톱 앱에서 원활하게 작동합니다. 작은 웹 앱, 대시보드, 또는 로봇 프로젝트를 만들고 있는 중이던 중이든, NiceGUI는 쉬운 인터페이스와 다양한 기능으로 여러분을 도와줄 거예요.</p>\n<p>이 글의 목표는 이 라이브러리의 장단점을 나열하고 어떻게 NiceGUI 앱을 만들고 배포할 수 있는지 보여줌으로써 여러분이 한 번 시도해보길 설득하는 것입니다. (이 게시물은 후원받은 것이 아니에요, 그냥 이 라이브러리를 좋아해서 쓴거에요 🙃)</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Streamlit 대 NiceGUI: 왜 바꾸어야 할까요?</p>\n<p>Streamlit은 대화형 앱을 만드는 데 좋지만, 이벤트 및 상태 처리가 어려울 수 있습니다. 특히 큰 프로젝트의 경우 더 그렇습니다. NiceGUI는 다릅니다. NiceGUI를 사용하면 추가적인 단계나 고난한 해결책 없이 상태와 상호작용을 직접 제어할 수 있습니다.</p>\n<p>간단한 상태 관리</p>\n<p>NiceGUI는 상태를 쉽게 관리할 수 있습니다. Streamlit과 달리 예상치 못한 상태 재설정이 발생하지 않습니다. NiceGUI는 시작 상태든 사용자가 만든 변경 사항이든 모든 것을 안정적으로 유지합니다. 사용자 상호작용을 처리하기 위해 콜백을 사용할 수 있으며 전체 페이지 새로고침으로 인한 괴롭힘 없이 상태 데이터를 유지할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>많은 기능들</p>\n<p>NiceGUI에는 여러 가지 멋진 기능들이 많이 있어요:</p>\n<ul>\n<li>상호 작용을 위한 버튼, 스위치, 슬라이더, 입력 등 다양한 요소들이 있어요.</li>\n<li>화면에 요소들을 쉽게 배치할 수 있는 방법이 있어요.</li>\n<li>차트, 테이블, 심지어 3D 씬까지 시각화에 사용할 수 있어요.</li>\n<li>Matplotlib 또는 Plotly와 같은 데이터 시각화 라이브러리와 통합이 되어 있어요.</li>\n<li>색상과 스타일을 쉽게 사용자 정의할 수 있어요.</li>\n<li>코딩과 테스트에 도움이 되는 도구들이 있어요.</li>\n<li>주 개발자들은 항상 질문에 대답할 준비가 되어 있고, GitHub 공간에 피드백을 매우 긍정적으로 반영해요.</li>\n<li>인기 있는 프레임워크 위에 구축되어 있어요: FastAPI, Vue3, Tailwind, Quasar.</li>\n<li>전체 사이트가 NiceGUI 라이브러리로 제작되었어요: <a href=\"https://nicegui.io/documentation\" rel=\"nofollow\" target=\"_blank\">https://nicegui.io/documentation</a></li>\n</ul>\n<p>제한사항</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>NiceGUI은 정말 멋지지만, 작은 커뮤니티 규모 때문에 다소 제약이 있을 수 있습니다. Streamlit과 같이 인기 있는 프레임워크보다 학습 곡선이 조금 더 길 수도 있습니다. 라이브러리의 기능을 최대한 활용하려면 CSS와 Tailwind CSS에 익숙해지는 것이 좋습니다. 또한, FastAPI, Vue, 그리고 Quasar에 대한 지식은 더 큰 유연성을 제공하고 구현할 수 있는 기능을 확장할 수 있습니다.</p>\n<h1>실습</h1>\n<p>이제 NiceGUI의 몇 가지 기능을 탐험하고 데모 앱을 만들고 배포해 봅시다.</p>\n<h2>기본 앱</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>먼저 NiceGUI를 설치해주세요:</p>\n<pre><code class=\"hljs language-js\">pip install nicegui[highcharts]\n</code></pre>\n<p>주요 문서의 예제에서 시작해보겠습니다:</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//nicegui.io/documentation/section_data_elements</span>\n<span class=\"hljs-keyword\">from</span> nicegui <span class=\"hljs-keyword\">import</span> ui\n<span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> random\n\nchart = ui.<span class=\"hljs-title function_\">highchart</span>({\n    <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-title class_\">False</span>,\n    <span class=\"hljs-string\">'chart'</span>: {<span class=\"hljs-string\">'type'</span>: <span class=\"hljs-string\">'bar'</span>},\n    <span class=\"hljs-string\">'xAxis'</span>: {<span class=\"hljs-string\">'categories'</span>: [<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>]},\n    <span class=\"hljs-string\">'series'</span>: [\n        {<span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Alpha'</span>, <span class=\"hljs-string\">'data'</span>: [<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>]},\n        {<span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Beta'</span>, <span class=\"hljs-string\">'data'</span>: [<span class=\"hljs-number\">0.3</span>, <span class=\"hljs-number\">0.4</span>]},\n    ],\n}).<span class=\"hljs-title function_\">classes</span>(<span class=\"hljs-string\">'w-full h-64'</span>)\n\ndef <span class=\"hljs-title function_\">update</span>():\n    chart.<span class=\"hljs-property\">options</span>[<span class=\"hljs-string\">'series'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'data'</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-title function_\">random</span>()\n    chart.<span class=\"hljs-title function_\">update</span>()\n\nui.<span class=\"hljs-title function_\">button</span>(<span class=\"hljs-string\">'Update'</span>, on_click=update)\n\nui.<span class=\"hljs-title function_\">run</span>()\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여기서 UI 모듈은 UI 요소를 만들 수 있도록합니다.\n이 예시에서 먼저 Highchart 요소를 생성하는데, 이에 w-full과 h-64의 tailwind 클래스를 할당합니다. w-full은 반응형으로 화면 전체를 가로로 사용하고 h-64는 높이를 지정합니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1162/1*IbE0mHsejGUzviDgE2He3g.gif\" alt=\"image\"></p>\n<p>버튼을 클릭하면 콜백 함수가 트리거됩니다. 이 콜백은 차트에 사용되는 데이터를 업데이트하고 그것을 순조롭게 다시 렌더링합니다.</p>\n<p>또한, 새로운 막대를 추가하기 위해 콜백을 변경할 수도 있습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">update</span>():\n    chart.<span class=\"hljs-property\">options</span>[<span class=\"hljs-string\">\"xAxis\"</span>][<span class=\"hljs-string\">\"categories\"</span>].<span class=\"hljs-title function_\">append</span>(random.<span class=\"hljs-title function_\">choice</span>(string.<span class=\"hljs-property\">ascii_uppercase</span>))\n    <span class=\"hljs-keyword\">for</span> series <span class=\"hljs-keyword\">in</span> chart.<span class=\"hljs-property\">options</span>[<span class=\"hljs-string\">'series'</span>]:\n        series[<span class=\"hljs-string\">\"data\"</span>].<span class=\"hljs-title function_\">append</span>(random.<span class=\"hljs-title function_\">random</span>())\n    chart.<span class=\"hljs-title function_\">update</span>()\n</code></pre>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*P-IGyImlGMvNFut9LluamA.gif\" alt=\"image\"></p>\n<p>또한 페이지를 새로 고침해도 데이터가 손실되지 않는다는 것을 알아두세요! 이것은 다른 Python UI 라이브러리로는 할 수 없는 일입니다. 이렇게 작동하는 이유는 데이터가 모든 사용자 사이에서 공유되기 때문이지만, 앱 저장소의 사용자 객체나 앱 저장소 브라우저같은 방법으로 데이터를 사용자별로 유지하는 방법이 많이 있습니다. @ui.page 데코레이터로 감싸기 위해 app.storage.user 객체나 app.storage.browser를 사용할 수 있습니다.</p>\n<p>하지만 주기적 타이머를 사용하여 UI를 업데이트하고 싶다면 어떻게 할까요? 쉽습니다! 버튼 요소를 ui.timer로 변경해주기만 하면 됩니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">ui.<span class=\"hljs-title function_\">timer</span>(<span class=\"hljs-number\">5</span>, callback=<span class=\"hljs-attr\">lambda</span>: (<span class=\"hljs-title function_\">update</span>(), ui.<span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-string\">\"데이터가 업데이트되었습니다\"</span>)))\n</code></pre>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*wwSF1ib9720JW1FlKDOc0g.gif\" alt=\"gif\"></p>\n<p>자, 이제 사용자가 범주를 선택한 다음 무작위로 Chuck Norris Fact를 생성할 수 있는 데모 앱을 만들어 봅시다.</p>\n<p>먼저, 여기에 메인 코드가 있습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests  <span class=\"hljs-comment\"># HTTP 요청을 만들기 위해 requests 라이브러리를 가져옵니다</span>\n<span class=\"hljs-keyword\">from</span> nicegui <span class=\"hljs-keyword\">import</span> ui  <span class=\"hljs-comment\"># NiceGUI 라이브러리에서 UI 구성 요소를 가져옵니다</span>\n<span class=\"hljs-keyword\">from</span> nicegui_app.header <span class=\"hljs-keyword\">import</span> add_head_html  <span class=\"hljs-comment\"># HTML 헤드 내용을 추가하는 함수를 가져옵니다</span>\n\n<span class=\"hljs-comment\"># Chuck Norris 사실 카테고리 목록</span>\nCATEGORIES = [\n    <span class=\"hljs-string\">\"동물\"</span>,\n    <span class=\"hljs-string\">\"직업\"</span>,\n    <span class=\"hljs-string\">\"연예인\"</span>,\n    <span class=\"hljs-string\">\"개발\"</span>,\n    <span class=\"hljs-string\">\"패션\"</span>,\n    <span class=\"hljs-string\">\"음식\"</span>,\n    <span class=\"hljs-string\">\"돈\"</span>,\n    <span class=\"hljs-string\">\"영화\"</span>,\n    <span class=\"hljs-string\">\"음악\"</span>,\n    <span class=\"hljs-string\">\"과학\"</span>,\n    <span class=\"hljs-string\">\"스포츠\"</span>,\n    <span class=\"hljs-string\">\"여행\"</span>,\n]\n\n<span class=\"hljs-comment\"># Chuck Norris 사실을 처리하는 클래스</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Fact</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.fact = <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># fact 속성을 None으로 초기화</span>\n\n    <span class=\"hljs-comment\"># 주어진 카테고리를 기반으로 사실을 업데이트하는 메서드</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_fact</span>(<span class=\"hljs-params\">self, category</span>):\n        url = <span class=\"hljs-string\">f\"https://api.chucknorris.io/jokes/random?category=<span class=\"hljs-subst\">{category}</span>\"</span>  <span class=\"hljs-comment\"># Chuck Norris API URL</span>\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):  <span class=\"hljs-comment\"># 유효한 사실을 가져오려고 최대 10번 시도</span>\n            result = requests.get(url)  <span class=\"hljs-comment\"># Chuck Norris API로 GET 요청을 보냄</span>\n\n            <span class=\"hljs-keyword\">if</span> result.status_code == <span class=\"hljs-number\">200</span>:  <span class=\"hljs-comment\"># 요청이 성공하면</span>\n                result_json = result.json()  <span class=\"hljs-comment\"># JSON 응답을 파싱</span>\n                <span class=\"hljs-keyword\">if</span> self.fact != result_json[<span class=\"hljs-string\">\"value\"</span>]:  <span class=\"hljs-comment\"># 가져온 사실이 현재 사실과 다르면</span>\n                    self.fact = result_json[<span class=\"hljs-string\">\"value\"</span>]  <span class=\"hljs-comment\"># 사실을 업데이트하고</span>\n                    <span class=\"hljs-keyword\">break</span>  <span class=\"hljs-comment\"># 루프를 종료</span>\n\n<span class=\"hljs-comment\"># Chuck Norris 사실 UI를 생성하는 함수</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chuck</span>():\n    add_head_html()  <span class=\"hljs-comment\"># NiceGUI 앱에 HTML 헤드 내용 추가</span>\n\n    default_value = CATEGORIES[<span class=\"hljs-number\">0</span>]  <span class=\"hljs-comment\"># Chuck Norris 사실의 기본 카테고리</span>\n\n    fact = Fact()  <span class=\"hljs-comment\"># Fact 클래스의 인스턴스 생성</span>\n    fact.update_fact(default_value)  <span class=\"hljs-comment\"># 기본 카테고리로 사실을 업데이트</span>\n\n    <span class=\"hljs-comment\"># 12개 열을 가진 그리드 레이아웃 생성</span>\n    <span class=\"hljs-keyword\">with</span> ui.grid(columns=<span class=\"hljs-number\">12</span>).classes(<span class=\"hljs-string\">\"w-full\"</span>):\n        <span class=\"hljs-comment\"># 카테고리 선택을 위한 열</span>\n        <span class=\"hljs-keyword\">with</span> ui.column().classes(<span class=\"hljs-string\">\"col-span-4 sm:col-span-2 space-x-0\"</span>):\n            ui.label(<span class=\"hljs-string\">\"사실 카테고리 선택:\"</span>)  <span class=\"hljs-comment\"># 카테고리 선택을 위한 레이블 표시</span>\n            <span class=\"hljs-comment\"># 카테고리 선택을 위한 라디오 버튼 그룹</span>\n            category = ui.radio(\n                CATEGORIES,\n                value=default_value,\n                on_change=<span class=\"hljs-keyword\">lambda</span> _: fact.update_fact(category.value),  <span class=\"hljs-comment\"># 카테고리가 변경되면 사실 업데이트</span>\n            ).classes(<span class=\"hljs-string\">\"w-full\"</span>)\n            <span class=\"hljs-comment\"># 선택한 카테고리에 대한 사실을 다시 생성하는 버튼</span>\n            ui.button(\n                <span class=\"hljs-string\">\"⟳ 다시 생성\"</span>, on_click=<span class=\"hljs-keyword\">lambda</span> _: fact.update_fact(category.value)\n            )\n\n        <span class=\"hljs-comment\"># Chuck Norris 사실을 표시하는 열</span>\n        <span class=\"hljs-keyword\">with</span> ui.column().classes(\n            <span class=\"hljs-string\">\"flex col-span-8 sm:col-span-10 w-full justify-center mx-auto max-w-screen-md\"</span>\n        ):\n            <span class=\"hljs-comment\"># Chuck Norris 사실을 표시하기 위한 레이블, Fact 인스턴스의 fact 속성에 바인딩</span>\n            ui.label().bind_text_from(fact, <span class=\"hljs-string\">\"fact\"</span>).classes(\n                <span class=\"hljs-string\">\"text-lg sm:text-3xl text-gray-800 bg-gray-100 rounded-lg shadow-lg p-6\"</span>\n            )\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Fact</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.fact = <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># fact 속성을 None으로 초기화합니다.</span>\n\n    <span class=\"hljs-comment\"># 주어진 카테고리에 따라 팩트를 업데이트하는 메소드</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_fact</span>(<span class=\"hljs-params\">self, category</span>):\n        url = <span class=\"hljs-string\">f\"https://api.chucknorris.io/jokes/random?category=<span class=\"hljs-subst\">{category}</span>\"</span>  <span class=\"hljs-comment\"># 척 노리스 API의 URL입니다.</span>\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):  <span class=\"hljs-comment\"># 유효한 팩트를 가져오기 위해 최대 10번 시도합니다.</span>\n            result = requests.get(url)  <span class=\"hljs-comment\"># 척 노리스 API에 GET 요청을 보냅니다.</span>\n\n            <span class=\"hljs-keyword\">if</span> result.status_code == <span class=\"hljs-number\">200</span>:  <span class=\"hljs-comment\"># 요청이 성공한 경우</span>\n                result_json = result.json()  <span class=\"hljs-comment\"># JSON 응답을 파싱합니다.</span>\n                <span class=\"hljs-keyword\">if</span> self.fact != result_json[<span class=\"hljs-string\">\"value\"</span>]:  <span class=\"hljs-comment\"># 가져온 팩트가 현재 팩트와 다른 경우</span>\n                    self.fact = result_json[<span class=\"hljs-string\">\"value\"</span>]  <span class=\"hljs-comment\"># 팩트 속성을 업데이트합니다.</span>\n                    <span class=\"hljs-keyword\">break</span>  <span class=\"hljs-comment\"># 루프를 종료합니다</span>\n</code></pre>\n<p>이 클래스는 \"fact\" 속성에 팩트를 저장하고 Chuck Norris 팩트 API를 호출하는 update_fact 메소드를 가지고 있습니다. <a href=\"https://api.chucknorris.io\" rel=\"nofollow\" target=\"_blank\">https://api.chucknorris.io</a></p>\n<p>다음으로, \"chuck\" 함수에서 페이지를 정의합니다. NiceGUI는 여러 모듈과 Python 파일을 거쳐 앱을 정의할 수 있는 모듈식 접근 방식을 채택합니다.</p>\n<p>우리는 데이터 클래스의 인스턴스인 fact = Fact()을 정의합니다. 이는 각 사용자별로 구체적인 인스턴스입니다. 그리고 다음으로 update_fact 메소드를 사용하여 팩트를 초기화합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 UI 요소를 정의하기 시작합니다.</p>\n<p>두 개의 열을 갖는 그리드를 정의합니다:</p>\n<ul>\n<li>카테고리 옵션 및 생성 버튼이있는 첫 번째 열입니다. 이 열은 다음과 같은 tailwind 클래스를 갖습니다: col-span-4 sm:col-span-2. 이것은 매우 작은 화면의 경우 화면의 4/12을 사용하고, 그렇지 않으면 화면의 2/12을 사용합니다. 이렇게 함으로써 디자인을 모바일 전화에서도 작동하게 할 수 있습니다.</li>\n<li>사실을 표시할 두 번째 열입니다.</li>\n</ul>\n<p>첫 번째 열을 위해:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>라디오 메뉴 <code>ui.radio</code>.</li>\n<li>무작위 사실을 생성하는 버튼이 있습니다.</li>\n</ul>\n<p>두 요소 모두 클릭되거나 변경될 때 <code>fact.update_fact</code>를 호출하는 콜백을 사용합니다.</p>\n<p>두 번째 열에 대해서:</p>\n<ul>\n<li><code>fact.fact</code> 값을 바인딩하는 <code>ui.label</code>이 있습니다. 이 변수가 변경될 때마다 디스플레이가 자동으로 업데이트됩니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래에 있는 테일윈드 클래스를 가진 레이블입니다: text-lg sm:text-3xl 이렇게 하면 텍스트가 작은 화면에서 더 작아집니다.</p>\n<p>다음 앱을 얻게 되요:</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*ElNrpcoZndHh1If8Cme9kQ.gif\" alt=\"앱 이미지\"></p>\n<p>멋지죠?</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>배포</h2>\n<p>앱을 배포하는 것은 쉬워요! 예를 들어 CloudRun을 사용하면 매우 간단해요. Dockerfile을 생성한 다음 다음 gcloud 명령어를 실행하기만 하면 돼요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">PROJECT_ID</span>=$(gcloud config get-value project)\n<span class=\"hljs-variable constant_\">REPO</span>=<span class=\"hljs-string\">\"demo\"</span>\n<span class=\"hljs-variable constant_\">LOCATION</span>=<span class=\"hljs-string\">\"europe-west1\"</span>\n<span class=\"hljs-variable constant_\">IMAGE</span>=<span class=\"hljs-string\">\"nicegui_app\"</span>\n<span class=\"hljs-variable constant_\">SERVICE_NAME</span>=<span class=\"hljs-string\">\"nicegui-app\"</span>\n<span class=\"hljs-variable constant_\">VERSION</span>=<span class=\"hljs-string\">\"0.0.1\"</span>\n<span class=\"hljs-variable constant_\">GAR_TAG</span>=$LOCATION-docker.<span class=\"hljs-property\">pkg</span>.<span class=\"hljs-property\">dev</span>/$PROJECT_ID/$REPO/<span class=\"hljs-attr\">$IMAGE</span>:$VERSION\n\n# 저장소 생성\ngcloud artifacts repositories create $REPO --repository-format=docker \\\n    --location=$LOCATION --description=<span class=\"hljs-string\">\"Docker repository\"</span> \\\n    --project=$PROJECT_ID  || <span class=\"hljs-literal\">true</span> # 이미 존재하는 경우를 위해 실패해도 괜찮아요\n\n# 이미지 빌드\ngcloud builds submit --tag $GAR_TAG\n\n# <span class=\"hljs-title class_\">Cloud</span> <span class=\"hljs-title class_\">Run</span> 배포\ngcloud run deploy $SERVICE_NAME --image=$GAR_TAG --max-instances=<span class=\"hljs-number\">1</span> --min-instances=<span class=\"hljs-number\">0</span> --port=<span class=\"hljs-number\">8080</span> \\\n --allow-unauthenticated --region=europe-west1 --memory=<span class=\"hljs-number\">0.</span>5Gi --cpu=<span class=\"hljs-number\">1</span> -q --no-cpu-throttling --session-affinity\n</code></pre>\n<p>이렇게 하면 클라우드 빌드를 사용하여 도커 이미지를 빌드한 다음 CloudRun에 배포할 수 있어요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여기서 유일한 키큰 옵션은 다음과 같습니다: \"— no-cpu-throttling — session-affinity\". 이를 통해 동일한 사용자가 가능한 경우 동일한 컨테이너로 라우팅되고 요청 사이에 CPU가 활성 상태로 유지됩니다.</p>\n<p>마지막으로</p>\n<p>NiceGUI는 파이썬을 사용해 빠르고 쉽게 사용자 인터페이스를 만들고 싶을 때 좋은 선택입니다. 여기에서는 내부 상태를 완전히 제어하고 테스트하고 쉽게 배포할 수 있는 강력한 파이썬 앱을 구축할 수 있습니다. 이를 통해 데이터 과학 프로젝트에서도 도구로 제한받지 않고 창의성을 발휘할 수 있을 것입니다.</p>\n<p>여기에 표시된 내용은 NiceGUI로 할 수 있는 작은 부분에 불과합니다. 아래 링크를 따라가면 더 많은 것을 배울 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>자원:</p>\n<ul>\n<li>Chuck Norris (매우 과장된) 사실 API: <a href=\"https://api.chucknorris.io/\" rel=\"nofollow\" target=\"_blank\">https://api.chucknorris.io/</a></li>\n<li>NiceGUI 문서: <a href=\"https://nicegui.io/documentation\" rel=\"nofollow\" target=\"_blank\">https://nicegui.io/documentation</a></li>\n<li>NiceGUI 예제: <a href=\"https://github.com/zauberzeug/nicegui/tree/main/examples\" rel=\"nofollow\" target=\"_blank\">https://github.com/zauberzeug/nicegui/tree/main/examples</a></li>\n<li>이 게시물의 코드: <a href=\"https://github.com/CVxTz/nicegui_tutorial\" rel=\"nofollow\" target=\"_blank\">https://github.com/CVxTz/nicegui_tutorial</a></li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}