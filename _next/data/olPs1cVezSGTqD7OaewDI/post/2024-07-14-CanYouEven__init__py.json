{"pageProps":{"post":{"title":"__init__py 파일 제대로 이해하고 사용하기","description":"","date":"2024-07-14 19:53","slug":"2024-07-14-CanYouEven__init__py","content":"\n\n다른 폴더에서 코드를 가져올 때 항상 빈 __init__.py 파일을 넣습니다. 이것은 대부분의 파이썬 개발자들에게 거의 반복적인 습관이 되었습니다 - 초보자든 마법사든. 그러나 우리는 __init__.py에 대해 정말로 알고 있을까요?\n\n이 블로그 포스트에서는 __init__.py가 어떻게 작동하는지와 비어있지 않은 __init__.py가 우리 파이썬 개발자로서 어떻게 도움이 되는지 세 가지 방법을 살펴보겠습니다.\n\n## __init__.py란 무엇인가요?\n\n__init__.py는 폴더를 패키지로 취급해야 한다는 것을 파이썬 해석기에 알려주는 파이썬 파일입니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n컴파일된 언어인 C 및 C++과 달리, Python의 인터프리터는 필요한 종속성을 실시간으로 가져옵니다. Python에게 코드를 다른 곳에서 사용할 것이라고 신호를 보내려면 폴더에 __init__.py를 넣으면 됩니다.\n\n그래서 __init__.py를 게이트키퍼로 생각해보세요. 이 파일은 폴더를 가져올 수 있는 Python 패키지로 변환시켜줍니다.\n\n![이미지](/TIL/assets/img/2024-07-14-CanYouEven__init__py_0.png)\n\n하지만 __init__.py는 그 이상입니다. Python에서 클래스를 만들 때 종종 __init__ 함수를 생성해야합니다. 이 함수는 객체가 어떻게 구성되어야 하는지를 정의하며 클래스의 객체가 생성될 때 가장 먼저 실행됩니다. 같은 방식으로, __init__.py는 Python 패키지의 생성자입니다. 패키지가 가져올 때마다 먼저 실행됩니다. 빈 __init__.py는 Python 패키지의 빈 __init__ 생성자 메서드를 의미합니다. 괜찮지만 더 많은 일을 할 수 없다는 뜻은 아닙니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## __init__.py 주의해서 사용하기\n\n__init__.py는 파이썬 패키지의 생성자이므로, __init__.py를 어디에 두는지에 대해 신중해야 합니다.\n\n날짜 형식을 처리하는 몇 가지 사용자 정의 유틸리티 함수가 있는 datetime이라는 폴더가 있다고 가정해봅시다:\n\n```python\n# ./datetime/utils.py\n\ndef increment_date(date: int, increment: int) -> int:\n    \"\"\"밀리초 단위로 타임스탬프 증가\"\"\"\n    return date + increment\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리는 그런 다음 __init__.py를 추가해서 main.py에서 코드를 가져올 수 있도록합니다:\n\n```js\nmyfolder\n│\n├── datetime\n│   ├── __init__.py\n│   └── utils.py\n└── main.py\n```\n\n```js\n# main.py\n\nfrom datetime.utils import increment_date\nfrom datetime import datetime\n\ndef main():\n    timestamp = datetime.timestamp(datetime(2024, 2, 27))\n    print(increment_date(timestamp, increment=10))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n만약 main.py를 실행하면 무엇이 일어날까요?\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nImportError: `datetime` 모듈에서 `datetime`을 가져올 수 없습니다.\n\n보통, Python 인터프리터는 패키지 발견 과정을 (1) 로컬 디렉토리, (2) 표준 라이브러리, 그리고 (3) 설치된 Python 모듈의 순서로 우선시합니다.\n\ndatetime이라는 이름의 폴더에 __init__.py를 넣음으로써, 우리는 datetime이라는 파이썬 표준 라이브러리를 재정의했기 때문에 datetime.datetime을 가져오는 명령문이 실패했습니다.\n\n이 문제를 피하려면 매우 간단한 수정이 필요합니다: 다른 Python 표준 라이브러리나 설치된 Python 모듈과 동일한 이름을 가진 폴더 아래에 __init__.py를 넣지 않도록 항상 주의하십시오.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n__init__.py가 어떻게 작동하는지 이해하면, 이것을 활용하여 할 수 있는 좀 더 멋진 것들을 살펴보겠습니다!\n\n## 1. 패키지 레벨 설정 정의하기\n\n만약 코드 내 모든 Python 파일이 유사한 설정을 공유한다면 어떨까요? 로깅 레벨, 상수, 환경 변수 등. 당신의 패키지 내 모든 Python 파일 상단에 설정을 지정하는 대신, 이를 모두 __init__.py에 포함시킬 수 있습니다.\n\n```python\n# myfolder/__init__.py\n\nimport os\nimport logging\n\n# 패키지 전체의 환경 변수를 로드합니다.\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\", None)\n\n# 패키지 레벨 상수를 설정합니다.\nMODEL = \"gpt-4\"\n\n# 로깅 구성을 설정할 수도 있습니다.\nlogging.basicConfig(level=logging.INFO)\n\n# 패키지 내에서 편리하게 재사용할 수 있는 사용자 지정 데코레이터를 추가하세요.\ndef foo(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        logging.info(f\"함수 호출 중: {func.__name__}\")\n        result = func(*args, **kwargs)\n        logging.info(f\"함수 {func.__name__} 실행 완료\")\n        return result\n    return wrapper\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n당신의 코드베이스에서는 다음과 같이 할 수 있습니다:\n\n```js\n# myfolder/bar.py\n\n# 패키지 __init__.py에서 상대적인 임포트\nfrom . import OPENAI_API_KEY, MODEL, foo\n\nfrom openai import OpenAI\nfrom typing import Optional\n\nclient = OpenAI()\n\n@foo\ndef chat_with_openai(prompt: str, llm: Optional[str] = None) -> Any:\n    \"\"\"Prompt를 LLM에 보내고 응답을 반환합니다\"\"\"\n    llm = llm or MODEL\n    \n    return client.chat.completions.create(\n              model=llm,\n              messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                {\"role\": \"user\", \"content\": prompt}\n              ]\n            )\n```\n\n위 내용에 추가하여 다음과 같은 작업도 가능합니다:\n\n- 기능 플래깅\n- 고급 로거 구성 (예: 모든 로그를 폴더에 저장)\n- 기본 매개변수 설정 (예: 출력 디렉토리가 제공되지 않은 경우 X에 저장)\n- 사용 모니터링 (예: 모든 함수 호출을 클라우드 인스턴스로 보내는 사용자 지정 데코레이터)\n- 테마 사용자 정의/정의 (예: 언어 로캘, 라이트/다크 테마)\n- 사용자 정의 데코레이터로 오류 처리 중앙화\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 2. 패키지 가져오기 단순화\n\n코드베이스가 복잡해지면 더 많은 클래스와 함수를 추가하게 될 것입니다. 코드를 응집된 단위로 분리하는 원칙에 따라, 아래와 같은 구조가 생길 수 있습니다:\n\n```js\nfoo\n│\n├── llm_email_responder\n│   ├── __init__.py\n│   ├── base_email_responder.py\n│   ├── mail_chimp_responder.py\n│   ├── zoho_mail_responder.py\n│   └── send_grid_responder.py\n└── __init__.py\n```\n\nMailChimp에 대한 LLM 이메일 응답기를 사용하려면 다음이 필요합니다:\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfrom foo.llm_email_responder.mail_chimp_responder import MailChimpResponder\n```\n\n곧 여러 줄의 비슷한 import 문이 생겨나게 되어 코드베이스의 내부 구조를 기억하기 어렵게 만들 수 있습니다. \n\n__init__.py는 import를 정리하고 코드베이스의 더 낮은 수준의 부분을 보호하면서 개발 경험을 단순화하는 데 사용할 수 있습니다.\n\n```js\n# ./foo/llm_email_responder/__init__.py\n\n# 사용자가 더 높은 수준의 구현만큼 자주 사용하지 않을 것으로 예상되므로\n# 가장 낮은 수준의 이메일 응답기는 건너뜁니다.\nfrom .mail_chimp_responder import MailChimpResponder\nfrom .zoho_mail_responder import ZohoResponder\nfrom .send_grid_responder import SendGridResponder\n\n__all__ = [\n    \"MailChimpResponder\",\n    \"ZohoResponder\",\n    \"SendGridResponder\",\n]\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 __init__.py와 함께, 이제 다음과 같이 응답기에 액세스할 수 있습니다:\n\n```js\nfrom foo.llm_email_responder import MailChimpResponder\n```\n\n이것은 개발자 친화적 인터페이스에서 하위 수준의 코드를 노출하는 편리한 방법이지만, 하위 수준 코드베이스에 대한 변경은 반드시 __init__.py의 변경과 일치해야 함으로 유지 보수 노력이 증가할 것입니다. 또한 하위 수준의 코드 베이스를 노출하는 것이 일관된 아키텍처를 형성하는지 여부를 평가해야 합니다.\n\n## 싱글톤 패턴\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n싱글톤 디자인 패턴을 적용하려면 __init__.py를 사용할 수도 있어요. 이렇게 하면 패키지 전체가 __init__.py에서 인스턴스화한 동일한 인스턴스를 사용하도록 강제됩니다.\n\n만약 패키지가 원격 서비스에 연결을 설정하거나 대규모 데이터셋을로드하거나, 무거운 작업을 요구하는 어떤 전제조건이 필요하다면, 이 방법이 아주 편리할 거예요.\n\n예를 들어 금융 보고서를 조작하는 LLM 필요를 처리하기 위해 Gemini Pro에 연결해야 한다고 해보죠.\n\n```js\nfoo\n│\n├── report_analyser\n│   ├── __init__.py\n│   ├── outline_extraction.py\n│   └── entity_extraction.py\n└── __init__.py\n```\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n# .foo/report_analyser/outline_extraction\nfrom langchain_google_vertexai import VertexAI\n\ndef extract_outline(page: str, **kwargs) -> str:\n    llm = VertexAI(\n        model_name=\"gemini-pro\", location=\"europe-west2\", **kwargs\n    )\n    prompt_template = \"\"\"...<Your prompt template here>...\"\"\"\n    prompt = prompt_template.format_prompt(page=page)\n    return llm.invoke(prompt)\n\n\n\n# .foo/report_analyser/entity_extraction\nfrom langchain_google_vertexai import VertexAI\n\ndef extract_entities(page: str, **kwargs) -> str:\n    llm = VertexAI(\n        model_name=\"gemini-pro\", location=\"europe-west2\", **kwargs\n    )\n    prompt_template = \"\"\"...<Your prompt template here>...\"\"\"\n    prompt = prompt_template.format_prompt(page=page)\n    return llm.invoke(prompt)\n\n\n\n# .foo/report_analyser/entity_extraction\nfrom foo.report_analyser.outline_extraction import extract_outline\nfrom foo.report_analyser.entity_extraction import extract_entities\n\ndef main():\n    page = \"Long page of document here\"\n\n    # A connection to VertexAI will be created for\n    # extracting outline\n    outline = extract_outline(page, temperature=0.2)\n\n    # Another connection to VertexAI will be created\n    # for extracting entities\n    entities = extract_entities(page, temperature=0.2)\n\n\n각 작업을 실행할 때마다 코드베이스가 VertexAI와 새로운 연결을 생성하여 불필요한 네트워크 오버헤드가 발생합니다. 만약 Gemini Pro에 대해 동일한 구성을 사용할 계획이라면, 대신 다음을 수행할 수 있습니다:\n\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# .foo/report_analyser/__init__.py\nfrom langchain_google_vertexai import VertexAI\n\nDEFAULT_LLM = VertexAI(\n    model_name=\"gemini-pro\",\n    location=\"europe-west2\",\n    temperature=0.2,\n)\n```\n\n```js\n# .foo/report_analyser/outline_extraction\nfrom . import DEFAULT_LLM\n\nfrom typing import Dict\n\ndef extract_outline(\n    page: str,\n    custom_llm_parameters: Optional[Dict] = None\n) -> str:\n    \n    if custom_llm_parameters is None:\n        llm = DEFAULT_LLM\n    else:\n        llm = VertexAI(\n            model_name=\"gemini-pro\",\n            location=\"europe-west2\",\n            **custom_llm_parameters\n        )\n    prompt_template = \"\"\"...<Your prompt template here>...\"\"\"\n    prompt = prompt_template.format_prompt(page=page)\n    return llm.invoke(prompt)\n```\n\n코드를 개선하려면, __init__.py에서 LLM 연결을 생성하는 부분을 분리하여 별도의 파일로 만들어 LLM 연결 관리자를 만들 수 있습니다. @lru_cache와 결합하면 사용자 정의 구성을 더 효율적으로 처리하고 있는 것을 알 수 있을 것입니다.\n\n__init__.py에 대해 무엇인지 배우고 더 잘 활용하는 방법에 대한 아이디어를 얻었기를 바랍니다.\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파이썬에 대해 더 알고 싶다면, 파이썬에 관한 다른 블로그를 확인해보세요!\n\n다음에 또 만나요, Louis입니다.","ogImage":{"url":"/TIL/assets/img/2024-07-14-CanYouEven__init__py_0.png"},"coverImage":"/TIL/assets/img/2024-07-14-CanYouEven__init__py_0.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>다른 폴더에서 코드를 가져올 때 항상 빈 <strong>init</strong>.py 파일을 넣습니다. 이것은 대부분의 파이썬 개발자들에게 거의 반복적인 습관이 되었습니다 - 초보자든 마법사든. 그러나 우리는 <strong>init</strong>.py에 대해 정말로 알고 있을까요?</p>\n<p>이 블로그 포스트에서는 <strong>init</strong>.py가 어떻게 작동하는지와 비어있지 않은 <strong>init</strong>.py가 우리 파이썬 개발자로서 어떻게 도움이 되는지 세 가지 방법을 살펴보겠습니다.</p>\n<h2><strong>init</strong>.py란 무엇인가요?</h2>\n<p><strong>init</strong>.py는 폴더를 패키지로 취급해야 한다는 것을 파이썬 해석기에 알려주는 파이썬 파일입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>컴파일된 언어인 C 및 C++과 달리, Python의 인터프리터는 필요한 종속성을 실시간으로 가져옵니다. Python에게 코드를 다른 곳에서 사용할 것이라고 신호를 보내려면 폴더에 <strong>init</strong>.py를 넣으면 됩니다.</p>\n<p>그래서 <strong>init</strong>.py를 게이트키퍼로 생각해보세요. 이 파일은 폴더를 가져올 수 있는 Python 패키지로 변환시켜줍니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-14-CanYouEven__init__py_0.png\" alt=\"이미지\"></p>\n<p>하지만 <strong>init</strong>.py는 그 이상입니다. Python에서 클래스를 만들 때 종종 <strong>init</strong> 함수를 생성해야합니다. 이 함수는 객체가 어떻게 구성되어야 하는지를 정의하며 클래스의 객체가 생성될 때 가장 먼저 실행됩니다. 같은 방식으로, <strong>init</strong>.py는 Python 패키지의 생성자입니다. 패키지가 가져올 때마다 먼저 실행됩니다. 빈 <strong>init</strong>.py는 Python 패키지의 빈 <strong>init</strong> 생성자 메서드를 의미합니다. 괜찮지만 더 많은 일을 할 수 없다는 뜻은 아닙니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2><strong>init</strong>.py 주의해서 사용하기</h2>\n<p><strong>init</strong>.py는 파이썬 패키지의 생성자이므로, <strong>init</strong>.py를 어디에 두는지에 대해 신중해야 합니다.</p>\n<p>날짜 형식을 처리하는 몇 가지 사용자 정의 유틸리티 함수가 있는 datetime이라는 폴더가 있다고 가정해봅시다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># ./datetime/utils.py</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">increment_date</span>(<span class=\"hljs-params\">date: <span class=\"hljs-built_in\">int</span>, increment: <span class=\"hljs-built_in\">int</span></span>) -> <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">\"\"\"밀리초 단위로 타임스탬프 증가\"\"\"</span>\n    <span class=\"hljs-keyword\">return</span> date + increment\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>우리는 그런 다음 <strong>init</strong>.py를 추가해서 main.py에서 코드를 가져올 수 있도록합니다:</p>\n<pre><code class=\"hljs language-js\">myfolder\n│\n├── datetime\n│   ├── __init__.<span class=\"hljs-property\">py</span>\n│   └── utils.<span class=\"hljs-property\">py</span>\n└── main.<span class=\"hljs-property\">py</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"># main.<span class=\"hljs-property\">py</span>\n\n<span class=\"hljs-keyword\">from</span> datetime.<span class=\"hljs-property\">utils</span> <span class=\"hljs-keyword\">import</span> increment_date\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\n\ndef <span class=\"hljs-title function_\">main</span>():\n    timestamp = datetime.<span class=\"hljs-title function_\">timestamp</span>(<span class=\"hljs-title function_\">datetime</span>(<span class=\"hljs-number\">2024</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">27</span>))\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">increment_date</span>(timestamp, increment=<span class=\"hljs-number\">10</span>))\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-title function_\">main</span>()\n</code></pre>\n<p>만약 main.py를 실행하면 무엇이 일어날까요?</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>ImportError: <code>datetime</code> 모듈에서 <code>datetime</code>을 가져올 수 없습니다.</p>\n<p>보통, Python 인터프리터는 패키지 발견 과정을 (1) 로컬 디렉토리, (2) 표준 라이브러리, 그리고 (3) 설치된 Python 모듈의 순서로 우선시합니다.</p>\n<p>datetime이라는 이름의 폴더에 <strong>init</strong>.py를 넣음으로써, 우리는 datetime이라는 파이썬 표준 라이브러리를 재정의했기 때문에 datetime.datetime을 가져오는 명령문이 실패했습니다.</p>\n<p>이 문제를 피하려면 매우 간단한 수정이 필요합니다: 다른 Python 표준 라이브러리나 설치된 Python 모듈과 동일한 이름을 가진 폴더 아래에 <strong>init</strong>.py를 넣지 않도록 항상 주의하십시오.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><strong>init</strong>.py가 어떻게 작동하는지 이해하면, 이것을 활용하여 할 수 있는 좀 더 멋진 것들을 살펴보겠습니다!</p>\n<h2>1. 패키지 레벨 설정 정의하기</h2>\n<p>만약 코드 내 모든 Python 파일이 유사한 설정을 공유한다면 어떨까요? 로깅 레벨, 상수, 환경 변수 등. 당신의 패키지 내 모든 Python 파일 상단에 설정을 지정하는 대신, 이를 모두 <strong>init</strong>.py에 포함시킬 수 있습니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># myfolder/__init__.py</span>\n\n<span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> logging\n\n<span class=\"hljs-comment\"># 패키지 전체의 환경 변수를 로드합니다.</span>\nOPENAI_API_KEY = os.getenv(<span class=\"hljs-string\">\"OPENAI_API_KEY\"</span>, <span class=\"hljs-literal\">None</span>)\n\n<span class=\"hljs-comment\"># 패키지 레벨 상수를 설정합니다.</span>\nMODEL = <span class=\"hljs-string\">\"gpt-4\"</span>\n\n<span class=\"hljs-comment\"># 로깅 구성을 설정할 수도 있습니다.</span>\nlogging.basicConfig(level=logging.INFO)\n\n<span class=\"hljs-comment\"># 패키지 내에서 편리하게 재사용할 수 있는 사용자 지정 데코레이터를 추가하세요.</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">func</span>):\n<span class=\"hljs-meta\">    @wraps(<span class=\"hljs-params\">func</span>)</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">wrapper</span>(<span class=\"hljs-params\">*args, **kwargs</span>):\n        logging.info(<span class=\"hljs-string\">f\"함수 호출 중: <span class=\"hljs-subst\">{func.__name__}</span>\"</span>)\n        result = func(*args, **kwargs)\n        logging.info(<span class=\"hljs-string\">f\"함수 <span class=\"hljs-subst\">{func.__name__}</span> 실행 완료\"</span>)\n        <span class=\"hljs-keyword\">return</span> result\n    <span class=\"hljs-keyword\">return</span> wrapper\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>당신의 코드베이스에서는 다음과 같이 할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"># myfolder/bar.<span class=\"hljs-property\">py</span>\n\n# 패키지 __init__.<span class=\"hljs-property\">py</span>에서 상대적인 임포트\n<span class=\"hljs-keyword\">from</span> . <span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">OPENAI_API_KEY</span>, <span class=\"hljs-variable constant_\">MODEL</span>, foo\n\n<span class=\"hljs-keyword\">from</span> openai <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">OpenAI</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Optional</span>\n\nclient = <span class=\"hljs-title class_\">OpenAI</span>()\n\n@foo\ndef <span class=\"hljs-title function_\">chat_with_openai</span>(<span class=\"hljs-attr\">prompt</span>: str, <span class=\"hljs-attr\">llm</span>: <span class=\"hljs-title class_\">Optional</span>[str] = <span class=\"hljs-title class_\">None</span>) -> <span class=\"hljs-title class_\">Any</span>:\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"Prompt를 LLM에 보내고 응답을 반환합니다\"</span><span class=\"hljs-string\">\"\"</span>\n    llm = llm or <span class=\"hljs-variable constant_\">MODEL</span>\n    \n    <span class=\"hljs-keyword\">return</span> client.<span class=\"hljs-property\">chat</span>.<span class=\"hljs-property\">completions</span>.<span class=\"hljs-title function_\">create</span>(\n              model=llm,\n              messages=[\n                {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"system\"</span>, <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"You are a helpful assistant.\"</span>},\n                {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-string\">\"content\"</span>: prompt}\n              ]\n            )\n</code></pre>\n<p>위 내용에 추가하여 다음과 같은 작업도 가능합니다:</p>\n<ul>\n<li>기능 플래깅</li>\n<li>고급 로거 구성 (예: 모든 로그를 폴더에 저장)</li>\n<li>기본 매개변수 설정 (예: 출력 디렉토리가 제공되지 않은 경우 X에 저장)</li>\n<li>사용 모니터링 (예: 모든 함수 호출을 클라우드 인스턴스로 보내는 사용자 지정 데코레이터)</li>\n<li>테마 사용자 정의/정의 (예: 언어 로캘, 라이트/다크 테마)</li>\n<li>사용자 정의 데코레이터로 오류 처리 중앙화</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>2. 패키지 가져오기 단순화</h2>\n<p>코드베이스가 복잡해지면 더 많은 클래스와 함수를 추가하게 될 것입니다. 코드를 응집된 단위로 분리하는 원칙에 따라, 아래와 같은 구조가 생길 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">foo\n│\n├── llm_email_responder\n│   ├── __init__.<span class=\"hljs-property\">py</span>\n│   ├── base_email_responder.<span class=\"hljs-property\">py</span>\n│   ├── mail_chimp_responder.<span class=\"hljs-property\">py</span>\n│   ├── zoho_mail_responder.<span class=\"hljs-property\">py</span>\n│   └── send_grid_responder.<span class=\"hljs-property\">py</span>\n└── __init__.<span class=\"hljs-property\">py</span>\n</code></pre>\n<p>MailChimp에 대한 LLM 이메일 응답기를 사용하려면 다음이 필요합니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> foo.<span class=\"hljs-property\">llm_email_responder</span>.<span class=\"hljs-property\">mail_chimp_responder</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MailChimpResponder</span>\n</code></pre>\n<p>곧 여러 줄의 비슷한 import 문이 생겨나게 되어 코드베이스의 내부 구조를 기억하기 어렵게 만들 수 있습니다.</p>\n<p><strong>init</strong>.py는 import를 정리하고 코드베이스의 더 낮은 수준의 부분을 보호하면서 개발 경험을 단순화하는 데 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"># ./foo/llm_email_responder/__init__.<span class=\"hljs-property\">py</span>\n\n# 사용자가 더 높은 수준의 구현만큼 자주 사용하지 않을 것으로 예상되므로\n# 가장 낮은 수준의 이메일 응답기는 건너뜁니다.\n<span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">mail_chimp_responder</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MailChimpResponder</span>\n<span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">zoho_mail_responder</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ZohoResponder</span>\n<span class=\"hljs-keyword\">from</span> .<span class=\"hljs-property\">send_grid_responder</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">SendGridResponder</span>\n\n__all__ = [\n    <span class=\"hljs-string\">\"MailChimpResponder\"</span>,\n    <span class=\"hljs-string\">\"ZohoResponder\"</span>,\n    <span class=\"hljs-string\">\"SendGridResponder\"</span>,\n]\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 <strong>init</strong>.py와 함께, 이제 다음과 같이 응답기에 액세스할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> foo.<span class=\"hljs-property\">llm_email_responder</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MailChimpResponder</span>\n</code></pre>\n<p>이것은 개발자 친화적 인터페이스에서 하위 수준의 코드를 노출하는 편리한 방법이지만, 하위 수준 코드베이스에 대한 변경은 반드시 <strong>init</strong>.py의 변경과 일치해야 함으로 유지 보수 노력이 증가할 것입니다. 또한 하위 수준의 코드 베이스를 노출하는 것이 일관된 아키텍처를 형성하는지 여부를 평가해야 합니다.</p>\n<h2>싱글톤 패턴</h2>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>싱글톤 디자인 패턴을 적용하려면 <strong>init</strong>.py를 사용할 수도 있어요. 이렇게 하면 패키지 전체가 <strong>init</strong>.py에서 인스턴스화한 동일한 인스턴스를 사용하도록 강제됩니다.</p>\n<p>만약 패키지가 원격 서비스에 연결을 설정하거나 대규모 데이터셋을로드하거나, 무거운 작업을 요구하는 어떤 전제조건이 필요하다면, 이 방법이 아주 편리할 거예요.</p>\n<p>예를 들어 금융 보고서를 조작하는 LLM 필요를 처리하기 위해 Gemini Pro에 연결해야 한다고 해보죠.</p>\n<pre><code class=\"hljs language-js\">foo\n│\n├── report_analyser\n│   ├── __init__.<span class=\"hljs-property\">py</span>\n│   ├── outline_extraction.<span class=\"hljs-property\">py</span>\n│   └── entity_extraction.<span class=\"hljs-property\">py</span>\n└── __init__.<span class=\"hljs-property\">py</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>.foo/report_analyser/outline_extraction</h1>\n<p>from langchain_google_vertexai import VertexAI</p>\n<p>def extract_outline(page: str, **kwargs) -> str:\nllm = VertexAI(\nmodel_name=\"gemini-pro\", location=\"europe-west2\", **kwargs\n)\nprompt_template = \"\"\"...<your prompt=\"\" template=\"\" here=\"\">...\"\"\"\nprompt = prompt_template.format_prompt(page=page)\nreturn llm.invoke(prompt)</your></p>\n<h1>.foo/report_analyser/entity_extraction</h1>\n<p>from langchain_google_vertexai import VertexAI</p>\n<p>def extract_entities(page: str, **kwargs) -> str:\nllm = VertexAI(\nmodel_name=\"gemini-pro\", location=\"europe-west2\", **kwargs\n)\nprompt_template = \"\"\"...<your prompt=\"\" template=\"\" here=\"\">...\"\"\"\nprompt = prompt_template.format_prompt(page=page)\nreturn llm.invoke(prompt)</your></p>\n<h1>.foo/report_analyser/entity_extraction</h1>\n<p>from foo.report_analyser.outline_extraction import extract_outline\nfrom foo.report_analyser.entity_extraction import extract_entities</p>\n<p>def main():\npage = \"Long page of document here\"</p>\n<pre><code># A connection to VertexAI will be created for\n# extracting outline\noutline = extract_outline(page, temperature=0.2)\n\n# Another connection to VertexAI will be created\n# for extracting entities\nentities = extract_entities(page, temperature=0.2)\n</code></pre>\n<p>각 작업을 실행할 때마다 코드베이스가 VertexAI와 새로운 연결을 생성하여 불필요한 네트워크 오버헤드가 발생합니다. 만약 Gemini Pro에 대해 동일한 구성을 사용할 계획이라면, 대신 다음을 수행할 수 있습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># .<span class=\"hljs-property\">foo</span>/report_analyser/__init__.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> langchain_google_vertexai <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">VertexAI</span>\n\n<span class=\"hljs-variable constant_\">DEFAULT_LLM</span> = <span class=\"hljs-title class_\">VertexAI</span>(\n    model_name=<span class=\"hljs-string\">\"gemini-pro\"</span>,\n    location=<span class=\"hljs-string\">\"europe-west2\"</span>,\n    temperature=<span class=\"hljs-number\">0.2</span>,\n)\n</code></pre>\n<pre><code class=\"hljs language-js\"># .<span class=\"hljs-property\">foo</span>/report_analyser/outline_extraction\n<span class=\"hljs-keyword\">from</span> . <span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">DEFAULT_LLM</span>\n\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Dict</span>\n\ndef <span class=\"hljs-title function_\">extract_outline</span>(\n    <span class=\"hljs-attr\">page</span>: str,\n    <span class=\"hljs-attr\">custom_llm_parameters</span>: <span class=\"hljs-title class_\">Optional</span>[<span class=\"hljs-title class_\">Dict</span>] = <span class=\"hljs-title class_\">None</span>\n) -> <span class=\"hljs-attr\">str</span>:\n    \n    <span class=\"hljs-keyword\">if</span> custom_llm_parameters is <span class=\"hljs-title class_\">None</span>:\n        llm = <span class=\"hljs-variable constant_\">DEFAULT_LLM</span>\n    <span class=\"hljs-attr\">else</span>:\n        llm = <span class=\"hljs-title class_\">VertexAI</span>(\n            model_name=<span class=\"hljs-string\">\"gemini-pro\"</span>,\n            location=<span class=\"hljs-string\">\"europe-west2\"</span>,\n            **custom_llm_parameters\n        )\n    prompt_template = <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"...&#x3C;Your prompt template here>...\"</span><span class=\"hljs-string\">\"\"</span>\n    prompt = prompt_template.<span class=\"hljs-title function_\">format_prompt</span>(page=page)\n    <span class=\"hljs-keyword\">return</span> llm.<span class=\"hljs-title function_\">invoke</span>(prompt)\n</code></pre>\n<p>코드를 개선하려면, <strong>init</strong>.py에서 LLM 연결을 생성하는 부분을 분리하여 별도의 파일로 만들어 LLM 연결 관리자를 만들 수 있습니다. @lru_cache와 결합하면 사용자 정의 구성을 더 효율적으로 처리하고 있는 것을 알 수 있을 것입니다.</p>\n<p><strong>init</strong>.py에 대해 무엇인지 배우고 더 잘 활용하는 방법에 대한 아이디어를 얻었기를 바랍니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파이썬에 대해 더 알고 싶다면, 파이썬에 관한 다른 블로그를 확인해보세요!</p>\n<p>다음에 또 만나요, Louis입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}