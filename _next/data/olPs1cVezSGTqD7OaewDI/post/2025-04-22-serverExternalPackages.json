{"pageProps":{"post":{"title":"Next.js 15에서 서버 외부 패키지 관리하는 방법(serverExternalPackages)","description":"","date":"2025-04-22 13:26","slug":"2025-04-22-serverExternalPackages","content":"\n\n# serverExternalPackages\n\nNext.js 13부터 Server Components와 Route Handlers 내부에서 사용하는 의존성들은 기본적으로 Next.js가 자동으로 번들링해줘요. 덕분에 서버에서 필요한 패키지를 따로 신경 쓸 필요가 줄어들죠.\n\n그런데 만약 어떤 의존성이 Node.js의 특정 기능들(예: 파일 시스템 접근, 네이티브 모듈 등)을 사용하고 있어서, Next.js가 번들링하는 과정에서 문제가 생긴다면? 이때는 serverExternalPackages라는 옵션을 활용할 수 있어요. 이 옵션에 해당 패키지를 적으면 Next.js가 그 패키지를 번들링하지 않고, 대신 Node.js의 `require()`를 이용해 네이티브 방식으로 불러오게 됩니다.\n\n예를 들어, '@acme/ui'라는 패키지를 이렇게 설정할 수 있어요.\n\n```js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  serverExternalPackages: ['@acme/ui'],\n}\n \nmodule.exports = nextConfig\n```\n\n이 설정은 '@acme/ui'를 서버 번들링에서 제외하고, Node.js 환경에서 직접 불러오도록 지시하는 거예요.\n\n---\n\n### 추가 팁!\n\n- 대부분의 패키지는 굳이 이 옵션에 넣지 않아도 잘 작동해요. 서버 번들링이 문제를 일으키는 경우에만 선별적으로 사용하세요.\n- `serverExternalPackages`에 너무 많은 패키지를 넣으면 오히려 빌드 성능에 영향을 줄 수 있으니 꼭 필요한 것만 넣는 게 좋아요.\n- 이 기능은 주로 네이티브 모듈이나, 빌드 타임에 처리하기 어려운 Node.js 환경 전용 라이브러리에서 유용합니다.\n\n서버 컴포넌트와 라우트 핸들러를 활용할 때, 이런 설정 하나만으로도 라이브러리 호환성을 좀 더 쉽게 맞출 수 있으니 참고하세요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNext.js에서 현재 호환성을 작업 중이고 자동으로 제외 처리되는 인기 패키지 리스트가 있어요. 이 리스트에 포함된 패키지들은 Next.js 환경에서 문제없이 사용할 수 있도록 특별히 관리되고 있답니다.\n\n아래는 그 인기 패키지 리스트예요:\n\n- @appsignal/nodejs\n- @aws-sdk/client-s3\n- @aws-sdk/s3-presigned-post\n- @blockfrost/blockfrost-js\n- @highlight-run/node\n- @huggingface/transformers\n- @jpg-store/lucid-cardano\n- @libsql/client\n- @mikro-orm/core\n- @mikro-orm/knex\n- @node-rs/argon2\n- @node-rs/bcrypt\n- @prisma/client\n- @react-pdf/renderer\n- @sentry/profiling-node\n- @sparticuz/chromium\n- @swc/core\n- @xenova/transformers\n- argon2\n- autoprefixer\n- aws-crt\n- bcrypt\n- better-sqlite3\n- canvas\n- chromadb-default-embed\n- cpu-features\n- cypress\n- dd-trace\n- eslint\n- express\n- firebase-admin\n- import-in-the-middle\n- isolated-vm\n- jest\n- jsdom\n- keyv\n- libsql\n- mdx-bundler\n- mongodb\n- mongoose\n- newrelic\n- next-mdx-remote\n- next-seo\n- node-cron\n- node-pty\n- node-web-audio-api\n- onnxruntime-node\n- oslo\n- pg\n- playwright\n- playwright-core\n- postcss\n- prettier\n- prisma\n- puppeteer-core\n- puppeteer\n- require-in-the-middle\n- rimraf\n- sharp\n- shiki\n- sqlite3\n- ts-node\n- ts-morph\n- typescript\n- vscode-oniguruma\n- webpack\n- websocket\n- zeromq\n\n이런 패키지들은 Next.js가 서버 컴포넌트에서 처리할 때 자동으로 제외 처리되어 호환성이나 빌드 오류 걱정을 줄여줍니다. 즉, 앞으로 직접 호환성을 설정하는 대신 이 리스트에 포함되어 있으면 알아서 잘 작동할 거라는 뜻이죠.\n\n그리고 빼놓으면 안 될 업데이트 소식! \n\n| 버전      | 변경 사항                                                                            |\n|-----------|-------------------------------------------------------------------------------------|\n| v15.0.0   | 기능이 experimental 단계에서 안정화(stable) 단계로 변경되었어요.  그리고 설정 이름이 `<code>serverComponentsExternalPackages</code>`에서 `<code>serverExternalPackages</code>`로 바뀌었답니다. |\n\n이 부분은 Next.js가 서버 컴포넌트 관련 설정을 좀더 명확하게 정리한 거예요. 만약 기존에 experimental 옵션을 써서 외부 패키지를 관리하고 있었다면, 이 점을 참고해서 설정을 고쳐야 해요.\n\n---\n\n추가로 조금 더 알려드리자면, Next.js는 점점 서버 컴포넌트(Server Components) 지원을 강화하면서 다양한 외부 패키지와의 호환성을 신경 쓰고 있어요. 서버 컴포넌트는 클라이언트에 전달하지 않고 서버에서 렌더링하는 컴포넌트로, 서버-클라이언트 경계를 나누는 데 혁신적인 역할을 하고 있죠.\n\n하지만 서버 컴포넌트에서는 모든 패키지가 안전하게 동작하지 않을 수 있어서, 지금처럼 '자동 opt-out' 리스트를 만들어 관리하는 거랍니다. 앞으로 여기에 올라오는 패키지가 점점 많아질 거라서 개발자 입장에서 점점 더 편리해지겠죠?\n\n필요하다면 이 리스트를 참고해서 내 프로젝트에서 사용하는 패키지가 지원되는지 꼭 확인해 보세요! 그렇게 하면 Next.js 최신 기능들을 더 안정적으로 쓸 수 있어요 :)","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>serverExternalPackages</h1>\n<p>Next.js 13부터 Server Components와 Route Handlers 내부에서 사용하는 의존성들은 기본적으로 Next.js가 자동으로 번들링해줘요. 덕분에 서버에서 필요한 패키지를 따로 신경 쓸 필요가 줄어들죠.</p>\n<p>그런데 만약 어떤 의존성이 Node.js의 특정 기능들(예: 파일 시스템 접근, 네이티브 모듈 등)을 사용하고 있어서, Next.js가 번들링하는 과정에서 문제가 생긴다면? 이때는 serverExternalPackages라는 옵션을 활용할 수 있어요. 이 옵션에 해당 패키지를 적으면 Next.js가 그 패키지를 번들링하지 않고, 대신 Node.js의 <code>require()</code>를 이용해 네이티브 방식으로 불러오게 됩니다.</p>\n<p>예를 들어, '@acme/ui'라는 패키지를 이렇게 설정할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@type</span> {<span class=\"hljs-type\">import('next').NextConfig</span>} */</span>\n<span class=\"hljs-keyword\">const</span> nextConfig = {\n  <span class=\"hljs-attr\">serverExternalPackages</span>: [<span class=\"hljs-string\">'@acme/ui'</span>],\n}\n \n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = nextConfig\n</code></pre>\n<p>이 설정은 '@acme/ui'를 서버 번들링에서 제외하고, Node.js 환경에서 직접 불러오도록 지시하는 거예요.</p>\n<hr>\n<h3>추가 팁!</h3>\n<ul>\n<li>대부분의 패키지는 굳이 이 옵션에 넣지 않아도 잘 작동해요. 서버 번들링이 문제를 일으키는 경우에만 선별적으로 사용하세요.</li>\n<li><code>serverExternalPackages</code>에 너무 많은 패키지를 넣으면 오히려 빌드 성능에 영향을 줄 수 있으니 꼭 필요한 것만 넣는 게 좋아요.</li>\n<li>이 기능은 주로 네이티브 모듈이나, 빌드 타임에 처리하기 어려운 Node.js 환경 전용 라이브러리에서 유용합니다.</li>\n</ul>\n<p>서버 컴포넌트와 라우트 핸들러를 활용할 때, 이런 설정 하나만으로도 라이브러리 호환성을 좀 더 쉽게 맞출 수 있으니 참고하세요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Next.js에서 현재 호환성을 작업 중이고 자동으로 제외 처리되는 인기 패키지 리스트가 있어요. 이 리스트에 포함된 패키지들은 Next.js 환경에서 문제없이 사용할 수 있도록 특별히 관리되고 있답니다.</p>\n<p>아래는 그 인기 패키지 리스트예요:</p>\n<ul>\n<li>@appsignal/nodejs</li>\n<li>@aws-sdk/client-s3</li>\n<li>@aws-sdk/s3-presigned-post</li>\n<li>@blockfrost/blockfrost-js</li>\n<li>@highlight-run/node</li>\n<li>@huggingface/transformers</li>\n<li>@jpg-store/lucid-cardano</li>\n<li>@libsql/client</li>\n<li>@mikro-orm/core</li>\n<li>@mikro-orm/knex</li>\n<li>@node-rs/argon2</li>\n<li>@node-rs/bcrypt</li>\n<li>@prisma/client</li>\n<li>@react-pdf/renderer</li>\n<li>@sentry/profiling-node</li>\n<li>@sparticuz/chromium</li>\n<li>@swc/core</li>\n<li>@xenova/transformers</li>\n<li>argon2</li>\n<li>autoprefixer</li>\n<li>aws-crt</li>\n<li>bcrypt</li>\n<li>better-sqlite3</li>\n<li>canvas</li>\n<li>chromadb-default-embed</li>\n<li>cpu-features</li>\n<li>cypress</li>\n<li>dd-trace</li>\n<li>eslint</li>\n<li>express</li>\n<li>firebase-admin</li>\n<li>import-in-the-middle</li>\n<li>isolated-vm</li>\n<li>jest</li>\n<li>jsdom</li>\n<li>keyv</li>\n<li>libsql</li>\n<li>mdx-bundler</li>\n<li>mongodb</li>\n<li>mongoose</li>\n<li>newrelic</li>\n<li>next-mdx-remote</li>\n<li>next-seo</li>\n<li>node-cron</li>\n<li>node-pty</li>\n<li>node-web-audio-api</li>\n<li>onnxruntime-node</li>\n<li>oslo</li>\n<li>pg</li>\n<li>playwright</li>\n<li>playwright-core</li>\n<li>postcss</li>\n<li>prettier</li>\n<li>prisma</li>\n<li>puppeteer-core</li>\n<li>puppeteer</li>\n<li>require-in-the-middle</li>\n<li>rimraf</li>\n<li>sharp</li>\n<li>shiki</li>\n<li>sqlite3</li>\n<li>ts-node</li>\n<li>ts-morph</li>\n<li>typescript</li>\n<li>vscode-oniguruma</li>\n<li>webpack</li>\n<li>websocket</li>\n<li>zeromq</li>\n</ul>\n<p>이런 패키지들은 Next.js가 서버 컴포넌트에서 처리할 때 자동으로 제외 처리되어 호환성이나 빌드 오류 걱정을 줄여줍니다. 즉, 앞으로 직접 호환성을 설정하는 대신 이 리스트에 포함되어 있으면 알아서 잘 작동할 거라는 뜻이죠.</p>\n<p>그리고 빼놓으면 안 될 업데이트 소식!</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v15.0.0</td><td>기능이 experimental 단계에서 안정화(stable) 단계로 변경되었어요.  그리고 설정 이름이 <code>&#x3C;code>serverComponentsExternalPackages&#x3C;/code></code>에서 <code>&#x3C;code>serverExternalPackages&#x3C;/code></code>로 바뀌었답니다.</td></tr></tbody></table>\n<p>이 부분은 Next.js가 서버 컴포넌트 관련 설정을 좀더 명확하게 정리한 거예요. 만약 기존에 experimental 옵션을 써서 외부 패키지를 관리하고 있었다면, 이 점을 참고해서 설정을 고쳐야 해요.</p>\n<hr>\n<p>추가로 조금 더 알려드리자면, Next.js는 점점 서버 컴포넌트(Server Components) 지원을 강화하면서 다양한 외부 패키지와의 호환성을 신경 쓰고 있어요. 서버 컴포넌트는 클라이언트에 전달하지 않고 서버에서 렌더링하는 컴포넌트로, 서버-클라이언트 경계를 나누는 데 혁신적인 역할을 하고 있죠.</p>\n<p>하지만 서버 컴포넌트에서는 모든 패키지가 안전하게 동작하지 않을 수 있어서, 지금처럼 '자동 opt-out' 리스트를 만들어 관리하는 거랍니다. 앞으로 여기에 올라오는 패키지가 점점 많아질 거라서 개발자 입장에서 점점 더 편리해지겠죠?</p>\n<p>필요하다면 이 리스트를 참고해서 내 프로젝트에서 사용하는 패키지가 지원되는지 꼭 확인해 보세요! 그렇게 하면 Next.js 최신 기능들을 더 안정적으로 쓸 수 있어요 :)</p>\n</body>\n</html>\n"},"__N_SSG":true}