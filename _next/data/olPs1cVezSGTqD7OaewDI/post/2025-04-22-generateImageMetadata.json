{"pageProps":{"post":{"title":"Next.js 15에서 generateImageMetadata 함수 사용하는 방법","description":"","date":"2025-04-22 03:04","slug":"2025-04-22-generateImageMetadata","content":"\n\n# generateImageMetadata 함수 소개\n\n여러분, 이미지 메타데이터를 다룰 때 직접 하나하나 값을 하드코딩하기 귀찮거나, 여러 버전의 이미지를 한꺼번에 처리하고 싶었던 적 있으신가요? 바로 그럴 때 `generateImageMetadata` 함수를 활용하면 정말 편리해요!\n\n이 함수는 하나의 이미지를 다양한 버전으로 만들어내거나, 한 라우트 세그먼트에 여러 이미지를 반환할 수 있도록 도와줘요. 특히 아이콘 같이 자주 쓰이면서도 크기나 형식이 달라지는 이미지 작업에 아주 유용하답니다.\n\n## 파라미터 (Parameters)\n\n`generateImageMetadata` 함수에 넘겨줄 수 있는 주요 파라미터들은 아래와 같아요:\n\n| 파라미터 이름 | 설명 |\n| --- | --- |\n| `src` | 기본 이미지 경로 또는 URL (필수) |\n| `sizes` | 생성할 이미지 크기 배열 (예: `[16, 32, 64]`) |\n| `formats` | 생성할 이미지 형식 배열 (예: `['png', 'webp']`) |\n| `outputDir` | 변환 이미지가 저장될 디렉터리 경로 |\n| `quality` | 이미지 압축 품질 (0~100) |\n| `background` | 배경색 설정 (특히 투명하지 않은 이미지에 유용) |\n\n위 내용은 가장 기본적이고 자주 사용하는 옵션들을 포함하고 있어요. 이외에도 상황에 따라 추가 설정이 가능하니 공식 문서를 참고하면 더 깊이 이해할 수 있습니다.\n\n---\n\n### 실무에서 이렇게 활용해보세요!\n\n1. **아이콘 다양화**  \n   앱이나 웹사이트 내에서 동일한 아이콘을 크기별, 포맷별로 자동 생성해서 사용하면 코드가 더 깔끔해지고, 다양한 기기 대응이 쉬워져요.\n\n2. **SEO와 성능 최적화**  \n   다양한 해상도와 포맷(WebP 등)을 지원하면 사용자의 네트워크 환경이나 브라우저에 맞춰 최적화된 이미지를 제공할 수 있어, 페이지 로딩 속도와 SEO에 도움이 됩니다.\n\n다음번에는 이 함수를 실제 코드 예제와 함께 '어떻게 사용하는지' 자세히 다뤄볼게요! 질문이나 궁금한 점 있으면 언제든 댓글 남겨주세요 :)\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n#### params (선택 사항)\n\n`params`는 동적 라우트 매개변수를 포함하는 객체인데요, 이 객체는 루트 세그먼트에서부터 `generateImageMetadata` 함수가 호출된 세그먼트까지의 매개변수를 담고 있어요.\n\n예를 들어, 아래처럼 `generateImageMetadata` 함수에 `params`를 전달받을 수 있습니다.\n\n```js\nexport function generateImageMetadata({\n  params,\n}: {\n  params: { slug: string }\n}) {\n  // ...\n}\n```\n\n이때, 라우트와 URL, 그리고 `params`의 예시는 다음 표처럼 이해하시면 편해요.\n\n| Route                       | URL        | params              |\n|-----------------------------|------------|---------------------|\n| `app/shop/icon.js`           | `/shop`    | `undefined`         |\n| `app/shop/[slug]/icon.js`    | `/shop/1`  | `{ slug: '1' }`     |\n| `app/shop/[tag]/[item]/icon.js` | `/shop/1/2` | `{ tag: '1', item: '2' }` |\n\n즉, URL 경로에 따라 `params` 객체 안에 전달되는 키와 값이 달라지는 거죠.\n\n참고로, Next.js 같은 프레임워크에서는 이 `params`를 통해 동적으로 페이지를 구성할 때 유용하게 쓰여요. 특히 여러 단계의 동적 세그먼트가 있을 경우, 이 객체를 활용해 필요한 데이터를 가져오거나 메타데이터를 생성할 수 있답니다.\n\n또 한 가지 팁을 드리자면, `params`가 `undefined`인 경우도 있으니 함수 내에서 안전하게 처리해주는 게 좋아요! 예를 들면 다음과 같이요:\n\n```js\nexport function generateImageMetadata({ params }) {\n  const slug = params?.slug ?? 'default';\n  // slug를 안전하게 사용\n}\n```\n\n이렇게 하면 예상치 못한 에러를 방지할 수 있답니다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 리턴값 설명\n\n`generateImageMetadata` 함수는 이미지 메타데이터를 담은 객체들의 배열을 반환해야 합니다. 여기서 각 객체는 이미지의 대체 텍스트(`alt`), 크기(`size`) 같은 정보를 포함하고 있어요. 그리고 꼭 포함해야 할 값 중 하나가 `id`인데, 이 값은 이미지 생성 컴포넌트에서 props로 전달받게 됩니다.\n\n아래는 반환하는 객체 구조를 간단히 정리한 표예요:\n\n| Image Metadata Object | Type                      |\n|----------------------|---------------------------|\n| `id`                 | `string` (필수)            |\n| `alt`                | `string`                   |\n| `size`               | `{ width: number; height: number }` |\n| `contentType`        | `string`                   |\n\n### 예제 코드\n\n```js\nimport { ImageResponse } from 'next/og'\n \nexport function generateImageMetadata() {\n  return [\n    {\n      contentType: 'image/png',\n      size: { width: 48, height: 48 },\n      id: 'small',\n    },\n    {\n      contentType: 'image/png',\n      size: { width: 72, height: 72 },\n      id: 'medium',\n    },\n  ]\n}\n \nexport default function Icon({ id }: { id: string }) {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 88,\n          background: '#000',\n          color: '#fafafa',\n        }}\n      >\n        Icon {id}\n      </div>\n    )\n  )\n}\n```\n\n---\n\n### 조금 더 설명을 덧붙이자면\n\n- `generateImageMetadata` 함수는 이미지가 다양할 때 각각에 맞는 메타정보를 한꺼번에 관리할 수 있어 편리합니다.\n- 각 이미지별 `id`는 컴포넌트에서 어떤 이미지를 렌더할지 구분하는 역할을 해요. 이 `id`를 이용해 동적으로 이미지 내용을 바꾸거나 다르게 스타일링할 수 있습니다.\n- `contentType`은 보통 이미지 포맷을 지정하는데, 예를 들어 `image/png`나 `image/jpeg` 등을 쓸 수 있어요.\n- `alt` 값은 UI 접근성을 높이기 위해 넣으면 좋습니다. 이미지 로딩 실패 시나 스크린 리더 사용자의 이해를 도와주니까요.\n\n그리고 스타일링 부분에서, 인라인 스타일에 중괄호 `{}`를 빼먹을 수 있는데 꼭 유의하세요! 예제 코드처럼 객체형태로 잘 감싸야 합니다.\n\n필요에 따라 더 다양한 메타데이터를 포함시켜 유연하게 확장하는 것도 추천드려요~!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n### 예제\n\n#### 외부 데이터를 활용한 이미지 생성\n\n이번 예제에서는 `params` 객체와 외부 데이터를 사용해 라우트 세그먼트에 대해 여러 개의 Open Graph 이미지를 생성하는 방법을 보여드릴게요.\n\n```js\nimport { ImageResponse } from 'next/og'\nimport { getCaptionForImage, getOGImages } from '@/app/utils/images'\n\nexport async function generateImageMetadata({\n  params,\n}: {\n  params: { id: string }\n}) {\n  const images = await getOGImages(params.id)\n\n  return images.map((image, idx) => ({\n    id: idx,\n    size: { width: 1200, height: 600 },\n    alt: image.text,\n    contentType: 'image/png',\n  }))\n}\n\nexport default async function Image({\n  params,\n  id,\n}: {\n  params: { id: string }\n  id: number\n}) {\n  const productId = (await params).id\n  const imageId = id\n  const text = await getCaptionForImage(productId, imageId)\n\n  return new ImageResponse(\n    (\n      <div\n        style={\n          {\n            // ...\n          }\n        }\n      >\n        {text}\n      </div>\n    )\n  )\n}\n```\n\n---\n\n위 예제는 `params.id`를 기반으로 여러 Open Graph 이미지를 생성해주는 방식이에요. 먼저 `generateImageMetadata` 함수에서 외부 유틸 함수 `getOGImages`를 호출해 이미지 메타데이터들을 불러옵니다. 그리고 각각의 이미지를 원하는 크기와 alt 텍스트, 콘텐츠 타입과 함께 반환하죠.\n\n또한, 이미지 생성 함수 `Image`에서는 각각의 이미지 ID와 제품 ID를 받아서 해당 이미지에 들어갈 텍스트 캡션을 외부에서 가져와 렌더링합니다.\n\n> 참고로 이런 방식을 사용하면 한 가지 라우트에 여러 OG 이미지를 동적으로 생성할 수 있어서, SNS에서 링크를 공유할 때 다양한 시각적 표현이 가능해집니다.  \n>  \n> 그리고 `ImageResponse`는 Next.js의 `next/og` 모듈에서 제공하는 기능으로, JSX를 기반으로 이미지를 그릴 수 있게 해줘요. 평소 HTML이나 React를 다루는 것처럼 편하게 이미지 레이아웃도 조절 가능하니 참 편리합니다.\n\n여기에 좀 더 스타일을 입히거나, 이미지 안에 다른 컴포넌트나 아이콘, 배경색 등을 넣어서 더욱 멋진 OG 이미지를 만들 수도 있겠네요. 이렇게 동적으로 메타데이터와 이미지를 생성하는 것은 SEO뿐만 아니라, 사용자 경험 향상에도 크게 도움을 줄 수 있습니다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 버전 히스토리\n\n| 버전      | 변경 사항                       |\n|-----------|-------------------------------|\n| v13.3.0   | `generateImageMetadata` 기능 추가 |\n\n여기서 `generateImageMetadata`라는 기능이 새롭게 도입된 걸 확인할 수 있어요. 혹시 이미지 처리나 메타데이터 자동 생성과 관련된 작업을 한다면, 이 기능이 꽤 유용할 거예요. 나중에 직접 사용해보고 어떤 점이 좋은지, 어떻게 활용할 수 있는지도 다뤄볼게요!","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>generateImageMetadata 함수 소개</h1>\n<p>여러분, 이미지 메타데이터를 다룰 때 직접 하나하나 값을 하드코딩하기 귀찮거나, 여러 버전의 이미지를 한꺼번에 처리하고 싶었던 적 있으신가요? 바로 그럴 때 <code>generateImageMetadata</code> 함수를 활용하면 정말 편리해요!</p>\n<p>이 함수는 하나의 이미지를 다양한 버전으로 만들어내거나, 한 라우트 세그먼트에 여러 이미지를 반환할 수 있도록 도와줘요. 특히 아이콘 같이 자주 쓰이면서도 크기나 형식이 달라지는 이미지 작업에 아주 유용하답니다.</p>\n<h2>파라미터 (Parameters)</h2>\n<p><code>generateImageMetadata</code> 함수에 넘겨줄 수 있는 주요 파라미터들은 아래와 같아요:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>파라미터 이름</th><th>설명</th></tr></thead><tbody><tr><td><code>src</code></td><td>기본 이미지 경로 또는 URL (필수)</td></tr><tr><td><code>sizes</code></td><td>생성할 이미지 크기 배열 (예: <code>[16, 32, 64]</code>)</td></tr><tr><td><code>formats</code></td><td>생성할 이미지 형식 배열 (예: <code>['png', 'webp']</code>)</td></tr><tr><td><code>outputDir</code></td><td>변환 이미지가 저장될 디렉터리 경로</td></tr><tr><td><code>quality</code></td><td>이미지 압축 품질 (0~100)</td></tr><tr><td><code>background</code></td><td>배경색 설정 (특히 투명하지 않은 이미지에 유용)</td></tr></tbody></table>\n<p>위 내용은 가장 기본적이고 자주 사용하는 옵션들을 포함하고 있어요. 이외에도 상황에 따라 추가 설정이 가능하니 공식 문서를 참고하면 더 깊이 이해할 수 있습니다.</p>\n<hr>\n<h3>실무에서 이렇게 활용해보세요!</h3>\n<ol>\n<li>\n<p><strong>아이콘 다양화</strong><br>\n앱이나 웹사이트 내에서 동일한 아이콘을 크기별, 포맷별로 자동 생성해서 사용하면 코드가 더 깔끔해지고, 다양한 기기 대응이 쉬워져요.</p>\n</li>\n<li>\n<p><strong>SEO와 성능 최적화</strong><br>\n다양한 해상도와 포맷(WebP 등)을 지원하면 사용자의 네트워크 환경이나 브라우저에 맞춰 최적화된 이미지를 제공할 수 있어, 페이지 로딩 속도와 SEO에 도움이 됩니다.</p>\n</li>\n</ol>\n<p>다음번에는 이 함수를 실제 코드 예제와 함께 '어떻게 사용하는지' 자세히 다뤄볼게요! 질문이나 궁금한 점 있으면 언제든 댓글 남겨주세요 :)</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h4>params (선택 사항)</h4>\n<p><code>params</code>는 동적 라우트 매개변수를 포함하는 객체인데요, 이 객체는 루트 세그먼트에서부터 <code>generateImageMetadata</code> 함수가 호출된 세그먼트까지의 매개변수를 담고 있어요.</p>\n<p>예를 들어, 아래처럼 <code>generateImageMetadata</code> 함수에 <code>params</code>를 전달받을 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateImageMetadata</span>(<span class=\"hljs-params\">{\n  params,\n}: {\n  params: { slug: string }\n}</span>) {\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>이때, 라우트와 URL, 그리고 <code>params</code>의 예시는 다음 표처럼 이해하시면 편해요.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Route</th><th>URL</th><th>params</th></tr></thead><tbody><tr><td><code>app/shop/icon.js</code></td><td><code>/shop</code></td><td><code>undefined</code></td></tr><tr><td><code>app/shop/[slug]/icon.js</code></td><td><code>/shop/1</code></td><td><code>{ slug: '1' }</code></td></tr><tr><td><code>app/shop/[tag]/[item]/icon.js</code></td><td><code>/shop/1/2</code></td><td><code>{ tag: '1', item: '2' }</code></td></tr></tbody></table>\n<p>즉, URL 경로에 따라 <code>params</code> 객체 안에 전달되는 키와 값이 달라지는 거죠.</p>\n<p>참고로, Next.js 같은 프레임워크에서는 이 <code>params</code>를 통해 동적으로 페이지를 구성할 때 유용하게 쓰여요. 특히 여러 단계의 동적 세그먼트가 있을 경우, 이 객체를 활용해 필요한 데이터를 가져오거나 메타데이터를 생성할 수 있답니다.</p>\n<p>또 한 가지 팁을 드리자면, <code>params</code>가 <code>undefined</code>인 경우도 있으니 함수 내에서 안전하게 처리해주는 게 좋아요! 예를 들면 다음과 같이요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateImageMetadata</span>(<span class=\"hljs-params\">{ params }</span>) {\n  <span class=\"hljs-keyword\">const</span> slug = params?.<span class=\"hljs-property\">slug</span> ?? <span class=\"hljs-string\">'default'</span>;\n  <span class=\"hljs-comment\">// slug를 안전하게 사용</span>\n}\n</code></pre>\n<p>이렇게 하면 예상치 못한 에러를 방지할 수 있답니다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>리턴값 설명</h2>\n<p><code>generateImageMetadata</code> 함수는 이미지 메타데이터를 담은 객체들의 배열을 반환해야 합니다. 여기서 각 객체는 이미지의 대체 텍스트(<code>alt</code>), 크기(<code>size</code>) 같은 정보를 포함하고 있어요. 그리고 꼭 포함해야 할 값 중 하나가 <code>id</code>인데, 이 값은 이미지 생성 컴포넌트에서 props로 전달받게 됩니다.</p>\n<p>아래는 반환하는 객체 구조를 간단히 정리한 표예요:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Image Metadata Object</th><th>Type</th></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code> (필수)</td></tr><tr><td><code>alt</code></td><td><code>string</code></td></tr><tr><td><code>size</code></td><td><code>{ width: number; height: number }</code></td></tr><tr><td><code>contentType</code></td><td><code>string</code></td></tr></tbody></table>\n<h3>예제 코드</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ImageResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/og'</span>\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateImageMetadata</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> [\n    {\n      <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">'image/png'</span>,\n      <span class=\"hljs-attr\">size</span>: { <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">48</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">48</span> },\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'small'</span>,\n    },\n    {\n      <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">'image/png'</span>,\n      <span class=\"hljs-attr\">size</span>: { <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">72</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">72</span> },\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'medium'</span>,\n    },\n  ]\n}\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Icon</span>(<span class=\"hljs-params\">{ id }: { id: string }</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ImageResponse</span>(\n    (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">width:</span> '<span class=\"hljs-attr\">100</span>%',\n          <span class=\"hljs-attr\">height:</span> '<span class=\"hljs-attr\">100</span>%',\n          <span class=\"hljs-attr\">display:</span> '<span class=\"hljs-attr\">flex</span>',\n          <span class=\"hljs-attr\">alignItems:</span> '<span class=\"hljs-attr\">center</span>',\n          <span class=\"hljs-attr\">justifyContent:</span> '<span class=\"hljs-attr\">center</span>',\n          <span class=\"hljs-attr\">fontSize:</span> <span class=\"hljs-attr\">88</span>,\n          <span class=\"hljs-attr\">background:</span> '#<span class=\"hljs-attr\">000</span>',\n          <span class=\"hljs-attr\">color:</span> '#<span class=\"hljs-attr\">fafafa</span>',\n        }}\n      ></span>\n        Icon {id}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    )\n  )\n}\n</code></pre>\n<hr>\n<h3>조금 더 설명을 덧붙이자면</h3>\n<ul>\n<li><code>generateImageMetadata</code> 함수는 이미지가 다양할 때 각각에 맞는 메타정보를 한꺼번에 관리할 수 있어 편리합니다.</li>\n<li>각 이미지별 <code>id</code>는 컴포넌트에서 어떤 이미지를 렌더할지 구분하는 역할을 해요. 이 <code>id</code>를 이용해 동적으로 이미지 내용을 바꾸거나 다르게 스타일링할 수 있습니다.</li>\n<li><code>contentType</code>은 보통 이미지 포맷을 지정하는데, 예를 들어 <code>image/png</code>나 <code>image/jpeg</code> 등을 쓸 수 있어요.</li>\n<li><code>alt</code> 값은 UI 접근성을 높이기 위해 넣으면 좋습니다. 이미지 로딩 실패 시나 스크린 리더 사용자의 이해를 도와주니까요.</li>\n</ul>\n<p>그리고 스타일링 부분에서, 인라인 스타일에 중괄호 <code>{}</code>를 빼먹을 수 있는데 꼭 유의하세요! 예제 코드처럼 객체형태로 잘 감싸야 합니다.</p>\n<p>필요에 따라 더 다양한 메타데이터를 포함시켜 유연하게 확장하는 것도 추천드려요~!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h3>예제</h3>\n<h4>외부 데이터를 활용한 이미지 생성</h4>\n<p>이번 예제에서는 <code>params</code> 객체와 외부 데이터를 사용해 라우트 세그먼트에 대해 여러 개의 Open Graph 이미지를 생성하는 방법을 보여드릴게요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ImageResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/og'</span>\n<span class=\"hljs-keyword\">import</span> { getCaptionForImage, getOGImages } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/app/utils/images'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateImageMetadata</span>(<span class=\"hljs-params\">{\n  params,\n}: {\n  params: { id: string }\n}</span>) {\n  <span class=\"hljs-keyword\">const</span> images = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getOGImages</span>(params.<span class=\"hljs-property\">id</span>)\n\n  <span class=\"hljs-keyword\">return</span> images.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">image, idx</span>) =></span> ({\n    <span class=\"hljs-attr\">id</span>: idx,\n    <span class=\"hljs-attr\">size</span>: { <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">1200</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">600</span> },\n    <span class=\"hljs-attr\">alt</span>: image.<span class=\"hljs-property\">text</span>,\n    <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">'image/png'</span>,\n  }))\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Image</span>(<span class=\"hljs-params\">{\n  params,\n  id,\n}: {\n  params: { id: string }\n  id: number\n}</span>) {\n  <span class=\"hljs-keyword\">const</span> productId = (<span class=\"hljs-keyword\">await</span> params).<span class=\"hljs-property\">id</span>\n  <span class=\"hljs-keyword\">const</span> imageId = id\n  <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getCaptionForImage</span>(productId, imageId)\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ImageResponse</span>(\n    (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{</span>\n          {\n            // <span class=\"hljs-attr\">...</span>\n          }\n        }\n      ></span>\n        {text}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    )\n  )\n}\n</code></pre>\n<hr>\n<p>위 예제는 <code>params.id</code>를 기반으로 여러 Open Graph 이미지를 생성해주는 방식이에요. 먼저 <code>generateImageMetadata</code> 함수에서 외부 유틸 함수 <code>getOGImages</code>를 호출해 이미지 메타데이터들을 불러옵니다. 그리고 각각의 이미지를 원하는 크기와 alt 텍스트, 콘텐츠 타입과 함께 반환하죠.</p>\n<p>또한, 이미지 생성 함수 <code>Image</code>에서는 각각의 이미지 ID와 제품 ID를 받아서 해당 이미지에 들어갈 텍스트 캡션을 외부에서 가져와 렌더링합니다.</p>\n<blockquote>\n<p>참고로 이런 방식을 사용하면 한 가지 라우트에 여러 OG 이미지를 동적으로 생성할 수 있어서, SNS에서 링크를 공유할 때 다양한 시각적 표현이 가능해집니다.</p>\n<p>그리고 <code>ImageResponse</code>는 Next.js의 <code>next/og</code> 모듈에서 제공하는 기능으로, JSX를 기반으로 이미지를 그릴 수 있게 해줘요. 평소 HTML이나 React를 다루는 것처럼 편하게 이미지 레이아웃도 조절 가능하니 참 편리합니다.</p>\n</blockquote>\n<p>여기에 좀 더 스타일을 입히거나, 이미지 안에 다른 컴포넌트나 아이콘, 배경색 등을 넣어서 더욱 멋진 OG 이미지를 만들 수도 있겠네요. 이렇게 동적으로 메타데이터와 이미지를 생성하는 것은 SEO뿐만 아니라, 사용자 경험 향상에도 크게 도움을 줄 수 있습니다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>버전 히스토리</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v13.3.0</td><td><code>generateImageMetadata</code> 기능 추가</td></tr></tbody></table>\n<p>여기서 <code>generateImageMetadata</code>라는 기능이 새롭게 도입된 걸 확인할 수 있어요. 혹시 이미지 처리나 메타데이터 자동 생성과 관련된 작업을 한다면, 이 기능이 꽤 유용할 거예요. 나중에 직접 사용해보고 어떤 점이 좋은지, 어떻게 활용할 수 있는지도 다뤄볼게요!</p>\n</body>\n</html>\n"},"__N_SSG":true}