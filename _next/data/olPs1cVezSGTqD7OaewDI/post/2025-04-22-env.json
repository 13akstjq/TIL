{"pageProps":{"post":{"title":"Next.js 15 환경변수(env) 설정 방법","description":"","date":"2025-04-22 13:06","slug":"2025-04-22-env","content":"\n\n# env 설정하기 (Next.js 9.4 버전 이후)\n\nNext.js 9.4 버전부터는 환경 변수(environment variables)를 다루는 게 훨씬 직관적이고 편리해졌어요. 실제로 프로젝트에 적용해보면 훨씬 깔끔하게 환경 변수를 관리할 수 있답니다. 한번 사용해보세요!\n\n---\n\n### 중요한 점\n\n- 여기서 설정한 환경 변수들은 모두 JavaScript 번들에 포함됩니다.\n- `NEXT_PUBLIC_` 접두어(prefix)를 붙이는 건 환경 변수나 `.env` 파일을 통해 지정할 때만 의미가 있어요.\n- 즉, next.config.js의 `env` 필드에 설정된 변수들은 모두 클라이언트와 서버 어디서든 접근 가능하니까, 민감한 정보는 넣지 말아야 해요!\n\n---\n\n### 환경 변수 추가하는 방법\n\n`next.config.js` 파일을 열고, `env` 설정을 추가해줍니다.\n\n```js\n// next.config.js\nmodule.exports = {\n  env: {\n    CUSTOM_KEY: 'my-value',\n    ANOTHER_KEY: 'another-value',\n  },\n}\n```\n\n위와 같이 설정하면, 앱 전역에서 `process.env.CUSTOM_KEY`나 `process.env.ANOTHER_KEY`로 값을 사용할 수 있어요.\n\n---\n\n### .env 파일과 NEXT_PUBLIC_의 차이점\n\n- `.env` 파일에 `NEXT_PUBLIC_` 접두어가 붙은 변수는 클라이언트에서도 접근 가능해요.\n- `next.config.js`에 직접 추가한 `env` 변수들은 처음에 말씀드린 대로, 모두 번들에 포함되어 클라이언트와 서버 모두에서 볼 수 있어요.\n- 가급적이면 민감한 정보를 다룰 때는 서버 전용이나 런타임에 주입하는 방식으로 하는 걸 추천합니다.\n\n---\n\n### 여기서 더!\n\n- 개발 시에는 `.env.local` 파일에 환경 변수를 넣고, 빌드 시에만 `next.config.js`에서 값을 덮어쓰는 방식을 많이 씁니다.\n- `process.env`를 사용해서 접근할 때, 타입스크립트를 쓴다면 `next-env.d.ts`에서 타입 선언도 해두면 편리하답니다.\n- 환경 변수를 바꾸고 나면 서버 재시작이 필요하다는 점 잊지 마세요!\n\n---\n\n어렵지 않으니 한번 적용해보고, 번거로운 환경 변수 관리에서 자유로워져봅시다!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNext.js에서 환경변수를 설정하는 방법에 대해 알아볼게요. 위 코드처럼 `next.config.js` 파일에 이렇게 작성할 수 있어요:\n\n```js\nmodule.exports = {\n  env: {\n    customKey: 'my-value',\n  },\n}\n```\n\n그러면 앱 어디에서든 `process.env.customKey`로 값을 가져올 수 있답니다. 예를 들어, 컴포넌트에서 이렇게 사용할 수 있어요:\n\n```js\nfunction Page() {\n  return <h1>The value of customKey is: {process.env.customKey}</h1>\n}\n\nexport default Page\n```\n\nNext.js는 빌드 타임에 `process.env.customKey`를 `'my-value'`로 알아서 바꿔주기 때문에 실제 런타임에 특별한 설정 없이도 값을 쓸 수 있어요.\n\n여기서 주의할 점!  \n\n`process.env`를 구조 분해할당(destructuring)으로 쓰는 건 안 돼요. 예를 들어:\n\n```js\nconst { customKey } = process.env; // 이런 식은 동작하지 않아요!\n```\n\n이유는 Next.js가 내부적으로 webpack의 DefinePlugin을 사용해서 환경변수를 빌드 타임에 직접 소스코드에 치환하기 때문인데요, 구조 분해할당을 하면 변수 치환이 제대로 안 되거든요.\n\n---\n\n또 한가지 팁!\n\n- 만약 보안이 필요한 비밀 키(secret key) 같은 값을 환경변수에 넣고 싶다면, `env` 옵션보다 `.env` 파일과 `next.config.js`의 `dotenv` 설정을 이용하는 게 더 안전해요.\n- 또한, Next.js 9.4 이상부터는 `.env.local`, `.env.development`, `.env.production` 같은 파일을 통해 환경변수를 관리할 수 있어서 좀 더 편리해졌답니다.\n\n이 외에도 공식 문서에서 [Environment Variables](https://nextjs.org/docs/basic-features/environment-variables)를 참고하면 도움이 많이 될 거예요!\n\n<!-- TIL 수평 -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n예를 들어, 아래와 같은 코드가 있다고 해볼게요:\n\n```js\nreturn <h1>The value of customKey is: {process.env.customKey}</h1>\n```\n\n이 코드는 실제로 실행될 때 이렇게 바뀌게 됩니다:\n\n```js\nreturn <h1>The value of customKey is: {'my-value'}</h1>\n```\n\n여기서 중요한 점은, `process.env.customKey`가 런타임 환경변수에서 읽히는 게 아니라, 빌드 타임에 실제 값이 주입된다는 거예요. 그래서 결국 문자열 `'my-value'`가 JSX에 직접 들어가게 되는 거죠.\n\n추가로, 리액트 같은 프론트엔드 프레임워크에서 환경 변수를 사용할 때는 보통 `.env` 파일에 변수를 선언하고, 변수명 앞에 `REACT_APP_` (또는 사용하는 프레임워크 규칙에 따라) 접두사를 붙여야 잘 인식되는 경우가 많습니다. 예를 들어:\n\n\nREACT_APP_CUSTOM_KEY=my-value\n\n\n그리고 코드에서는 이렇게 씁니다:\n\n```js\nreturn <h1>The value of customKey is: {process.env.REACT_APP_CUSTOM_KEY}</h1>\n```\n\n환경변수를 이렇게 사용하면, 빌드 시점에 안전하게 값이 들어가고, 코드상에서는 직접 하드코딩하지 않아도 돼서 유지보수도 편리해집니다.\n\n참고로, 환경변수는 보안에 민감할 수 있으니 백엔드에만 필요한 시크릿 값들은 프론트엔드에 노출되지 않도록 주의하는 게 좋습니다!","ogImage":{"url":"/TIL/assets/img/nextjs.png"},"coverImage":"/TIL/assets/img/nextjs.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>env 설정하기 (Next.js 9.4 버전 이후)</h1>\n<p>Next.js 9.4 버전부터는 환경 변수(environment variables)를 다루는 게 훨씬 직관적이고 편리해졌어요. 실제로 프로젝트에 적용해보면 훨씬 깔끔하게 환경 변수를 관리할 수 있답니다. 한번 사용해보세요!</p>\n<hr>\n<h3>중요한 점</h3>\n<ul>\n<li>여기서 설정한 환경 변수들은 모두 JavaScript 번들에 포함됩니다.</li>\n<li><code>NEXT_PUBLIC_</code> 접두어(prefix)를 붙이는 건 환경 변수나 <code>.env</code> 파일을 통해 지정할 때만 의미가 있어요.</li>\n<li>즉, next.config.js의 <code>env</code> 필드에 설정된 변수들은 모두 클라이언트와 서버 어디서든 접근 가능하니까, 민감한 정보는 넣지 말아야 해요!</li>\n</ul>\n<hr>\n<h3>환경 변수 추가하는 방법</h3>\n<p><code>next.config.js</code> 파일을 열고, <code>env</code> 설정을 추가해줍니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// next.config.js</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">env</span>: {\n    <span class=\"hljs-attr\">CUSTOM_KEY</span>: <span class=\"hljs-string\">'my-value'</span>,\n    <span class=\"hljs-attr\">ANOTHER_KEY</span>: <span class=\"hljs-string\">'another-value'</span>,\n  },\n}\n</code></pre>\n<p>위와 같이 설정하면, 앱 전역에서 <code>process.env.CUSTOM_KEY</code>나 <code>process.env.ANOTHER_KEY</code>로 값을 사용할 수 있어요.</p>\n<hr>\n<h3>.env 파일과 NEXT_PUBLIC_의 차이점</h3>\n<ul>\n<li><code>.env</code> 파일에 <code>NEXT_PUBLIC_</code> 접두어가 붙은 변수는 클라이언트에서도 접근 가능해요.</li>\n<li><code>next.config.js</code>에 직접 추가한 <code>env</code> 변수들은 처음에 말씀드린 대로, 모두 번들에 포함되어 클라이언트와 서버 모두에서 볼 수 있어요.</li>\n<li>가급적이면 민감한 정보를 다룰 때는 서버 전용이나 런타임에 주입하는 방식으로 하는 걸 추천합니다.</li>\n</ul>\n<hr>\n<h3>여기서 더!</h3>\n<ul>\n<li>개발 시에는 <code>.env.local</code> 파일에 환경 변수를 넣고, 빌드 시에만 <code>next.config.js</code>에서 값을 덮어쓰는 방식을 많이 씁니다.</li>\n<li><code>process.env</code>를 사용해서 접근할 때, 타입스크립트를 쓴다면 <code>next-env.d.ts</code>에서 타입 선언도 해두면 편리하답니다.</li>\n<li>환경 변수를 바꾸고 나면 서버 재시작이 필요하다는 점 잊지 마세요!</li>\n</ul>\n<hr>\n<p>어렵지 않으니 한번 적용해보고, 번거로운 환경 변수 관리에서 자유로워져봅시다!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Next.js에서 환경변수를 설정하는 방법에 대해 알아볼게요. 위 코드처럼 <code>next.config.js</code> 파일에 이렇게 작성할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">env</span>: {\n    <span class=\"hljs-attr\">customKey</span>: <span class=\"hljs-string\">'my-value'</span>,\n  },\n}\n</code></pre>\n<p>그러면 앱 어디에서든 <code>process.env.customKey</code>로 값을 가져올 수 있답니다. 예를 들어, 컴포넌트에서 이렇게 사용할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>The value of customKey is: {process.env.customKey}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Page</span>\n</code></pre>\n<p>Next.js는 빌드 타임에 <code>process.env.customKey</code>를 <code>'my-value'</code>로 알아서 바꿔주기 때문에 실제 런타임에 특별한 설정 없이도 값을 쓸 수 있어요.</p>\n<p>여기서 주의할 점!</p>\n<p><code>process.env</code>를 구조 분해할당(destructuring)으로 쓰는 건 안 돼요. 예를 들어:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { customKey } = process.<span class=\"hljs-property\">env</span>; <span class=\"hljs-comment\">// 이런 식은 동작하지 않아요!</span>\n</code></pre>\n<p>이유는 Next.js가 내부적으로 webpack의 DefinePlugin을 사용해서 환경변수를 빌드 타임에 직접 소스코드에 치환하기 때문인데요, 구조 분해할당을 하면 변수 치환이 제대로 안 되거든요.</p>\n<hr>\n<p>또 한가지 팁!</p>\n<ul>\n<li>만약 보안이 필요한 비밀 키(secret key) 같은 값을 환경변수에 넣고 싶다면, <code>env</code> 옵션보다 <code>.env</code> 파일과 <code>next.config.js</code>의 <code>dotenv</code> 설정을 이용하는 게 더 안전해요.</li>\n<li>또한, Next.js 9.4 이상부터는 <code>.env.local</code>, <code>.env.development</code>, <code>.env.production</code> 같은 파일을 통해 환경변수를 관리할 수 있어서 좀 더 편리해졌답니다.</li>\n</ul>\n<p>이 외에도 공식 문서에서 <a href=\"https://nextjs.org/docs/basic-features/environment-variables\" rel=\"nofollow\" target=\"_blank\">Environment Variables</a>를 참고하면 도움이 많이 될 거예요!</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>예를 들어, 아래와 같은 코드가 있다고 해볼게요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>The value of customKey is: {process.env.customKey}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n</code></pre>\n<p>이 코드는 실제로 실행될 때 이렇게 바뀌게 됩니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>The value of customKey is: {'my-value'}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n</code></pre>\n<p>여기서 중요한 점은, <code>process.env.customKey</code>가 런타임 환경변수에서 읽히는 게 아니라, 빌드 타임에 실제 값이 주입된다는 거예요. 그래서 결국 문자열 <code>'my-value'</code>가 JSX에 직접 들어가게 되는 거죠.</p>\n<p>추가로, 리액트 같은 프론트엔드 프레임워크에서 환경 변수를 사용할 때는 보통 <code>.env</code> 파일에 변수를 선언하고, 변수명 앞에 <code>REACT_APP_</code> (또는 사용하는 프레임워크 규칙에 따라) 접두사를 붙여야 잘 인식되는 경우가 많습니다. 예를 들어:</p>\n<p>REACT_APP_CUSTOM_KEY=my-value</p>\n<p>그리고 코드에서는 이렇게 씁니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>The value of customKey is: {process.env.REACT_APP_CUSTOM_KEY}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n</code></pre>\n<p>환경변수를 이렇게 사용하면, 빌드 시점에 안전하게 값이 들어가고, 코드상에서는 직접 하드코딩하지 않아도 돼서 유지보수도 편리해집니다.</p>\n<p>참고로, 환경변수는 보안에 민감할 수 있으니 백엔드에만 필요한 시크릿 값들은 프론트엔드에 노출되지 않도록 주의하는 게 좋습니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}