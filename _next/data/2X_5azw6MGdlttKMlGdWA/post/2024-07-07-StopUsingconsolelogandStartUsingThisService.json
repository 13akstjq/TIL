{"pageProps":{"post":{"title":"consolelog 대신 이 서비스 사용을 시작해야 하는 이유","description":"","date":"2024-07-07 19:25","slug":"2024-07-07-StopUsingconsolelogandStartUsingThisService","content":"\n![Logging Image](/TIL/assets/img/2024-07-07-StopUsingconsolelogandStartUsingThisService_0.png)\n\n로그 기록은 모든 소프트웨어 개발 과정에서 중요한 부분입니다. 이는 개발자가 응용 프로그램을 디버깅하고 작업 흐름을 이해하며 문제를 추적하는 데 도움이 됩니다. 그러나 Angular 응용 프로그램에서 로깅을 위해 console.log에만 의존하면 개발 환경에서 제품 환경으로 넘어갈 때 문제가 발생할 수 있습니다.\n\n이 글에서는 Angular 응용 프로그램에 쉽게 통합할 수 있는 로깅 서비스를 소개하겠습니다. 이 서비스를 이용하면 환경 구성에 따라 로그 레벨을 제어할 수 있어 개발 중에는 상세한 로깅을 사용할 수 있지만 제품 환경에서는 최소화되거나 비활성화될 수 있도록 보장합니다.\n\n# console.log 사용을 그만두어야 하는 이유\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n코드 전체에 흩어진 console.log 문을 사용하면 여러 문제가 발생할 수 있습니다:\n\n- 성능 문제: 프로덕션 환경에서 지나치게 많은 로깅은 성능을 저하시킬 수 있습니다.\n- 보안 위험: 민감한 정보가 로깅되어 노출될 수 있습니다.\n- 혼란: 로그가 빠르게 혼란스러워지며 관련 정보를 찾기 어려울 수 있습니다.\n\n구조화된 로깅 서비스를 사용하면 이러한 문제를 완화하고 언제 어떤 내용을 기록할지에 대해 더 많은 제어를 할 수 있습니다.\n\n# Log Service 소개\n","ogImage":{"url":"/assets/img/2024-07-07-StopUsingconsolelogandStartUsingThisService_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-StopUsingconsolelogandStartUsingThisService_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/TIL/assets/img/2024-07-07-StopUsingconsolelogandStartUsingThisService_0.png\" alt=\"Logging Image\"></p>\n<p>로그 기록은 모든 소프트웨어 개발 과정에서 중요한 부분입니다. 이는 개발자가 응용 프로그램을 디버깅하고 작업 흐름을 이해하며 문제를 추적하는 데 도움이 됩니다. 그러나 Angular 응용 프로그램에서 로깅을 위해 console.log에만 의존하면 개발 환경에서 제품 환경으로 넘어갈 때 문제가 발생할 수 있습니다.</p>\n<p>이 글에서는 Angular 응용 프로그램에 쉽게 통합할 수 있는 로깅 서비스를 소개하겠습니다. 이 서비스를 이용하면 환경 구성에 따라 로그 레벨을 제어할 수 있어 개발 중에는 상세한 로깅을 사용할 수 있지만 제품 환경에서는 최소화되거나 비활성화될 수 있도록 보장합니다.</p>\n<h1>console.log 사용을 그만두어야 하는 이유</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>코드 전체에 흩어진 console.log 문을 사용하면 여러 문제가 발생할 수 있습니다:</p>\n<ul>\n<li>성능 문제: 프로덕션 환경에서 지나치게 많은 로깅은 성능을 저하시킬 수 있습니다.</li>\n<li>보안 위험: 민감한 정보가 로깅되어 노출될 수 있습니다.</li>\n<li>혼란: 로그가 빠르게 혼란스러워지며 관련 정보를 찾기 어려울 수 있습니다.</li>\n</ul>\n<p>구조화된 로깅 서비스를 사용하면 이러한 문제를 완화하고 언제 어떤 내용을 기록할지에 대해 더 많은 제어를 할 수 있습니다.</p>\n<h1>Log Service 소개</h1>\n</body>\n</html>\n"},"__N_SSG":true}