{"pageProps":{"post":{"title":"React와 TypeScript로 Google Analytics 사용 방법","description":"","date":"2024-07-07 21:58","slug":"2024-07-07-GoogleAnalyticsWithReactTypescript","content":"\n<img src=\"/TIL/assets/img/2024-07-07-GoogleAnalyticsWithReactTypescript_0.png\" />\n\n## GA 란?!!\n\nGoogle Analytics (GA)은 웹사이트 트래픽 및 사용자 행동을 추적하고 분석하는 강력한 도구입니다.\n\n다음은 그 동작 방식입니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n당신의 웹사이트에서 GA는 JavaScript 추적 코드를 사용하여 데이터를 수집합니다. 이 코드는 웹사이트 페이지에 삽입되어 방문자에 대한 정보를 수집하고 Google의 서버로 보내어 처리되며 다양한 보고서에서 제공됩니다.\n\n## 구현은 어떻게 작동하나요?\n\nuseGoogleAnalytics.ts는 GA와 통합하기 위한 기본 파일로 사용됩니다. 우리는 유연성과 미래 지향성을 위해 GA 통합을 처리하기 위해 객체를 사용하고 있습니다.\n\nGoogleAnalyticsProvider.tsx는 라우트를 감싸는 공급자 컴포넌트로 사용됩니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nApp.tsx 파일을 수정하여 GoogleAnalyticsProvider 컴포넌트를 추가해주세요.\n\n이 방법을 선택한 이유는?\n\n- 다양한 기능 지원: 페이지 뷰, 이벤트 추적 및 초기화 후 구성을 쉽게 관리할 수 있습니다.\n\n- 미래를 대비: ReactGA에서 다른 솔루션(예: 미래의 GA 버전)으로 전환하더라도 코드 베이스의 각 인스턴스를 모두 업데이트해야 하는 것이 아니라 이 객체만 업데이트하면 됩니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- React 방식: 이 방법은 React의 최상의 실천 방법을 따르며 부작용을 처리하기 위해 컴포넌트를 사용합니다.\n\n// 코드에 있는 주석들\n앱에서 이를 검색하여 로직을 이해하고 앱에서 구현을 더 잘 할 수 있도록 하는 것을 추천합니다: `// 추천:` 및 `// 설명:`\n\nGitHub 저장소: ‘google-analytics-react-ts’\n\nuseGoogleAnalytics.ts.tsx\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport { useEffect } from \"react\";\nimport ReactGA from \"react-ga4\";\n\n// 추천: 환경 변수를 사용하여 비밀로 유지하는 것이 좋습니다.\nexport const trackingId = \"GA_ID\";\nconst appVersion = \"APP_VERSION\";\n// 참고: 분석을 보다 나은 것으로 만들기 위해 앱에서 사용자 ID를 사용하십시오.\n// 추천: Redux로 구현하는 것이 좋습니다.\nconst id = \"user-id\";\n\nconst useGoogleAnalytics = () => {\n  useEffect(() => {\n    if (trackingId) {\n      try {\n        ReactGA.initialize([\n          {\n            trackingId,\n            gaOptions: {\n              anonymizeIp: true,\n              clientId: id,\n            },\n          },\n        ]);\n        ReactGA.set({ app_version: appVersion });\n      } catch (error) {\n        // 추천: 이 오류를 오류 추적 서비스에 보고하는 것이 좋습니다.\n        console.log(\"Google Analytics 초기화 오류\", { Error: error });\n      }\n    }\n  }, [id]);\n\n  const setOption = (key: string, value: unknown) => {\n    ReactGA.set({ [key]: value });\n  };\n\n  const setUserId = (userId: string | number) => {\n    setOption(\"userId\", userId);\n  };\n\n  const sendData = (type: string, data: Object) => {\n    ReactGA.send({ hitType: type, ...data });\n  };\n\n  const trackPageView = (pagePath?: string) => {\n    if (!pagePath) {\n      pagePath = location.href;\n    }\n\n    setOption(\"app_version\", appVersion);\n    sendData(\"pageview\", { page: pagePath });\n  };\n\n  const trackEvent = (category: string, action: string, label?: string, value?: number) => {\n    setOption(\"app_version\", appVersion);\n    ReactGA.event({ category, action, label, value });\n  };\n\n  return {\n    setOption,\n    setUserId,\n    trackPageView,\n    trackEvent,\n  };\n};\n\nexport default useGoogleAnalytics;\n```\n\nGoogleAnalyticsProvider.tsx\n\n```js\nimport React, { useEffect, PropsWithChildren } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport useGoogleAnalytics, { trackingId } from \"../hooks/useGoogleAnalytics\";\n\nconst GoogleAnalyticsProvider: React.FC<PropsWithChildren<{}>> = ({ children }) => {\n  const { trackPageView } = useGoogleAnalytics();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (trackingId) {\n      try {\n        trackPageView(location.pathname + location.search);\n      } catch (error) {\n        // 추천: 이 오류를 오류 추적 서비스에 보고하는 것이 좋습니다.\n        console.log(\"Google Analytics의 trackPageView 실행 오류\", { Error: error });\n      }\n    }\n  }, [location, trackPageView]);\n  // 참고: GoogleAnalyticsProvider가 UI에 영향을 미치지 않고 다른 컴포넌트를 감쌀 수 있도록 합니다.\n  return <>{children}</>;\n};\n\nexport default GoogleAnalyticsProvider;\n```\n\nApp.tsx\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\nimport './App.css';\nimport GoogleAnalyticsProvider from './providers/GoogleAnalyticsProvider';\n\nconst App: React.FC = () => {\n\n  return (\n    // 참고: GoogleAnalyticsProvider를 어디에 배치할지 확인하여 최적의 위치를 지정-\n    // 모든 route 변경을 추적하기 위해 초기화를 최소화하고 오류를 캡처합니다 (오류 추적 서비스 사용 시)\n    <GoogleAnalyticsProvider>\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <div>\n              Google Analytics React TypeScript\n            </div>\n          }\n        />\n      </Routes>\n    </GoogleAnalyticsProvider >\n  );\n}\n\nexport default App;\nexport default App;\n```\n\n## 2가지 구현 방법\n\n1. 일반 추적 (현재 레포지토리) :sunglasses:\n\n장점:\n\n- 간단한 초기화: 설정을 통해 GAInitializer 컴포넌트가 마운트될 때 Google Analytics가 한 번만 초기화됩니다.\n- 페이지 뷰 추적: 페이지 뷰를 추적하는 방법을 제공하여 각 페이지 방문이 로그에 기록되도록 수동으로 처리할 수 있습니다.\n- 사용자 정의 이벤트: trackEventBuilder 메서드를 사용하면 다양한 사용자 상호작용을 추적하는 유연성을 제공합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n단점:\n\n- 수동 페이지 뷰 추적: App 컴포넌트만 래핑하고 각 route 변경을 래핑하지 않기 때문에 각 route 변경마다 trackPageView를 수동으로 호출해야 합니다. 안 할 경우 인간 에러가 발생할 수 있습니다.\n- route 변경 추적 부족: route 변경을 자동으로 추적하지 않기 때문에, 각 컴포넌트에서 명시적으로 trackPageView를 호출하지 않으면 일부 페이지 뷰 로깅을 놓칠 수 있습니다.\n- 제한된 사용자 컨텍스트: 기본 GA가 수집한 것 이상의 상세한 사용자 상호작용 또는 인구통계 데이터를 추적하지 않습니다.\n\n장점:\n\n- 이벤트 추적 기능을 모든 추적하고 싶은 이벤트에 추가\n- 세밀한 제어: 추적할 이벤트와 해당 라벨을 정확하게 제어할 수 있어 매우 상세하고 구체적인 분석 데이터를 얻을 수 있습니다.\n- 사용자 정의: 각 이벤트를 특정 범주, 동작, 라벨 및 값으로 사용자 정의할 수 있어 사용자의 행동과 상호작용에 대한 풍부한 통찰을 제공합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n단점:\n\n- 유지보수 부담 : 애플리케이션이 커지면 수많은 개별 추적 호출을 관리하는 것이 시간이 오래 걸리고 일관되게 유지하는 것이 어려워질 수 있습니다.\n- 코드 중복 : 여러 구성 요소나 함수에서 유사한 추적 코드를 반복해야 할 수 있으며, 결과적으로 DRY (Don't Repeat Yourself) 코드가 줄어들 수 있습니다.\n\n## 콘텐츠 보안 정책 (CSP)\n\nGA를 구현하기 위해 GA 스크립트를 웹 애플리케이션에 포함하고 코드에서 추적을 설정하세요. 'https://www.google-analytics.com`를 script-src 및 connect-src 지시문에 추가하여 GA 서버로의 연결을 허용하도록 CSP를 구성하세요. Google Tag Manager를 사용하는 경우 script-src 지시문에 ‘https://www.googletagmanager.com`도 포함하고 CSP 구성을 철저히 테스트하세요.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 참고 자료\n\nMedium: ‘Google Analytics TypeScript로 React에 구현하기’\n\nYouTube: ‘React JS에 Google Analytics 추가하기’\n","ogImage":{"url":"/assets/img/2024-07-07-GoogleAnalyticsWithReactTypescript_0.png"},"coverImage":"/TIL/assets/img/2024-07-07-GoogleAnalyticsWithReactTypescript_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/TIL/assets/img/2024-07-07-GoogleAnalyticsWithReactTypescript_0.png\">\n<h2>GA 란?!!</h2>\n<p>Google Analytics (GA)은 웹사이트 트래픽 및 사용자 행동을 추적하고 분석하는 강력한 도구입니다.</p>\n<p>다음은 그 동작 방식입니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>당신의 웹사이트에서 GA는 JavaScript 추적 코드를 사용하여 데이터를 수집합니다. 이 코드는 웹사이트 페이지에 삽입되어 방문자에 대한 정보를 수집하고 Google의 서버로 보내어 처리되며 다양한 보고서에서 제공됩니다.</p>\n<h2>구현은 어떻게 작동하나요?</h2>\n<p>useGoogleAnalytics.ts는 GA와 통합하기 위한 기본 파일로 사용됩니다. 우리는 유연성과 미래 지향성을 위해 GA 통합을 처리하기 위해 객체를 사용하고 있습니다.</p>\n<p>GoogleAnalyticsProvider.tsx는 라우트를 감싸는 공급자 컴포넌트로 사용됩니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>App.tsx 파일을 수정하여 GoogleAnalyticsProvider 컴포넌트를 추가해주세요.</p>\n<p>이 방법을 선택한 이유는?</p>\n<ul>\n<li>\n<p>다양한 기능 지원: 페이지 뷰, 이벤트 추적 및 초기화 후 구성을 쉽게 관리할 수 있습니다.</p>\n</li>\n<li>\n<p>미래를 대비: ReactGA에서 다른 솔루션(예: 미래의 GA 버전)으로 전환하더라도 코드 베이스의 각 인스턴스를 모두 업데이트해야 하는 것이 아니라 이 객체만 업데이트하면 됩니다.</p>\n</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>React 방식: 이 방법은 React의 최상의 실천 방법을 따르며 부작용을 처리하기 위해 컴포넌트를 사용합니다.</li>\n</ul>\n<p>// 코드에 있는 주석들\n앱에서 이를 검색하여 로직을 이해하고 앱에서 구현을 더 잘 할 수 있도록 하는 것을 추천합니다: <code>// 추천:</code> 및 <code>// 설명:</code></p>\n<p>GitHub 저장소: ‘google-analytics-react-ts’</p>\n<p>useGoogleAnalytics.ts.tsx</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ReactGA</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-ga4\"</span>;\n\n<span class=\"hljs-comment\">// 추천: 환경 변수를 사용하여 비밀로 유지하는 것이 좋습니다.</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> trackingId = <span class=\"hljs-string\">\"GA_ID\"</span>;\n<span class=\"hljs-keyword\">const</span> appVersion = <span class=\"hljs-string\">\"APP_VERSION\"</span>;\n<span class=\"hljs-comment\">// 참고: 분석을 보다 나은 것으로 만들기 위해 앱에서 사용자 ID를 사용하십시오.</span>\n<span class=\"hljs-comment\">// 추천: Redux로 구현하는 것이 좋습니다.</span>\n<span class=\"hljs-keyword\">const</span> id = <span class=\"hljs-string\">\"user-id\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useGoogleAnalytics</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (trackingId) {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-title class_\">ReactGA</span>.<span class=\"hljs-title function_\">initialize</span>([\n          {\n            trackingId,\n            <span class=\"hljs-attr\">gaOptions</span>: {\n              <span class=\"hljs-attr\">anonymizeIp</span>: <span class=\"hljs-literal\">true</span>,\n              <span class=\"hljs-attr\">clientId</span>: id,\n            },\n          },\n        ]);\n        <span class=\"hljs-title class_\">ReactGA</span>.<span class=\"hljs-title function_\">set</span>({ <span class=\"hljs-attr\">app_version</span>: appVersion });\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-comment\">// 추천: 이 오류를 오류 추적 서비스에 보고하는 것이 좋습니다.</span>\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Google Analytics 초기화 오류\"</span>, { <span class=\"hljs-title class_\">Error</span>: error });\n      }\n    }\n  }, [id]);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">setOption</span> = (<span class=\"hljs-params\">key: string, value: unknown</span>) => {\n    <span class=\"hljs-title class_\">ReactGA</span>.<span class=\"hljs-title function_\">set</span>({ [key]: value });\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">setUserId</span> = (<span class=\"hljs-params\">userId: string | number</span>) => {\n    <span class=\"hljs-title function_\">setOption</span>(<span class=\"hljs-string\">\"userId\"</span>, userId);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sendData</span> = (<span class=\"hljs-params\">type: string, data: <span class=\"hljs-built_in\">Object</span></span>) => {\n    <span class=\"hljs-title class_\">ReactGA</span>.<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">hitType</span>: type, ...data });\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">trackPageView</span> = (<span class=\"hljs-params\">pagePath?: string</span>) => {\n    <span class=\"hljs-keyword\">if</span> (!pagePath) {\n      pagePath = location.<span class=\"hljs-property\">href</span>;\n    }\n\n    <span class=\"hljs-title function_\">setOption</span>(<span class=\"hljs-string\">\"app_version\"</span>, appVersion);\n    <span class=\"hljs-title function_\">sendData</span>(<span class=\"hljs-string\">\"pageview\"</span>, { <span class=\"hljs-attr\">page</span>: pagePath });\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">trackEvent</span> = (<span class=\"hljs-params\">category: string, action: string, label?: string, value?: number</span>) => {\n    <span class=\"hljs-title function_\">setOption</span>(<span class=\"hljs-string\">\"app_version\"</span>, appVersion);\n    <span class=\"hljs-title class_\">ReactGA</span>.<span class=\"hljs-title function_\">event</span>({ category, action, label, value });\n  };\n\n  <span class=\"hljs-keyword\">return</span> {\n    setOption,\n    setUserId,\n    trackPageView,\n    trackEvent,\n  };\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useGoogleAnalytics;\n</code></pre>\n<p>GoogleAnalyticsProvider.tsx</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useEffect, <span class=\"hljs-title class_\">PropsWithChildren</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { useLocation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-router-dom\"</span>;\n<span class=\"hljs-keyword\">import</span> useGoogleAnalytics, { trackingId } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../hooks/useGoogleAnalytics\"</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">GoogleAnalyticsProvider</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&#x3C;<span class=\"hljs-title class_\">PropsWithChildren</span>&#x3C;{}>> = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ children }</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> { trackPageView } = <span class=\"hljs-title function_\">useGoogleAnalytics</span>();\n  <span class=\"hljs-keyword\">const</span> location = <span class=\"hljs-title function_\">useLocation</span>();\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (trackingId) {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-title function_\">trackPageView</span>(location.<span class=\"hljs-property\">pathname</span> + location.<span class=\"hljs-property\">search</span>);\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-comment\">// 추천: 이 오류를 오류 추적 서비스에 보고하는 것이 좋습니다.</span>\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Google Analytics의 trackPageView 실행 오류\"</span>, { <span class=\"hljs-title class_\">Error</span>: error });\n      }\n    }\n  }, [location, trackPageView]);\n  <span class=\"hljs-comment\">// 참고: GoogleAnalyticsProvider가 UI에 영향을 미치지 않고 다른 컴포넌트를 감쌀 수 있도록 합니다.</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>{children}<span class=\"hljs-tag\">&#x3C;/></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">GoogleAnalyticsProvider</span>;\n</code></pre>\n<p>App.tsx</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserRouter</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Router</span>, <span class=\"hljs-title class_\">Route</span>, <span class=\"hljs-title class_\">Routes</span>, useLocation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">GoogleAnalyticsProvider</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./providers/GoogleAnalyticsProvider'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">App</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"hljs-comment\">// 참고: GoogleAnalyticsProvider를 어디에 배치할지 확인하여 최적의 위치를 지정-</span>\n    <span class=\"hljs-comment\">// 모든 route 변경을 추적하기 위해 초기화를 최소화하고 오류를 캡처합니다 (오류 추적 서비스 사용 시)</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">GoogleAnalyticsProvider</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Routes</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span>\n          <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/\"</span>\n          <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>\n            &#x3C;<span class=\"hljs-attr\">div</span>></span>\n              Google Analytics React TypeScript\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n          }\n        />\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Routes</span>></span>\n    &#x3C;/GoogleAnalyticsProvider >\n  );\n}\n\nexport default App;\nexport default App;\n</span></code></pre>\n<h2>2가지 구현 방법</h2>\n<ol>\n<li>일반 추적 (현재 레포지토리) :sunglasses:</li>\n</ol>\n<p>장점:</p>\n<ul>\n<li>간단한 초기화: 설정을 통해 GAInitializer 컴포넌트가 마운트될 때 Google Analytics가 한 번만 초기화됩니다.</li>\n<li>페이지 뷰 추적: 페이지 뷰를 추적하는 방법을 제공하여 각 페이지 방문이 로그에 기록되도록 수동으로 처리할 수 있습니다.</li>\n<li>사용자 정의 이벤트: trackEventBuilder 메서드를 사용하면 다양한 사용자 상호작용을 추적하는 유연성을 제공합니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>단점:</p>\n<ul>\n<li>수동 페이지 뷰 추적: App 컴포넌트만 래핑하고 각 route 변경을 래핑하지 않기 때문에 각 route 변경마다 trackPageView를 수동으로 호출해야 합니다. 안 할 경우 인간 에러가 발생할 수 있습니다.</li>\n<li>route 변경 추적 부족: route 변경을 자동으로 추적하지 않기 때문에, 각 컴포넌트에서 명시적으로 trackPageView를 호출하지 않으면 일부 페이지 뷰 로깅을 놓칠 수 있습니다.</li>\n<li>제한된 사용자 컨텍스트: 기본 GA가 수집한 것 이상의 상세한 사용자 상호작용 또는 인구통계 데이터를 추적하지 않습니다.</li>\n</ul>\n<p>장점:</p>\n<ul>\n<li>이벤트 추적 기능을 모든 추적하고 싶은 이벤트에 추가</li>\n<li>세밀한 제어: 추적할 이벤트와 해당 라벨을 정확하게 제어할 수 있어 매우 상세하고 구체적인 분석 데이터를 얻을 수 있습니다.</li>\n<li>사용자 정의: 각 이벤트를 특정 범주, 동작, 라벨 및 값으로 사용자 정의할 수 있어 사용자의 행동과 상호작용에 대한 풍부한 통찰을 제공합니다.</li>\n</ul>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>단점:</p>\n<ul>\n<li>유지보수 부담 : 애플리케이션이 커지면 수많은 개별 추적 호출을 관리하는 것이 시간이 오래 걸리고 일관되게 유지하는 것이 어려워질 수 있습니다.</li>\n<li>코드 중복 : 여러 구성 요소나 함수에서 유사한 추적 코드를 반복해야 할 수 있으며, 결과적으로 DRY (Don't Repeat Yourself) 코드가 줄어들 수 있습니다.</li>\n</ul>\n<h2>콘텐츠 보안 정책 (CSP)</h2>\n<p>GA를 구현하기 위해 GA 스크립트를 웹 애플리케이션에 포함하고 코드에서 추적을 설정하세요. '<a href=\"https://www.google-analytics.com%60%EB%A5%BC\" rel=\"nofollow\" target=\"_blank\">https://www.google-analytics.com`를</a> script-src 및 connect-src 지시문에 추가하여 GA 서버로의 연결을 허용하도록 CSP를 구성하세요. Google Tag Manager를 사용하는 경우 script-src 지시문에 ‘<a href=\"https://www.googletagmanager.com%60%EB%8F%84\" rel=\"nofollow\" target=\"_blank\">https://www.googletagmanager.com`도</a> 포함하고 CSP 구성을 철저히 테스트하세요.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>참고 자료</h2>\n<p>Medium: ‘Google Analytics TypeScript로 React에 구현하기’</p>\n<p>YouTube: ‘React JS에 Google Analytics 추가하기’</p>\n</body>\n</html>\n"},"__N_SSG":true}