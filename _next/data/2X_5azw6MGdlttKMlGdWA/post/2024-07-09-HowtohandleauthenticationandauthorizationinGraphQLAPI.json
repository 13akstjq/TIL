{"pageProps":{"post":{"title":"GraphQL API에서 인증 및 권한 관리하는 방법","description":"","date":"2024-07-09 20:30","slug":"2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI","content":"\n아래는 작성한 표의 내용이에요.\n\n| 제목                             | 링크                                                                                           |\n| -------------------------------- | ---------------------------------------------------------------------------------------------- |\n| Authentication and authorization | [여기](/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_0.png) |\n\n인증(Authentication)과 권한 부여(authorization)는 종종 혼동되지만, 이러한 개념들은 서로 다른 프로세스를 담당하고 있어요. '인증'은 사용자 식별을 결정하며(사용자가 시스템에 로그인되어 있는지 여부), '권한 부여'는 인증된 사용자가 특정 리소스에 액세스할 수 있는지 여부를 나타냅니다. 그래서 보통 인증 단계가 권한 부여 단계를 선행해요. GraphQL에서 인증과 권한 부여는 도전적일 수 있는데 이는 하나의 노출된 HTTP 엔드포인트 (예: /graphql)만 있기 때문이에요. 이 엔드포인트 진입점에서 사용자를 인증할 수는 있지만, 그 구현에서 일부 리소스에 대한 공개 접근 옵션을 포기해야 할 수 있어요. 이 유일한 엔드포인트 진입에서 권한을 부여하는 것은 불가능해요. 왜냐하면 어떤 리소스가 쿼리될 지 모르기 때문이에요.\n\n이 게시물의 영감은 해당 주제에 대한 답변을 찾는 스택오버플로우 질문에서 얻은 거예요. # 애플리케이션 설정\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저의 텍스트는 Python에서 GraphQL와 REST의 예제 구현을 비교한 내용에 대한 후속 게시물입니다. 따라서 애플리케이션을 설정하는 데 필요한 요구 사항을 찾을 수 있습니다.\n\n# 회원 가입 / 로그인\n\n우선 이메일 및 해싱된 패스워드 속성을 가진 간단한 사용자 모델(User)부터 시작합니다.\n\n```js\nfrom sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import relationship\nfrom db import Base\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    email = Column(String, unique=True)\n    password = Column(String)\n    table_bookings = relationship(\"TableBooking\")\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용자 등록은 이메일과 비밀번호 매개변수를 받아들이고 데이터베이스에 사용자 레코드를 생성하는 SignUp 뮤테이션을 통해 제공됩니다.\n\n```js\n# api/graphql.py\nimport graphene\nfrom service import sign_up\n\nclass SignUp(graphene.Mutation):\n    class Arguments:\n        email = graphene.String(required=True)\n        password = graphene.String(required=True)\n\n   user = graphene.Field(UserNode)\n\n   def mutate(self, info, email: str, password: str):\n        session = info.context[\"session\"]\n        user = sign_up(session, email, password)\n        return SignUp(user=user)\n\nclass Mutation(graphene.ObjectType):\n    sign_up = SignUp.Field()\n\n# service.py\nfrom auth import generate_password_hash\n\nclass UserAlreadyExist(Exception):\n    pass\n\ndef sign_up(session: Session, email: str, password) -> User:\n    if session.query(User).filter_by(email=email).first():\n        raise UserAlreadyExist()\n    user = User(email=email, password=generate_password_hash(password))\n    session.add(user)\n    session.commit()\n    return user\n\n# auth.py\nimport hashlib\n\nSALT = \"STRONg@Salt\"\n\ndef generate_password_hash(password: str) -> str:\n    h = hashlib.md5(f\"{password}{SALT}\".encode())\n    return h.hexdigest()\n```\n\n뮤테이션은 /graphql 엔드포인트에서 POST 요청을 통해 실행됩니다. GraphQL에 대한 이전 게시물과 같이 insomnia를 사용하여 HTTP 요청을 수행합니다.\n\n![이미지](/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_1.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용자 인스턴스가 생성되면 올바른 자격 증명이 전달되면 사용자 인증 JWT 토큰을 생성하는 SignIn 뮤테이션이 필요합니다.\n\n```js\n# api/graphql.py\nimport graphene\nfrom service import sign_in\n\nclass SignIn(graphene.Mutation):\n    class Arguments:\n        email = graphene.String(required=True)\n        password = graphene.String(required=True)\n\n   token = graphene.String()\n\n   def mutate(self, info, email: str, password: str):\n        session = info.context[\"session\"]\n        token = sign_in(session, email, password)\n        return SignIn(token=token)\n\n   class Mutation(graphene.ObjectType):\n        sign_in = SignIn.Field()\n\n# service.py\nfrom sqlalchemy.orm import Session\nfrom auth import generate_token, verify_password\nfrom models import User\n\nclass UserAuthenticationError(Exception):\n    pass\n\ndef sign_in(session: Session, email: str, password) -> str:\n    user = session.query(User).filter_by(email=email).first()\n    if not user:\n        raise UserAuthenticationError()\n    if not verify_password(user, password):\n        raise UserAuthenticationError()\n    return generate_token(user)\n\n# auth.py\nimport hashlib\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer\nfrom models import User\n\nSALT = \"STRONg@Salt\"\nSECRET_KEY = \"!SECRET!\"\nTOKEN_EXPIRES_IN = 3600 * 24 * 30\n\ndef generate_password_hash(password: str) -> str:\n    h = hashlib.md5(f\"{password}{SALT}\".encode())\n    return h.hexdigest()\n\ndef verify_password(user: User, password: str) -> bool:\n    return user.password == generate_password_hash(password)\n\ndef generate_token(user: User) -> str:\n    serializer = Serializer(SECRET_KEY, expires_in=TOKEN_EXPIRES_IN)\n    return serializer.dumps({\"user_id\": user.id}).decode(\"utf-8\")\n```\n\nSignIn 뮤테이션을 위해 이메일과 비밀번호를 전달하고 인증이 필요한 요청에서 사용할 수 있는 토큰을 페이로드로 받습니다.\n\n![이미지](/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_2.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 인증\n\nSignIn 단계에서 생성된 토큰이 있으므로 \"Bearer Authentication\" 프로세스에서 사용할 수 있습니다. 이러한 유형의 인증에서는 유효한 토큰(베어러)을 가진 모든 사용자가 해당 토큰에 해당하는 사용자로 인식될 수 있습니다. 각 GraphQL 필드 리졸버에 사용할 수 있는 sign_in_required 데코레이터를 정의합니다. 이 데코레이터는 \"Authorization\" 요청 헤더에서 토큰을 가져와 해독하여 user_id를 얻은 다음, user_id에 해당하는 User가 있는지 확인합니다. 성공적으로 완료되면 인증된 User가 됩니다.\n\n```js\n# api/graphql.py\n\nimport graphene\nfrom api.auth import sign_in_required\n\nclass Query(graphene.ObjectType):\n    up = graphene.Boolean()\n    restaurants = graphene.relay.ConnectionField(\n        RestaurantConnection, q=graphene.String()\n    )\n    me = graphene.Field(UserNode)\n\n    def resolve_up(root, info, **kwargs):\n        return True\n\n    @sign_in_required()\n    def resolve_restaurants(root, info, **kwargs):\n        query = get_restaurants(\n            info.context[\"session\"], search=kwargs.get(\"q\"), limit=kwargs.get(\"first\")\n        )\n        return [RestaurantNode(id=r.id, name=r.name) for r in query]\n\n    @sign_in_required()\n    def resolve_me(root, info, **kwargs):\n        return kwargs[\"current_user\"]\n\n# api/auth.py\nfrom functools import wraps\nfrom auth import get_user_by_token\nfrom models import User\n\nclass UnauthenticatedUser(Exception):\n    pass\n\ndef sign_in_required():\n    def decorator(func):\n        @wraps(func)\n        def wrapper(root, info, *args, **kwargs):\n            kwargs[\"current_user\"] = get_current_user(info.context)\n            return func(root, info, *args, **kwargs)\n        return wrapper\n    return decorator\n\ndef get_current_user(context) -> User:\n    try:\n        token = get_token_from_request(context[\"request\"])\n        user = get_user_by_token(context[\"session\"], token)\n        if not user:\n            raise UnauthenticatedUser(\"UnauthenticatedUser\")\n        return user\n    except KeyError:\n        raise UnauthenticatedUser(\"UnauthenticatedUser\")\n\ndef get_token_from_request(request) -> str:\n    header = request.headers[\"Authorization\"]\n    token = header.replace(\"Bearer \", \"\", 1)\n    return token\n\n# auth.py\nimport hashlib\nfrom typing import Optional\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer\nfrom sqlalchemy.orm import Session\nfrom models import User\n\nSECRET_KEY = \"!SECRET!\"\nTOKEN_EXPIRES_IN = 3600 * 24 * 30\n\ndef get_user_by_token(session: Session, token: str) -> Optional[User]:\n    serializer = Serializer(SECRET_KEY, expires_in=TOKEN_EXPIRES_IN)\n    data = serializer.loads(token)\n    return session.query(User).get(data[\"user_id\"])\n```\n\nup 필드는 공개 액세스이므로 쿼리를 위해 자격 증명을 전달할 필요가 없습니다. 한편, me 필드는 sign_in_required로 데코레이트되었으므로 적절한 토큰을 전달해야 해결할 수 있습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_3.png)\n\n![이미지](/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_4.png)\n\n\"Authorization\" 헤더에 토큰을 전달하지 않고 sign_in_required로 표시된 필드에 접근하면 UnauthenticatedUser 예외가 발생합니다.\n\n![이미지](/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_5.png)\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 인가\n\n쿼리를 인증하여 로그인한 사용자만 액세스할 수 있도록 제한하는 방법을 살펴보았습니다. 그러나 사용자가 로그인했지만 수행하는 작업이 허용되지 않는 경우는 어떻게 할까요? 예를 들어, 예약한 레스토랑 테이블이 있으며 사용자가 인증되었을 때 허용되어야 하는 경우와 테이블 예약을 취소해야 하는 경우와 같이 사용자가 이전에 생성한 예약만 취소할 수 있는 경우가 있습니다.\n\n우리는 두 가지 작업을 구현했습니다:\n\n- 사용자가 인증되었을 때 허용되어야 하는 BookRestaurantTable 뮤테이션,\n- 취소되어야 하는 TableBooking을 취소하는 CancelTableBooking 뮤테이션.\n\n이를 위해 BookRestaurantTable은 sign_in_required로 데코레이트된 mutate 메서드를 사용하고, CancelTableBooking은 authorize_required로 데코레이트된 새로운 메서드를 사용합니다. 이 데코레이터는 사용자가 인증되었는지 확인하고, table_booking_gid(인스턴스의 전역 ID를 나타내는 값)가 인증된 사용자에 의해 생성된 TableBooking 인스턴스와 일치하는지 확인합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nclass BookRestaurantTable(graphene.Mutation):\n    class Arguments:\n        restaurant_gid = graphene.ID(required=True)\n        persons = graphene.Int(required=True)\n\n    table_booking = graphene.Field(TableBookingNode)\n\n    @sign_in_required()\n    def mutate(self, info, restaurant_gid: str, persons: int, **kwargs):\n        session = info.context[\"session\"]\n        current_user = kwargs[\"current_user\"]\n        _, restaurant_id = from_global_id(restaurant_gid)\n        table_booking = book_restaurant_table(\n            session, restaurant_id, current_user.email, persons\n        )\n        return BookRestaurantTable(\n            table_booking=TableBookingNode(\n                id=table_booking.id,\n                is_active=table_booking.is_active,\n            )\n        )\n\nclass CancelTableBooking(graphene.Mutation):\n    class Arguments:\n        table_booking_gid = graphene.ID(required=True)\n\n    table_booking = graphene.Field(TableBookingNode)\n\n    @authorize_required(TableBooking)\n    def mutate(self, info, table_booking_gid: str, **kwargs):\n        session = info.context[\"session\"]\n        table_booking = kwargs[\"instance\"]\n        cancel_table_booking(session, table_booking)\n        return CancelTableBooking(\n            table_booking=TableBookingNode(\n                id=table_booking.id,\n                is_active=table_booking.is_active,\n            )\n        )\n\nclass Mutation(graphene.ObjectType):\n    book_restaurant_table = BookRestaurantTable.Field()\n    cancel_table_booking = CancelTableBooking.Field()\n\n# api/auth.py\nimport re\nfrom functools import wraps\nfrom graphene.relay.node import from_global_id\nfrom auth import authorize\nfrom models import User\n\ndef camel_to_snake(name: str) -> str:\n    \"\"\"CamelCase -> camel_case\"\"\"\n    return re.sub(r\"(?<!^)(?=[A-Z])\", \"_\", name).lower()\n\nclass UnauthorizedAccess(Exception):\n    pass\n\nclass InstanceNotExist(Exception):\n    pass\n\ndef authorize_required(model):\n    \"\"\"\n    We assume that the global id field name of a resource\n    follow convention like:\n    model_name: `TableBooking`\n    global id field name: `table_booking_gid`\n    \"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(root, info, *args, **kwargs):\n            kwargs[\"current_user\"] = get_current_user(info.context)\n            model_name = model.__name__\n            gid_field_name = f\"{camel_to_snake(model_name)}_gid\"\n            instance_gid = kwargs[gid_field_name]\n            instance_model_name, instance_id = from_global_id(instance_gid)\n            if instance_model_name != f\"{model_name}Node\":\n                raise UnauthorizedAccess(\"UnauthorizedAccess\")\n            instance = info.context[\"session\"].query(model).get(instance_id)\n            if not instance:\n                InstanceNotExist()\n            kwargs[\"instance\"] = instance\n            if not authorize(instance, kwargs[\"current_user\"]):\n                raise UnauthorizedAccess(\"UnauthorizedAccess\")\n            return func(root, info, *args, **kwargs)\n        return wrapper\n    return decorator\n\n# auth.py\nfrom functools import singledispatch\nfrom models import TableBooking, User\n\n@singledispatch\ndef authorize(instance, current_user: User) -> bool:\n    raise NotImplementedError\n\n@authorize.register(TableBooking)\ndef _authorize(instance: TableBooking, current_user: User) -> bool:\n    return instance.user_id == current_user.id\n```\n\nBookRestaurantTable을 실행하기 위해 restaurant_gid 및 persons라는 두 가지 필수 인수를 전달해야 합니다. \"Authorization\" 헤더에 토큰을 추가해야 합니다. Mutation 응답에서는 TableBooking.id를 얻습니다.\n\n이미지가 포함된 파일경로: `/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_6.png`\n\nCancelTableBooking은 BookRestaurantTable 페이로드(TableBooking.id)에서 가져올 수 있는 table_booking_gid만 필요합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_7.png\" />\n\n만약 토큰이 주어진 테이블 예약의 소유자와 일치하지 않는 경우, 동작을 수행할 수 없으며, 권한이 없음 예외가 발생합니다.\n\n<img src=\"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_8.png\" />\n\n# 결론\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n인증 및 권한 부여 단계를 쿼리와 뮤테이션 모두 위한 방법을 소개했어요. 이 구현은 매우 범용적이며 어떤 Python GraphQL 프로젝트에도 쉽게 통합할 수 있어요. 전체 소스 코드는 여기에서 확인할 수 있어요: https://github.com/jorzel/service-layer/tree/auth.\n","ogImage":{"url":"/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_0.png"},"coverImage":"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_0.png","tag":["Tech"],"readingTime":15},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>아래는 작성한 표의 내용이에요.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>제목</th><th>링크</th></tr></thead><tbody><tr><td>Authentication and authorization</td><td><a href=\"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_0.png\">여기</a></td></tr></tbody></table>\n<p>인증(Authentication)과 권한 부여(authorization)는 종종 혼동되지만, 이러한 개념들은 서로 다른 프로세스를 담당하고 있어요. '인증'은 사용자 식별을 결정하며(사용자가 시스템에 로그인되어 있는지 여부), '권한 부여'는 인증된 사용자가 특정 리소스에 액세스할 수 있는지 여부를 나타냅니다. 그래서 보통 인증 단계가 권한 부여 단계를 선행해요. GraphQL에서 인증과 권한 부여는 도전적일 수 있는데 이는 하나의 노출된 HTTP 엔드포인트 (예: /graphql)만 있기 때문이에요. 이 엔드포인트 진입점에서 사용자를 인증할 수는 있지만, 그 구현에서 일부 리소스에 대한 공개 접근 옵션을 포기해야 할 수 있어요. 이 유일한 엔드포인트 진입에서 권한을 부여하는 것은 불가능해요. 왜냐하면 어떤 리소스가 쿼리될 지 모르기 때문이에요.</p>\n<p>이 게시물의 영감은 해당 주제에 대한 답변을 찾는 스택오버플로우 질문에서 얻은 거예요. # 애플리케이션 설정</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>저의 텍스트는 Python에서 GraphQL와 REST의 예제 구현을 비교한 내용에 대한 후속 게시물입니다. 따라서 애플리케이션을 설정하는 데 필요한 요구 사항을 찾을 수 있습니다.</p>\n<h1>회원 가입 / 로그인</h1>\n<p>우선 이메일 및 해싱된 패스워드 속성을 가진 간단한 사용자 모델(User)부터 시작합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> sqlalchemy <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Column</span>, <span class=\"hljs-title class_\">Integer</span>, <span class=\"hljs-title class_\">String</span>\n<span class=\"hljs-keyword\">from</span> sqlalchemy.<span class=\"hljs-property\">orm</span> <span class=\"hljs-keyword\">import</span> relationship\n<span class=\"hljs-keyword\">from</span> db <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Base</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>(<span class=\"hljs-title class_\">Base</span>):\n    __tablename__ = <span class=\"hljs-string\">\"user\"</span>\n\n    id = <span class=\"hljs-title class_\">Column</span>(<span class=\"hljs-title class_\">Integer</span>, primary_key=<span class=\"hljs-title class_\">True</span>, autoincrement=<span class=\"hljs-title class_\">True</span>)\n    email = <span class=\"hljs-title class_\">Column</span>(<span class=\"hljs-title class_\">String</span>, unique=<span class=\"hljs-title class_\">True</span>)\n    password = <span class=\"hljs-title class_\">Column</span>(<span class=\"hljs-title class_\">String</span>)\n    table_bookings = <span class=\"hljs-title function_\">relationship</span>(<span class=\"hljs-string\">\"TableBooking\"</span>)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>사용자 등록은 이메일과 비밀번호 매개변수를 받아들이고 데이터베이스에 사용자 레코드를 생성하는 SignUp 뮤테이션을 통해 제공됩니다.</p>\n<pre><code class=\"hljs language-js\"># api/graphql.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">import</span> graphene\n<span class=\"hljs-keyword\">from</span> service <span class=\"hljs-keyword\">import</span> sign_up\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SignUp</span>(graphene.<span class=\"hljs-property\">Mutation</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Arguments</span>:\n        email = graphene.<span class=\"hljs-title class_\">String</span>(required=<span class=\"hljs-title class_\">True</span>)\n        password = graphene.<span class=\"hljs-title class_\">String</span>(required=<span class=\"hljs-title class_\">True</span>)\n\n   user = graphene.<span class=\"hljs-title class_\">Field</span>(<span class=\"hljs-title class_\">UserNode</span>)\n\n   def <span class=\"hljs-title function_\">mutate</span>(self, info, <span class=\"hljs-attr\">email</span>: str, <span class=\"hljs-attr\">password</span>: str):\n        session = info.<span class=\"hljs-property\">context</span>[<span class=\"hljs-string\">\"session\"</span>]\n        user = <span class=\"hljs-title function_\">sign_up</span>(session, email, password)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">SignUp</span>(user=user)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Mutation</span>(graphene.<span class=\"hljs-property\">ObjectType</span>):\n    sign_up = <span class=\"hljs-title class_\">SignUp</span>.<span class=\"hljs-title class_\">Field</span>()\n\n# service.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> auth <span class=\"hljs-keyword\">import</span> generate_password_hash\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserAlreadyExist</span>(<span class=\"hljs-title class_\">Exception</span>):\n    pass\n\ndef <span class=\"hljs-title function_\">sign_up</span>(<span class=\"hljs-attr\">session</span>: <span class=\"hljs-title class_\">Session</span>, <span class=\"hljs-attr\">email</span>: str, password) -> <span class=\"hljs-title class_\">User</span>:\n    <span class=\"hljs-keyword\">if</span> session.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-title class_\">User</span>).<span class=\"hljs-title function_\">filter_by</span>(email=email).<span class=\"hljs-title function_\">first</span>():\n        raise <span class=\"hljs-title class_\">UserAlreadyExist</span>()\n    user = <span class=\"hljs-title class_\">User</span>(email=email, password=<span class=\"hljs-title function_\">generate_password_hash</span>(password))\n    session.<span class=\"hljs-title function_\">add</span>(user)\n    session.<span class=\"hljs-title function_\">commit</span>()\n    <span class=\"hljs-keyword\">return</span> user\n\n# auth.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">import</span> hashlib\n\n<span class=\"hljs-variable constant_\">SALT</span> = <span class=\"hljs-string\">\"STRONg@Salt\"</span>\n\ndef <span class=\"hljs-title function_\">generate_password_hash</span>(<span class=\"hljs-attr\">password</span>: str) -> <span class=\"hljs-attr\">str</span>:\n    h = hashlib.<span class=\"hljs-title function_\">md5</span>(f<span class=\"hljs-string\">\"{password}{SALT}\"</span>.<span class=\"hljs-title function_\">encode</span>())\n    <span class=\"hljs-keyword\">return</span> h.<span class=\"hljs-title function_\">hexdigest</span>()\n</code></pre>\n<p>뮤테이션은 /graphql 엔드포인트에서 POST 요청을 통해 실행됩니다. GraphQL에 대한 이전 게시물과 같이 insomnia를 사용하여 HTTP 요청을 수행합니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_1.png\" alt=\"이미지\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>사용자 인스턴스가 생성되면 올바른 자격 증명이 전달되면 사용자 인증 JWT 토큰을 생성하는 SignIn 뮤테이션이 필요합니다.</p>\n<pre><code class=\"hljs language-js\"># api/graphql.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">import</span> graphene\n<span class=\"hljs-keyword\">from</span> service <span class=\"hljs-keyword\">import</span> sign_in\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SignIn</span>(graphene.<span class=\"hljs-property\">Mutation</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Arguments</span>:\n        email = graphene.<span class=\"hljs-title class_\">String</span>(required=<span class=\"hljs-title class_\">True</span>)\n        password = graphene.<span class=\"hljs-title class_\">String</span>(required=<span class=\"hljs-title class_\">True</span>)\n\n   token = graphene.<span class=\"hljs-title class_\">String</span>()\n\n   def <span class=\"hljs-title function_\">mutate</span>(self, info, <span class=\"hljs-attr\">email</span>: str, <span class=\"hljs-attr\">password</span>: str):\n        session = info.<span class=\"hljs-property\">context</span>[<span class=\"hljs-string\">\"session\"</span>]\n        token = <span class=\"hljs-title function_\">sign_in</span>(session, email, password)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">SignIn</span>(token=token)\n\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Mutation</span>(graphene.<span class=\"hljs-property\">ObjectType</span>):\n        sign_in = <span class=\"hljs-title class_\">SignIn</span>.<span class=\"hljs-title class_\">Field</span>()\n\n# service.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> sqlalchemy.<span class=\"hljs-property\">orm</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Session</span>\n<span class=\"hljs-keyword\">from</span> auth <span class=\"hljs-keyword\">import</span> generate_token, verify_password\n<span class=\"hljs-keyword\">from</span> models <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">User</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserAuthenticationError</span>(<span class=\"hljs-title class_\">Exception</span>):\n    pass\n\ndef <span class=\"hljs-title function_\">sign_in</span>(<span class=\"hljs-attr\">session</span>: <span class=\"hljs-title class_\">Session</span>, <span class=\"hljs-attr\">email</span>: str, password) -> <span class=\"hljs-attr\">str</span>:\n    user = session.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-title class_\">User</span>).<span class=\"hljs-title function_\">filter_by</span>(email=email).<span class=\"hljs-title function_\">first</span>()\n    <span class=\"hljs-keyword\">if</span> not <span class=\"hljs-attr\">user</span>:\n        raise <span class=\"hljs-title class_\">UserAuthenticationError</span>()\n    <span class=\"hljs-keyword\">if</span> not <span class=\"hljs-title function_\">verify_password</span>(user, password):\n        raise <span class=\"hljs-title class_\">UserAuthenticationError</span>()\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">generate_token</span>(user)\n\n# auth.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">import</span> hashlib\n<span class=\"hljs-keyword\">from</span> itsdangerous <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">TimedJSONWebSignatureSerializer</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Serializer</span>\n<span class=\"hljs-keyword\">from</span> models <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">User</span>\n\n<span class=\"hljs-variable constant_\">SALT</span> = <span class=\"hljs-string\">\"STRONg@Salt\"</span>\n<span class=\"hljs-variable constant_\">SECRET_KEY</span> = <span class=\"hljs-string\">\"!SECRET!\"</span>\n<span class=\"hljs-variable constant_\">TOKEN_EXPIRES_IN</span> = <span class=\"hljs-number\">3600</span> * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">30</span>\n\ndef <span class=\"hljs-title function_\">generate_password_hash</span>(<span class=\"hljs-attr\">password</span>: str) -> <span class=\"hljs-attr\">str</span>:\n    h = hashlib.<span class=\"hljs-title function_\">md5</span>(f<span class=\"hljs-string\">\"{password}{SALT}\"</span>.<span class=\"hljs-title function_\">encode</span>())\n    <span class=\"hljs-keyword\">return</span> h.<span class=\"hljs-title function_\">hexdigest</span>()\n\ndef <span class=\"hljs-title function_\">verify_password</span>(<span class=\"hljs-attr\">user</span>: <span class=\"hljs-title class_\">User</span>, <span class=\"hljs-attr\">password</span>: str) -> <span class=\"hljs-attr\">bool</span>:\n    <span class=\"hljs-keyword\">return</span> user.<span class=\"hljs-property\">password</span> == <span class=\"hljs-title function_\">generate_password_hash</span>(password)\n\ndef <span class=\"hljs-title function_\">generate_token</span>(<span class=\"hljs-attr\">user</span>: <span class=\"hljs-title class_\">User</span>) -> <span class=\"hljs-attr\">str</span>:\n    serializer = <span class=\"hljs-title class_\">Serializer</span>(<span class=\"hljs-variable constant_\">SECRET_KEY</span>, expires_in=<span class=\"hljs-variable constant_\">TOKEN_EXPIRES_IN</span>)\n    <span class=\"hljs-keyword\">return</span> serializer.<span class=\"hljs-title function_\">dumps</span>({<span class=\"hljs-string\">\"user_id\"</span>: user.<span class=\"hljs-property\">id</span>}).<span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-string\">\"utf-8\"</span>)\n</code></pre>\n<p>SignIn 뮤테이션을 위해 이메일과 비밀번호를 전달하고 인증이 필요한 요청에서 사용할 수 있는 토큰을 페이로드로 받습니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_2.png\" alt=\"이미지\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>인증</h1>\n<p>SignIn 단계에서 생성된 토큰이 있으므로 \"Bearer Authentication\" 프로세스에서 사용할 수 있습니다. 이러한 유형의 인증에서는 유효한 토큰(베어러)을 가진 모든 사용자가 해당 토큰에 해당하는 사용자로 인식될 수 있습니다. 각 GraphQL 필드 리졸버에 사용할 수 있는 sign_in_required 데코레이터를 정의합니다. 이 데코레이터는 \"Authorization\" 요청 헤더에서 토큰을 가져와 해독하여 user_id를 얻은 다음, user_id에 해당하는 User가 있는지 확인합니다. 성공적으로 완료되면 인증된 User가 됩니다.</p>\n<pre><code class=\"hljs language-js\"># api/graphql.<span class=\"hljs-property\">py</span>\n\n<span class=\"hljs-keyword\">import</span> graphene\n<span class=\"hljs-keyword\">from</span> api.<span class=\"hljs-property\">auth</span> <span class=\"hljs-keyword\">import</span> sign_in_required\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Query</span>(graphene.<span class=\"hljs-property\">ObjectType</span>):\n    up = graphene.<span class=\"hljs-title class_\">Boolean</span>()\n    restaurants = graphene.<span class=\"hljs-property\">relay</span>.<span class=\"hljs-title class_\">ConnectionField</span>(\n        <span class=\"hljs-title class_\">RestaurantConnection</span>, q=graphene.<span class=\"hljs-title class_\">String</span>()\n    )\n    me = graphene.<span class=\"hljs-title class_\">Field</span>(<span class=\"hljs-title class_\">UserNode</span>)\n\n    def <span class=\"hljs-title function_\">resolve_up</span>(root, info, **kwargs):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">True</span>\n\n    @<span class=\"hljs-title function_\">sign_in_required</span>()\n    def <span class=\"hljs-title function_\">resolve_restaurants</span>(root, info, **kwargs):\n        query = <span class=\"hljs-title function_\">get_restaurants</span>(\n            info.<span class=\"hljs-property\">context</span>[<span class=\"hljs-string\">\"session\"</span>], search=kwargs.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"q\"</span>), limit=kwargs.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"first\"</span>)\n        )\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-title class_\">RestaurantNode</span>(id=r.<span class=\"hljs-property\">id</span>, name=r.<span class=\"hljs-property\">name</span>) <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> query]\n\n    @<span class=\"hljs-title function_\">sign_in_required</span>()\n    def <span class=\"hljs-title function_\">resolve_me</span>(root, info, **kwargs):\n        <span class=\"hljs-keyword\">return</span> kwargs[<span class=\"hljs-string\">\"current_user\"</span>]\n\n# api/auth.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> wraps\n<span class=\"hljs-keyword\">from</span> auth <span class=\"hljs-keyword\">import</span> get_user_by_token\n<span class=\"hljs-keyword\">from</span> models <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">User</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UnauthenticatedUser</span>(<span class=\"hljs-title class_\">Exception</span>):\n    pass\n\ndef <span class=\"hljs-title function_\">sign_in_required</span>():\n    def <span class=\"hljs-title function_\">decorator</span>(func):\n        @<span class=\"hljs-title function_\">wraps</span>(func)\n        def <span class=\"hljs-title function_\">wrapper</span>(root, info, *args, **kwargs):\n            kwargs[<span class=\"hljs-string\">\"current_user\"</span>] = <span class=\"hljs-title function_\">get_current_user</span>(info.<span class=\"hljs-property\">context</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">func</span>(root, info, *args, **kwargs)\n        <span class=\"hljs-keyword\">return</span> wrapper\n    <span class=\"hljs-keyword\">return</span> decorator\n\ndef <span class=\"hljs-title function_\">get_current_user</span>(context) -> <span class=\"hljs-title class_\">User</span>:\n    <span class=\"hljs-attr\">try</span>:\n        token = <span class=\"hljs-title function_\">get_token_from_request</span>(context[<span class=\"hljs-string\">\"request\"</span>])\n        user = <span class=\"hljs-title function_\">get_user_by_token</span>(context[<span class=\"hljs-string\">\"session\"</span>], token)\n        <span class=\"hljs-keyword\">if</span> not <span class=\"hljs-attr\">user</span>:\n            raise <span class=\"hljs-title class_\">UnauthenticatedUser</span>(<span class=\"hljs-string\">\"UnauthenticatedUser\"</span>)\n        <span class=\"hljs-keyword\">return</span> user\n    except <span class=\"hljs-title class_\">KeyError</span>:\n        raise <span class=\"hljs-title class_\">UnauthenticatedUser</span>(<span class=\"hljs-string\">\"UnauthenticatedUser\"</span>)\n\ndef <span class=\"hljs-title function_\">get_token_from_request</span>(request) -> <span class=\"hljs-attr\">str</span>:\n    header = request.<span class=\"hljs-property\">headers</span>[<span class=\"hljs-string\">\"Authorization\"</span>]\n    token = header.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">\"Bearer \"</span>, <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">return</span> token\n\n# auth.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">import</span> hashlib\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Optional</span>\n<span class=\"hljs-keyword\">from</span> itsdangerous <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">TimedJSONWebSignatureSerializer</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Serializer</span>\n<span class=\"hljs-keyword\">from</span> sqlalchemy.<span class=\"hljs-property\">orm</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Session</span>\n<span class=\"hljs-keyword\">from</span> models <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">User</span>\n\n<span class=\"hljs-variable constant_\">SECRET_KEY</span> = <span class=\"hljs-string\">\"!SECRET!\"</span>\n<span class=\"hljs-variable constant_\">TOKEN_EXPIRES_IN</span> = <span class=\"hljs-number\">3600</span> * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">30</span>\n\ndef <span class=\"hljs-title function_\">get_user_by_token</span>(<span class=\"hljs-attr\">session</span>: <span class=\"hljs-title class_\">Session</span>, <span class=\"hljs-attr\">token</span>: str) -> <span class=\"hljs-title class_\">Optional</span>[<span class=\"hljs-title class_\">User</span>]:\n    serializer = <span class=\"hljs-title class_\">Serializer</span>(<span class=\"hljs-variable constant_\">SECRET_KEY</span>, expires_in=<span class=\"hljs-variable constant_\">TOKEN_EXPIRES_IN</span>)\n    data = serializer.<span class=\"hljs-title function_\">loads</span>(token)\n    <span class=\"hljs-keyword\">return</span> session.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-title class_\">User</span>).<span class=\"hljs-title function_\">get</span>(data[<span class=\"hljs-string\">\"user_id\"</span>])\n</code></pre>\n<p>up 필드는 공개 액세스이므로 쿼리를 위해 자격 증명을 전달할 필요가 없습니다. 한편, me 필드는 sign_in_required로 데코레이트되었으므로 적절한 토큰을 전달해야 해결할 수 있습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_3.png\" alt=\"이미지\"></p>\n<p><img src=\"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_4.png\" alt=\"이미지\"></p>\n<p>\"Authorization\" 헤더에 토큰을 전달하지 않고 sign_in_required로 표시된 필드에 접근하면 UnauthenticatedUser 예외가 발생합니다.</p>\n<p><img src=\"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_5.png\" alt=\"이미지\"></p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>인가</h1>\n<p>쿼리를 인증하여 로그인한 사용자만 액세스할 수 있도록 제한하는 방법을 살펴보았습니다. 그러나 사용자가 로그인했지만 수행하는 작업이 허용되지 않는 경우는 어떻게 할까요? 예를 들어, 예약한 레스토랑 테이블이 있으며 사용자가 인증되었을 때 허용되어야 하는 경우와 테이블 예약을 취소해야 하는 경우와 같이 사용자가 이전에 생성한 예약만 취소할 수 있는 경우가 있습니다.</p>\n<p>우리는 두 가지 작업을 구현했습니다:</p>\n<ul>\n<li>사용자가 인증되었을 때 허용되어야 하는 BookRestaurantTable 뮤테이션,</li>\n<li>취소되어야 하는 TableBooking을 취소하는 CancelTableBooking 뮤테이션.</li>\n</ul>\n<p>이를 위해 BookRestaurantTable은 sign_in_required로 데코레이트된 mutate 메서드를 사용하고, CancelTableBooking은 authorize_required로 데코레이트된 새로운 메서드를 사용합니다. 이 데코레이터는 사용자가 인증되었는지 확인하고, table_booking_gid(인스턴스의 전역 ID를 나타내는 값)가 인증된 사용자에 의해 생성된 TableBooking 인스턴스와 일치하는지 확인합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookRestaurantTable</span>(graphene.<span class=\"hljs-property\">Mutation</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Arguments</span>:\n        restaurant_gid = graphene.<span class=\"hljs-title function_\">ID</span>(required=<span class=\"hljs-title class_\">True</span>)\n        persons = graphene.<span class=\"hljs-title class_\">Int</span>(required=<span class=\"hljs-title class_\">True</span>)\n\n    table_booking = graphene.<span class=\"hljs-title class_\">Field</span>(<span class=\"hljs-title class_\">TableBookingNode</span>)\n\n    @<span class=\"hljs-title function_\">sign_in_required</span>()\n    def <span class=\"hljs-title function_\">mutate</span>(self, info, <span class=\"hljs-attr\">restaurant_gid</span>: str, <span class=\"hljs-attr\">persons</span>: int, **kwargs):\n        session = info.<span class=\"hljs-property\">context</span>[<span class=\"hljs-string\">\"session\"</span>]\n        current_user = kwargs[<span class=\"hljs-string\">\"current_user\"</span>]\n        _, restaurant_id = <span class=\"hljs-title function_\">from_global_id</span>(restaurant_gid)\n        table_booking = <span class=\"hljs-title function_\">book_restaurant_table</span>(\n            session, restaurant_id, current_user.<span class=\"hljs-property\">email</span>, persons\n        )\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">BookRestaurantTable</span>(\n            table_booking=<span class=\"hljs-title class_\">TableBookingNode</span>(\n                id=table_booking.<span class=\"hljs-property\">id</span>,\n                is_active=table_booking.<span class=\"hljs-property\">is_active</span>,\n            )\n        )\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CancelTableBooking</span>(graphene.<span class=\"hljs-property\">Mutation</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Arguments</span>:\n        table_booking_gid = graphene.<span class=\"hljs-title function_\">ID</span>(required=<span class=\"hljs-title class_\">True</span>)\n\n    table_booking = graphene.<span class=\"hljs-title class_\">Field</span>(<span class=\"hljs-title class_\">TableBookingNode</span>)\n\n    @<span class=\"hljs-title function_\">authorize_required</span>(<span class=\"hljs-title class_\">TableBooking</span>)\n    def <span class=\"hljs-title function_\">mutate</span>(self, info, <span class=\"hljs-attr\">table_booking_gid</span>: str, **kwargs):\n        session = info.<span class=\"hljs-property\">context</span>[<span class=\"hljs-string\">\"session\"</span>]\n        table_booking = kwargs[<span class=\"hljs-string\">\"instance\"</span>]\n        <span class=\"hljs-title function_\">cancel_table_booking</span>(session, table_booking)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">CancelTableBooking</span>(\n            table_booking=<span class=\"hljs-title class_\">TableBookingNode</span>(\n                id=table_booking.<span class=\"hljs-property\">id</span>,\n                is_active=table_booking.<span class=\"hljs-property\">is_active</span>,\n            )\n        )\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Mutation</span>(graphene.<span class=\"hljs-property\">ObjectType</span>):\n    book_restaurant_table = <span class=\"hljs-title class_\">BookRestaurantTable</span>.<span class=\"hljs-title class_\">Field</span>()\n    cancel_table_booking = <span class=\"hljs-title class_\">CancelTableBooking</span>.<span class=\"hljs-title class_\">Field</span>()\n\n# api/auth.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> wraps\n<span class=\"hljs-keyword\">from</span> graphene.<span class=\"hljs-property\">relay</span>.<span class=\"hljs-property\">node</span> <span class=\"hljs-keyword\">import</span> from_global_id\n<span class=\"hljs-keyword\">from</span> auth <span class=\"hljs-keyword\">import</span> authorize\n<span class=\"hljs-keyword\">from</span> models <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">User</span>\n\ndef <span class=\"hljs-title function_\">camel_to_snake</span>(<span class=\"hljs-attr\">name</span>: str) -> <span class=\"hljs-attr\">str</span>:\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"CamelCase -> camel_case\"</span><span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-keyword\">return</span> re.<span class=\"hljs-title function_\">sub</span>(r<span class=\"hljs-string\">\"(?&#x3C;!^)(?=[A-Z])\"</span>, <span class=\"hljs-string\">\"_\"</span>, name).<span class=\"hljs-title function_\">lower</span>()\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UnauthorizedAccess</span>(<span class=\"hljs-title class_\">Exception</span>):\n    pass\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InstanceNotExist</span>(<span class=\"hljs-title class_\">Exception</span>):\n    pass\n\ndef <span class=\"hljs-title function_\">authorize_required</span>(model):\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    We assume that the global id field name of a resource\n    follow convention like:\n    model_name: `TableBooking`\n    global id field name: `table_booking_gid`\n    \"</span><span class=\"hljs-string\">\"\"</span>\n    def <span class=\"hljs-title function_\">decorator</span>(func):\n        @<span class=\"hljs-title function_\">wraps</span>(func)\n        def <span class=\"hljs-title function_\">wrapper</span>(root, info, *args, **kwargs):\n            kwargs[<span class=\"hljs-string\">\"current_user\"</span>] = <span class=\"hljs-title function_\">get_current_user</span>(info.<span class=\"hljs-property\">context</span>)\n            model_name = model.<span class=\"hljs-property\">__name__</span>\n            gid_field_name = f<span class=\"hljs-string\">\"{camel_to_snake(model_name)}_gid\"</span>\n            instance_gid = kwargs[gid_field_name]\n            instance_model_name, instance_id = <span class=\"hljs-title function_\">from_global_id</span>(instance_gid)\n            <span class=\"hljs-keyword\">if</span> instance_model_name != f<span class=\"hljs-string\">\"{model_name}Node\"</span>:\n                raise <span class=\"hljs-title class_\">UnauthorizedAccess</span>(<span class=\"hljs-string\">\"UnauthorizedAccess\"</span>)\n            instance = info.<span class=\"hljs-property\">context</span>[<span class=\"hljs-string\">\"session\"</span>].<span class=\"hljs-title function_\">query</span>(model).<span class=\"hljs-title function_\">get</span>(instance_id)\n            <span class=\"hljs-keyword\">if</span> not <span class=\"hljs-attr\">instance</span>:\n                <span class=\"hljs-title class_\">InstanceNotExist</span>()\n            kwargs[<span class=\"hljs-string\">\"instance\"</span>] = instance\n            <span class=\"hljs-keyword\">if</span> not <span class=\"hljs-title function_\">authorize</span>(instance, kwargs[<span class=\"hljs-string\">\"current_user\"</span>]):\n                raise <span class=\"hljs-title class_\">UnauthorizedAccess</span>(<span class=\"hljs-string\">\"UnauthorizedAccess\"</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">func</span>(root, info, *args, **kwargs)\n        <span class=\"hljs-keyword\">return</span> wrapper\n    <span class=\"hljs-keyword\">return</span> decorator\n\n# auth.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> singledispatch\n<span class=\"hljs-keyword\">from</span> models <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">TableBooking</span>, <span class=\"hljs-title class_\">User</span>\n\n@singledispatch\ndef <span class=\"hljs-title function_\">authorize</span>(instance, <span class=\"hljs-attr\">current_user</span>: <span class=\"hljs-title class_\">User</span>) -> <span class=\"hljs-attr\">bool</span>:\n    raise <span class=\"hljs-title class_\">NotImplementedError</span>\n\n@authorize.<span class=\"hljs-title function_\">register</span>(<span class=\"hljs-title class_\">TableBooking</span>)\ndef <span class=\"hljs-title function_\">_authorize</span>(<span class=\"hljs-attr\">instance</span>: <span class=\"hljs-title class_\">TableBooking</span>, <span class=\"hljs-attr\">current_user</span>: <span class=\"hljs-title class_\">User</span>) -> <span class=\"hljs-attr\">bool</span>:\n    <span class=\"hljs-keyword\">return</span> instance.<span class=\"hljs-property\">user_id</span> == current_user.<span class=\"hljs-property\">id</span>\n</code></pre>\n<p>BookRestaurantTable을 실행하기 위해 restaurant_gid 및 persons라는 두 가지 필수 인수를 전달해야 합니다. \"Authorization\" 헤더에 토큰을 추가해야 합니다. Mutation 응답에서는 TableBooking.id를 얻습니다.</p>\n<p>이미지가 포함된 파일경로: <code>/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_6.png</code></p>\n<p>CancelTableBooking은 BookRestaurantTable 페이로드(TableBooking.id)에서 가져올 수 있는 table_booking_gid만 필요합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_7.png\">\n<p>만약 토큰이 주어진 테이블 예약의 소유자와 일치하지 않는 경우, 동작을 수행할 수 없으며, 권한이 없음 예외가 발생합니다.</p>\n<img src=\"/TIL/assets/img/2024-07-09-HowtohandleauthenticationandauthorizationinGraphQLAPI_8.png\">\n<h1>결론</h1>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>인증 및 권한 부여 단계를 쿼리와 뮤테이션 모두 위한 방법을 소개했어요. 이 구현은 매우 범용적이며 어떤 Python GraphQL 프로젝트에도 쉽게 통합할 수 있어요. 전체 소스 코드는 여기에서 확인할 수 있어요: <a href=\"https://github.com/jorzel/service-layer/tree/auth\" rel=\"nofollow\" target=\"_blank\">https://github.com/jorzel/service-layer/tree/auth</a>.</p>\n</body>\n</html>\n"},"__N_SSG":true}