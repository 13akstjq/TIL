{"pageProps":{"post":{"title":"PyBroker를 사용한 포트폴리오 최적화 방법","description":"","date":"2024-07-09 14:26","slug":"2024-07-09-PortfolioOptimizationwithPyBroker","content":"\n<img src=\"/TIL/assets/img/2024-07-09-PortfolioOptimizationwithPyBroker_0.png\" />\n\n포트폴리오 최적화는 포트폴리오 내 자산을 특정 목표를 충족시키기 위해 할당하는 방법입니다. 예를 들어, 이는 리스크를 최소화하고 수익을 극대화하는 목표로 자산 포트폴리오를 구성하는 데 사용할 수 있습니다.\n\n포트폴리오 최적화는 정기적으로 주식 포트폴리오를 리밸런싱하는 유용한 기술일 수 있습니다. 이 접근 방식을 통해 우리는 포트폴리오의 원하는 목표를 달성하기 위해 가장 최적의 방법으로 주식을 매수하고 매도할 수 있습니다.\n\n이 글에서는 Python과 PyBroker를 사용하여 매월 초에 포트폴리오를 리밸런싱하는 거래 전략을 시뮬레이션하는 방법을 살펴볼 것입니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 설정\n\n거래 전략을 시뮬레이션하기 위해서는 Python에서 백테스팅 프레임워크를 사용할 수 있습니다. 우리는 트레이딩 전략을 개발하기 위한 오픈소스 Python 프레임워크인 PyBroker을 사용할 것입니다. PyBroker을 사용하기 위해 아래의 명령어를 터미널에 입력하여 라이브러리를 설치할 수 있습니다:\n\n```js\npip install -U lib-pybroker\n```\n\n그 다음으로, 우리가 PyBroker에서 구현할 전략을 위해 포트폴리오 최적화를 수행할 수 있는 Riskfolio-Lib을 설치해봅시다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```shell\npip install -U riskfolio-lib\n```\n\n위의 패키지를 설치한 후, 필요한 라이브러리를 import하여 새 노트북을 만들어봅시다:\n\n```shell\nimport pandas as pd\nimport pybroker as pyb\nimport riskfolio as rp\nfrom datetime import datetime\nfrom pybroker import ExecContext, Strategy, YFinance\n```\n\n또한 PyBroker에서 데이터 캐싱을 활성화할 수도 있습니다. 이렇게 하면 Yahoo Finance로부터 다운로드된 히스토리컬 데이터가 캐싱되어 전략을 테스트할 수 있습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npyb.enable_data_source_cache(\"rebalancing\");\n```\n\n## Positions Rebalancing\n\n우리는 PyBroker를 사용하여 매달 처음에 길이만 있는 포트폴리오를 동일한 포지션 사이징을 사용하여 리밸런싱(rebalancing)하는 간단한 전략을 작성해 보겠습니다. 말하자면, 매월 초에 우리 전략은 포트폴리오의 각 주식이 대략적으로 동일한 할당을 갖도록 충분한 주식을 매수하거나 매도할 것입니다.\n\n먼저, 주식의 목표 할당에 도달하기 위해 주식의 충분한 주식을 매수하거나 매도할 수 있는 함수를 구현하는 것으로 시작합니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\ndef set_target_shares(\n    ctxs: dict[str, ExecContext],  # 종목 심볼 -> 실행 컨텍스트\n    targets: dict[str, float]      # 종목 심볼 -> 목표 가중치\n):\n    for symbol, target in targets.items():\n        ctx = ctxs[symbol]\n        # 목표 가중치를 사용하여 목표 주식수 계산\n        target_shares = ctx.calc_target_shares(target)\n        pos = ctx.long_pos()\n        # 현재 해당 종목의 매수 포지션이 없는 경우 매수\n        if pos is None:\n            ctx.buy_shares = target_shares\n        # 아니면, 목표치에 도달할 만큼 주식을 매수\n        elif pos.shares < target_shares:\n            ctx.buy_shares = target_shares - pos.shares\n        # 현재 할당이 목표 수준을 초과하는 경우, 충분한 주식 매도\n        elif pos.shares > target_shares:\n            ctx.sell_shares = pos.shares - target_shares\n```\n\n현재 할당이 목표 수준을 초과하면 해당 자산의 필요 주식을 판매하고, 현재 할당이 목표 수준 미만이면 해당 자산의 필요 주식을 구매하는 함수입니다.\n\n다음으로 매월 초에 각 주식을 동일 비중으로 타겟팅하는 리밸런싱 함수를 작성합니다:\n\n```python\ndef rebalance(ctxs: dict[str, ExecContext]):\n    if start_of_month(ctxs):\n        target = 1 / len(ctxs)  # 동일 가중치\n        set_target_shares(ctxs, {symbol: target for symbol in ctxs.keys()})\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그럼 이제 새로운 달의 시작을 감지하는 도우미 함수를 구현해 봅시다:\n\n```js\ndef start_of_month(ctxs: dict[str, ExecContext]) -> bool:\n    dt = tuple(ctxs.values())[0].dt\n    if dt.month != pyb.param('current_month'):\n        pyb.param('current_month', dt.month)\n        return True\n    return False\n```\n\n이제 이러한 함수들을 사용하여 다섯 가지 주식 포트폴리오를 위한 리밸런싱 전략을 백테스트할 수 있습니다.\n\n```js\nstrategy = Strategy(YFinance(), (start_date = \"1/1/2018\"), (end_date = \"1/1/2023\"));\nstrategy.add_execution(None, [\"TSLA\", \"NFLX\", \"AAPL\", \"NVDA\", \"AMZN\"]);\nstrategy.set_after_exec(rebalance);\nresult = strategy.backtest();\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n백테스트를 실행한 후에는 주문 목록을 확인할 수 있습니다:\n\n```js\nresult.orders;\n```\n\n```js\n     type symbol date        shares  limit_price  fill_price  fees\nid\n1    buy  NFLX   2018-01-03  99      NaN          203.86      0.0\n2    buy  AAPL   2018-01-03  464     NaN           43.31      0.0\n3    buy  TSLA   2018-01-03  935     NaN           21.36      0.0\n4    buy  AMZN   2018-01-03  336     NaN           59.84      0.0\n5    buy  NVDA   2018-01-03  376     NaN           52.18      0.0\n... ... ... ... ... ... ... ...\n292  sell NFLX   2022-12-02   15     NaN         315.99       0.0\n293  sell NVDA   2022-12-02   97     NaN         166.89       0.0\n294  buy  AAPL   2022-12-02   27     NaN         146.82       0.0\n295  buy  TSLA   2022-12-02   70     NaN         193.68       0.0\n296  buy  AMZN   2022-12-02   41     NaN          94.57       0.0\n```\n\n그리고 우리의 전략을 평가하기 위한 성능 지표를 확인할 수 있습니다:\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nresult.metrics_df;\n```\n\n```js\ntrade_count                 207.000000\ninitial_market_value     100000.000000\nend_market_value         320498.810000\ntotal_pnl                305804.840000\ntotal_return_pct            305.804840\nmax_drawdown            -332039.770000\nmax_drawdown_pct            -52.068777\n```\n\n## 포트폴리오 최적화 사용\n\n포트폴리오에서 각 주식을 동일한 포지션 크기로 할당하는 대신, 포트폴리오 최적화를 사용하여 각 주식의 할당을 결정해 보겠습니다.\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRiskfolio-Lib을 사용하여 포트폴리오에서 각 주식에 할당해야 하는 금액을 최소화하여 리스크를 계산할 수 있어요. 이것은 각 주식과 연관된 과거 리스크를 측정함으로써 할 수 있어요.\n\n조건부 가치위험(CVaR)은 각 주식의 위험을 평가하는 한 가지 방법이에요. 특정 확률 수준 이상의 최악의 시나리오에서 예상 손실을 제공해요. 예를 들어, CVaR은 95% 신뢰 수준을 고려할 때 시나리오 중 최악의 5%에서의 평균 손실을 추정할 수 있어요.\n\n아래에서는 작년의 수익률을 사용하여 CVaR을 최소화하고 포트폴리오에 할당하기 위해 RiskFolio-Lib을 사용했어요.\n\n```js\npyb.param('lookback', 252)  # 작년의 수익률 사용 -> 252 바.\n\ndef calculate_returns(ctxs: dict[str, ExecContext], lookback: int):\n    prices = {}\n    for ctx in ctxs.values():\n        prices[ctx.symbol] = ctx.adj_close[-lookback:]\n    df = pd.DataFrame(prices)\n    return df.pct_change().dropna()\n\ndef optimization(ctxs: dict[str, ExecContext]):\n    if start_of_month(ctxs):\n        Y = calculate_returns(ctxs, lookback)\n        port = rp.Portfolio(returns=Y)\n        port.assets_stats(method_mu='hist', method_cov='hist', d=0.94)\n        # CVaR을 최소화한 후 목표 가중치 얻기.\n        w = port.optimization(\n            model='Classic',\n            rm='CVaR',\n            obj='MinRisk',\n            rf=0,      # 무위험 이자율.\n            l=0,       # 리스크 회피 계수.\n            hist=True  # 과거 시나리오 사용.\n        )\n        targets = {\n            symbol: w.T[symbol].values[0]\n            for symbol in ctxs.keys()\n        }\n        set_target_shares(ctxs, targets)\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRiskfolio-Lib의 공식 문서에서 더 많은 정보와 예제를 찾을 수 있어요. 이제 전략의 백테스팅으로 넘어가 볼까요?\n\n```js\nstrategy.set_after_exec(optimization);\nresult = strategy.backtest((warmup = pyb.param(\"lookback\")));\n```\n\n여기서는 새 전략의 성과 지표를 확인해 봅시다:\n\n```js\ntrade_count                     100.000000\ninitial_market_value         100000.000000\nend_market_value             201318.070000\ntotal_pnl                    139465.420000\ntotal_return_pct                139.465420\nmax_drawdown                -106042.150000\nmax_drawdown_pct                -35.190829\n```\n\n<!-- TIL 수평 -->\n\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-4877378276818686\"\n     data-ad-slot=\"1549334788\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n흥미로운 내용이에요! 이 전략을 사용한 수익률이 평균 포지션 사이즈와 비교했을 때 적은 것을 볼 수 있어요 (139% vs 305%), 그런데 최대 손실액은 낮았다는 것도 알 수 있어요 (35% vs 52%). CVaR을 최소화하는 것이 포트폴리오의 전체 수익률을 크게 줄였다는 점을 고려해봤을 때, 이에 따라 포트폴리오의 하락폭도 크게 감소했어요!\n\n그리고 이 글로 마무리 지을게요! 이제 여러분도 포트폴리오 최적화를 자신만의 거래 전략에 사용하는데 충분히 장비가 되었을 거에요. 또한 https://www.pybroker.com에서 PyBroker 사용에 대한 더 많은 튜토리얼을 찾아볼 수 있어요. 모든 코드는 Github 저장소에서 확인할 수 있어요.\n\n읽어 주셔서 감사합니다!\n","ogImage":{"url":"/assets/img/2024-07-09-PortfolioOptimizationwithPyBroker_0.png"},"coverImage":"/TIL/assets/img/2024-07-09-PortfolioOptimizationwithPyBroker_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/TIL/assets/img/2024-07-09-PortfolioOptimizationwithPyBroker_0.png\">\n<p>포트폴리오 최적화는 포트폴리오 내 자산을 특정 목표를 충족시키기 위해 할당하는 방법입니다. 예를 들어, 이는 리스크를 최소화하고 수익을 극대화하는 목표로 자산 포트폴리오를 구성하는 데 사용할 수 있습니다.</p>\n<p>포트폴리오 최적화는 정기적으로 주식 포트폴리오를 리밸런싱하는 유용한 기술일 수 있습니다. 이 접근 방식을 통해 우리는 포트폴리오의 원하는 목표를 달성하기 위해 가장 최적의 방법으로 주식을 매수하고 매도할 수 있습니다.</p>\n<p>이 글에서는 Python과 PyBroker를 사용하여 매월 초에 포트폴리오를 리밸런싱하는 거래 전략을 시뮬레이션하는 방법을 살펴볼 것입니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>설정</h2>\n<p>거래 전략을 시뮬레이션하기 위해서는 Python에서 백테스팅 프레임워크를 사용할 수 있습니다. 우리는 트레이딩 전략을 개발하기 위한 오픈소스 Python 프레임워크인 PyBroker을 사용할 것입니다. PyBroker을 사용하기 위해 아래의 명령어를 터미널에 입력하여 라이브러리를 설치할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">pip install -U lib-pybroker\n</code></pre>\n<p>그 다음으로, 우리가 PyBroker에서 구현할 전략을 위해 포트폴리오 최적화를 수행할 수 있는 Riskfolio-Lib을 설치해봅시다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-shell\">pip install -U riskfolio-lib\n</code></pre>\n<p>위의 패키지를 설치한 후, 필요한 라이브러리를 import하여 새 노트북을 만들어봅시다:</p>\n<pre><code class=\"hljs language-shell\">import pandas as pd\nimport pybroker as pyb\nimport riskfolio as rp\nfrom datetime import datetime\nfrom pybroker import ExecContext, Strategy, YFinance\n</code></pre>\n<p>또한 PyBroker에서 데이터 캐싱을 활성화할 수도 있습니다. 이렇게 하면 Yahoo Finance로부터 다운로드된 히스토리컬 데이터가 캐싱되어 전략을 테스트할 수 있습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">pyb.<span class=\"hljs-title function_\">enable_data_source_cache</span>(<span class=\"hljs-string\">\"rebalancing\"</span>);\n</code></pre>\n<h2>Positions Rebalancing</h2>\n<p>우리는 PyBroker를 사용하여 매달 처음에 길이만 있는 포트폴리오를 동일한 포지션 사이징을 사용하여 리밸런싱(rebalancing)하는 간단한 전략을 작성해 보겠습니다. 말하자면, 매월 초에 우리 전략은 포트폴리오의 각 주식이 대략적으로 동일한 할당을 갖도록 충분한 주식을 매수하거나 매도할 것입니다.</p>\n<p>먼저, 주식의 목표 할당에 도달하기 위해 주식의 충분한 주식을 매수하거나 매도할 수 있는 함수를 구현하는 것으로 시작합니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_target_shares</span>(<span class=\"hljs-params\">\n    ctxs: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, ExecContext],  <span class=\"hljs-comment\"># 종목 심볼 -> 실행 컨텍스트</span>\n    targets: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">float</span>]      <span class=\"hljs-comment\"># 종목 심볼 -> 목표 가중치</span>\n</span>):\n    <span class=\"hljs-keyword\">for</span> symbol, target <span class=\"hljs-keyword\">in</span> targets.items():\n        ctx = ctxs[symbol]\n        <span class=\"hljs-comment\"># 목표 가중치를 사용하여 목표 주식수 계산</span>\n        target_shares = ctx.calc_target_shares(target)\n        pos = ctx.long_pos()\n        <span class=\"hljs-comment\"># 현재 해당 종목의 매수 포지션이 없는 경우 매수</span>\n        <span class=\"hljs-keyword\">if</span> pos <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            ctx.buy_shares = target_shares\n        <span class=\"hljs-comment\"># 아니면, 목표치에 도달할 만큼 주식을 매수</span>\n        <span class=\"hljs-keyword\">elif</span> pos.shares &#x3C; target_shares:\n            ctx.buy_shares = target_shares - pos.shares\n        <span class=\"hljs-comment\"># 현재 할당이 목표 수준을 초과하는 경우, 충분한 주식 매도</span>\n        <span class=\"hljs-keyword\">elif</span> pos.shares > target_shares:\n            ctx.sell_shares = pos.shares - target_shares\n</code></pre>\n<p>현재 할당이 목표 수준을 초과하면 해당 자산의 필요 주식을 판매하고, 현재 할당이 목표 수준 미만이면 해당 자산의 필요 주식을 구매하는 함수입니다.</p>\n<p>다음으로 매월 초에 각 주식을 동일 비중으로 타겟팅하는 리밸런싱 함수를 작성합니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rebalance</span>(<span class=\"hljs-params\">ctxs: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, ExecContext]</span>):\n    <span class=\"hljs-keyword\">if</span> start_of_month(ctxs):\n        target = <span class=\"hljs-number\">1</span> / <span class=\"hljs-built_in\">len</span>(ctxs)  <span class=\"hljs-comment\"># 동일 가중치</span>\n        set_target_shares(ctxs, {symbol: target <span class=\"hljs-keyword\">for</span> symbol <span class=\"hljs-keyword\">in</span> ctxs.keys()})\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그럼 이제 새로운 달의 시작을 감지하는 도우미 함수를 구현해 봅시다:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">start_of_month</span>(<span class=\"hljs-attr\">ctxs</span>: dict[str, <span class=\"hljs-title class_\">ExecContext</span>]) -> <span class=\"hljs-attr\">bool</span>:\n    dt = <span class=\"hljs-title function_\">tuple</span>(ctxs.<span class=\"hljs-title function_\">values</span>())[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">dt</span>\n    <span class=\"hljs-keyword\">if</span> dt.<span class=\"hljs-property\">month</span> != pyb.<span class=\"hljs-title function_\">param</span>(<span class=\"hljs-string\">'current_month'</span>):\n        pyb.<span class=\"hljs-title function_\">param</span>(<span class=\"hljs-string\">'current_month'</span>, dt.<span class=\"hljs-property\">month</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">True</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">False</span>\n</code></pre>\n<p>이제 이러한 함수들을 사용하여 다섯 가지 주식 포트폴리오를 위한 리밸런싱 전략을 백테스트할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">strategy = <span class=\"hljs-title class_\">Strategy</span>(<span class=\"hljs-title class_\">YFinance</span>(), (start_date = <span class=\"hljs-string\">\"1/1/2018\"</span>), (end_date = <span class=\"hljs-string\">\"1/1/2023\"</span>));\nstrategy.<span class=\"hljs-title function_\">add_execution</span>(<span class=\"hljs-title class_\">None</span>, [<span class=\"hljs-string\">\"TSLA\"</span>, <span class=\"hljs-string\">\"NFLX\"</span>, <span class=\"hljs-string\">\"AAPL\"</span>, <span class=\"hljs-string\">\"NVDA\"</span>, <span class=\"hljs-string\">\"AMZN\"</span>]);\nstrategy.<span class=\"hljs-title function_\">set_after_exec</span>(rebalance);\nresult = strategy.<span class=\"hljs-title function_\">backtest</span>();\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>백테스트를 실행한 후에는 주문 목록을 확인할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">result.<span class=\"hljs-property\">orders</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\">     type symbol date        shares  limit_price  fill_price  fees\nid\n<span class=\"hljs-number\">1</span>    buy  <span class=\"hljs-variable constant_\">NFLX</span>   <span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">03</span>  <span class=\"hljs-number\">99</span>      <span class=\"hljs-title class_\">NaN</span>          <span class=\"hljs-number\">203.86</span>      <span class=\"hljs-number\">0.0</span>\n<span class=\"hljs-number\">2</span>    buy  <span class=\"hljs-variable constant_\">AAPL</span>   <span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">03</span>  <span class=\"hljs-number\">464</span>     <span class=\"hljs-title class_\">NaN</span>           <span class=\"hljs-number\">43.31</span>      <span class=\"hljs-number\">0.0</span>\n<span class=\"hljs-number\">3</span>    buy  <span class=\"hljs-variable constant_\">TSLA</span>   <span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">03</span>  <span class=\"hljs-number\">935</span>     <span class=\"hljs-title class_\">NaN</span>           <span class=\"hljs-number\">21.36</span>      <span class=\"hljs-number\">0.0</span>\n<span class=\"hljs-number\">4</span>    buy  <span class=\"hljs-variable constant_\">AMZN</span>   <span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">03</span>  <span class=\"hljs-number\">336</span>     <span class=\"hljs-title class_\">NaN</span>           <span class=\"hljs-number\">59.84</span>      <span class=\"hljs-number\">0.0</span>\n<span class=\"hljs-number\">5</span>    buy  <span class=\"hljs-variable constant_\">NVDA</span>   <span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">03</span>  <span class=\"hljs-number\">376</span>     <span class=\"hljs-title class_\">NaN</span>           <span class=\"hljs-number\">52.18</span>      <span class=\"hljs-number\">0.0</span>\n... ... ... ... ... ... ... ...\n<span class=\"hljs-number\">292</span>  sell <span class=\"hljs-variable constant_\">NFLX</span>   <span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">02</span>   <span class=\"hljs-number\">15</span>     <span class=\"hljs-title class_\">NaN</span>         <span class=\"hljs-number\">315.99</span>       <span class=\"hljs-number\">0.0</span>\n<span class=\"hljs-number\">293</span>  sell <span class=\"hljs-variable constant_\">NVDA</span>   <span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">02</span>   <span class=\"hljs-number\">97</span>     <span class=\"hljs-title class_\">NaN</span>         <span class=\"hljs-number\">166.89</span>       <span class=\"hljs-number\">0.0</span>\n<span class=\"hljs-number\">294</span>  buy  <span class=\"hljs-variable constant_\">AAPL</span>   <span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">02</span>   <span class=\"hljs-number\">27</span>     <span class=\"hljs-title class_\">NaN</span>         <span class=\"hljs-number\">146.82</span>       <span class=\"hljs-number\">0.0</span>\n<span class=\"hljs-number\">295</span>  buy  <span class=\"hljs-variable constant_\">TSLA</span>   <span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">02</span>   <span class=\"hljs-number\">70</span>     <span class=\"hljs-title class_\">NaN</span>         <span class=\"hljs-number\">193.68</span>       <span class=\"hljs-number\">0.0</span>\n<span class=\"hljs-number\">296</span>  buy  <span class=\"hljs-variable constant_\">AMZN</span>   <span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">02</span>   <span class=\"hljs-number\">41</span>     <span class=\"hljs-title class_\">NaN</span>          <span class=\"hljs-number\">94.57</span>       <span class=\"hljs-number\">0.0</span>\n</code></pre>\n<p>그리고 우리의 전략을 평가하기 위한 성능 지표를 확인할 수 있습니다:</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">result.<span class=\"hljs-property\">metrics_df</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\">trade_count                 <span class=\"hljs-number\">207.000000</span>\ninitial_market_value     <span class=\"hljs-number\">100000.000000</span>\nend_market_value         <span class=\"hljs-number\">320498.810000</span>\ntotal_pnl                <span class=\"hljs-number\">305804.840000</span>\ntotal_return_pct            <span class=\"hljs-number\">305.804840</span>\nmax_drawdown            -<span class=\"hljs-number\">332039.770000</span>\nmax_drawdown_pct            -<span class=\"hljs-number\">52.068777</span>\n</code></pre>\n<h2>포트폴리오 최적화 사용</h2>\n<p>포트폴리오에서 각 주식을 동일한 포지션 크기로 할당하는 대신, 포트폴리오 최적화를 사용하여 각 주식의 할당을 결정해 보겠습니다.</p>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Riskfolio-Lib을 사용하여 포트폴리오에서 각 주식에 할당해야 하는 금액을 최소화하여 리스크를 계산할 수 있어요. 이것은 각 주식과 연관된 과거 리스크를 측정함으로써 할 수 있어요.</p>\n<p>조건부 가치위험(CVaR)은 각 주식의 위험을 평가하는 한 가지 방법이에요. 특정 확률 수준 이상의 최악의 시나리오에서 예상 손실을 제공해요. 예를 들어, CVaR은 95% 신뢰 수준을 고려할 때 시나리오 중 최악의 5%에서의 평균 손실을 추정할 수 있어요.</p>\n<p>아래에서는 작년의 수익률을 사용하여 CVaR을 최소화하고 포트폴리오에 할당하기 위해 RiskFolio-Lib을 사용했어요.</p>\n<pre><code class=\"hljs language-js\">pyb.<span class=\"hljs-title function_\">param</span>(<span class=\"hljs-string\">'lookback'</span>, <span class=\"hljs-number\">252</span>)  # 작년의 수익률 사용 -> <span class=\"hljs-number\">252</span> 바.\n\ndef <span class=\"hljs-title function_\">calculate_returns</span>(<span class=\"hljs-attr\">ctxs</span>: dict[str, <span class=\"hljs-title class_\">ExecContext</span>], <span class=\"hljs-attr\">lookback</span>: int):\n    prices = {}\n    <span class=\"hljs-keyword\">for</span> ctx <span class=\"hljs-keyword\">in</span> ctxs.<span class=\"hljs-title function_\">values</span>():\n        prices[ctx.<span class=\"hljs-property\">symbol</span>] = ctx.<span class=\"hljs-property\">adj_close</span>[-<span class=\"hljs-attr\">lookback</span>:]\n    df = pd.<span class=\"hljs-title class_\">DataFrame</span>(prices)\n    <span class=\"hljs-keyword\">return</span> df.<span class=\"hljs-title function_\">pct_change</span>().<span class=\"hljs-title function_\">dropna</span>()\n\ndef <span class=\"hljs-title function_\">optimization</span>(<span class=\"hljs-attr\">ctxs</span>: dict[str, <span class=\"hljs-title class_\">ExecContext</span>]):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_\">start_of_month</span>(ctxs):\n        Y = <span class=\"hljs-title function_\">calculate_returns</span>(ctxs, lookback)\n        port = rp.<span class=\"hljs-title class_\">Portfolio</span>(returns=Y)\n        port.<span class=\"hljs-title function_\">assets_stats</span>(method_mu=<span class=\"hljs-string\">'hist'</span>, method_cov=<span class=\"hljs-string\">'hist'</span>, d=<span class=\"hljs-number\">0.94</span>)\n        # <span class=\"hljs-title class_\">CVaR</span>을 최소화한 후 목표 가중치 얻기.\n        w = port.<span class=\"hljs-title function_\">optimization</span>(\n            model=<span class=\"hljs-string\">'Classic'</span>,\n            rm=<span class=\"hljs-string\">'CVaR'</span>,\n            obj=<span class=\"hljs-string\">'MinRisk'</span>,\n            rf=<span class=\"hljs-number\">0</span>,      # 무위험 이자율.\n            l=<span class=\"hljs-number\">0</span>,       # 리스크 회피 계수.\n            hist=<span class=\"hljs-title class_\">True</span>  # 과거 시나리오 사용.\n        )\n        targets = {\n            <span class=\"hljs-attr\">symbol</span>: w.<span class=\"hljs-property\">T</span>[symbol].<span class=\"hljs-property\">values</span>[<span class=\"hljs-number\">0</span>]\n            <span class=\"hljs-keyword\">for</span> symbol <span class=\"hljs-keyword\">in</span> ctxs.<span class=\"hljs-title function_\">keys</span>()\n        }\n        <span class=\"hljs-title function_\">set_target_shares</span>(ctxs, targets)\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Riskfolio-Lib의 공식 문서에서 더 많은 정보와 예제를 찾을 수 있어요. 이제 전략의 백테스팅으로 넘어가 볼까요?</p>\n<pre><code class=\"hljs language-js\">strategy.<span class=\"hljs-title function_\">set_after_exec</span>(optimization);\nresult = strategy.<span class=\"hljs-title function_\">backtest</span>((warmup = pyb.<span class=\"hljs-title function_\">param</span>(<span class=\"hljs-string\">\"lookback\"</span>)));\n</code></pre>\n<p>여기서는 새 전략의 성과 지표를 확인해 봅시다:</p>\n<pre><code class=\"hljs language-js\">trade_count                     <span class=\"hljs-number\">100.000000</span>\ninitial_market_value         <span class=\"hljs-number\">100000.000000</span>\nend_market_value             <span class=\"hljs-number\">201318.070000</span>\ntotal_pnl                    <span class=\"hljs-number\">139465.420000</span>\ntotal_return_pct                <span class=\"hljs-number\">139.465420</span>\nmax_drawdown                -<span class=\"hljs-number\">106042.150000</span>\nmax_drawdown_pct                -<span class=\"hljs-number\">35.190829</span>\n</code></pre>\n<!-- TIL 수평 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1549334788\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>흥미로운 내용이에요! 이 전략을 사용한 수익률이 평균 포지션 사이즈와 비교했을 때 적은 것을 볼 수 있어요 (139% vs 305%), 그런데 최대 손실액은 낮았다는 것도 알 수 있어요 (35% vs 52%). CVaR을 최소화하는 것이 포트폴리오의 전체 수익률을 크게 줄였다는 점을 고려해봤을 때, 이에 따라 포트폴리오의 하락폭도 크게 감소했어요!</p>\n<p>그리고 이 글로 마무리 지을게요! 이제 여러분도 포트폴리오 최적화를 자신만의 거래 전략에 사용하는데 충분히 장비가 되었을 거에요. 또한 <a href=\"https://www.pybroker.com%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">https://www.pybroker.com에서</a> PyBroker 사용에 대한 더 많은 튜토리얼을 찾아볼 수 있어요. 모든 코드는 Github 저장소에서 확인할 수 있어요.</p>\n<p>읽어 주셔서 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}